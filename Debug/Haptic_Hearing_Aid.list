
Haptic_Hearing_Aid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae0c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fa4  0800afe0  0800afe0  0000bfe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf84  0800cf84  0000e218  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cf84  0800cf84  0000df84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf8c  0800cf8c  0000e218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf8c  0800cf8c  0000df8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cf90  0800cf90  0000df90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0800cf94  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005410  20000218  0800d1ac  0000e218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005628  0800d1ac  0000e628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c59  00000000  00000000  0000e248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000375f  00000000  00000000  00023ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00027600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9c  00000000  00000000  00028848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026321  00000000  00000000  000295e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a940  00000000  00000000  0004f905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4b41  00000000  00000000  0006a245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0014ed86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fc0  00000000  00000000  0014ee38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00154df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000199e  00000000  00000000  00154e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000040  00000000  00000000  00156809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800afc4 	.word	0x0800afc4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	0800afc4 	.word	0x0800afc4

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2uiz>:
 8000ca8:	004a      	lsls	r2, r1, #1
 8000caa:	d211      	bcs.n	8000cd0 <__aeabi_d2uiz+0x28>
 8000cac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000cb0:	d211      	bcs.n	8000cd6 <__aeabi_d2uiz+0x2e>
 8000cb2:	d50d      	bpl.n	8000cd0 <__aeabi_d2uiz+0x28>
 8000cb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000cb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cbc:	d40e      	bmi.n	8000cdc <__aeabi_d2uiz+0x34>
 8000cbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000cc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cca:	fa23 f002 	lsr.w	r0, r3, r2
 8000cce:	4770      	bx	lr
 8000cd0:	f04f 0000 	mov.w	r0, #0
 8000cd4:	4770      	bx	lr
 8000cd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cda:	d102      	bne.n	8000ce2 <__aeabi_d2uiz+0x3a>
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	4770      	bx	lr
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2f>:
 8000ce8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000cf0:	bf24      	itt	cs
 8000cf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000cf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000cfa:	d90d      	bls.n	8000d18 <__aeabi_d2f+0x30>
 8000cfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000d0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d10:	bf08      	it	eq
 8000d12:	f020 0001 	biceq.w	r0, r0, #1
 8000d16:	4770      	bx	lr
 8000d18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000d1c:	d121      	bne.n	8000d62 <__aeabi_d2f+0x7a>
 8000d1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000d22:	bfbc      	itt	lt
 8000d24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000d28:	4770      	bxlt	lr
 8000d2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000d2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d32:	f1c2 0218 	rsb	r2, r2, #24
 8000d36:	f1c2 0c20 	rsb	ip, r2, #32
 8000d3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d42:	bf18      	it	ne
 8000d44:	f040 0001 	orrne.w	r0, r0, #1
 8000d48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d54:	ea40 000c 	orr.w	r0, r0, ip
 8000d58:	fa23 f302 	lsr.w	r3, r3, r2
 8000d5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d60:	e7cc      	b.n	8000cfc <__aeabi_d2f+0x14>
 8000d62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d66:	d107      	bne.n	8000d78 <__aeabi_d2f+0x90>
 8000d68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d6c:	bf1e      	ittt	ne
 8000d6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d76:	4770      	bxne	lr
 8000d78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295
 8000d9c:	f000 b988 	b.w	80010b0 <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f806 	bl	8000db8 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__udivmoddi4>:
 8000db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dbc:	9d08      	ldr	r5, [sp, #32]
 8000dbe:	468e      	mov	lr, r1
 8000dc0:	4604      	mov	r4, r0
 8000dc2:	4688      	mov	r8, r1
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d14a      	bne.n	8000e5e <__udivmoddi4+0xa6>
 8000dc8:	428a      	cmp	r2, r1
 8000dca:	4617      	mov	r7, r2
 8000dcc:	d962      	bls.n	8000e94 <__udivmoddi4+0xdc>
 8000dce:	fab2 f682 	clz	r6, r2
 8000dd2:	b14e      	cbz	r6, 8000de8 <__udivmoddi4+0x30>
 8000dd4:	f1c6 0320 	rsb	r3, r6, #32
 8000dd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000ddc:	fa20 f303 	lsr.w	r3, r0, r3
 8000de0:	40b7      	lsls	r7, r6
 8000de2:	ea43 0808 	orr.w	r8, r3, r8
 8000de6:	40b4      	lsls	r4, r6
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f fc87 	uxth.w	ip, r7
 8000df0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000df4:	0c23      	lsrs	r3, r4, #16
 8000df6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d909      	bls.n	8000e1a <__udivmoddi4+0x62>
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e0c:	f080 80ea 	bcs.w	8000fe4 <__udivmoddi4+0x22c>
 8000e10:	429a      	cmp	r2, r3
 8000e12:	f240 80e7 	bls.w	8000fe4 <__udivmoddi4+0x22c>
 8000e16:	3902      	subs	r1, #2
 8000e18:	443b      	add	r3, r7
 8000e1a:	1a9a      	subs	r2, r3, r2
 8000e1c:	b2a3      	uxth	r3, r4
 8000e1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e2e:	459c      	cmp	ip, r3
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0x8e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e38:	f080 80d6 	bcs.w	8000fe8 <__udivmoddi4+0x230>
 8000e3c:	459c      	cmp	ip, r3
 8000e3e:	f240 80d3 	bls.w	8000fe8 <__udivmoddi4+0x230>
 8000e42:	443b      	add	r3, r7
 8000e44:	3802      	subs	r0, #2
 8000e46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e4a:	eba3 030c 	sub.w	r3, r3, ip
 8000e4e:	2100      	movs	r1, #0
 8000e50:	b11d      	cbz	r5, 8000e5a <__udivmoddi4+0xa2>
 8000e52:	40f3      	lsrs	r3, r6
 8000e54:	2200      	movs	r2, #0
 8000e56:	e9c5 3200 	strd	r3, r2, [r5]
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d905      	bls.n	8000e6e <__udivmoddi4+0xb6>
 8000e62:	b10d      	cbz	r5, 8000e68 <__udivmoddi4+0xb0>
 8000e64:	e9c5 0100 	strd	r0, r1, [r5]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e7f5      	b.n	8000e5a <__udivmoddi4+0xa2>
 8000e6e:	fab3 f183 	clz	r1, r3
 8000e72:	2900      	cmp	r1, #0
 8000e74:	d146      	bne.n	8000f04 <__udivmoddi4+0x14c>
 8000e76:	4573      	cmp	r3, lr
 8000e78:	d302      	bcc.n	8000e80 <__udivmoddi4+0xc8>
 8000e7a:	4282      	cmp	r2, r0
 8000e7c:	f200 8105 	bhi.w	800108a <__udivmoddi4+0x2d2>
 8000e80:	1a84      	subs	r4, r0, r2
 8000e82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e86:	2001      	movs	r0, #1
 8000e88:	4690      	mov	r8, r2
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d0e5      	beq.n	8000e5a <__udivmoddi4+0xa2>
 8000e8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000e92:	e7e2      	b.n	8000e5a <__udivmoddi4+0xa2>
 8000e94:	2a00      	cmp	r2, #0
 8000e96:	f000 8090 	beq.w	8000fba <__udivmoddi4+0x202>
 8000e9a:	fab2 f682 	clz	r6, r2
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	f040 80a4 	bne.w	8000fec <__udivmoddi4+0x234>
 8000ea4:	1a8a      	subs	r2, r1, r2
 8000ea6:	0c03      	lsrs	r3, r0, #16
 8000ea8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eac:	b280      	uxth	r0, r0
 8000eae:	b2bc      	uxth	r4, r7
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000eb6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000eba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ebe:	fb04 f20c 	mul.w	r2, r4, ip
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x11e>
 8000ec6:	18fb      	adds	r3, r7, r3
 8000ec8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ecc:	d202      	bcs.n	8000ed4 <__udivmoddi4+0x11c>
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	f200 80e0 	bhi.w	8001094 <__udivmoddi4+0x2dc>
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	1a9b      	subs	r3, r3, r2
 8000ed8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000edc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ee0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ee4:	fb02 f404 	mul.w	r4, r2, r4
 8000ee8:	429c      	cmp	r4, r3
 8000eea:	d907      	bls.n	8000efc <__udivmoddi4+0x144>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ef2:	d202      	bcs.n	8000efa <__udivmoddi4+0x142>
 8000ef4:	429c      	cmp	r4, r3
 8000ef6:	f200 80ca 	bhi.w	800108e <__udivmoddi4+0x2d6>
 8000efa:	4602      	mov	r2, r0
 8000efc:	1b1b      	subs	r3, r3, r4
 8000efe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f02:	e7a5      	b.n	8000e50 <__udivmoddi4+0x98>
 8000f04:	f1c1 0620 	rsb	r6, r1, #32
 8000f08:	408b      	lsls	r3, r1
 8000f0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	fa0e f401 	lsl.w	r4, lr, r1
 8000f14:	fa20 f306 	lsr.w	r3, r0, r6
 8000f18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f20:	4323      	orrs	r3, r4
 8000f22:	fa00 f801 	lsl.w	r8, r0, r1
 8000f26:	fa1f fc87 	uxth.w	ip, r7
 8000f2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000f2e:	0c1c      	lsrs	r4, r3, #16
 8000f30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f3c:	45a6      	cmp	lr, r4
 8000f3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f42:	d909      	bls.n	8000f58 <__udivmoddi4+0x1a0>
 8000f44:	193c      	adds	r4, r7, r4
 8000f46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f4a:	f080 809c 	bcs.w	8001086 <__udivmoddi4+0x2ce>
 8000f4e:	45a6      	cmp	lr, r4
 8000f50:	f240 8099 	bls.w	8001086 <__udivmoddi4+0x2ce>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	eba4 040e 	sub.w	r4, r4, lr
 8000f5c:	fa1f fe83 	uxth.w	lr, r3
 8000f60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f64:	fb09 4413 	mls	r4, r9, r3, r4
 8000f68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f70:	45a4      	cmp	ip, r4
 8000f72:	d908      	bls.n	8000f86 <__udivmoddi4+0x1ce>
 8000f74:	193c      	adds	r4, r7, r4
 8000f76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f7a:	f080 8082 	bcs.w	8001082 <__udivmoddi4+0x2ca>
 8000f7e:	45a4      	cmp	ip, r4
 8000f80:	d97f      	bls.n	8001082 <__udivmoddi4+0x2ca>
 8000f82:	3b02      	subs	r3, #2
 8000f84:	443c      	add	r4, r7
 8000f86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f8a:	eba4 040c 	sub.w	r4, r4, ip
 8000f8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f92:	4564      	cmp	r4, ip
 8000f94:	4673      	mov	r3, lr
 8000f96:	46e1      	mov	r9, ip
 8000f98:	d362      	bcc.n	8001060 <__udivmoddi4+0x2a8>
 8000f9a:	d05f      	beq.n	800105c <__udivmoddi4+0x2a4>
 8000f9c:	b15d      	cbz	r5, 8000fb6 <__udivmoddi4+0x1fe>
 8000f9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000fa2:	eb64 0409 	sbc.w	r4, r4, r9
 8000fa6:	fa04 f606 	lsl.w	r6, r4, r6
 8000faa:	fa22 f301 	lsr.w	r3, r2, r1
 8000fae:	431e      	orrs	r6, r3
 8000fb0:	40cc      	lsrs	r4, r1
 8000fb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	e74f      	b.n	8000e5a <__udivmoddi4+0xa2>
 8000fba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000fbe:	0c01      	lsrs	r1, r0, #16
 8000fc0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000fc4:	b280      	uxth	r0, r0
 8000fc6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4638      	mov	r0, r7
 8000fce:	463c      	mov	r4, r7
 8000fd0:	46b8      	mov	r8, r7
 8000fd2:	46be      	mov	lr, r7
 8000fd4:	2620      	movs	r6, #32
 8000fd6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fda:	eba2 0208 	sub.w	r2, r2, r8
 8000fde:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fe2:	e766      	b.n	8000eb2 <__udivmoddi4+0xfa>
 8000fe4:	4601      	mov	r1, r0
 8000fe6:	e718      	b.n	8000e1a <__udivmoddi4+0x62>
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e72c      	b.n	8000e46 <__udivmoddi4+0x8e>
 8000fec:	f1c6 0220 	rsb	r2, r6, #32
 8000ff0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ff4:	40b7      	lsls	r7, r6
 8000ff6:	40b1      	lsls	r1, r6
 8000ff8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ffc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001000:	430a      	orrs	r2, r1
 8001002:	fbb3 f8fe 	udiv	r8, r3, lr
 8001006:	b2bc      	uxth	r4, r7
 8001008:	fb0e 3318 	mls	r3, lr, r8, r3
 800100c:	0c11      	lsrs	r1, r2, #16
 800100e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001012:	fb08 f904 	mul.w	r9, r8, r4
 8001016:	40b0      	lsls	r0, r6
 8001018:	4589      	cmp	r9, r1
 800101a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800101e:	b280      	uxth	r0, r0
 8001020:	d93e      	bls.n	80010a0 <__udivmoddi4+0x2e8>
 8001022:	1879      	adds	r1, r7, r1
 8001024:	f108 3cff 	add.w	ip, r8, #4294967295
 8001028:	d201      	bcs.n	800102e <__udivmoddi4+0x276>
 800102a:	4589      	cmp	r9, r1
 800102c:	d81f      	bhi.n	800106e <__udivmoddi4+0x2b6>
 800102e:	eba1 0109 	sub.w	r1, r1, r9
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	fb0e 1119 	mls	r1, lr, r9, r1
 800103e:	b292      	uxth	r2, r2
 8001040:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001044:	4542      	cmp	r2, r8
 8001046:	d229      	bcs.n	800109c <__udivmoddi4+0x2e4>
 8001048:	18ba      	adds	r2, r7, r2
 800104a:	f109 31ff 	add.w	r1, r9, #4294967295
 800104e:	d2c4      	bcs.n	8000fda <__udivmoddi4+0x222>
 8001050:	4542      	cmp	r2, r8
 8001052:	d2c2      	bcs.n	8000fda <__udivmoddi4+0x222>
 8001054:	f1a9 0102 	sub.w	r1, r9, #2
 8001058:	443a      	add	r2, r7
 800105a:	e7be      	b.n	8000fda <__udivmoddi4+0x222>
 800105c:	45f0      	cmp	r8, lr
 800105e:	d29d      	bcs.n	8000f9c <__udivmoddi4+0x1e4>
 8001060:	ebbe 0302 	subs.w	r3, lr, r2
 8001064:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001068:	3801      	subs	r0, #1
 800106a:	46e1      	mov	r9, ip
 800106c:	e796      	b.n	8000f9c <__udivmoddi4+0x1e4>
 800106e:	eba7 0909 	sub.w	r9, r7, r9
 8001072:	4449      	add	r1, r9
 8001074:	f1a8 0c02 	sub.w	ip, r8, #2
 8001078:	fbb1 f9fe 	udiv	r9, r1, lr
 800107c:	fb09 f804 	mul.w	r8, r9, r4
 8001080:	e7db      	b.n	800103a <__udivmoddi4+0x282>
 8001082:	4673      	mov	r3, lr
 8001084:	e77f      	b.n	8000f86 <__udivmoddi4+0x1ce>
 8001086:	4650      	mov	r0, sl
 8001088:	e766      	b.n	8000f58 <__udivmoddi4+0x1a0>
 800108a:	4608      	mov	r0, r1
 800108c:	e6fd      	b.n	8000e8a <__udivmoddi4+0xd2>
 800108e:	443b      	add	r3, r7
 8001090:	3a02      	subs	r2, #2
 8001092:	e733      	b.n	8000efc <__udivmoddi4+0x144>
 8001094:	f1ac 0c02 	sub.w	ip, ip, #2
 8001098:	443b      	add	r3, r7
 800109a:	e71c      	b.n	8000ed6 <__udivmoddi4+0x11e>
 800109c:	4649      	mov	r1, r9
 800109e:	e79c      	b.n	8000fda <__udivmoddi4+0x222>
 80010a0:	eba1 0109 	sub.w	r1, r1, r9
 80010a4:	46c4      	mov	ip, r8
 80010a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80010aa:	fb09 f804 	mul.w	r8, r9, r4
 80010ae:	e7c4      	b.n	800103a <__udivmoddi4+0x282>

080010b0 <__aeabi_idiv0>:
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <performFFT>:
 *
 * @author		Francis Liechti (FL)
 * @date		27.05.2025	FL	Created
 *
 ****************************************************************************/
void performFFT(float *Result, float32_t *audiodata){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
	// 1. Fill input
	for (int i = 0; i < FFT_SIZE; i++) {
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	e016      	b.n	80010f2 <performFFT+0x3e>
		// Normalize if desired: value ∈ [-131072, +131071]
//		float normalized = ((float) audiodata[i]) / 131072.0f;

		input[2*i] = audiodata[i];      // Real part
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	441a      	add	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	6812      	ldr	r2, [r2, #0]
 80010d2:	492c      	ldr	r1, [pc, #176]	@ (8001184 <performFFT+0xd0>)
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	601a      	str	r2, [r3, #0]
		input[2*i + 1] = 0.0f;        // Imaginary part (0 for real signals)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	3301      	adds	r3, #1
 80010e0:	4a28      	ldr	r2, [pc, #160]	@ (8001184 <performFFT+0xd0>)
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < FFT_SIZE; i++) {
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010f8:	dbe4      	blt.n	80010c4 <performFFT+0x10>
	}

	// 2. Perform the complex FFT in-place
	arm_cfft_f32(&arm_cfft_sR_f32_len512, input, 0, 1);  // Forward FFT, with bit reversal
 80010fa:	2301      	movs	r3, #1
 80010fc:	2200      	movs	r2, #0
 80010fe:	4921      	ldr	r1, [pc, #132]	@ (8001184 <performFFT+0xd0>)
 8001100:	4821      	ldr	r0, [pc, #132]	@ (8001188 <performFFT+0xd4>)
 8001102:	f006 faf1 	bl	80076e8 <arm_cfft_f32>

	// 3. Compute magnitude from real and imaginary parts
	for (int i = 0; i < FFT_SIZE; i++) {
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	e031      	b.n	8001170 <performFFT+0xbc>
		float real = input[2 * i];
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4a1c      	ldr	r2, [pc, #112]	@ (8001184 <performFFT+0xd0>)
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	60fb      	str	r3, [r7, #12]
		float imag = input[2 * i + 1];
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	3301      	adds	r3, #1
 8001120:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <performFFT+0xd0>)
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60bb      	str	r3, [r7, #8]
		Result[i] = 20*log10f(sqrtf(real * real + imag * imag));
 800112a:	edd7 7a03 	vldr	s15, [r7, #12]
 800112e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001132:	edd7 7a02 	vldr	s15, [r7, #8]
 8001136:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800113a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800113e:	eeb0 0a67 	vmov.f32	s0, s15
 8001142:	f009 fd93 	bl	800ac6c <sqrtf>
 8001146:	eef0 7a40 	vmov.f32	s15, s0
 800114a:	eeb0 0a67 	vmov.f32	s0, s15
 800114e:	f009 fd5f 	bl	800ac10 <log10f>
 8001152:	eef0 7a40 	vmov.f32	s15, s0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001166:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < FFT_SIZE; i++) {
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	3301      	adds	r3, #1
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001176:	dbc9      	blt.n	800110c <performFFT+0x58>
	}
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000a54 	.word	0x20000a54
 8001188:	0800b064 	.word	0x0800b064

0800118c <process_signal>:
 *
 * @author		Francis Liechti (FL)
 * @date		27.05.2025	FL	Created
 *
 ****************************************************************************/
void process_signal(double* amplitudes, int32_t* audioData_Left, int32_t* audioData_Right) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]

	// Beamforming
	uint8_t direction = 0; //0 = dominating left, 1 = dominating right
 8001198:	2300      	movs	r3, #0
 800119a:	76fb      	strb	r3, [r7, #27]
	float scaleValue = 0; // for the non-dominating side
 800119c:	f04f 0300 	mov.w	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
	applyWindow(audioData_Left, windowed_Signal_Left);
 80011a2:	492c      	ldr	r1, [pc, #176]	@ (8001254 <process_signal+0xc8>)
 80011a4:	68b8      	ldr	r0, [r7, #8]
 80011a6:	f000 f95d 	bl	8001464 <applyWindow>
	applyWindow(audioData_Right, windowed_Signal_Right);
 80011aa:	492b      	ldr	r1, [pc, #172]	@ (8001258 <process_signal+0xcc>)
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 f959 	bl	8001464 <applyWindow>

	// direction detection
	direction = beamform_direction(windowed_Signal_Left, windowed_Signal_Right, &scaleValue);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	461a      	mov	r2, r3
 80011b8:	4927      	ldr	r1, [pc, #156]	@ (8001258 <process_signal+0xcc>)
 80011ba:	4826      	ldr	r0, [pc, #152]	@ (8001254 <process_signal+0xc8>)
 80011bc:	f000 fa14 	bl	80015e8 <beamform_direction>
 80011c0:	4603      	mov	r3, r0
 80011c2:	76fb      	strb	r3, [r7, #27]
	// FFT
	if(direction == 1){
 80011c4:	7efb      	ldrb	r3, [r7, #27]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d104      	bne.n	80011d4 <process_signal+0x48>
		performFFT(fftSignal, windowed_Signal_Left);
 80011ca:	4922      	ldr	r1, [pc, #136]	@ (8001254 <process_signal+0xc8>)
 80011cc:	4823      	ldr	r0, [pc, #140]	@ (800125c <process_signal+0xd0>)
 80011ce:	f7ff ff71 	bl	80010b4 <performFFT>
 80011d2:	e003      	b.n	80011dc <process_signal+0x50>
	} else {
		performFFT(fftSignal, windowed_Signal_Right);
 80011d4:	4920      	ldr	r1, [pc, #128]	@ (8001258 <process_signal+0xcc>)
 80011d6:	4821      	ldr	r0, [pc, #132]	@ (800125c <process_signal+0xd0>)
 80011d8:	f7ff ff6c 	bl	80010b4 <performFFT>
	}

	for(int i=0; i<NUM_FREQ_BANDS; i++){
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
 80011e0:	e027      	b.n	8001232 <process_signal+0xa6>
		amplitudeMeans[i] = mean(fftSignal, freqbands[i], freqbands[i+1]);
 80011e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001260 <process_signal+0xd4>)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3301      	adds	r3, #1
 80011ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001260 <process_signal+0xd4>)
 80011f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4819      	ldr	r0, [pc, #100]	@ (800125c <process_signal+0xd0>)
 80011f8:	f000 f836 	bl	8001268 <mean>
 80011fc:	eef0 7a40 	vmov.f32	s15, s0
 8001200:	4a18      	ldr	r2, [pc, #96]	@ (8001264 <process_signal+0xd8>)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	edc3 7a00 	vstr	s15, [r3]
		// add some magical scaling
		amplitudeMeans[i] = amplitudeMeans[i]/2;
 800120c:	4a15      	ldr	r2, [pc, #84]	@ (8001264 <process_signal+0xd8>)
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	ed93 7a00 	vldr	s14, [r3]
 8001218:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800121c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001220:	4a10      	ldr	r2, [pc, #64]	@ (8001264 <process_signal+0xd8>)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<NUM_FREQ_BANDS; i++){
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	3301      	adds	r3, #1
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	2b07      	cmp	r3, #7
 8001236:	ddd4      	ble.n	80011e2 <process_signal+0x56>
	}

	// Set amplitudes
	sortvalues(amplitudes, amplitudeMeans, direction, scaleValue);
 8001238:	edd7 7a05 	vldr	s15, [r7, #20]
 800123c:	7efb      	ldrb	r3, [r7, #27]
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	461a      	mov	r2, r3
 8001244:	4907      	ldr	r1, [pc, #28]	@ (8001264 <process_signal+0xd8>)
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f000 f844 	bl	80012d4 <sortvalues>
}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20002254 	.word	0x20002254
 8001258:	20002a54 	.word	0x20002a54
 800125c:	20000234 	.word	0x20000234
 8001260:	0800afe0 	.word	0x0800afe0
 8001264:	20000a34 	.word	0x20000a34

08001268 <mean>:
 *
 * @author		Francis Liechti (FL)
 * @date		28.05.2025	FL	Created
 *
 ****************************************************************************/
float mean(float* signal, int startpoint, int endpoint){
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	@ 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
	int size = endpoint-startpoint;
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	617b      	str	r3, [r7, #20]
	float sum = 0;
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]

	for(int i=startpoint; i<=endpoint; i++){
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	61bb      	str	r3, [r7, #24]
 8001286:	e00e      	b.n	80012a6 <mean+0x3e>
		sum += signal[i];
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	4413      	add	r3, r2
 8001290:	edd3 7a00 	vldr	s15, [r3]
 8001294:	ed97 7a07 	vldr	s14, [r7, #28]
 8001298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129c:	edc7 7a07 	vstr	s15, [r7, #28]
	for(int i=startpoint; i<=endpoint; i++){
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	3301      	adds	r3, #1
 80012a4:	61bb      	str	r3, [r7, #24]
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	ddec      	ble.n	8001288 <mean+0x20>
	}
	return (sum/size);
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80012bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012c0:	eef0 7a66 	vmov.f32	s15, s13
}
 80012c4:	eeb0 0a67 	vmov.f32	s0, s15
 80012c8:	3724      	adds	r7, #36	@ 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <sortvalues>:
 *
 * @author		Francis Liechti (FL)
 * @date		28.05.2025	FL	Created
 *
 ****************************************************************************/
void sortvalues(double* amplitudes, float *meanValues, uint8_t direction, float scaleValue){
 80012d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	4613      	mov	r3, r2
 80012e0:	ed87 0a00 	vstr	s0, [r7]
 80012e4:	71fb      	strb	r3, [r7, #7]

	if(direction == 1){
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d13a      	bne.n	8001362 <sortvalues+0x8e>
		for(int i=0; i<NUM_FREQ_BANDS; i++){
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	e033      	b.n	800135a <sortvalues+0x86>
			amplitudes[sort_frequencies_left[i]] = (double) meanValues[i];
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	4413      	add	r3, r2
 80012fa:	6819      	ldr	r1, [r3, #0]
 80012fc:	4a38      	ldr	r2, [pc, #224]	@ (80013e0 <sortvalues+0x10c>)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	18d4      	adds	r4, r2, r3
 800130a:	4608      	mov	r0, r1
 800130c:	f7ff f99c 	bl	8000648 <__aeabi_f2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	e9c4 2300 	strd	r2, r3, [r4]
			amplitudes[sort_frequencies_right[i]] = (double) meanValues[i] * scaleValue;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	4413      	add	r3, r2
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f990 	bl	8000648 <__aeabi_f2d>
 8001328:	4604      	mov	r4, r0
 800132a:	460d      	mov	r5, r1
 800132c:	6838      	ldr	r0, [r7, #0]
 800132e:	f7ff f98b 	bl	8000648 <__aeabi_f2d>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	482b      	ldr	r0, [pc, #172]	@ (80013e4 <sortvalues+0x110>)
 8001338:	6979      	ldr	r1, [r7, #20]
 800133a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800133e:	00c9      	lsls	r1, r1, #3
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	1846      	adds	r6, r0, r1
 8001344:	4620      	mov	r0, r4
 8001346:	4629      	mov	r1, r5
 8001348:	f7ff f9d6 	bl	80006f8 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	e9c6 2300 	strd	r2, r3, [r6]
		for(int i=0; i<NUM_FREQ_BANDS; i++){
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3301      	adds	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	2b07      	cmp	r3, #7
 800135e:	ddc8      	ble.n	80012f2 <sortvalues+0x1e>
		for(int i=0; i<NUM_FREQ_BANDS; i++){
			amplitudes[sort_frequencies_left[i]] = (double) meanValues[i]*scaleValue;
			amplitudes[sort_frequencies_right[i]] = (double) meanValues[i];
		}
	}
}
 8001360:	e039      	b.n	80013d6 <sortvalues+0x102>
		for(int i=0; i<NUM_FREQ_BANDS; i++){
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	e033      	b.n	80013d0 <sortvalues+0xfc>
			amplitudes[sort_frequencies_left[i]] = (double) meanValues[i]*scaleValue;
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	4413      	add	r3, r2
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f968 	bl	8000648 <__aeabi_f2d>
 8001378:	4604      	mov	r4, r0
 800137a:	460d      	mov	r5, r1
 800137c:	6838      	ldr	r0, [r7, #0]
 800137e:	f7ff f963 	bl	8000648 <__aeabi_f2d>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4816      	ldr	r0, [pc, #88]	@ (80013e0 <sortvalues+0x10c>)
 8001388:	6939      	ldr	r1, [r7, #16]
 800138a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800138e:	00c9      	lsls	r1, r1, #3
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	1846      	adds	r6, r0, r1
 8001394:	4620      	mov	r0, r4
 8001396:	4629      	mov	r1, r5
 8001398:	f7ff f9ae 	bl	80006f8 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	e9c6 2300 	strd	r2, r3, [r6]
			amplitudes[sort_frequencies_right[i]] = (double) meanValues[i];
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	4413      	add	r3, r2
 80013ac:	6819      	ldr	r1, [r3, #0]
 80013ae:	4a0d      	ldr	r2, [pc, #52]	@ (80013e4 <sortvalues+0x110>)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	18d4      	adds	r4, r2, r3
 80013bc:	4608      	mov	r0, r1
 80013be:	f7ff f943 	bl	8000648 <__aeabi_f2d>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	e9c4 2300 	strd	r2, r3, [r4]
		for(int i=0; i<NUM_FREQ_BANDS; i++){
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	3301      	adds	r3, #1
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	2b07      	cmp	r3, #7
 80013d4:	ddc8      	ble.n	8001368 <sortvalues+0x94>
}
 80013d6:	bf00      	nop
 80013d8:	371c      	adds	r7, #28
 80013da:	46bd      	mov	sp, r7
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013de:	bf00      	nop
 80013e0:	0800b004 	.word	0x0800b004
 80013e4:	0800b024 	.word	0x0800b024

080013e8 <generateHammingWindow>:
 *
 * @author		Francis Liechti (FL)
 * @date		03.06.2025	FL	Created
 *
 ****************************************************************************/
void generateHammingWindow(void) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
    for (uint32_t n = 0; n < NUM_SAMPLES; n++) {
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	e023      	b.n	800143c <generateHammingWindow+0x54>
        window[n] = 0.54f - 0.46f * arm_cos_f32((2.0f * PI * n) / (NUM_SAMPLES - 1));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	ee07 3a90 	vmov	s15, r3
 80013fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013fe:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001450 <generateHammingWindow+0x68>
 8001402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001406:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001454 <generateHammingWindow+0x6c>
 800140a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800140e:	eeb0 0a47 	vmov.f32	s0, s14
 8001412:	f006 f9e3 	bl	80077dc <arm_cos_f32>
 8001416:	eef0 7a40 	vmov.f32	s15, s0
 800141a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001458 <generateHammingWindow+0x70>
 800141e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001422:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800145c <generateHammingWindow+0x74>
 8001426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800142a:	4a0d      	ldr	r2, [pc, #52]	@ (8001460 <generateHammingWindow+0x78>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t n = 0; n < NUM_SAMPLES; n++) {
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3301      	adds	r3, #1
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001442:	d3d7      	bcc.n	80013f4 <generateHammingWindow+0xc>
    }
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40c90fdb 	.word	0x40c90fdb
 8001454:	43ff8000 	.word	0x43ff8000
 8001458:	3eeb851f 	.word	0x3eeb851f
 800145c:	3f0a3d71 	.word	0x3f0a3d71
 8001460:	20001a54 	.word	0x20001a54

08001464 <applyWindow>:
 *
 * @author		Francis Liechti (FL)
 * @date		03.06.2025	FL	Created
 *
 ****************************************************************************/
void applyWindow(int32_t *input, float32_t *output) {
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < NUM_SAMPLES; i++) {
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	e019      	b.n	80014a8 <applyWindow+0x44>
        output[i] = input[i] * window[i];
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001486:	4a0e      	ldr	r2, [pc, #56]	@ (80014c0 <applyWindow+0x5c>)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	edd3 7a00 	vldr	s15, [r3]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	4413      	add	r3, r2
 800149a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149e:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < NUM_SAMPLES; i++) {
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3301      	adds	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014ae:	d3e1      	bcc.n	8001474 <applyWindow+0x10>
    }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20001a54 	.word	0x20001a54

080014c4 <compute_energy>:
 *
 * @author		Francis Liechti (FL)
 * @date		04.06.2025	FL	Created
 *
 ****************************************************************************/
float compute_energy(float32_t* signal, int size) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
    float sum = 0.0f;
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < size; ++i)
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	e016      	b.n	8001508 <compute_energy+0x44>
        sum += (float) (signal[i] * signal[i]);
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	ed93 7a00 	vldr	s14, [r3]
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	edd3 7a00 	vldr	s15, [r3]
 80014f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80014fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fe:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 0; i < size; ++i)
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	3301      	adds	r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	dbe4      	blt.n	80014da <compute_energy+0x16>
    return sqrtf(sum / size);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151a:	ed97 7a03 	vldr	s14, [r7, #12]
 800151e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001522:	eeb0 0a66 	vmov.f32	s0, s13
 8001526:	f009 fba1 	bl	800ac6c <sqrtf>
 800152a:	eef0 7a40 	vmov.f32	s15, s0
}
 800152e:	eeb0 0a67 	vmov.f32	s0, s15
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <estimate_delay>:
 *
 * @author		Francis Liechti (FL)
 * @date		04.06.2025	FL	Created
 *
 ****************************************************************************/
int estimate_delay(const float* left, const float* right, int size, int max_delay) {
 8001538:	b480      	push	{r7}
 800153a:	b08b      	sub	sp, #44	@ 0x2c
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	603b      	str	r3, [r7, #0]
    float max_corr = -1.0f;
 8001546:	4b27      	ldr	r3, [pc, #156]	@ (80015e4 <estimate_delay+0xac>)
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
    int best_lag = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]

    for (int lag = -max_delay; lag <= max_delay; ++lag) {
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	425b      	negs	r3, r3
 8001552:	61fb      	str	r3, [r7, #28]
 8001554:	e03b      	b.n	80015ce <estimate_delay+0x96>
        float sum = 0.0f;
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	61bb      	str	r3, [r7, #24]
        for (int i = 0; i < size; ++i) {
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	e021      	b.n	80015a6 <estimate_delay+0x6e>
            int j = i + lag;
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	4413      	add	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
            if (j >= 0 && j < size)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	2b00      	cmp	r3, #0
 800156e:	db17      	blt.n	80015a0 <estimate_delay+0x68>
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	429a      	cmp	r2, r3
 8001576:	da13      	bge.n	80015a0 <estimate_delay+0x68>
                sum += left[i] * right[j];
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	ed93 7a00 	vldr	s14, [r3]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001594:	ed97 7a06 	vldr	s14, [r7, #24]
 8001598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800159c:	edc7 7a06 	vstr	s15, [r7, #24]
        for (int i = 0; i < size; ++i) {
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	3301      	adds	r3, #1
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	dbd9      	blt.n	8001562 <estimate_delay+0x2a>
        }
        if (sum > max_corr) {
 80015ae:	ed97 7a06 	vldr	s14, [r7, #24]
 80015b2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80015b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	dd03      	ble.n	80015c8 <estimate_delay+0x90>
            max_corr = sum;
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
            best_lag = lag;
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	623b      	str	r3, [r7, #32]
    for (int lag = -max_delay; lag <= max_delay; ++lag) {
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	3301      	adds	r3, #1
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	ddbf      	ble.n	8001556 <estimate_delay+0x1e>
        }
    }

    return best_lag;  // Positive: right delayed → sound came from left
 80015d6:	6a3b      	ldr	r3, [r7, #32]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	372c      	adds	r7, #44	@ 0x2c
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	bf800000 	.word	0xbf800000

080015e8 <beamform_direction>:
 *
 * @author		Francis Liechti (FL)
 * @date		04.06.2025	FL	Created
 *
 ****************************************************************************/
int beamform_direction(float* left, float* right, float *scaleValue){
 80015e8:	b5b0      	push	{r4, r5, r7, lr}
 80015ea:	b08a      	sub	sp, #40	@ 0x28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]

    float e_left = compute_energy(left, NUM_SAMPLES);
 80015f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f7ff ff63 	bl	80014c4 <compute_energy>
 80015fe:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float e_right = compute_energy(right, NUM_SAMPLES);
 8001602:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001606:	68b8      	ldr	r0, [r7, #8]
 8001608:	f7ff ff5c 	bl	80014c4 <compute_energy>
 800160c:	ed87 0a08 	vstr	s0, [r7, #32]
    int delay = estimate_delay(left, right, NUM_SAMPLES, MAX_DELAY);
 8001610:	2340      	movs	r3, #64	@ 0x40
 8001612:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f7ff ff8d 	bl	8001538 <estimate_delay>
 800161e:	61f8      	str	r0, [r7, #28]

    // ratio for scaleValue weighted from delay and energy
    float e_ratio = e_left / (e_left + e_right + 1e-6f);
 8001620:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001624:	edd7 7a08 	vldr	s15, [r7, #32]
 8001628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80016ec <beamform_direction+0x104>
 8001630:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001634:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800163c:	edc7 7a06 	vstr	s15, [r7, #24]
	float d_ratio = fminf(fabsf(delay) / (float)MAX_DELAY, 1.0f);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164a:	eef0 7ae7 	vabs.f32	s15, s15
 800164e:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80016f0 <beamform_direction+0x108>
 8001652:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001656:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800165a:	eeb0 0a47 	vmov.f32	s0, s14
 800165e:	f009 fb29 	bl	800acb4 <fminf>
 8001662:	ed87 0a05 	vstr	s0, [r7, #20]

	// Combine energy and delay factors, weighted average
	*scaleValue = (float) (0.5 * e_ratio + 0.5 * d_ratio);
 8001666:	69b8      	ldr	r0, [r7, #24]
 8001668:	f7fe ffee 	bl	8000648 <__aeabi_f2d>
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b20      	ldr	r3, [pc, #128]	@ (80016f4 <beamform_direction+0x10c>)
 8001672:	f7ff f841 	bl	80006f8 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4614      	mov	r4, r2
 800167c:	461d      	mov	r5, r3
 800167e:	6978      	ldr	r0, [r7, #20]
 8001680:	f7fe ffe2 	bl	8000648 <__aeabi_f2d>
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <beamform_direction+0x10c>)
 800168a:	f7ff f835 	bl	80006f8 <__aeabi_dmul>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4620      	mov	r0, r4
 8001694:	4629      	mov	r1, r5
 8001696:	f7fe fe79 	bl	800038c <__adddf3>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f7ff fb21 	bl	8000ce8 <__aeabi_d2f>
 80016a6:	4602      	mov	r2, r0
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	601a      	str	r2, [r3, #0]

    // Decide based on delay and energy
    if (abs(delay) > 4)  // ~0.25ms
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	bfb8      	it	lt
 80016b2:	425b      	neglt	r3, r3
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	dd07      	ble.n	80016c8 <beamform_direction+0xe0>
        return (delay > 0) ? +1 : -1;  // left or right
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	dd01      	ble.n	80016c2 <beamform_direction+0xda>
 80016be:	2301      	movs	r3, #1
 80016c0:	e00f      	b.n	80016e2 <beamform_direction+0xfa>
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	e00c      	b.n	80016e2 <beamform_direction+0xfa>
    else
        return (e_left > e_right) ? +1 : -1;
 80016c8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80016d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d8:	dd01      	ble.n	80016de <beamform_direction+0xf6>
 80016da:	2301      	movs	r3, #1
 80016dc:	e001      	b.n	80016e2 <beamform_direction+0xfa>
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3728      	adds	r7, #40	@ 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bdb0      	pop	{r4, r5, r7, pc}
 80016ea:	bf00      	nop
 80016ec:	358637bd 	.word	0x358637bd
 80016f0:	42800000 	.word	0x42800000
 80016f4:	3fe00000 	.word	0x3fe00000

080016f8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016fe:	463b      	mov	r3, r7
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800170a:	4b21      	ldr	r3, [pc, #132]	@ (8001790 <MX_ADC1_Init+0x98>)
 800170c:	4a21      	ldr	r2, [pc, #132]	@ (8001794 <MX_ADC1_Init+0x9c>)
 800170e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001710:	4b1f      	ldr	r3, [pc, #124]	@ (8001790 <MX_ADC1_Init+0x98>)
 8001712:	2200      	movs	r2, #0
 8001714:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001716:	4b1e      	ldr	r3, [pc, #120]	@ (8001790 <MX_ADC1_Init+0x98>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800171c:	4b1c      	ldr	r3, [pc, #112]	@ (8001790 <MX_ADC1_Init+0x98>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001722:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <MX_ADC1_Init+0x98>)
 8001724:	2200      	movs	r2, #0
 8001726:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001728:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <MX_ADC1_Init+0x98>)
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001730:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <MX_ADC1_Init+0x98>)
 8001732:	2200      	movs	r2, #0
 8001734:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001736:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <MX_ADC1_Init+0x98>)
 8001738:	4a17      	ldr	r2, [pc, #92]	@ (8001798 <MX_ADC1_Init+0xa0>)
 800173a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800173c:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <MX_ADC1_Init+0x98>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001742:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <MX_ADC1_Init+0x98>)
 8001744:	2201      	movs	r2, #1
 8001746:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <MX_ADC1_Init+0x98>)
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001750:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <MX_ADC1_Init+0x98>)
 8001752:	2201      	movs	r2, #1
 8001754:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001756:	480e      	ldr	r0, [pc, #56]	@ (8001790 <MX_ADC1_Init+0x98>)
 8001758:	f001 f9cc 	bl	8002af4 <HAL_ADC_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001762:	f000 fc49 	bl	8001ff8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001766:	2301      	movs	r3, #1
 8001768:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800176a:	2301      	movs	r3, #1
 800176c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001772:	463b      	mov	r3, r7
 8001774:	4619      	mov	r1, r3
 8001776:	4806      	ldr	r0, [pc, #24]	@ (8001790 <MX_ADC1_Init+0x98>)
 8001778:	f001 fa00 	bl	8002b7c <HAL_ADC_ConfigChannel>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001782:	f000 fc39 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20003254 	.word	0x20003254
 8001794:	40012000 	.word	0x40012000
 8001798:	0f000001 	.word	0x0f000001

0800179c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	@ 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a17      	ldr	r2, [pc, #92]	@ (8001818 <HAL_ADC_MspInit+0x7c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d127      	bne.n	800180e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b16      	ldr	r3, [pc, #88]	@ (800181c <HAL_ADC_MspInit+0x80>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	4a15      	ldr	r2, [pc, #84]	@ (800181c <HAL_ADC_MspInit+0x80>)
 80017c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ce:	4b13      	ldr	r3, [pc, #76]	@ (800181c <HAL_ADC_MspInit+0x80>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <HAL_ADC_MspInit+0x80>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a0e      	ldr	r2, [pc, #56]	@ (800181c <HAL_ADC_MspInit+0x80>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <HAL_ADC_MspInit+0x80>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017f6:	2302      	movs	r3, #2
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fa:	2303      	movs	r3, #3
 80017fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	@ (8001820 <HAL_ADC_MspInit+0x84>)
 800180a:	f002 f867 	bl	80038dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800180e:	bf00      	nop
 8001810:	3728      	adds	r7, #40	@ 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40012000 	.word	0x40012000
 800181c:	40023800 	.word	0x40023800
 8001820:	40020000 	.word	0x40020000

08001824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <MX_DMA_Init+0x3c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a0b      	ldr	r2, [pc, #44]	@ (8001860 <MX_DMA_Init+0x3c>)
 8001834:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <MX_DMA_Init+0x3c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	2039      	movs	r0, #57	@ 0x39
 800184c:	f001 fc9f 	bl	800318e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001850:	2039      	movs	r0, #57	@ 0x39
 8001852:	f001 fcb8 	bl	80031c6 <HAL_NVIC_EnableIRQ>

}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	4b35      	ldr	r3, [pc, #212]	@ (8001954 <MX_GPIO_Init+0xf0>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a34      	ldr	r2, [pc, #208]	@ (8001954 <MX_GPIO_Init+0xf0>)
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b32      	ldr	r3, [pc, #200]	@ (8001954 <MX_GPIO_Init+0xf0>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b2e      	ldr	r3, [pc, #184]	@ (8001954 <MX_GPIO_Init+0xf0>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	4a2d      	ldr	r2, [pc, #180]	@ (8001954 <MX_GPIO_Init+0xf0>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001954 <MX_GPIO_Init+0xf0>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	4b27      	ldr	r3, [pc, #156]	@ (8001954 <MX_GPIO_Init+0xf0>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4a26      	ldr	r2, [pc, #152]	@ (8001954 <MX_GPIO_Init+0xf0>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4b24      	ldr	r3, [pc, #144]	@ (8001954 <MX_GPIO_Init+0xf0>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A0_2_Pin|A1_2_Pin|A2_2_Pin, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80018d4:	4820      	ldr	r0, [pc, #128]	@ (8001958 <MX_GPIO_Init+0xf4>)
 80018d6:	f002 f995 	bl	8003c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_1_Pin|A1_1_Pin|A2_1_Pin|DRIVE_EN_Pin, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80018e0:	481e      	ldr	r0, [pc, #120]	@ (800195c <MX_GPIO_Init+0xf8>)
 80018e2:	f002 f98f 	bl	8003c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|N_RES_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80018ec:	481c      	ldr	r0, [pc, #112]	@ (8001960 <MX_GPIO_Init+0xfc>)
 80018ee:	f002 f989 	bl	8003c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_2_Pin A1_2_Pin A2_2_Pin */
  GPIO_InitStruct.Pin = A0_2_Pin|A1_2_Pin|A2_2_Pin;
 80018f2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80018f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	4619      	mov	r1, r3
 800190a:	4813      	ldr	r0, [pc, #76]	@ (8001958 <MX_GPIO_Init+0xf4>)
 800190c:	f001 ffe6 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_1_Pin A1_1_Pin A2_1_Pin DRIVE_EN_Pin */
  GPIO_InitStruct.Pin = A0_1_Pin|A1_1_Pin|A2_1_Pin|DRIVE_EN_Pin;
 8001910:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001914:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001916:	2301      	movs	r3, #1
 8001918:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	4619      	mov	r1, r3
 8001928:	480c      	ldr	r0, [pc, #48]	@ (800195c <MX_GPIO_Init+0xf8>)
 800192a:	f001 ffd7 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin N_RES_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|N_RES_Pin;
 800192e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001932:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001934:	2301      	movs	r3, #1
 8001936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	4619      	mov	r1, r3
 8001946:	4806      	ldr	r0, [pc, #24]	@ (8001960 <MX_GPIO_Init+0xfc>)
 8001948:	f001 ffc8 	bl	80038dc <HAL_GPIO_Init>

}
 800194c:	bf00      	nop
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	40020400 	.word	0x40020400
 800195c:	40020800 	.word	0x40020800
 8001960:	40020000 	.word	0x40020000

08001964 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001968:	4b13      	ldr	r3, [pc, #76]	@ (80019b8 <MX_I2C1_Init+0x54>)
 800196a:	4a14      	ldr	r2, [pc, #80]	@ (80019bc <MX_I2C1_Init+0x58>)
 800196c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800196e:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <MX_I2C1_Init+0x54>)
 8001970:	4a13      	ldr	r2, [pc, #76]	@ (80019c0 <MX_I2C1_Init+0x5c>)
 8001972:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001974:	4b10      	ldr	r3, [pc, #64]	@ (80019b8 <MX_I2C1_Init+0x54>)
 8001976:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800197a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800197c:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <MX_I2C1_Init+0x54>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001982:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <MX_I2C1_Init+0x54>)
 8001984:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001988:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800198a:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <MX_I2C1_Init+0x54>)
 800198c:	2200      	movs	r2, #0
 800198e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001990:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <MX_I2C1_Init+0x54>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001996:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <MX_I2C1_Init+0x54>)
 8001998:	2200      	movs	r2, #0
 800199a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <MX_I2C1_Init+0x54>)
 800199e:	2200      	movs	r2, #0
 80019a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019a2:	4805      	ldr	r0, [pc, #20]	@ (80019b8 <MX_I2C1_Init+0x54>)
 80019a4:	f002 f948 	bl	8003c38 <HAL_I2C_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80019ae:	f000 fb23 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000329c 	.word	0x2000329c
 80019bc:	40005400 	.word	0x40005400
 80019c0:	00061a80 	.word	0x00061a80

080019c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	@ 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a19      	ldr	r2, [pc, #100]	@ (8001a48 <HAL_I2C_MspInit+0x84>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d12c      	bne.n	8001a40 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b18      	ldr	r3, [pc, #96]	@ (8001a4c <HAL_I2C_MspInit+0x88>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	4a17      	ldr	r2, [pc, #92]	@ (8001a4c <HAL_I2C_MspInit+0x88>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f6:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <HAL_I2C_MspInit+0x88>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a08:	2312      	movs	r3, #18
 8001a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a14:	2304      	movs	r3, #4
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480c      	ldr	r0, [pc, #48]	@ (8001a50 <HAL_I2C_MspInit+0x8c>)
 8001a20:	f001 ff5c 	bl	80038dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <HAL_I2C_MspInit+0x88>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2c:	4a07      	ldr	r2, [pc, #28]	@ (8001a4c <HAL_I2C_MspInit+0x88>)
 8001a2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a34:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <HAL_I2C_MspInit+0x88>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a40:	bf00      	nop
 8001a42:	3728      	adds	r7, #40	@ 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40005400 	.word	0x40005400
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020400 	.word	0x40020400

08001a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a58:	f5ad 5d87 	sub.w	sp, sp, #4320	@ 0x10e0
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a5e:	f000 ffb3 	bl	80029c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a62:	f000 f9d3 	bl	8001e0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a66:	f7ff fefd 	bl	8001864 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a6a:	f7ff fedb 	bl	8001824 <MX_DMA_Init>
  MX_I2C1_Init();
 8001a6e:	f7ff ff79 	bl	8001964 <MX_I2C1_Init>
  MX_TIM7_Init();
 8001a72:	f000 fc6d 	bl	8002350 <MX_TIM7_Init>
  MX_ADC1_Init();
 8001a76:	f7ff fe3f 	bl	80016f8 <MX_ADC1_Init>
  MX_SAI1_Init();
 8001a7a:	f000 fac3 	bl	8002004 <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */


 init_drivers();
 8001a7e:	f000 fcef 	bl	8002460 <init_drivers>
 DWT_Init();
 8001a82:	f000 fa31 	bl	8001ee8 <DWT_Init>

	uint8_t numValues = 80;
 8001a86:	2350      	movs	r3, #80	@ 0x50
 8001a88:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001a8c:	f102 020f 	add.w	r2, r2, #15
 8001a90:	7013      	strb	r3, [r2, #0]
	double ramp[numValues];
 8001a92:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001a96:	f103 030f 	add.w	r3, r3, #15
 8001a9a:	7819      	ldrb	r1, [r3, #0]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001aa4:	f102 0208 	add.w	r2, r2, #8
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	b2cb      	uxtb	r3, r1
 8001aac:	2200      	movs	r2, #0
 8001aae:	4698      	mov	r8, r3
 8001ab0:	4691      	mov	r9, r2
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001abe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ac2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ac6:	b2cb      	uxtb	r3, r1
 8001ac8:	2200      	movs	r2, #0
 8001aca:	461c      	mov	r4, r3
 8001acc:	4615      	mov	r5, r2
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	01ab      	lsls	r3, r5, #6
 8001ad8:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8001adc:	01a2      	lsls	r2, r4, #6
 8001ade:	460b      	mov	r3, r1
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	3307      	adds	r3, #7
 8001ae4:	08db      	lsrs	r3, r3, #3
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	ebad 0d03 	sub.w	sp, sp, r3
 8001aec:	466b      	mov	r3, sp
 8001aee:	3307      	adds	r3, #7
 8001af0:	08db      	lsrs	r3, r3, #3
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001af8:	f102 0204 	add.w	r2, r2, #4
 8001afc:	6013      	str	r3, [r2, #0]
	uint8_t maxValue = 0x5B; // 2.3V RMS
 8001afe:	235b      	movs	r3, #91	@ 0x5b
 8001b00:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001b04:	f102 0203 	add.w	r2, r2, #3
 8001b08:	7013      	strb	r3, [r2, #0]

	// generate_ramp(ramp, maxValue, numValues);
	double amplitudes[NUM_ACTUATORS] = {0};
 8001b0a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b0e:	f103 0318 	add.w	r3, r3, #24
 8001b12:	2280      	movs	r2, #128	@ 0x80
 8001b14:	2100      	movs	r1, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f006 ff82 	bl	8008a20 <memset>
	uint8_t counter = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001b22:	f102 0202 	add.w	r2, r2, #2
 8001b26:	7013      	strb	r3, [r2, #0]
	int32_t audioData_left[NUM_SAMPLES];
	int32_t audioData_right[NUM_SAMPLES];

	generateHammingWindow();
 8001b28:	f7ff fc5e 	bl	80013e8 <generateHammingWindow>


//	uint8_t drivers = 0;
//	uint8_t firstround = 0;

	uint8_t ready = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001b32:	f102 021f 	add.w	r2, r2, #31
 8001b36:	7013      	strb	r3, [r2, #0]

	for(int j=0; j<NUM_ACTUATORS; j++){
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001b3e:	f102 0218 	add.w	r2, r2, #24
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	e01b      	b.n	8001b7e <main+0x12a>
		amplitudes[j] = 0;
 8001b46:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001b4a:	f103 0318 	add.w	r3, r3, #24
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	f503 5387 	add.w	r3, r3, #4320	@ 0x10e0
 8001b56:	443b      	add	r3, r7
 8001b58:	f1a3 01a8 	sub.w	r1, r3, #168	@ 0xa8
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	e9c1 2300 	strd	r2, r3, [r1]
	for(int j=0; j<NUM_ACTUATORS; j++){
 8001b68:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001b6c:	f103 0318 	add.w	r3, r3, #24
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	3301      	adds	r3, #1
 8001b74:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001b78:	f102 0218 	add.w	r2, r2, #24
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001b82:	f103 0318 	add.w	r3, r3, #24
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	dddc      	ble.n	8001b46 <main+0xf2>
//	printf("Semihosting test...\n\r");

	char s[50];
	char *p;
	FILE *fp;
	p = s;
 8001b8c:	f107 0320 	add.w	r3, r7, #32
 8001b90:	3b1c      	subs	r3, #28
 8001b92:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001b96:	f102 021c 	add.w	r2, r2, #28
 8001b9a:	6013      	str	r3, [r2, #0]


//	HAL_NVIC_EnableIRQ(TIM7_IRQn);
//	HAL_TIM_Base_Start_IT(&htim7);
	HAL_TIM_Base_Start(&htim7);
 8001b9c:	4894      	ldr	r0, [pc, #592]	@ (8001df0 <main+0x39c>)
 8001b9e:	f004 ffbf 	bl	8006b20 <HAL_TIM_Base_Start>

	HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint32_t *)rawdata, DMA_BUFFER_SIZE);
 8001ba2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ba6:	4993      	ldr	r1, [pc, #588]	@ (8001df4 <main+0x3a0>)
 8001ba8:	4893      	ldr	r0, [pc, #588]	@ (8001df8 <main+0x3a4>)
 8001baa:	f004 fc5d 	bl	8006468 <HAL_SAI_Receive_DMA>


	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001bb4:	4891      	ldr	r0, [pc, #580]	@ (8001dfc <main+0x3a8>)
 8001bb6:	f002 f825 	bl	8003c04 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(TimCollapsed){
 8001bba:	4b91      	ldr	r3, [pc, #580]	@ (8001e00 <main+0x3ac>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <main+0x174>
		TimCollapsed = RESET;
 8001bc2:	4b8f      	ldr	r3, [pc, #572]	@ (8001e00 <main+0x3ac>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
	  }

	  if(ready!=0){
 8001bc8:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001bcc:	f103 031f 	add.w	r3, r3, #31
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d014      	beq.n	8001c00 <main+0x1ac>
		  // clear actual waveform with rising edge
		  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001bdc:	4887      	ldr	r0, [pc, #540]	@ (8001dfc <main+0x3a8>)
 8001bde:	f002 f811 	bl	8003c04 <HAL_GPIO_WritePin>
		  delay_us(100);
 8001be2:	2064      	movs	r0, #100	@ 0x64
 8001be4:	f000 f9a0 	bl	8001f28 <delay_us>
//		  HAL_Delay(1);
		  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001bee:	4883      	ldr	r0, [pc, #524]	@ (8001dfc <main+0x3a8>)
 8001bf0:	f002 f808 	bl	8003c04 <HAL_GPIO_WritePin>
//		  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
//		  delay_us(100);
////		  HAL_Delay(1);
//		  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, SET);

		  ready = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001bfa:	f102 021f 	add.w	r2, r2, #31
 8001bfe:	7013      	strb	r3, [r2, #0]
	  }

	  if(Data_Arrived_First_Half && (ready == 0)){
 8001c00:	4b80      	ldr	r3, [pc, #512]	@ (8001e04 <main+0x3b0>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d06c      	beq.n	8001ce2 <main+0x28e>
 8001c08:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001c0c:	f103 031f 	add.w	r3, r3, #31
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d165      	bne.n	8001ce2 <main+0x28e>
		  Data_Arrived_First_Half = RESET;
 8001c16:	4b7b      	ldr	r3, [pc, #492]	@ (8001e04 <main+0x3b0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
		  // Create lock file to have no conflicts with matlab
//		  FILE* lock = fopen("C:\\...\\Data_Left.lock", "w");
//		  if (lock) fclose(lock);  // just create and close

//		  fp=fopen("C:\\Users\\franc\\OneDrive\\Dokumente\\MATLAB\\Master_Thesis\\Data_Left.txt", "w");
		  for(int i=0; i<NUM_SAMPLES; i++){
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001c22:	f102 0214 	add.w	r2, r2, #20
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e036      	b.n	8001c98 <main+0x244>
//			  // value is stored in four array parts (LSB left, MSB left, LSB right, MSB right)
//			  // Sort it and value is 18-bit (MSB) in 2's complement
			  audioData_left[i] = ((int32_t)(rawdata[2*i] << 0)) >> 14;
 8001c2a:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001c2e:	f103 0314 	add.w	r3, r3, #20
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4a6f      	ldr	r2, [pc, #444]	@ (8001df4 <main+0x3a0>)
 8001c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3c:	1399      	asrs	r1, r3, #14
 8001c3e:	f507 5387 	add.w	r3, r7, #4320	@ 0x10e0
 8001c42:	f6a3 03a8 	subw	r3, r3, #2216	@ 0x8a8
 8001c46:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001c4a:	f102 0214 	add.w	r2, r2, #20
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  audioData_right[i] = ((int32_t)(rawdata[2*i+1] << 0)) >> 14;
 8001c54:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001c58:	f103 0314 	add.w	r3, r3, #20
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	3301      	adds	r3, #1
 8001c62:	4a64      	ldr	r2, [pc, #400]	@ (8001df4 <main+0x3a0>)
 8001c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c68:	139a      	asrs	r2, r3, #14
 8001c6a:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001c74:	f103 0314 	add.w	r3, r3, #20
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	f843 2ca8 	str.w	r2, [r3, #-168]
		  for(int i=0; i<NUM_SAMPLES; i++){
 8001c82:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001c86:	f103 0314 	add.w	r3, r3, #20
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001c92:	f102 0214 	add.w	r2, r2, #20
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001c9c:	f103 0314 	add.w	r3, r3, #20
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ca6:	dbc0      	blt.n	8001c2a <main+0x1d6>
//			  fprintf(fp,p);
//			  fprintf(fp,"\n");
		  }
//		  fclose(fp);

		  process_signal(amplitudes, audioData_left, audioData_right);
 8001ca8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001cac:	3b08      	subs	r3, #8
 8001cae:	f607 0138 	addw	r1, r7, #2104	@ 0x838
 8001cb2:	f507 5081 	add.w	r0, r7, #4128	@ 0x1020
 8001cb6:	f100 0018 	add.w	r0, r0, #24
 8001cba:	461a      	mov	r2, r3
 8001cbc:	f7ff fa66 	bl	800118c <process_signal>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc0:	b672      	cpsid	i
}
 8001cc2:	bf00      	nop
		  __disable_irq();
		  set_amplitude(amplitudes);
 8001cc4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cc8:	f103 0318 	add.w	r3, r3, #24
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f000 fddb 	bl	8002888 <set_amplitude>
  __ASM volatile ("cpsie i" : : : "memory");
 8001cd2:	b662      	cpsie	i
}
 8001cd4:	bf00      	nop
		  __enable_irq();
		  ready = 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001cdc:	f102 021f 	add.w	r2, r2, #31
 8001ce0:	7013      	strb	r3, [r2, #0]

		  // Delete lock file as signal for "done writing"
//		   remove("C:\\...\\Data_Left.lock");
	  }

	  if(Data_Arrived_Second_Half && (ready==0)){
 8001ce2:	4b49      	ldr	r3, [pc, #292]	@ (8001e08 <main+0x3b4>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f43f af67 	beq.w	8001bba <main+0x166>
 8001cec:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001cf0:	f103 031f 	add.w	r3, r3, #31
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f47f af5f 	bne.w	8001bba <main+0x166>
		  Data_Arrived_Second_Half = RESET;
 8001cfc:	4b42      	ldr	r3, [pc, #264]	@ (8001e08 <main+0x3b4>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
		  // Create lock file to have no conflicts with matlab
//		  FILE* lock = fopen("C:\\...\\Data_Left.lock", "w");
//		  if (lock) fclose(lock);  // just create and close
		  int offset = DMA_BUFFER_SIZE/2;
 8001d02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d06:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001d0a:	f102 0218 	add.w	r2, r2, #24
 8001d0e:	6013      	str	r3, [r2, #0]
//
//		  fp=fopen("C:\\Users\\franc\\OneDrive\\Dokumente\\MATLAB\\Master_Thesis\\Data_Left.txt", "w");
		  for(int i=0; i<NUM_SAMPLES; i++){
 8001d10:	2300      	movs	r3, #0
 8001d12:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001d16:	f102 0210 	add.w	r2, r2, #16
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	e042      	b.n	8001da4 <main+0x350>
//			  // value is stored in four array parts (LSB left, MSB left, LSB right, MSB right)
//			  // Sort it and value is 18-bit (MSB) in 2's complement
			  audioData_left[i] = ((int32_t)(rawdata[2*i + offset] << 0)) >> 14;
 8001d1e:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001d22:	f103 0310 	add.w	r3, r3, #16
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	005a      	lsls	r2, r3, #1
 8001d2a:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001d2e:	f103 0318 	add.w	r3, r3, #24
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4413      	add	r3, r2
 8001d36:	4a2f      	ldr	r2, [pc, #188]	@ (8001df4 <main+0x3a0>)
 8001d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3c:	1399      	asrs	r1, r3, #14
 8001d3e:	f507 5387 	add.w	r3, r7, #4320	@ 0x10e0
 8001d42:	f6a3 03a8 	subw	r3, r3, #2216	@ 0x8a8
 8001d46:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001d4a:	f102 0210 	add.w	r2, r2, #16
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  audioData_right[i] = ((int32_t)(rawdata[2*i+1 + offset] << 0)) >> 14;
 8001d54:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001d58:	f103 0310 	add.w	r3, r3, #16
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001d66:	f103 0318 	add.w	r3, r3, #24
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4a21      	ldr	r2, [pc, #132]	@ (8001df4 <main+0x3a0>)
 8001d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d74:	139a      	asrs	r2, r3, #14
 8001d76:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001d80:	f103 0310 	add.w	r3, r3, #16
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	f843 2ca8 	str.w	r2, [r3, #-168]
		  for(int i=0; i<NUM_SAMPLES; i++){
 8001d8e:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001d92:	f103 0310 	add.w	r3, r3, #16
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001d9e:	f102 0210 	add.w	r2, r2, #16
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001da8:	f103 0310 	add.w	r3, r3, #16
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001db2:	dbb4      	blt.n	8001d1e <main+0x2ca>
//			  fprintf(fp,p);
//			  fprintf(fp,"\n");
		  }
//		  fclose(fp);

		  process_signal(amplitudes, audioData_left, audioData_right);
 8001db4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001db8:	3b08      	subs	r3, #8
 8001dba:	f607 0138 	addw	r1, r7, #2104	@ 0x838
 8001dbe:	f507 5081 	add.w	r0, r7, #4128	@ 0x1020
 8001dc2:	f100 0018 	add.w	r0, r0, #24
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	f7ff f9e0 	bl	800118c <process_signal>
  __ASM volatile ("cpsid i" : : : "memory");
 8001dcc:	b672      	cpsid	i
}
 8001dce:	bf00      	nop
		  __disable_irq();
		  set_amplitude(amplitudes);
 8001dd0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001dd4:	f103 0318 	add.w	r3, r3, #24
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 fd55 	bl	8002888 <set_amplitude>
  __ASM volatile ("cpsie i" : : : "memory");
 8001dde:	b662      	cpsie	i
}
 8001de0:	bf00      	nop
		  __enable_irq();
		  ready = 2;
 8001de2:	2302      	movs	r3, #2
 8001de4:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001de8:	f102 021f 	add.w	r2, r2, #31
 8001dec:	7013      	strb	r3, [r2, #0]
	  if(TimCollapsed){
 8001dee:	e6e4      	b.n	8001bba <main+0x166>
 8001df0:	200053e4 	.word	0x200053e4
 8001df4:	200032f4 	.word	0x200032f4
 8001df8:	200052f4 	.word	0x200052f4
 8001dfc:	40020000 	.word	0x40020000
 8001e00:	200032f0 	.word	0x200032f0
 8001e04:	200032f1 	.word	0x200032f1
 8001e08:	200032f2 	.word	0x200032f2

08001e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b094      	sub	sp, #80	@ 0x50
 8001e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e12:	f107 031c 	add.w	r3, r7, #28
 8001e16:	2234      	movs	r2, #52	@ 0x34
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f006 fe00 	bl	8008a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e30:	2300      	movs	r3, #0
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee0 <SystemClock_Config+0xd4>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	4a29      	ldr	r2, [pc, #164]	@ (8001ee0 <SystemClock_Config+0xd4>)
 8001e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e40:	4b27      	ldr	r3, [pc, #156]	@ (8001ee0 <SystemClock_Config+0xd4>)
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <SystemClock_Config+0xd8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e58:	4a22      	ldr	r2, [pc, #136]	@ (8001ee4 <SystemClock_Config+0xd8>)
 8001e5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <SystemClock_Config+0xd8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e70:	2301      	movs	r3, #1
 8001e72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e74:	2310      	movs	r3, #16
 8001e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e80:	2308      	movs	r3, #8
 8001e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001e84:	2360      	movs	r3, #96	@ 0x60
 8001e86:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e90:	2302      	movs	r3, #2
 8001e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e94:	f107 031c 	add.w	r3, r7, #28
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f003 feeb 	bl	8005c74 <HAL_RCC_OscConfig>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ea4:	f000 f8a8 	bl	8001ff8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea8:	230f      	movs	r3, #15
 8001eaa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eac:	2302      	movs	r3, #2
 8001eae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001eb4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001eb8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001eba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ebe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ec0:	f107 0308 	add.w	r3, r7, #8
 8001ec4:	2103      	movs	r1, #3
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f002 feb0 	bl	8004c2c <HAL_RCC_ClockConfig>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001ed2:	f000 f891 	bl	8001ff8 <Error_Handler>
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	3750      	adds	r7, #80	@ 0x50
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40007000 	.word	0x40007000

08001ee8 <DWT_Init>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		28.05.2025	FL	Created
 ****************************************************************************/
void DWT_Init(void) {
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <DWT_Init+0x38>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d105      	bne.n	8001f04 <DWT_Init+0x1c>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <DWT_Init+0x38>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4a08      	ldr	r2, [pc, #32]	@ (8001f20 <DWT_Init+0x38>)
 8001efe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f02:	60d3      	str	r3, [r2, #12]
    }
    DWT->CYCCNT = 0;
 8001f04:	4b07      	ldr	r3, [pc, #28]	@ (8001f24 <DWT_Init+0x3c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001f0a:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <DWT_Init+0x3c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a05      	ldr	r2, [pc, #20]	@ (8001f24 <DWT_Init+0x3c>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6013      	str	r3, [r2, #0]
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000edf0 	.word	0xe000edf0
 8001f24:	e0001000 	.word	0xe0001000

08001f28 <delay_us>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		28.05.2025	FL	Created
 ****************************************************************************/
void delay_us(uint32_t us) {
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8001f30:	4b0d      	ldr	r3, [pc, #52]	@ (8001f68 <delay_us+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0d      	ldr	r2, [pc, #52]	@ (8001f6c <delay_us+0x44>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	0c9a      	lsrs	r2, r3, #18
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 8001f44:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <delay_us+0x48>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 8001f4a:	bf00      	nop
 8001f4c:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <delay_us+0x48>)
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d8f8      	bhi.n	8001f4c <delay_us+0x24>
}
 8001f5a:	bf00      	nop
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	431bde83 	.word	0x431bde83
 8001f70:	e0001000 	.word	0xe0001000

08001f74 <HAL_TIM_PeriodElapsedCallback>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		12.03.2025	FL	Created
 ****************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a05      	ldr	r2, [pc, #20]	@ (8001f98 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d102      	bne.n	8001f8c <HAL_TIM_PeriodElapsedCallback+0x18>
		TimCollapsed = SET;
 8001f86:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
	}
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	40001400 	.word	0x40001400
 8001f9c:	200032f0 	.word	0x200032f0

08001fa0 <HAL_SAI_RxCpltCallback>:
//
//void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
//	Data_Arrived_First_Half = SET;
//}

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	if(hsai == &hsai_BlockA1){
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a06      	ldr	r2, [pc, #24]	@ (8001fc4 <HAL_SAI_RxCpltCallback+0x24>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d102      	bne.n	8001fb6 <HAL_SAI_RxCpltCallback+0x16>
		Data_Arrived_Second_Half = SET;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <HAL_SAI_RxCpltCallback+0x28>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
	}
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	200052f4 	.word	0x200052f4
 8001fc8:	200032f2 	.word	0x200032f2

08001fcc <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	if(hsai == &hsai_BlockA1){
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a06      	ldr	r2, [pc, #24]	@ (8001ff0 <HAL_SAI_RxHalfCpltCallback+0x24>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d102      	bne.n	8001fe2 <HAL_SAI_RxHalfCpltCallback+0x16>
		Data_Arrived_First_Half = SET;
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <HAL_SAI_RxHalfCpltCallback+0x28>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
	}
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	200052f4 	.word	0x200052f4
 8001ff4:	200032f1 	.word	0x200032f1

08001ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ffc:	b672      	cpsid	i
}
 8001ffe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <Error_Handler+0x8>

08002004 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002008:	4b17      	ldr	r3, [pc, #92]	@ (8002068 <MX_SAI1_Init+0x64>)
 800200a:	4a18      	ldr	r2, [pc, #96]	@ (800206c <MX_SAI1_Init+0x68>)
 800200c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 800200e:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <MX_SAI1_Init+0x64>)
 8002010:	2201      	movs	r2, #1
 8002012:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002014:	4b14      	ldr	r3, [pc, #80]	@ (8002068 <MX_SAI1_Init+0x64>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800201a:	4b13      	ldr	r3, [pc, #76]	@ (8002068 <MX_SAI1_Init+0x64>)
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002020:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <MX_SAI1_Init+0x64>)
 8002022:	2200      	movs	r2, #0
 8002024:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <MX_SAI1_Init+0x64>)
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_NA;
 800202c:	4b0e      	ldr	r3, [pc, #56]	@ (8002068 <MX_SAI1_Init+0x64>)
 800202e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002032:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8002034:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <MX_SAI1_Init+0x64>)
 8002036:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800203a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800203c:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <MX_SAI1_Init+0x64>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <MX_SAI1_Init+0x64>)
 8002044:	2200      	movs	r2, #0
 8002046:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002048:	4b07      	ldr	r3, [pc, #28]	@ (8002068 <MX_SAI1_Init+0x64>)
 800204a:	2200      	movs	r2, #0
 800204c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 800204e:	2302      	movs	r3, #2
 8002050:	2203      	movs	r2, #3
 8002052:	2100      	movs	r1, #0
 8002054:	4804      	ldr	r0, [pc, #16]	@ (8002068 <MX_SAI1_Init+0x64>)
 8002056:	f004 f8ab 	bl	80061b0 <HAL_SAI_InitProtocol>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 8002060:	f7ff ffca 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}
 8002068:	200052f4 	.word	0x200052f4
 800206c:	40015804 	.word	0x40015804

08002070 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b0a0      	sub	sp, #128	@ 0x80
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	225c      	movs	r2, #92	@ 0x5c
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f006 fccd 	bl	8008a20 <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a4f      	ldr	r2, [pc, #316]	@ (80021c8 <HAL_SAI_MspInit+0x158>)
 800208c:	4293      	cmp	r3, r2
 800208e:	f040 8096 	bne.w	80021be <HAL_SAI_MspInit+0x14e>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002092:	2304      	movs	r3, #4
 8002094:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 8002096:	2308      	movs	r3, #8
 8002098:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 123;
 800209a:	237b      	movs	r3, #123	@ 0x7b
 800209c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 15;
 800209e:	230f      	movs	r3, #15
 80020a0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80020a2:	2302      	movs	r3, #2
 80020a4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80020aa:	2300      	movs	r3, #0
 80020ac:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ae:	f107 0310 	add.w	r3, r7, #16
 80020b2:	4618      	mov	r0, r3
 80020b4:	f002 fec0 	bl	8004e38 <HAL_RCCEx_PeriphCLKConfig>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_SAI_MspInit+0x52>
    {
      Error_Handler();
 80020be:	f7ff ff9b 	bl	8001ff8 <Error_Handler>
    }

    if (SAI1_client == 0)
 80020c2:	4b42      	ldr	r3, [pc, #264]	@ (80021cc <HAL_SAI_MspInit+0x15c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10d      	bne.n	80020e6 <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b40      	ldr	r3, [pc, #256]	@ (80021d0 <HAL_SAI_MspInit+0x160>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	4a3f      	ldr	r2, [pc, #252]	@ (80021d0 <HAL_SAI_MspInit+0x160>)
 80020d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020da:	4b3d      	ldr	r3, [pc, #244]	@ (80021d0 <HAL_SAI_MspInit+0x160>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 80020e6:	4b39      	ldr	r3, [pc, #228]	@ (80021cc <HAL_SAI_MspInit+0x15c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	3301      	adds	r3, #1
 80020ec:	4a37      	ldr	r2, [pc, #220]	@ (80021cc <HAL_SAI_MspInit+0x15c>)
 80020ee:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PC1     ------> SAI1_SD_A
    PA3     ------> SAI1_FS_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020f0:	2302      	movs	r3, #2
 80020f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f4:	2302      	movs	r3, #2
 80020f6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fc:	2300      	movs	r3, #0
 80020fe:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002100:	2306      	movs	r3, #6
 8002102:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002104:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002108:	4619      	mov	r1, r3
 800210a:	4832      	ldr	r0, [pc, #200]	@ (80021d4 <HAL_SAI_MspInit+0x164>)
 800210c:	f001 fbe6 	bl	80038dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002110:	2308      	movs	r3, #8
 8002112:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002120:	2306      	movs	r3, #6
 8002122:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002128:	4619      	mov	r1, r3
 800212a:	482b      	ldr	r0, [pc, #172]	@ (80021d8 <HAL_SAI_MspInit+0x168>)
 800212c:	f001 fbd6 	bl	80038dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002130:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002134:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213e:	2300      	movs	r3, #0
 8002140:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002142:	2306      	movs	r3, #6
 8002144:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002146:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800214a:	4619      	mov	r1, r3
 800214c:	4823      	ldr	r0, [pc, #140]	@ (80021dc <HAL_SAI_MspInit+0x16c>)
 800214e:	f001 fbc5 	bl	80038dc <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8002152:	4b23      	ldr	r3, [pc, #140]	@ (80021e0 <HAL_SAI_MspInit+0x170>)
 8002154:	4a23      	ldr	r2, [pc, #140]	@ (80021e4 <HAL_SAI_MspInit+0x174>)
 8002156:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8002158:	4b21      	ldr	r3, [pc, #132]	@ (80021e0 <HAL_SAI_MspInit+0x170>)
 800215a:	2200      	movs	r2, #0
 800215c:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800215e:	4b20      	ldr	r3, [pc, #128]	@ (80021e0 <HAL_SAI_MspInit+0x170>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002164:	4b1e      	ldr	r3, [pc, #120]	@ (80021e0 <HAL_SAI_MspInit+0x170>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800216a:	4b1d      	ldr	r3, [pc, #116]	@ (80021e0 <HAL_SAI_MspInit+0x170>)
 800216c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002170:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002172:	4b1b      	ldr	r3, [pc, #108]	@ (80021e0 <HAL_SAI_MspInit+0x170>)
 8002174:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002178:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800217a:	4b19      	ldr	r3, [pc, #100]	@ (80021e0 <HAL_SAI_MspInit+0x170>)
 800217c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002180:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8002182:	4b17      	ldr	r3, [pc, #92]	@ (80021e0 <HAL_SAI_MspInit+0x170>)
 8002184:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002188:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 800218a:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <HAL_SAI_MspInit+0x170>)
 800218c:	2200      	movs	r2, #0
 800218e:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002190:	4b13      	ldr	r3, [pc, #76]	@ (80021e0 <HAL_SAI_MspInit+0x170>)
 8002192:	2200      	movs	r2, #0
 8002194:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002196:	4812      	ldr	r0, [pc, #72]	@ (80021e0 <HAL_SAI_MspInit+0x170>)
 8002198:	f001 f830 	bl	80031fc <HAL_DMA_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_SAI_MspInit+0x136>
    {
      Error_Handler();
 80021a2:	f7ff ff29 	bl	8001ff8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a0d      	ldr	r2, [pc, #52]	@ (80021e0 <HAL_SAI_MspInit+0x170>)
 80021aa:	675a      	str	r2, [r3, #116]	@ 0x74
 80021ac:	4a0c      	ldr	r2, [pc, #48]	@ (80021e0 <HAL_SAI_MspInit+0x170>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a0a      	ldr	r2, [pc, #40]	@ (80021e0 <HAL_SAI_MspInit+0x170>)
 80021b6:	671a      	str	r2, [r3, #112]	@ 0x70
 80021b8:	4a09      	ldr	r2, [pc, #36]	@ (80021e0 <HAL_SAI_MspInit+0x170>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 80021be:	bf00      	nop
 80021c0:	3780      	adds	r7, #128	@ 0x80
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40015804 	.word	0x40015804
 80021cc:	200053dc 	.word	0x200053dc
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40020800 	.word	0x40020800
 80021d8:	40020000 	.word	0x40020000
 80021dc:	40020400 	.word	0x40020400
 80021e0:	2000537c 	.word	0x2000537c
 80021e4:	40026428 	.word	0x40026428

080021e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	4b10      	ldr	r3, [pc, #64]	@ (8002234 <HAL_MspInit+0x4c>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002234 <HAL_MspInit+0x4c>)
 80021f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002234 <HAL_MspInit+0x4c>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002206:	607b      	str	r3, [r7, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	603b      	str	r3, [r7, #0]
 800220e:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <HAL_MspInit+0x4c>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	4a08      	ldr	r2, [pc, #32]	@ (8002234 <HAL_MspInit+0x4c>)
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002218:	6413      	str	r3, [r2, #64]	@ 0x40
 800221a:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <HAL_MspInit+0x4c>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800

08002238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <NMI_Handler+0x4>

08002240 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002244:	bf00      	nop
 8002246:	e7fd      	b.n	8002244 <HardFault_Handler+0x4>

08002248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800224c:	bf00      	nop
 800224e:	e7fd      	b.n	800224c <MemManage_Handler+0x4>

08002250 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002254:	bf00      	nop
 8002256:	e7fd      	b.n	8002254 <BusFault_Handler+0x4>

08002258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800225c:	bf00      	nop
 800225e:	e7fd      	b.n	800225c <UsageFault_Handler+0x4>

08002260 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800228e:	f000 fbed 	bl	8002a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800229c:	4802      	ldr	r0, [pc, #8]	@ (80022a8 <TIM7_IRQHandler+0x10>)
 800229e:	f004 fca7 	bl	8006bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200053e4 	.word	0x200053e4

080022ac <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80022b0:	4802      	ldr	r0, [pc, #8]	@ (80022bc <DMA2_Stream1_IRQHandler+0x10>)
 80022b2:	f001 f8a9 	bl	8003408 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000537c 	.word	0x2000537c

080022c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c8:	4a14      	ldr	r2, [pc, #80]	@ (800231c <_sbrk+0x5c>)
 80022ca:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <_sbrk+0x60>)
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d4:	4b13      	ldr	r3, [pc, #76]	@ (8002324 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022dc:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <_sbrk+0x64>)
 80022de:	4a12      	ldr	r2, [pc, #72]	@ (8002328 <_sbrk+0x68>)
 80022e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022e2:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <_sbrk+0x64>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d207      	bcs.n	8002300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f0:	f006 fbe8 	bl	8008ac4 <__errno>
 80022f4:	4603      	mov	r3, r0
 80022f6:	220c      	movs	r2, #12
 80022f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295
 80022fe:	e009      	b.n	8002314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002300:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <_sbrk+0x64>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002306:	4b07      	ldr	r3, [pc, #28]	@ (8002324 <_sbrk+0x64>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	4a05      	ldr	r2, [pc, #20]	@ (8002324 <_sbrk+0x64>)
 8002310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002312:	68fb      	ldr	r3, [r7, #12]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20020000 	.word	0x20020000
 8002320:	00000400 	.word	0x00000400
 8002324:	200053e0 	.word	0x200053e0
 8002328:	20005628 	.word	0x20005628

0800232c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002330:	4b06      	ldr	r3, [pc, #24]	@ (800234c <SystemInit+0x20>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002336:	4a05      	ldr	r2, [pc, #20]	@ (800234c <SystemInit+0x20>)
 8002338:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800233c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002356:	463b      	mov	r3, r7
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800235e:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <MX_TIM7_Init+0x64>)
 8002360:	4a15      	ldr	r2, [pc, #84]	@ (80023b8 <MX_TIM7_Init+0x68>)
 8002362:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9599;
 8002364:	4b13      	ldr	r3, [pc, #76]	@ (80023b4 <MX_TIM7_Init+0x64>)
 8002366:	f242 527f 	movw	r2, #9599	@ 0x257f
 800236a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236c:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <MX_TIM7_Init+0x64>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8002372:	4b10      	ldr	r3, [pc, #64]	@ (80023b4 <MX_TIM7_Init+0x64>)
 8002374:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002378:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800237a:	4b0e      	ldr	r3, [pc, #56]	@ (80023b4 <MX_TIM7_Init+0x64>)
 800237c:	2280      	movs	r2, #128	@ 0x80
 800237e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002380:	480c      	ldr	r0, [pc, #48]	@ (80023b4 <MX_TIM7_Init+0x64>)
 8002382:	f004 fb7d 	bl	8006a80 <HAL_TIM_Base_Init>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800238c:	f7ff fe34 	bl	8001ff8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002390:	2320      	movs	r3, #32
 8002392:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002394:	2300      	movs	r3, #0
 8002396:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002398:	463b      	mov	r3, r7
 800239a:	4619      	mov	r1, r3
 800239c:	4805      	ldr	r0, [pc, #20]	@ (80023b4 <MX_TIM7_Init+0x64>)
 800239e:	f004 fde5 	bl	8006f6c <HAL_TIMEx_MasterConfigSynchronization>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80023a8:	f7ff fe26 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	200053e4 	.word	0x200053e4
 80023b8:	40001400 	.word	0x40001400

080023bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002404 <HAL_TIM_Base_MspInit+0x48>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d115      	bne.n	80023fa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002408 <HAL_TIM_Base_MspInit+0x4c>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002408 <HAL_TIM_Base_MspInit+0x4c>)
 80023d8:	f043 0320 	orr.w	r3, r3, #32
 80023dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023de:	4b0a      	ldr	r3, [pc, #40]	@ (8002408 <HAL_TIM_Base_MspInit+0x4c>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	f003 0320 	and.w	r3, r3, #32
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2103      	movs	r1, #3
 80023ee:	2037      	movs	r0, #55	@ 0x37
 80023f0:	f000 fecd 	bl	800318e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80023f4:	2037      	movs	r0, #55	@ 0x37
 80023f6:	f000 fee6 	bl	80031c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40001400 	.word	0x40001400
 8002408:	40023800 	.word	0x40023800

0800240c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800240c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002444 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002410:	f7ff ff8c 	bl	800232c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002414:	480c      	ldr	r0, [pc, #48]	@ (8002448 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002416:	490d      	ldr	r1, [pc, #52]	@ (800244c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002418:	4a0d      	ldr	r2, [pc, #52]	@ (8002450 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800241c:	e002      	b.n	8002424 <LoopCopyDataInit>

0800241e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002422:	3304      	adds	r3, #4

08002424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002428:	d3f9      	bcc.n	800241e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242a:	4a0a      	ldr	r2, [pc, #40]	@ (8002454 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800242c:	4c0a      	ldr	r4, [pc, #40]	@ (8002458 <LoopFillZerobss+0x22>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002430:	e001      	b.n	8002436 <LoopFillZerobss>

08002432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002434:	3204      	adds	r2, #4

08002436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002438:	d3fb      	bcc.n	8002432 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800243a:	f006 fb49 	bl	8008ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800243e:	f7ff fb09 	bl	8001a54 <main>
  bx  lr    
 8002442:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002444:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800244c:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8002450:	0800cf94 	.word	0x0800cf94
  ldr r2, =_sbss
 8002454:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8002458:	20005628 	.word	0x20005628

0800245c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800245c:	e7fe      	b.n	800245c <ADC_IRQHandler>
	...

08002460 <init_drivers>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		11.03.2025	FL	Created
 ****************************************************************************/
void init_drivers(void){
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af02      	add	r7, sp, #8
	// First enable the drivers and the MUX
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
 8002466:	2200      	movs	r2, #0
 8002468:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800246c:	4819      	ldr	r0, [pc, #100]	@ (80024d4 <init_drivers+0x74>)
 800246e:	f001 fbc9 	bl	8003c04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N_RES_GPIO_Port, N_RES_Pin, GPIO_PIN_SET);
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002478:	4816      	ldr	r0, [pc, #88]	@ (80024d4 <init_drivers+0x74>)
 800247a:	f001 fbc3 	bl	8003c04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRIVE_EN_GPIO_Port, DRIVE_EN_Pin , GPIO_PIN_SET);
 800247e:	2201      	movs	r2, #1
 8002480:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002484:	4814      	ldr	r0, [pc, #80]	@ (80024d8 <init_drivers+0x78>)
 8002486:	f001 fbbd 	bl	8003c04 <HAL_GPIO_WritePin>

	// Set HW-addresses for the MUX
	HAL_GPIO_WritePin(A0_1_GPIO_Port, A0_1_Pin, GPIO_PIN_RESET);
 800248a:	2200      	movs	r2, #0
 800248c:	2140      	movs	r1, #64	@ 0x40
 800248e:	4812      	ldr	r0, [pc, #72]	@ (80024d8 <init_drivers+0x78>)
 8002490:	f001 fbb8 	bl	8003c04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A1_1_GPIO_Port, A1_1_Pin, GPIO_PIN_RESET);
 8002494:	2200      	movs	r2, #0
 8002496:	2180      	movs	r1, #128	@ 0x80
 8002498:	480f      	ldr	r0, [pc, #60]	@ (80024d8 <init_drivers+0x78>)
 800249a:	f001 fbb3 	bl	8003c04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A2_1_GPIO_Port, A2_1_Pin, GPIO_PIN_RESET);
 800249e:	2200      	movs	r2, #0
 80024a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024a4:	480c      	ldr	r0, [pc, #48]	@ (80024d8 <init_drivers+0x78>)
 80024a6:	f001 fbad 	bl	8003c04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A0_2_GPIO_Port, A0_2_Pin, GPIO_PIN_SET);
 80024aa:	2201      	movs	r2, #1
 80024ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024b0:	480a      	ldr	r0, [pc, #40]	@ (80024dc <init_drivers+0x7c>)
 80024b2:	f001 fba7 	bl	8003c04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A1_2_GPIO_Port, A1_2_Pin, GPIO_PIN_RESET);
 80024b6:	2200      	movs	r2, #0
 80024b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024bc:	4807      	ldr	r0, [pc, #28]	@ (80024dc <init_drivers+0x7c>)
 80024be:	f001 fba1 	bl	8003c04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A2_2_GPIO_Port, A2_2_Pin, GPIO_PIN_RESET);
 80024c2:	2200      	movs	r2, #0
 80024c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024c8:	4804      	ldr	r0, [pc, #16]	@ (80024dc <init_drivers+0x7c>)
 80024ca:	f001 fb9b 	bl	8003c04 <HAL_GPIO_WritePin>

	// Now init the drivers
	// Have to do it for every actuator
	// So first chose the actuator (GPIOs A0, A1, A2)
	for(uint8_t i=0; i<NUM_ACTUATORS; i++){
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	e1c7      	b.n	8002864 <init_drivers+0x404>
 80024d4:	40020000 	.word	0x40020000
 80024d8:	40020800 	.word	0x40020800
 80024dc:	40020400 	.word	0x40020400
		select_driver(i);
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fa10 	bl	8002908 <select_driver>
		calib_complete = 0x02;
 80024e8:	4bb1      	ldr	r3, [pc, #708]	@ (80027b0 <init_drivers+0x350>)
 80024ea:	2202      	movs	r2, #2
 80024ec:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 80024ee:	200a      	movs	r0, #10
 80024f0:	f000 fadc 	bl	8002aac <HAL_Delay>
		int a = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60bb      	str	r3, [r7, #8]

		// Send the initializations
		// Library Mode

		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, dev_RESET, sizeof(dev_RESET), TIMEOUT) == HAL_OK){
 80024f8:	2364      	movs	r3, #100	@ 0x64
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2302      	movs	r3, #2
 80024fe:	4aad      	ldr	r2, [pc, #692]	@ (80027b4 <init_drivers+0x354>)
 8002500:	21b4      	movs	r1, #180	@ 0xb4
 8002502:	48ad      	ldr	r0, [pc, #692]	@ (80027b8 <init_drivers+0x358>)
 8002504:	f001 fcdc 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d102      	bne.n	8002514 <init_drivers+0xb4>
			a++;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	3301      	adds	r3, #1
 8002512:	60bb      	str	r3, [r7, #8]
		}
		HAL_Delay(100);
 8002514:	2064      	movs	r0, #100	@ 0x64
 8002516:	f000 fac9 	bl	8002aac <HAL_Delay>
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_rated_voltage, sizeof(set_rated_voltage), TIMEOUT) == HAL_OK){
 800251a:	2364      	movs	r3, #100	@ 0x64
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	2302      	movs	r3, #2
 8002520:	4aa6      	ldr	r2, [pc, #664]	@ (80027bc <init_drivers+0x35c>)
 8002522:	21b4      	movs	r1, #180	@ 0xb4
 8002524:	48a4      	ldr	r0, [pc, #656]	@ (80027b8 <init_drivers+0x358>)
 8002526:	f001 fccb 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d102      	bne.n	8002536 <init_drivers+0xd6>
			a++;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	3301      	adds	r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_Clamp, sizeof(set_Clamp), TIMEOUT) == HAL_OK){
 8002536:	2364      	movs	r3, #100	@ 0x64
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	2302      	movs	r3, #2
 800253c:	4aa0      	ldr	r2, [pc, #640]	@ (80027c0 <init_drivers+0x360>)
 800253e:	21b4      	movs	r1, #180	@ 0xb4
 8002540:	489d      	ldr	r0, [pc, #628]	@ (80027b8 <init_drivers+0x358>)
 8002542:	f001 fcbd 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <init_drivers+0xf2>
			a++;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	3301      	adds	r3, #1
 8002550:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_LRA, sizeof(set_LRA), TIMEOUT) == HAL_OK){
 8002552:	2364      	movs	r3, #100	@ 0x64
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	2302      	movs	r3, #2
 8002558:	4a9a      	ldr	r2, [pc, #616]	@ (80027c4 <init_drivers+0x364>)
 800255a:	21b4      	movs	r1, #180	@ 0xb4
 800255c:	4896      	ldr	r0, [pc, #600]	@ (80027b8 <init_drivers+0x358>)
 800255e:	f001 fcaf 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d102      	bne.n	800256e <init_drivers+0x10e>
			a++;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	3301      	adds	r3, #1
 800256c:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, start_auto_calibration, sizeof(start_auto_calibration), TIMEOUT) == HAL_OK){
 800256e:	2364      	movs	r3, #100	@ 0x64
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	2302      	movs	r3, #2
 8002574:	4a94      	ldr	r2, [pc, #592]	@ (80027c8 <init_drivers+0x368>)
 8002576:	21b4      	movs	r1, #180	@ 0xb4
 8002578:	488f      	ldr	r0, [pc, #572]	@ (80027b8 <init_drivers+0x358>)
 800257a:	f001 fca1 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d102      	bne.n	800258a <init_drivers+0x12a>
			a++;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	3301      	adds	r3, #1
 8002588:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, GO, sizeof(GO), TIMEOUT) == HAL_OK){
 800258a:	2364      	movs	r3, #100	@ 0x64
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	2302      	movs	r3, #2
 8002590:	4a8e      	ldr	r2, [pc, #568]	@ (80027cc <init_drivers+0x36c>)
 8002592:	21b4      	movs	r1, #180	@ 0xb4
 8002594:	4888      	ldr	r0, [pc, #544]	@ (80027b8 <init_drivers+0x358>)
 8002596:	f001 fc93 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <init_drivers+0x146>
			a++;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	3301      	adds	r3, #1
 80025a4:	60bb      	str	r3, [r7, #8]
		}

		uint8_t reg = REG_GO;
 80025a6:	230c      	movs	r3, #12
 80025a8:	70fb      	strb	r3, [r7, #3]
			if(HAL_I2C_Master_Receive(&hi2c1, DEV_ADDRESS, Buf, 1, TIMEOUT) == HAL_OK){
				calib_complete = Buf[0];
			}

		}*/
		HAL_Delay(2000);
 80025aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80025ae:	f000 fa7d 	bl	8002aac <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, &reg, 1, TIMEOUT);
 80025b2:	1cfa      	adds	r2, r7, #3
 80025b4:	2364      	movs	r3, #100	@ 0x64
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	2301      	movs	r3, #1
 80025ba:	21b4      	movs	r1, #180	@ 0xb4
 80025bc:	487e      	ldr	r0, [pc, #504]	@ (80027b8 <init_drivers+0x358>)
 80025be:	f001 fc7f 	bl	8003ec0 <HAL_I2C_Master_Transmit>
		if(HAL_I2C_Master_Receive(&hi2c1, DEV_ADDRESS, Buf, 1, TIMEOUT) == HAL_OK){
 80025c2:	2364      	movs	r3, #100	@ 0x64
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2301      	movs	r3, #1
 80025c8:	4a81      	ldr	r2, [pc, #516]	@ (80027d0 <init_drivers+0x370>)
 80025ca:	21b4      	movs	r1, #180	@ 0xb4
 80025cc:	487a      	ldr	r0, [pc, #488]	@ (80027b8 <init_drivers+0x358>)
 80025ce:	f001 fd75 	bl	80040bc <HAL_I2C_Master_Receive>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d103      	bne.n	80025e0 <init_drivers+0x180>
			calib_complete = Buf[0];
 80025d8:	4b7d      	ldr	r3, [pc, #500]	@ (80027d0 <init_drivers+0x370>)
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	4b74      	ldr	r3, [pc, #464]	@ (80027b0 <init_drivers+0x350>)
 80025de:	701a      	strb	r2, [r3, #0]
		}

		reg = REG_STATUS;
 80025e0:	2300      	movs	r3, #0
 80025e2:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, &reg, 1, TIMEOUT);
 80025e4:	1cfa      	adds	r2, r7, #3
 80025e6:	2364      	movs	r3, #100	@ 0x64
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2301      	movs	r3, #1
 80025ec:	21b4      	movs	r1, #180	@ 0xb4
 80025ee:	4872      	ldr	r0, [pc, #456]	@ (80027b8 <init_drivers+0x358>)
 80025f0:	f001 fc66 	bl	8003ec0 <HAL_I2C_Master_Transmit>
		if(HAL_I2C_Master_Receive(&hi2c1, DEV_ADDRESS, Buf, 1, TIMEOUT) == HAL_OK){
 80025f4:	2364      	movs	r3, #100	@ 0x64
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	2301      	movs	r3, #1
 80025fa:	4a75      	ldr	r2, [pc, #468]	@ (80027d0 <init_drivers+0x370>)
 80025fc:	21b4      	movs	r1, #180	@ 0xb4
 80025fe:	486e      	ldr	r0, [pc, #440]	@ (80027b8 <init_drivers+0x358>)
 8002600:	f001 fd5c 	bl	80040bc <HAL_I2C_Master_Receive>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d103      	bne.n	8002612 <init_drivers+0x1b2>
			status = Buf[0];
 800260a:	4b71      	ldr	r3, [pc, #452]	@ (80027d0 <init_drivers+0x370>)
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	4b71      	ldr	r3, [pc, #452]	@ (80027d4 <init_drivers+0x374>)
 8002610:	701a      	strb	r2, [r3, #0]
		}

		reg = REG_AUTO_CALIBRATION_RESULT;
 8002612:	2318      	movs	r3, #24
 8002614:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, &reg, 1, TIMEOUT);
 8002616:	1cfa      	adds	r2, r7, #3
 8002618:	2364      	movs	r3, #100	@ 0x64
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	2301      	movs	r3, #1
 800261e:	21b4      	movs	r1, #180	@ 0xb4
 8002620:	4865      	ldr	r0, [pc, #404]	@ (80027b8 <init_drivers+0x358>)
 8002622:	f001 fc4d 	bl	8003ec0 <HAL_I2C_Master_Transmit>
		if(HAL_I2C_Master_Receive(&hi2c1, DEV_ADDRESS, Buf, 1, TIMEOUT) == HAL_OK){
 8002626:	2364      	movs	r3, #100	@ 0x64
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	2301      	movs	r3, #1
 800262c:	4a68      	ldr	r2, [pc, #416]	@ (80027d0 <init_drivers+0x370>)
 800262e:	21b4      	movs	r1, #180	@ 0xb4
 8002630:	4861      	ldr	r0, [pc, #388]	@ (80027b8 <init_drivers+0x358>)
 8002632:	f001 fd43 	bl	80040bc <HAL_I2C_Master_Receive>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d103      	bne.n	8002644 <init_drivers+0x1e4>
			A_CAL_COMP = Buf[0];
 800263c:	4b64      	ldr	r3, [pc, #400]	@ (80027d0 <init_drivers+0x370>)
 800263e:	781a      	ldrb	r2, [r3, #0]
 8002640:	4b65      	ldr	r3, [pc, #404]	@ (80027d8 <init_drivers+0x378>)
 8002642:	701a      	strb	r2, [r3, #0]
		}
		reg = REG_AUTO_CALIBRATION_BACK_EMF_RESULT;
 8002644:	2319      	movs	r3, #25
 8002646:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, &reg, 1, TIMEOUT);
 8002648:	1cfa      	adds	r2, r7, #3
 800264a:	2364      	movs	r3, #100	@ 0x64
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	2301      	movs	r3, #1
 8002650:	21b4      	movs	r1, #180	@ 0xb4
 8002652:	4859      	ldr	r0, [pc, #356]	@ (80027b8 <init_drivers+0x358>)
 8002654:	f001 fc34 	bl	8003ec0 <HAL_I2C_Master_Transmit>
		if(HAL_I2C_Master_Receive(&hi2c1, DEV_ADDRESS, Buf, 1, TIMEOUT) == HAL_OK){
 8002658:	2364      	movs	r3, #100	@ 0x64
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	2301      	movs	r3, #1
 800265e:	4a5c      	ldr	r2, [pc, #368]	@ (80027d0 <init_drivers+0x370>)
 8002660:	21b4      	movs	r1, #180	@ 0xb4
 8002662:	4855      	ldr	r0, [pc, #340]	@ (80027b8 <init_drivers+0x358>)
 8002664:	f001 fd2a 	bl	80040bc <HAL_I2C_Master_Receive>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d103      	bne.n	8002676 <init_drivers+0x216>
			A_CAL_BEMF = Buf[0];
 800266e:	4b58      	ldr	r3, [pc, #352]	@ (80027d0 <init_drivers+0x370>)
 8002670:	781a      	ldrb	r2, [r3, #0]
 8002672:	4b5a      	ldr	r3, [pc, #360]	@ (80027dc <init_drivers+0x37c>)
 8002674:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_LRA_settings, sizeof(set_LRA_settings), TIMEOUT) == HAL_OK){
 8002676:	2364      	movs	r3, #100	@ 0x64
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	2302      	movs	r3, #2
 800267c:	4a58      	ldr	r2, [pc, #352]	@ (80027e0 <init_drivers+0x380>)
 800267e:	21b4      	movs	r1, #180	@ 0xb4
 8002680:	484d      	ldr	r0, [pc, #308]	@ (80027b8 <init_drivers+0x358>)
 8002682:	f001 fc1d 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <init_drivers+0x232>
			a++;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	3301      	adds	r3, #1
 8002690:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_timing, sizeof(set_timing), TIMEOUT) == HAL_OK){
 8002692:	2364      	movs	r3, #100	@ 0x64
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	2302      	movs	r3, #2
 8002698:	4a52      	ldr	r2, [pc, #328]	@ (80027e4 <init_drivers+0x384>)
 800269a:	21b4      	movs	r1, #180	@ 0xb4
 800269c:	4846      	ldr	r0, [pc, #280]	@ (80027b8 <init_drivers+0x358>)
 800269e:	f001 fc0f 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <init_drivers+0x24e>
			a++;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	3301      	adds	r3, #1
 80026ac:	60bb      	str	r3, [r7, #8]
		}

		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_Control3, sizeof(set_Control3), TIMEOUT) == HAL_OK){
 80026ae:	2364      	movs	r3, #100	@ 0x64
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	2302      	movs	r3, #2
 80026b4:	4a4c      	ldr	r2, [pc, #304]	@ (80027e8 <init_drivers+0x388>)
 80026b6:	21b4      	movs	r1, #180	@ 0xb4
 80026b8:	483f      	ldr	r0, [pc, #252]	@ (80027b8 <init_drivers+0x358>)
 80026ba:	f001 fc01 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <init_drivers+0x26a>
			a++;
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	3301      	adds	r3, #1
 80026c8:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_library, sizeof(set_library), TIMEOUT) == HAL_OK){
 80026ca:	2364      	movs	r3, #100	@ 0x64
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	2302      	movs	r3, #2
 80026d0:	4a46      	ldr	r2, [pc, #280]	@ (80027ec <init_drivers+0x38c>)
 80026d2:	21b4      	movs	r1, #180	@ 0xb4
 80026d4:	4838      	ldr	r0, [pc, #224]	@ (80027b8 <init_drivers+0x358>)
 80026d6:	f001 fbf3 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <init_drivers+0x286>
			a++;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	3301      	adds	r3, #1
 80026e4:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_mode, sizeof(set_mode), TIMEOUT) == HAL_OK){
 80026e6:	2364      	movs	r3, #100	@ 0x64
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	2302      	movs	r3, #2
 80026ec:	4a40      	ldr	r2, [pc, #256]	@ (80027f0 <init_drivers+0x390>)
 80026ee:	21b4      	movs	r1, #180	@ 0xb4
 80026f0:	4831      	ldr	r0, [pc, #196]	@ (80027b8 <init_drivers+0x358>)
 80026f2:	f001 fbe5 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d102      	bne.n	8002702 <init_drivers+0x2a2>
			a++;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	3301      	adds	r3, #1
 8002700:	60bb      	str	r3, [r7, #8]
		}

		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_period, sizeof(set_period), TIMEOUT) == HAL_OK){
 8002702:	2364      	movs	r3, #100	@ 0x64
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	2302      	movs	r3, #2
 8002708:	4a3a      	ldr	r2, [pc, #232]	@ (80027f4 <init_drivers+0x394>)
 800270a:	21b4      	movs	r1, #180	@ 0xb4
 800270c:	482a      	ldr	r0, [pc, #168]	@ (80027b8 <init_drivers+0x358>)
 800270e:	f001 fbd7 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d102      	bne.n	800271e <init_drivers+0x2be>
			a++;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	3301      	adds	r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_waveform, sizeof(set_waveform), TIMEOUT) == HAL_OK){
 800271e:	2364      	movs	r3, #100	@ 0x64
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	2302      	movs	r3, #2
 8002724:	4a34      	ldr	r2, [pc, #208]	@ (80027f8 <init_drivers+0x398>)
 8002726:	21b4      	movs	r1, #180	@ 0xb4
 8002728:	4823      	ldr	r0, [pc, #140]	@ (80027b8 <init_drivers+0x358>)
 800272a:	f001 fbc9 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <init_drivers+0x2da>
			a++;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	3301      	adds	r3, #1
 8002738:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_waveform2, sizeof(set_waveform), TIMEOUT) == HAL_OK){
 800273a:	2364      	movs	r3, #100	@ 0x64
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	2302      	movs	r3, #2
 8002740:	4a2e      	ldr	r2, [pc, #184]	@ (80027fc <init_drivers+0x39c>)
 8002742:	21b4      	movs	r1, #180	@ 0xb4
 8002744:	481c      	ldr	r0, [pc, #112]	@ (80027b8 <init_drivers+0x358>)
 8002746:	f001 fbbb 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <init_drivers+0x2f6>
			a++;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	3301      	adds	r3, #1
 8002754:	60bb      	str	r3, [r7, #8]
		}

		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_auto_OL, sizeof(set_auto_OL), TIMEOUT) == HAL_OK){
 8002756:	2364      	movs	r3, #100	@ 0x64
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	2302      	movs	r3, #2
 800275c:	4a28      	ldr	r2, [pc, #160]	@ (8002800 <init_drivers+0x3a0>)
 800275e:	21b4      	movs	r1, #180	@ 0xb4
 8002760:	4815      	ldr	r0, [pc, #84]	@ (80027b8 <init_drivers+0x358>)
 8002762:	f001 fbad 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d102      	bne.n	8002772 <init_drivers+0x312>
			a++;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	3301      	adds	r3, #1
 8002770:	60bb      	str	r3, [r7, #8]
		}

		// Send a trigger to have waveform while measuring resonance period
		// clear actual waveform with rising edge
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
 8002772:	2200      	movs	r2, #0
 8002774:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002778:	4822      	ldr	r0, [pc, #136]	@ (8002804 <init_drivers+0x3a4>)
 800277a:	f001 fa43 	bl	8003c04 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800277e:	2001      	movs	r0, #1
 8002780:	f000 f994 	bl	8002aac <HAL_Delay>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, SET);
 8002784:	2201      	movs	r2, #1
 8002786:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800278a:	481e      	ldr	r0, [pc, #120]	@ (8002804 <init_drivers+0x3a4>)
 800278c:	f001 fa3a 	bl	8003c04 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8002790:	200a      	movs	r0, #10
 8002792:	f000 f98b 	bl	8002aac <HAL_Delay>
		// set new waveform with rising edge
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
 8002796:	2200      	movs	r2, #0
 8002798:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800279c:	4819      	ldr	r0, [pc, #100]	@ (8002804 <init_drivers+0x3a4>)
 800279e:	f001 fa31 	bl	8003c04 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80027a2:	2001      	movs	r0, #1
 80027a4:	f000 f982 	bl	8002aac <HAL_Delay>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, SET);
 80027a8:	2201      	movs	r2, #1
 80027aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80027ae:	e02b      	b.n	8002808 <init_drivers+0x3a8>
 80027b0:	20005433 	.word	0x20005433
 80027b4:	20000020 	.word	0x20000020
 80027b8:	2000329c 	.word	0x2000329c
 80027bc:	20000038 	.word	0x20000038
 80027c0:	2000001c 	.word	0x2000001c
 80027c4:	20000008 	.word	0x20000008
 80027c8:	20000010 	.word	0x20000010
 80027cc:	2000003c 	.word	0x2000003c
 80027d0:	2000542c 	.word	0x2000542c
 80027d4:	20005432 	.word	0x20005432
 80027d8:	20005430 	.word	0x20005430
 80027dc:	20005431 	.word	0x20005431
 80027e0:	20000018 	.word	0x20000018
 80027e4:	20000014 	.word	0x20000014
 80027e8:	2000000c 	.word	0x2000000c
 80027ec:	20000024 	.word	0x20000024
 80027f0:	20000004 	.word	0x20000004
 80027f4:	20000034 	.word	0x20000034
 80027f8:	20000028 	.word	0x20000028
 80027fc:	2000002c 	.word	0x2000002c
 8002800:	20000030 	.word	0x20000030
 8002804:	40020000 	.word	0x40020000
 8002808:	481b      	ldr	r0, [pc, #108]	@ (8002878 <init_drivers+0x418>)
 800280a:	f001 f9fb 	bl	8003c04 <HAL_GPIO_WritePin>
		reg = REG_LRA_RESONANCE_PERIOD;
 800280e:	2322      	movs	r3, #34	@ 0x22
 8002810:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, &reg, 1, TIMEOUT);
 8002812:	1cfa      	adds	r2, r7, #3
 8002814:	2364      	movs	r3, #100	@ 0x64
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	2301      	movs	r3, #1
 800281a:	21b4      	movs	r1, #180	@ 0xb4
 800281c:	4817      	ldr	r0, [pc, #92]	@ (800287c <init_drivers+0x41c>)
 800281e:	f001 fb4f 	bl	8003ec0 <HAL_I2C_Master_Transmit>
		if(HAL_I2C_Master_Receive(&hi2c1, DEV_ADDRESS, Buf, 1, TIMEOUT) == HAL_OK){
 8002822:	2364      	movs	r3, #100	@ 0x64
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	2301      	movs	r3, #1
 8002828:	4a15      	ldr	r2, [pc, #84]	@ (8002880 <init_drivers+0x420>)
 800282a:	21b4      	movs	r1, #180	@ 0xb4
 800282c:	4813      	ldr	r0, [pc, #76]	@ (800287c <init_drivers+0x41c>)
 800282e:	f001 fc45 	bl	80040bc <HAL_I2C_Master_Receive>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d103      	bne.n	8002840 <init_drivers+0x3e0>
			LRA_period = Buf[0];
 8002838:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <init_drivers+0x420>)
 800283a:	781a      	ldrb	r2, [r3, #0]
 800283c:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <init_drivers+0x424>)
 800283e:	701a      	strb	r2, [r3, #0]
		}

		// Set all actuators to 0V (Resolution test)
		uint8_t send[2] = {REG_RATED_VOLTAGE, 0};
 8002840:	2316      	movs	r3, #22
 8002842:	803b      	strh	r3, [r7, #0]
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, send, sizeof(send), TIMEOUT) == HAL_OK){
 8002844:	463a      	mov	r2, r7
 8002846:	2364      	movs	r3, #100	@ 0x64
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2302      	movs	r3, #2
 800284c:	21b4      	movs	r1, #180	@ 0xb4
 800284e:	480b      	ldr	r0, [pc, #44]	@ (800287c <init_drivers+0x41c>)
 8002850:	f001 fb36 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <init_drivers+0x3fe>
			int a = 1;
 800285a:	2301      	movs	r3, #1
 800285c:	607b      	str	r3, [r7, #4]
	for(uint8_t i=0; i<NUM_ACTUATORS; i++){
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	3301      	adds	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	2b0f      	cmp	r3, #15
 8002868:	f67f ae3a 	bls.w	80024e0 <init_drivers+0x80>
		}
	}
}
 800286c:	bf00      	nop
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40020000 	.word	0x40020000
 800287c:	2000329c 	.word	0x2000329c
 8002880:	2000542c 	.word	0x2000542c
 8002884:	20005434 	.word	0x20005434

08002888 <set_amplitude>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		12.03.2025	FL	Created
 ****************************************************************************/
void set_amplitude(double *amplitudes){
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af02      	add	r7, sp, #8
 800288e:	6078      	str	r0, [r7, #4]
	uint8_t value = amplitudes[0];
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f7fe fa05 	bl	8000ca8 <__aeabi_d2uiz>
 800289e:	4603      	mov	r3, r0
 80028a0:	74fb      	strb	r3, [r7, #19]

	for(int i=0; i<NUM_ACTUATORS; i++){
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	e025      	b.n	80028f4 <set_amplitude+0x6c>
		select_driver(i);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 f82b 	bl	8002908 <select_driver>
		value = (uint8_t)(amplitudes[i]); // calculation: datasheet p.21
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	f7fe f9f1 	bl	8000ca8 <__aeabi_d2uiz>
 80028c6:	4603      	mov	r3, r0
 80028c8:	74fb      	strb	r3, [r7, #19]
		uint8_t send[2] = {REG_RATED_VOLTAGE, value};
 80028ca:	2316      	movs	r3, #22
 80028cc:	723b      	strb	r3, [r7, #8]
 80028ce:	7cfb      	ldrb	r3, [r7, #19]
 80028d0:	727b      	strb	r3, [r7, #9]
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, send, sizeof(send), TIMEOUT) == HAL_OK){
 80028d2:	f107 0208 	add.w	r2, r7, #8
 80028d6:	2364      	movs	r3, #100	@ 0x64
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	2302      	movs	r3, #2
 80028dc:	21b4      	movs	r1, #180	@ 0xb4
 80028de:	4809      	ldr	r0, [pc, #36]	@ (8002904 <set_amplitude+0x7c>)
 80028e0:	f001 faee 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <set_amplitude+0x66>
			int a = 1;
 80028ea:	2301      	movs	r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<NUM_ACTUATORS; i++){
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3301      	adds	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2b0f      	cmp	r3, #15
 80028f8:	ddd6      	ble.n	80028a8 <set_amplitude+0x20>
		}
	}
}
 80028fa:	bf00      	nop
 80028fc:	bf00      	nop
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	2000329c 	.word	0x2000329c

08002908 <select_driver>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		12.03.2025	FL	Created
 ****************************************************************************/
void select_driver(uint8_t number){
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af02      	add	r7, sp, #8
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
	int a = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
	uint8_t value = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	72fb      	strb	r3, [r7, #11]
	// Disable other MUX if necessary
	if(number == 0){
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10e      	bne.n	800293e <select_driver+0x36>
		if(HAL_I2C_Master_Transmit(&hi2c1, SWITCH_ADDRESS_2, &value, sizeof(value), TIMEOUT) == HAL_OK){
 8002920:	f107 020b 	add.w	r2, r7, #11
 8002924:	2364      	movs	r3, #100	@ 0x64
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	2301      	movs	r3, #1
 800292a:	21e2      	movs	r1, #226	@ 0xe2
 800292c:	4825      	ldr	r0, [pc, #148]	@ (80029c4 <select_driver+0xbc>)
 800292e:	f001 fac7 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d113      	bne.n	8002960 <select_driver+0x58>
			a = 1;
 8002938:	2301      	movs	r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	e010      	b.n	8002960 <select_driver+0x58>
		}
	} else if(number == 8){
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	2b08      	cmp	r3, #8
 8002942:	d10d      	bne.n	8002960 <select_driver+0x58>
		if(HAL_I2C_Master_Transmit(&hi2c1, SWITCH_ADDRESS_1, &value, sizeof(value), TIMEOUT) == HAL_OK){
 8002944:	f107 020b 	add.w	r2, r7, #11
 8002948:	2364      	movs	r3, #100	@ 0x64
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2301      	movs	r3, #1
 800294e:	21e0      	movs	r1, #224	@ 0xe0
 8002950:	481c      	ldr	r0, [pc, #112]	@ (80029c4 <select_driver+0xbc>)
 8002952:	f001 fab5 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <select_driver+0x58>
			a = 1;
 800295c:	2301      	movs	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
		}
	}

	if(number<8){
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	2b07      	cmp	r3, #7
 8002964:	d814      	bhi.n	8002990 <select_driver+0x88>
		value = 1<<number;
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	2201      	movs	r2, #1
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	72fb      	strb	r3, [r7, #11]
		if(HAL_I2C_Master_Transmit(&hi2c1, SWITCH_ADDRESS_1, &value, sizeof(value), TIMEOUT) == HAL_OK){
 8002972:	f107 020b 	add.w	r2, r7, #11
 8002976:	2364      	movs	r3, #100	@ 0x64
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	2301      	movs	r3, #1
 800297c:	21e0      	movs	r1, #224	@ 0xe0
 800297e:	4811      	ldr	r0, [pc, #68]	@ (80029c4 <select_driver+0xbc>)
 8002980:	f001 fa9e 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d117      	bne.n	80029ba <select_driver+0xb2>
			a = 1;
 800298a:	2301      	movs	r3, #1
 800298c:	60fb      	str	r3, [r7, #12]
		value = 1<<(number-8);
		if(HAL_I2C_Master_Transmit(&hi2c1, SWITCH_ADDRESS_2, &value, sizeof(value), TIMEOUT) == HAL_OK){
			a = 1;
		}
	}
}
 800298e:	e014      	b.n	80029ba <select_driver+0xb2>
		value = 1<<(number-8);
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	3b08      	subs	r3, #8
 8002994:	2201      	movs	r2, #1
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	72fb      	strb	r3, [r7, #11]
		if(HAL_I2C_Master_Transmit(&hi2c1, SWITCH_ADDRESS_2, &value, sizeof(value), TIMEOUT) == HAL_OK){
 800299e:	f107 020b 	add.w	r2, r7, #11
 80029a2:	2364      	movs	r3, #100	@ 0x64
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2301      	movs	r3, #1
 80029a8:	21e2      	movs	r1, #226	@ 0xe2
 80029aa:	4806      	ldr	r0, [pc, #24]	@ (80029c4 <select_driver+0xbc>)
 80029ac:	f001 fa88 	bl	8003ec0 <HAL_I2C_Master_Transmit>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <select_driver+0xb2>
			a = 1;
 80029b6:	2301      	movs	r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]
}
 80029ba:	bf00      	nop
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	2000329c 	.word	0x2000329c

080029c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002a08 <HAL_Init+0x40>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a08 <HAL_Init+0x40>)
 80029d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <HAL_Init+0x40>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002a08 <HAL_Init+0x40>)
 80029de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029e4:	4b08      	ldr	r3, [pc, #32]	@ (8002a08 <HAL_Init+0x40>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a07      	ldr	r2, [pc, #28]	@ (8002a08 <HAL_Init+0x40>)
 80029ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f0:	2003      	movs	r0, #3
 80029f2:	f000 fbc1 	bl	8003178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029f6:	200f      	movs	r0, #15
 80029f8:	f000 f808 	bl	8002a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029fc:	f7ff fbf4 	bl	80021e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023c00 	.word	0x40023c00

08002a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a14:	4b12      	ldr	r3, [pc, #72]	@ (8002a60 <HAL_InitTick+0x54>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b12      	ldr	r3, [pc, #72]	@ (8002a64 <HAL_InitTick+0x58>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fbd9 	bl	80031e2 <HAL_SYSTICK_Config>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00e      	b.n	8002a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b0f      	cmp	r3, #15
 8002a3e:	d80a      	bhi.n	8002a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a40:	2200      	movs	r2, #0
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295
 8002a48:	f000 fba1 	bl	800318e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a4c:	4a06      	ldr	r2, [pc, #24]	@ (8002a68 <HAL_InitTick+0x5c>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	e000      	b.n	8002a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000000 	.word	0x20000000
 8002a64:	20000044 	.word	0x20000044
 8002a68:	20000040 	.word	0x20000040

08002a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a70:	4b06      	ldr	r3, [pc, #24]	@ (8002a8c <HAL_IncTick+0x20>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <HAL_IncTick+0x24>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4a04      	ldr	r2, [pc, #16]	@ (8002a90 <HAL_IncTick+0x24>)
 8002a7e:	6013      	str	r3, [r2, #0]
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000044 	.word	0x20000044
 8002a90:	20005438 	.word	0x20005438

08002a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return uwTick;
 8002a98:	4b03      	ldr	r3, [pc, #12]	@ (8002aa8 <HAL_GetTick+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20005438 	.word	0x20005438

08002aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab4:	f7ff ffee 	bl	8002a94 <HAL_GetTick>
 8002ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d005      	beq.n	8002ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8002af0 <HAL_Delay+0x44>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ad2:	bf00      	nop
 8002ad4:	f7ff ffde 	bl	8002a94 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d8f7      	bhi.n	8002ad4 <HAL_Delay+0x28>
  {
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000044 	.word	0x20000044

08002af4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e033      	b.n	8002b72 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fe fe42 	bl	800179c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d118      	bne.n	8002b64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b3a:	f023 0302 	bic.w	r3, r3, #2
 8002b3e:	f043 0202 	orr.w	r2, r3, #2
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f94a 	bl	8002de0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	f023 0303 	bic.w	r3, r3, #3
 8002b5a:	f043 0201 	orr.w	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b62:	e001      	b.n	8002b68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x1c>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e113      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x244>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b09      	cmp	r3, #9
 8002ba6:	d925      	bls.n	8002bf4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68d9      	ldr	r1, [r3, #12]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	3b1e      	subs	r3, #30
 8002bbe:	2207      	movs	r2, #7
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43da      	mvns	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	400a      	ands	r2, r1
 8002bcc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68d9      	ldr	r1, [r3, #12]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	4618      	mov	r0, r3
 8002be0:	4603      	mov	r3, r0
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	4403      	add	r3, r0
 8002be6:	3b1e      	subs	r3, #30
 8002be8:	409a      	lsls	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	e022      	b.n	8002c3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6919      	ldr	r1, [r3, #16]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	4613      	mov	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4413      	add	r3, r2
 8002c08:	2207      	movs	r2, #7
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	400a      	ands	r2, r1
 8002c16:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6919      	ldr	r1, [r3, #16]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	4618      	mov	r0, r3
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4403      	add	r3, r0
 8002c30:	409a      	lsls	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b06      	cmp	r3, #6
 8002c40:	d824      	bhi.n	8002c8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	3b05      	subs	r3, #5
 8002c54:	221f      	movs	r2, #31
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	400a      	ands	r2, r1
 8002c62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	4618      	mov	r0, r3
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3b05      	subs	r3, #5
 8002c7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c8a:	e04c      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b0c      	cmp	r3, #12
 8002c92:	d824      	bhi.n	8002cde <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3b23      	subs	r3, #35	@ 0x23
 8002ca6:	221f      	movs	r2, #31
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43da      	mvns	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	3b23      	subs	r3, #35	@ 0x23
 8002cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cdc:	e023      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	3b41      	subs	r3, #65	@ 0x41
 8002cf0:	221f      	movs	r2, #31
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43da      	mvns	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	3b41      	subs	r3, #65	@ 0x41
 8002d1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d26:	4b29      	ldr	r3, [pc, #164]	@ (8002dcc <HAL_ADC_ConfigChannel+0x250>)
 8002d28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a28      	ldr	r2, [pc, #160]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x254>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d10f      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x1d8>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b12      	cmp	r3, #18
 8002d3a:	d10b      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x254>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d12b      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x23a>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a1c      	ldr	r2, [pc, #112]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x258>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d003      	beq.n	8002d70 <HAL_ADC_ConfigChannel+0x1f4>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b11      	cmp	r3, #17
 8002d6e:	d122      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a11      	ldr	r2, [pc, #68]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x258>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d111      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d92:	4b11      	ldr	r3, [pc, #68]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x25c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a11      	ldr	r2, [pc, #68]	@ (8002ddc <HAL_ADC_ConfigChannel+0x260>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	0c9a      	lsrs	r2, r3, #18
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002da8:	e002      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f9      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	40012300 	.word	0x40012300
 8002dd0:	40012000 	.word	0x40012000
 8002dd4:	10000012 	.word	0x10000012
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	431bde83 	.word	0x431bde83

08002de0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002de8:	4b79      	ldr	r3, [pc, #484]	@ (8002fd0 <ADC_Init+0x1f0>)
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6859      	ldr	r1, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	021a      	lsls	r2, r3, #8
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002e38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6859      	ldr	r1, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6899      	ldr	r1, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	4a58      	ldr	r2, [pc, #352]	@ (8002fd4 <ADC_Init+0x1f4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d022      	beq.n	8002ebe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6899      	ldr	r1, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ea8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6899      	ldr	r1, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	e00f      	b.n	8002ede <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ecc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002edc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0202 	bic.w	r2, r2, #2
 8002eec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6899      	ldr	r1, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	7e1b      	ldrb	r3, [r3, #24]
 8002ef8:	005a      	lsls	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d01b      	beq.n	8002f44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f1a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002f2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6859      	ldr	r1, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	3b01      	subs	r3, #1
 8002f38:	035a      	lsls	r2, r3, #13
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	e007      	b.n	8002f54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f52:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002f62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	051a      	lsls	r2, r3, #20
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6899      	ldr	r1, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f96:	025a      	lsls	r2, r3, #9
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6899      	ldr	r1, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	029a      	lsls	r2, r3, #10
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	609a      	str	r2, [r3, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40012300 	.word	0x40012300
 8002fd4:	0f000001 	.word	0x0f000001

08002fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800301c <__NVIC_SetPriorityGrouping+0x44>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003000:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800300a:	4a04      	ldr	r2, [pc, #16]	@ (800301c <__NVIC_SetPriorityGrouping+0x44>)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	60d3      	str	r3, [r2, #12]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003024:	4b04      	ldr	r3, [pc, #16]	@ (8003038 <__NVIC_GetPriorityGrouping+0x18>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f003 0307 	and.w	r3, r3, #7
}
 800302e:	4618      	mov	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	2b00      	cmp	r3, #0
 800304c:	db0b      	blt.n	8003066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	f003 021f 	and.w	r2, r3, #31
 8003054:	4907      	ldr	r1, [pc, #28]	@ (8003074 <__NVIC_EnableIRQ+0x38>)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	2001      	movs	r0, #1
 800305e:	fa00 f202 	lsl.w	r2, r0, r2
 8003062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000e100 	.word	0xe000e100

08003078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	6039      	str	r1, [r7, #0]
 8003082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003088:	2b00      	cmp	r3, #0
 800308a:	db0a      	blt.n	80030a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	b2da      	uxtb	r2, r3
 8003090:	490c      	ldr	r1, [pc, #48]	@ (80030c4 <__NVIC_SetPriority+0x4c>)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	0112      	lsls	r2, r2, #4
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	440b      	add	r3, r1
 800309c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030a0:	e00a      	b.n	80030b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	4908      	ldr	r1, [pc, #32]	@ (80030c8 <__NVIC_SetPriority+0x50>)
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	3b04      	subs	r3, #4
 80030b0:	0112      	lsls	r2, r2, #4
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	440b      	add	r3, r1
 80030b6:	761a      	strb	r2, [r3, #24]
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	e000e100 	.word	0xe000e100
 80030c8:	e000ed00 	.word	0xe000ed00

080030cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	@ 0x24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f1c3 0307 	rsb	r3, r3, #7
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	bf28      	it	cs
 80030ea:	2304      	movcs	r3, #4
 80030ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3304      	adds	r3, #4
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d902      	bls.n	80030fc <NVIC_EncodePriority+0x30>
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3b03      	subs	r3, #3
 80030fa:	e000      	b.n	80030fe <NVIC_EncodePriority+0x32>
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003100:	f04f 32ff 	mov.w	r2, #4294967295
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43da      	mvns	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	401a      	ands	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003114:	f04f 31ff 	mov.w	r1, #4294967295
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	fa01 f303 	lsl.w	r3, r1, r3
 800311e:	43d9      	mvns	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003124:	4313      	orrs	r3, r2
         );
}
 8003126:	4618      	mov	r0, r3
 8003128:	3724      	adds	r7, #36	@ 0x24
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3b01      	subs	r3, #1
 8003140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003144:	d301      	bcc.n	800314a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003146:	2301      	movs	r3, #1
 8003148:	e00f      	b.n	800316a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800314a:	4a0a      	ldr	r2, [pc, #40]	@ (8003174 <SysTick_Config+0x40>)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3b01      	subs	r3, #1
 8003150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003152:	210f      	movs	r1, #15
 8003154:	f04f 30ff 	mov.w	r0, #4294967295
 8003158:	f7ff ff8e 	bl	8003078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800315c:	4b05      	ldr	r3, [pc, #20]	@ (8003174 <SysTick_Config+0x40>)
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003162:	4b04      	ldr	r3, [pc, #16]	@ (8003174 <SysTick_Config+0x40>)
 8003164:	2207      	movs	r2, #7
 8003166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	e000e010 	.word	0xe000e010

08003178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff ff29 	bl	8002fd8 <__NVIC_SetPriorityGrouping>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800318e:	b580      	push	{r7, lr}
 8003190:	b086      	sub	sp, #24
 8003192:	af00      	add	r7, sp, #0
 8003194:	4603      	mov	r3, r0
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031a0:	f7ff ff3e 	bl	8003020 <__NVIC_GetPriorityGrouping>
 80031a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	6978      	ldr	r0, [r7, #20]
 80031ac:	f7ff ff8e 	bl	80030cc <NVIC_EncodePriority>
 80031b0:	4602      	mov	r2, r0
 80031b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031b6:	4611      	mov	r1, r2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff5d 	bl	8003078 <__NVIC_SetPriority>
}
 80031be:	bf00      	nop
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	4603      	mov	r3, r0
 80031ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff31 	bl	800303c <__NVIC_EnableIRQ>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff ffa2 	bl	8003134 <SysTick_Config>
 80031f0:	4603      	mov	r3, r0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003208:	f7ff fc44 	bl	8002a94 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e099      	b.n	800334c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0201 	bic.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003238:	e00f      	b.n	800325a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800323a:	f7ff fc2b 	bl	8002a94 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b05      	cmp	r3, #5
 8003246:	d908      	bls.n	800325a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2203      	movs	r2, #3
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e078      	b.n	800334c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e8      	bne.n	800323a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4b38      	ldr	r3, [pc, #224]	@ (8003354 <HAL_DMA_Init+0x158>)
 8003274:	4013      	ands	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003286:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003292:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d107      	bne.n	80032c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032bc:	4313      	orrs	r3, r2
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f023 0307 	bic.w	r3, r3, #7
 80032da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d117      	bne.n	800331e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00e      	beq.n	800331e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fa6f 	bl	80037e4 <DMA_CheckFifoParam>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2240      	movs	r2, #64	@ 0x40
 8003310:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800331a:	2301      	movs	r3, #1
 800331c:	e016      	b.n	800334c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fa26 	bl	8003778 <DMA_CalcBaseAndBitshift>
 800332c:	4603      	mov	r3, r0
 800332e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003334:	223f      	movs	r2, #63	@ 0x3f
 8003336:	409a      	lsls	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	f010803f 	.word	0xf010803f

08003358 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_DMA_Start_IT+0x26>
 800337a:	2302      	movs	r3, #2
 800337c:	e040      	b.n	8003400 <HAL_DMA_Start_IT+0xa8>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d12f      	bne.n	80033f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2202      	movs	r2, #2
 8003396:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f9b8 	bl	800371c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b0:	223f      	movs	r2, #63	@ 0x3f
 80033b2:	409a      	lsls	r2, r3
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0216 	orr.w	r2, r2, #22
 80033c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0208 	orr.w	r2, r2, #8
 80033de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	e005      	b.n	80033fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
 80033fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003414:	4b8e      	ldr	r3, [pc, #568]	@ (8003650 <HAL_DMA_IRQHandler+0x248>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a8e      	ldr	r2, [pc, #568]	@ (8003654 <HAL_DMA_IRQHandler+0x24c>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	0a9b      	lsrs	r3, r3, #10
 8003420:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003426:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003432:	2208      	movs	r2, #8
 8003434:	409a      	lsls	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d01a      	beq.n	8003474 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d013      	beq.n	8003474 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0204 	bic.w	r2, r2, #4
 800345a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003460:	2208      	movs	r2, #8
 8003462:	409a      	lsls	r2, r3
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346c:	f043 0201 	orr.w	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003478:	2201      	movs	r2, #1
 800347a:	409a      	lsls	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d012      	beq.n	80034aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00b      	beq.n	80034aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003496:	2201      	movs	r2, #1
 8003498:	409a      	lsls	r2, r3
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a2:	f043 0202 	orr.w	r2, r3, #2
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ae:	2204      	movs	r2, #4
 80034b0:	409a      	lsls	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4013      	ands	r3, r2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d012      	beq.n	80034e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00b      	beq.n	80034e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034cc:	2204      	movs	r2, #4
 80034ce:	409a      	lsls	r2, r3
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d8:	f043 0204 	orr.w	r2, r3, #4
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e4:	2210      	movs	r2, #16
 80034e6:	409a      	lsls	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d043      	beq.n	8003578 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d03c      	beq.n	8003578 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003502:	2210      	movs	r2, #16
 8003504:	409a      	lsls	r2, r3
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d018      	beq.n	800354a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d108      	bne.n	8003538 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d024      	beq.n	8003578 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	4798      	blx	r3
 8003536:	e01f      	b.n	8003578 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01b      	beq.n	8003578 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
 8003548:	e016      	b.n	8003578 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d107      	bne.n	8003568 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0208 	bic.w	r2, r2, #8
 8003566:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357c:	2220      	movs	r2, #32
 800357e:	409a      	lsls	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 808f 	beq.w	80036a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 8087 	beq.w	80036a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359e:	2220      	movs	r2, #32
 80035a0:	409a      	lsls	r2, r3
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b05      	cmp	r3, #5
 80035b0:	d136      	bne.n	8003620 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0216 	bic.w	r2, r2, #22
 80035c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695a      	ldr	r2, [r3, #20]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d103      	bne.n	80035e2 <HAL_DMA_IRQHandler+0x1da>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0208 	bic.w	r2, r2, #8
 80035f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f6:	223f      	movs	r2, #63	@ 0x3f
 80035f8:	409a      	lsls	r2, r3
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003612:	2b00      	cmp	r3, #0
 8003614:	d07e      	beq.n	8003714 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	4798      	blx	r3
        }
        return;
 800361e:	e079      	b.n	8003714 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d01d      	beq.n	800366a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10d      	bne.n	8003658 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003640:	2b00      	cmp	r3, #0
 8003642:	d031      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	4798      	blx	r3
 800364c:	e02c      	b.n	80036a8 <HAL_DMA_IRQHandler+0x2a0>
 800364e:	bf00      	nop
 8003650:	20000000 	.word	0x20000000
 8003654:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365c:	2b00      	cmp	r3, #0
 800365e:	d023      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	4798      	blx	r3
 8003668:	e01e      	b.n	80036a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10f      	bne.n	8003698 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0210 	bic.w	r2, r2, #16
 8003686:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d032      	beq.n	8003716 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d022      	beq.n	8003702 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2205      	movs	r2, #5
 80036c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	3301      	adds	r3, #1
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d307      	bcc.n	80036f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f2      	bne.n	80036d4 <HAL_DMA_IRQHandler+0x2cc>
 80036ee:	e000      	b.n	80036f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d005      	beq.n	8003716 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	4798      	blx	r3
 8003712:	e000      	b.n	8003716 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003714:	bf00      	nop
    }
  }
}
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003738:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b40      	cmp	r3, #64	@ 0x40
 8003748:	d108      	bne.n	800375c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800375a:	e007      	b.n	800376c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	60da      	str	r2, [r3, #12]
}
 800376c:	bf00      	nop
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	3b10      	subs	r3, #16
 8003788:	4a14      	ldr	r2, [pc, #80]	@ (80037dc <DMA_CalcBaseAndBitshift+0x64>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	091b      	lsrs	r3, r3, #4
 8003790:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003792:	4a13      	ldr	r2, [pc, #76]	@ (80037e0 <DMA_CalcBaseAndBitshift+0x68>)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d909      	bls.n	80037ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80037ae:	f023 0303 	bic.w	r3, r3, #3
 80037b2:	1d1a      	adds	r2, r3, #4
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80037b8:	e007      	b.n	80037ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80037c2:	f023 0303 	bic.w	r3, r3, #3
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	aaaaaaab 	.word	0xaaaaaaab
 80037e0:	0800b05c 	.word	0x0800b05c

080037e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d11f      	bne.n	800383e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b03      	cmp	r3, #3
 8003802:	d856      	bhi.n	80038b2 <DMA_CheckFifoParam+0xce>
 8003804:	a201      	add	r2, pc, #4	@ (adr r2, 800380c <DMA_CheckFifoParam+0x28>)
 8003806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380a:	bf00      	nop
 800380c:	0800381d 	.word	0x0800381d
 8003810:	0800382f 	.word	0x0800382f
 8003814:	0800381d 	.word	0x0800381d
 8003818:	080038b3 	.word	0x080038b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003820:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d046      	beq.n	80038b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800382c:	e043      	b.n	80038b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003832:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003836:	d140      	bne.n	80038ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800383c:	e03d      	b.n	80038ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003846:	d121      	bne.n	800388c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b03      	cmp	r3, #3
 800384c:	d837      	bhi.n	80038be <DMA_CheckFifoParam+0xda>
 800384e:	a201      	add	r2, pc, #4	@ (adr r2, 8003854 <DMA_CheckFifoParam+0x70>)
 8003850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003854:	08003865 	.word	0x08003865
 8003858:	0800386b 	.word	0x0800386b
 800385c:	08003865 	.word	0x08003865
 8003860:	0800387d 	.word	0x0800387d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
      break;
 8003868:	e030      	b.n	80038cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d025      	beq.n	80038c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800387a:	e022      	b.n	80038c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003880:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003884:	d11f      	bne.n	80038c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800388a:	e01c      	b.n	80038c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d903      	bls.n	800389a <DMA_CheckFifoParam+0xb6>
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b03      	cmp	r3, #3
 8003896:	d003      	beq.n	80038a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003898:	e018      	b.n	80038cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
      break;
 800389e:	e015      	b.n	80038cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00e      	beq.n	80038ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
      break;
 80038b0:	e00b      	b.n	80038ca <DMA_CheckFifoParam+0xe6>
      break;
 80038b2:	bf00      	nop
 80038b4:	e00a      	b.n	80038cc <DMA_CheckFifoParam+0xe8>
      break;
 80038b6:	bf00      	nop
 80038b8:	e008      	b.n	80038cc <DMA_CheckFifoParam+0xe8>
      break;
 80038ba:	bf00      	nop
 80038bc:	e006      	b.n	80038cc <DMA_CheckFifoParam+0xe8>
      break;
 80038be:	bf00      	nop
 80038c0:	e004      	b.n	80038cc <DMA_CheckFifoParam+0xe8>
      break;
 80038c2:	bf00      	nop
 80038c4:	e002      	b.n	80038cc <DMA_CheckFifoParam+0xe8>
      break;   
 80038c6:	bf00      	nop
 80038c8:	e000      	b.n	80038cc <DMA_CheckFifoParam+0xe8>
      break;
 80038ca:	bf00      	nop
    }
  } 
  
  return status; 
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop

080038dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038dc:	b480      	push	{r7}
 80038de:	b089      	sub	sp, #36	@ 0x24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	e165      	b.n	8003bc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038f8:	2201      	movs	r2, #1
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	429a      	cmp	r2, r3
 8003912:	f040 8154 	bne.w	8003bbe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b01      	cmp	r3, #1
 8003920:	d005      	beq.n	800392e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800392a:	2b02      	cmp	r3, #2
 800392c:	d130      	bne.n	8003990 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	2203      	movs	r2, #3
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4013      	ands	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4313      	orrs	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003964:	2201      	movs	r2, #1
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 0201 	and.w	r2, r3, #1
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4313      	orrs	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	2b03      	cmp	r3, #3
 800399a:	d017      	beq.n	80039cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	2203      	movs	r2, #3
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d123      	bne.n	8003a20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	08da      	lsrs	r2, r3, #3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3208      	adds	r2, #8
 80039e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	220f      	movs	r2, #15
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	08da      	lsrs	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3208      	adds	r2, #8
 8003a1a:	69b9      	ldr	r1, [r7, #24]
 8003a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	2203      	movs	r2, #3
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4013      	ands	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 0203 	and.w	r2, r3, #3
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80ae 	beq.w	8003bbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	4b5d      	ldr	r3, [pc, #372]	@ (8003bdc <HAL_GPIO_Init+0x300>)
 8003a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6a:	4a5c      	ldr	r2, [pc, #368]	@ (8003bdc <HAL_GPIO_Init+0x300>)
 8003a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a72:	4b5a      	ldr	r3, [pc, #360]	@ (8003bdc <HAL_GPIO_Init+0x300>)
 8003a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a7e:	4a58      	ldr	r2, [pc, #352]	@ (8003be0 <HAL_GPIO_Init+0x304>)
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	089b      	lsrs	r3, r3, #2
 8003a84:	3302      	adds	r3, #2
 8003a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	220f      	movs	r2, #15
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a4f      	ldr	r2, [pc, #316]	@ (8003be4 <HAL_GPIO_Init+0x308>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d025      	beq.n	8003af6 <HAL_GPIO_Init+0x21a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a4e      	ldr	r2, [pc, #312]	@ (8003be8 <HAL_GPIO_Init+0x30c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d01f      	beq.n	8003af2 <HAL_GPIO_Init+0x216>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a4d      	ldr	r2, [pc, #308]	@ (8003bec <HAL_GPIO_Init+0x310>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d019      	beq.n	8003aee <HAL_GPIO_Init+0x212>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a4c      	ldr	r2, [pc, #304]	@ (8003bf0 <HAL_GPIO_Init+0x314>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d013      	beq.n	8003aea <HAL_GPIO_Init+0x20e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a4b      	ldr	r2, [pc, #300]	@ (8003bf4 <HAL_GPIO_Init+0x318>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00d      	beq.n	8003ae6 <HAL_GPIO_Init+0x20a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a4a      	ldr	r2, [pc, #296]	@ (8003bf8 <HAL_GPIO_Init+0x31c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d007      	beq.n	8003ae2 <HAL_GPIO_Init+0x206>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a49      	ldr	r2, [pc, #292]	@ (8003bfc <HAL_GPIO_Init+0x320>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d101      	bne.n	8003ade <HAL_GPIO_Init+0x202>
 8003ada:	2306      	movs	r3, #6
 8003adc:	e00c      	b.n	8003af8 <HAL_GPIO_Init+0x21c>
 8003ade:	2307      	movs	r3, #7
 8003ae0:	e00a      	b.n	8003af8 <HAL_GPIO_Init+0x21c>
 8003ae2:	2305      	movs	r3, #5
 8003ae4:	e008      	b.n	8003af8 <HAL_GPIO_Init+0x21c>
 8003ae6:	2304      	movs	r3, #4
 8003ae8:	e006      	b.n	8003af8 <HAL_GPIO_Init+0x21c>
 8003aea:	2303      	movs	r3, #3
 8003aec:	e004      	b.n	8003af8 <HAL_GPIO_Init+0x21c>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e002      	b.n	8003af8 <HAL_GPIO_Init+0x21c>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <HAL_GPIO_Init+0x21c>
 8003af6:	2300      	movs	r3, #0
 8003af8:	69fa      	ldr	r2, [r7, #28]
 8003afa:	f002 0203 	and.w	r2, r2, #3
 8003afe:	0092      	lsls	r2, r2, #2
 8003b00:	4093      	lsls	r3, r2
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b08:	4935      	ldr	r1, [pc, #212]	@ (8003be0 <HAL_GPIO_Init+0x304>)
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	089b      	lsrs	r3, r3, #2
 8003b0e:	3302      	adds	r3, #2
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b16:	4b3a      	ldr	r3, [pc, #232]	@ (8003c00 <HAL_GPIO_Init+0x324>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4013      	ands	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b3a:	4a31      	ldr	r2, [pc, #196]	@ (8003c00 <HAL_GPIO_Init+0x324>)
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b40:	4b2f      	ldr	r3, [pc, #188]	@ (8003c00 <HAL_GPIO_Init+0x324>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b64:	4a26      	ldr	r2, [pc, #152]	@ (8003c00 <HAL_GPIO_Init+0x324>)
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b6a:	4b25      	ldr	r3, [pc, #148]	@ (8003c00 <HAL_GPIO_Init+0x324>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	43db      	mvns	r3, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4013      	ands	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003c00 <HAL_GPIO_Init+0x324>)
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b94:	4b1a      	ldr	r3, [pc, #104]	@ (8003c00 <HAL_GPIO_Init+0x324>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bb8:	4a11      	ldr	r2, [pc, #68]	@ (8003c00 <HAL_GPIO_Init+0x324>)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	61fb      	str	r3, [r7, #28]
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	2b0f      	cmp	r3, #15
 8003bc8:	f67f ae96 	bls.w	80038f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bcc:	bf00      	nop
 8003bce:	bf00      	nop
 8003bd0:	3724      	adds	r7, #36	@ 0x24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40013800 	.word	0x40013800
 8003be4:	40020000 	.word	0x40020000
 8003be8:	40020400 	.word	0x40020400
 8003bec:	40020800 	.word	0x40020800
 8003bf0:	40020c00 	.word	0x40020c00
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	40021400 	.word	0x40021400
 8003bfc:	40021800 	.word	0x40021800
 8003c00:	40013c00 	.word	0x40013c00

08003c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	807b      	strh	r3, [r7, #2]
 8003c10:	4613      	mov	r3, r2
 8003c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c14:	787b      	ldrb	r3, [r7, #1]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c1a:	887a      	ldrh	r2, [r7, #2]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c20:	e003      	b.n	8003c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c22:	887b      	ldrh	r3, [r7, #2]
 8003c24:	041a      	lsls	r2, r3, #16
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	619a      	str	r2, [r3, #24]
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e12b      	b.n	8003ea2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fd feb0 	bl	80019c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2224      	movs	r2, #36	@ 0x24
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0201 	bic.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c9c:	f001 f8b8 	bl	8004e10 <HAL_RCC_GetPCLK1Freq>
 8003ca0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4a81      	ldr	r2, [pc, #516]	@ (8003eac <HAL_I2C_Init+0x274>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d807      	bhi.n	8003cbc <HAL_I2C_Init+0x84>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4a80      	ldr	r2, [pc, #512]	@ (8003eb0 <HAL_I2C_Init+0x278>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	bf94      	ite	ls
 8003cb4:	2301      	movls	r3, #1
 8003cb6:	2300      	movhi	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	e006      	b.n	8003cca <HAL_I2C_Init+0x92>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4a7d      	ldr	r2, [pc, #500]	@ (8003eb4 <HAL_I2C_Init+0x27c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	bf94      	ite	ls
 8003cc4:	2301      	movls	r3, #1
 8003cc6:	2300      	movhi	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e0e7      	b.n	8003ea2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4a78      	ldr	r2, [pc, #480]	@ (8003eb8 <HAL_I2C_Init+0x280>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	0c9b      	lsrs	r3, r3, #18
 8003cdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4a6a      	ldr	r2, [pc, #424]	@ (8003eac <HAL_I2C_Init+0x274>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d802      	bhi.n	8003d0c <HAL_I2C_Init+0xd4>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	e009      	b.n	8003d20 <HAL_I2C_Init+0xe8>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d12:	fb02 f303 	mul.w	r3, r2, r3
 8003d16:	4a69      	ldr	r2, [pc, #420]	@ (8003ebc <HAL_I2C_Init+0x284>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	099b      	lsrs	r3, r3, #6
 8003d1e:	3301      	adds	r3, #1
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	430b      	orrs	r3, r1
 8003d26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	495c      	ldr	r1, [pc, #368]	@ (8003eac <HAL_I2C_Init+0x274>)
 8003d3c:	428b      	cmp	r3, r1
 8003d3e:	d819      	bhi.n	8003d74 <HAL_I2C_Init+0x13c>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1e59      	subs	r1, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d4e:	1c59      	adds	r1, r3, #1
 8003d50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d54:	400b      	ands	r3, r1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_I2C_Init+0x138>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1e59      	subs	r1, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d68:	3301      	adds	r3, #1
 8003d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6e:	e051      	b.n	8003e14 <HAL_I2C_Init+0x1dc>
 8003d70:	2304      	movs	r3, #4
 8003d72:	e04f      	b.n	8003e14 <HAL_I2C_Init+0x1dc>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d111      	bne.n	8003da0 <HAL_I2C_Init+0x168>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1e58      	subs	r0, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6859      	ldr	r1, [r3, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	440b      	add	r3, r1
 8003d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d8e:	3301      	adds	r3, #1
 8003d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	bf0c      	ite	eq
 8003d98:	2301      	moveq	r3, #1
 8003d9a:	2300      	movne	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	e012      	b.n	8003dc6 <HAL_I2C_Init+0x18e>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	1e58      	subs	r0, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6859      	ldr	r1, [r3, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	0099      	lsls	r1, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db6:	3301      	adds	r3, #1
 8003db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_I2C_Init+0x196>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e022      	b.n	8003e14 <HAL_I2C_Init+0x1dc>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10e      	bne.n	8003df4 <HAL_I2C_Init+0x1bc>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1e58      	subs	r0, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6859      	ldr	r1, [r3, #4]
 8003dde:	460b      	mov	r3, r1
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	440b      	add	r3, r1
 8003de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de8:	3301      	adds	r3, #1
 8003dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003df2:	e00f      	b.n	8003e14 <HAL_I2C_Init+0x1dc>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1e58      	subs	r0, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6859      	ldr	r1, [r3, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	0099      	lsls	r1, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	6809      	ldr	r1, [r1, #0]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69da      	ldr	r2, [r3, #28]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6911      	ldr	r1, [r2, #16]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	68d2      	ldr	r2, [r2, #12]
 8003e4e:	4311      	orrs	r1, r2
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	430b      	orrs	r3, r1
 8003e56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695a      	ldr	r2, [r3, #20]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	000186a0 	.word	0x000186a0
 8003eb0:	001e847f 	.word	0x001e847f
 8003eb4:	003d08ff 	.word	0x003d08ff
 8003eb8:	431bde83 	.word	0x431bde83
 8003ebc:	10624dd3 	.word	0x10624dd3

08003ec0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	460b      	mov	r3, r1
 8003ece:	817b      	strh	r3, [r7, #10]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ed4:	f7fe fdde 	bl	8002a94 <HAL_GetTick>
 8003ed8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	f040 80e0 	bne.w	80040a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	2319      	movs	r3, #25
 8003eee:	2201      	movs	r2, #1
 8003ef0:	4970      	ldr	r1, [pc, #448]	@ (80040b4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fc64 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003efe:	2302      	movs	r3, #2
 8003f00:	e0d3      	b.n	80040aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_I2C_Master_Transmit+0x50>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e0cc      	b.n	80040aa <HAL_I2C_Master_Transmit+0x1ea>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d007      	beq.n	8003f36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0201 	orr.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2221      	movs	r2, #33	@ 0x21
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2210      	movs	r2, #16
 8003f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	893a      	ldrh	r2, [r7, #8]
 8003f66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a50      	ldr	r2, [pc, #320]	@ (80040b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f78:	8979      	ldrh	r1, [r7, #10]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	6a3a      	ldr	r2, [r7, #32]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 face 	bl	8004520 <I2C_MasterRequestWrite>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e08d      	b.n	80040aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003fa4:	e066      	b.n	8004074 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	6a39      	ldr	r1, [r7, #32]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 fd22 	bl	80049f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d107      	bne.n	8003fce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e06b      	b.n	80040aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b04      	cmp	r3, #4
 800400e:	d11b      	bne.n	8004048 <HAL_I2C_Master_Transmit+0x188>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004014:	2b00      	cmp	r3, #0
 8004016:	d017      	beq.n	8004048 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	781a      	ldrb	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	6a39      	ldr	r1, [r7, #32]
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 fd19 	bl	8004a84 <I2C_WaitOnBTFFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00d      	beq.n	8004074 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405c:	2b04      	cmp	r3, #4
 800405e:	d107      	bne.n	8004070 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800406e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e01a      	b.n	80040aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004078:	2b00      	cmp	r3, #0
 800407a:	d194      	bne.n	8003fa6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800408a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	e000      	b.n	80040aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80040a8:	2302      	movs	r3, #2
  }
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	00100002 	.word	0x00100002
 80040b8:	ffff0000 	.word	0xffff0000

080040bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08c      	sub	sp, #48	@ 0x30
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	461a      	mov	r2, r3
 80040c8:	460b      	mov	r3, r1
 80040ca:	817b      	strh	r3, [r7, #10]
 80040cc:	4613      	mov	r3, r2
 80040ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040d0:	f7fe fce0 	bl	8002a94 <HAL_GetTick>
 80040d4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b20      	cmp	r3, #32
 80040e0:	f040 8217 	bne.w	8004512 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	2319      	movs	r3, #25
 80040ea:	2201      	movs	r2, #1
 80040ec:	497c      	ldr	r1, [pc, #496]	@ (80042e0 <HAL_I2C_Master_Receive+0x224>)
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fb66 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80040fa:	2302      	movs	r3, #2
 80040fc:	e20a      	b.n	8004514 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_I2C_Master_Receive+0x50>
 8004108:	2302      	movs	r3, #2
 800410a:	e203      	b.n	8004514 <HAL_I2C_Master_Receive+0x458>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b01      	cmp	r3, #1
 8004120:	d007      	beq.n	8004132 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f042 0201 	orr.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004140:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2222      	movs	r2, #34	@ 0x22
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2210      	movs	r2, #16
 800414e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	893a      	ldrh	r2, [r7, #8]
 8004162:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4a5c      	ldr	r2, [pc, #368]	@ (80042e4 <HAL_I2C_Master_Receive+0x228>)
 8004172:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004174:	8979      	ldrh	r1, [r7, #10]
 8004176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fa52 	bl	8004624 <I2C_MasterRequestRead>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e1c4      	b.n	8004514 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800418e:	2b00      	cmp	r3, #0
 8004190:	d113      	bne.n	80041ba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004192:	2300      	movs	r3, #0
 8004194:	623b      	str	r3, [r7, #32]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	623b      	str	r3, [r7, #32]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	623b      	str	r3, [r7, #32]
 80041a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	e198      	b.n	80044ec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d11b      	bne.n	80041fa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	e178      	b.n	80044ec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d11b      	bne.n	800423a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004210:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004220:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004222:	2300      	movs	r3, #0
 8004224:	61bb      	str	r3, [r7, #24]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	61bb      	str	r3, [r7, #24]
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	e158      	b.n	80044ec <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004248:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004260:	e144      	b.n	80044ec <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004266:	2b03      	cmp	r3, #3
 8004268:	f200 80f1 	bhi.w	800444e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004270:	2b01      	cmp	r3, #1
 8004272:	d123      	bne.n	80042bc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004276:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 fc4b 	bl	8004b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e145      	b.n	8004514 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042ba:	e117      	b.n	80044ec <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d14e      	bne.n	8004362 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ca:	2200      	movs	r2, #0
 80042cc:	4906      	ldr	r1, [pc, #24]	@ (80042e8 <HAL_I2C_Master_Receive+0x22c>)
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 fa76 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e11a      	b.n	8004514 <HAL_I2C_Master_Receive+0x458>
 80042de:	bf00      	nop
 80042e0:	00100002 	.word	0x00100002
 80042e4:	ffff0000 	.word	0xffff0000
 80042e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004360:	e0c4      	b.n	80044ec <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004368:	2200      	movs	r2, #0
 800436a:	496c      	ldr	r1, [pc, #432]	@ (800451c <HAL_I2C_Master_Receive+0x460>)
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 fa27 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0cb      	b.n	8004514 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800438a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c4:	2200      	movs	r2, #0
 80043c6:	4955      	ldr	r1, [pc, #340]	@ (800451c <HAL_I2C_Master_Receive+0x460>)
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f9f9 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e09d      	b.n	8004514 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800444c:	e04e      	b.n	80044ec <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800444e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004450:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 fb5e 	bl	8004b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e058      	b.n	8004514 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d124      	bne.n	80044ec <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d107      	bne.n	80044ba <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044b8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f47f aeb6 	bne.w	8004262 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	e000      	b.n	8004514 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004512:	2302      	movs	r3, #2
  }
}
 8004514:	4618      	mov	r0, r3
 8004516:	3728      	adds	r7, #40	@ 0x28
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	00010004 	.word	0x00010004

08004520 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af02      	add	r7, sp, #8
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	607a      	str	r2, [r7, #4]
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	460b      	mov	r3, r1
 800452e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004534:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d006      	beq.n	800454a <I2C_MasterRequestWrite+0x2a>
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d003      	beq.n	800454a <I2C_MasterRequestWrite+0x2a>
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004548:	d108      	bne.n	800455c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	e00b      	b.n	8004574 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004560:	2b12      	cmp	r3, #18
 8004562:	d107      	bne.n	8004574 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004572:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 f91d 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00d      	beq.n	80045a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800459a:	d103      	bne.n	80045a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e035      	b.n	8004614 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045b0:	d108      	bne.n	80045c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045b2:	897b      	ldrh	r3, [r7, #10]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	461a      	mov	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045c0:	611a      	str	r2, [r3, #16]
 80045c2:	e01b      	b.n	80045fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045c4:	897b      	ldrh	r3, [r7, #10]
 80045c6:	11db      	asrs	r3, r3, #7
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	f003 0306 	and.w	r3, r3, #6
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	f063 030f 	orn	r3, r3, #15
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	490e      	ldr	r1, [pc, #56]	@ (800461c <I2C_MasterRequestWrite+0xfc>)
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f966 	bl	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e010      	b.n	8004614 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045f2:	897b      	ldrh	r3, [r7, #10]
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	4907      	ldr	r1, [pc, #28]	@ (8004620 <I2C_MasterRequestWrite+0x100>)
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f956 	bl	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	00010008 	.word	0x00010008
 8004620:	00010002 	.word	0x00010002

08004624 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af02      	add	r7, sp, #8
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	607a      	str	r2, [r7, #4]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	460b      	mov	r3, r1
 8004632:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004648:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b08      	cmp	r3, #8
 800464e:	d006      	beq.n	800465e <I2C_MasterRequestRead+0x3a>
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d003      	beq.n	800465e <I2C_MasterRequestRead+0x3a>
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800465c:	d108      	bne.n	8004670 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e00b      	b.n	8004688 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004674:	2b11      	cmp	r3, #17
 8004676:	d107      	bne.n	8004688 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004686:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f893 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ae:	d103      	bne.n	80046b8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e079      	b.n	80047b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046c4:	d108      	bne.n	80046d8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046c6:	897b      	ldrh	r3, [r7, #10]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	611a      	str	r2, [r3, #16]
 80046d6:	e05f      	b.n	8004798 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046d8:	897b      	ldrh	r3, [r7, #10]
 80046da:	11db      	asrs	r3, r3, #7
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	f003 0306 	and.w	r3, r3, #6
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f063 030f 	orn	r3, r3, #15
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	4930      	ldr	r1, [pc, #192]	@ (80047b8 <I2C_MasterRequestRead+0x194>)
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 f8dc 	bl	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e054      	b.n	80047b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004706:	897b      	ldrh	r3, [r7, #10]
 8004708:	b2da      	uxtb	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	4929      	ldr	r1, [pc, #164]	@ (80047bc <I2C_MasterRequestRead+0x198>)
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f8cc 	bl	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e044      	b.n	80047b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004726:	2300      	movs	r3, #0
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800474a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 f831 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00d      	beq.n	8004780 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004772:	d103      	bne.n	800477c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800477a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e017      	b.n	80047b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004780:	897b      	ldrh	r3, [r7, #10]
 8004782:	11db      	asrs	r3, r3, #7
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f003 0306 	and.w	r3, r3, #6
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f063 030e 	orn	r3, r3, #14
 8004790:	b2da      	uxtb	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	4907      	ldr	r1, [pc, #28]	@ (80047bc <I2C_MasterRequestRead+0x198>)
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 f888 	bl	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	00010008 	.word	0x00010008
 80047bc:	00010002 	.word	0x00010002

080047c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	4613      	mov	r3, r2
 80047ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047d0:	e048      	b.n	8004864 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d8:	d044      	beq.n	8004864 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047da:	f7fe f95b 	bl	8002a94 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d302      	bcc.n	80047f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d139      	bne.n	8004864 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	0c1b      	lsrs	r3, r3, #16
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d10d      	bne.n	8004816 <I2C_WaitOnFlagUntilTimeout+0x56>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	43da      	mvns	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4013      	ands	r3, r2
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf0c      	ite	eq
 800480c:	2301      	moveq	r3, #1
 800480e:	2300      	movne	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	461a      	mov	r2, r3
 8004814:	e00c      	b.n	8004830 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	43da      	mvns	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	4013      	ands	r3, r2
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	bf0c      	ite	eq
 8004828:	2301      	moveq	r3, #1
 800482a:	2300      	movne	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	461a      	mov	r2, r3
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	429a      	cmp	r2, r3
 8004834:	d116      	bne.n	8004864 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004850:	f043 0220 	orr.w	r2, r3, #32
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e023      	b.n	80048ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	0c1b      	lsrs	r3, r3, #16
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b01      	cmp	r3, #1
 800486c:	d10d      	bne.n	800488a <I2C_WaitOnFlagUntilTimeout+0xca>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	43da      	mvns	r2, r3
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	4013      	ands	r3, r2
 800487a:	b29b      	uxth	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	bf0c      	ite	eq
 8004880:	2301      	moveq	r3, #1
 8004882:	2300      	movne	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	461a      	mov	r2, r3
 8004888:	e00c      	b.n	80048a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	43da      	mvns	r2, r3
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	4013      	ands	r3, r2
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf0c      	ite	eq
 800489c:	2301      	moveq	r3, #1
 800489e:	2300      	movne	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d093      	beq.n	80047d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048c2:	e071      	b.n	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048d2:	d123      	bne.n	800491c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004908:	f043 0204 	orr.w	r2, r3, #4
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e067      	b.n	80049ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004922:	d041      	beq.n	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004924:	f7fe f8b6 	bl	8002a94 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	429a      	cmp	r2, r3
 8004932:	d302      	bcc.n	800493a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d136      	bne.n	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	0c1b      	lsrs	r3, r3, #16
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b01      	cmp	r3, #1
 8004942:	d10c      	bne.n	800495e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	43da      	mvns	r2, r3
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4013      	ands	r3, r2
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	bf14      	ite	ne
 8004956:	2301      	movne	r3, #1
 8004958:	2300      	moveq	r3, #0
 800495a:	b2db      	uxtb	r3, r3
 800495c:	e00b      	b.n	8004976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	43da      	mvns	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	4013      	ands	r3, r2
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf14      	ite	ne
 8004970:	2301      	movne	r3, #1
 8004972:	2300      	moveq	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d016      	beq.n	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004994:	f043 0220 	orr.w	r2, r3, #32
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e021      	b.n	80049ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	0c1b      	lsrs	r3, r3, #16
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d10c      	bne.n	80049cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	43da      	mvns	r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4013      	ands	r3, r2
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bf14      	ite	ne
 80049c4:	2301      	movne	r3, #1
 80049c6:	2300      	moveq	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	e00b      	b.n	80049e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	43da      	mvns	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	4013      	ands	r3, r2
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	bf14      	ite	ne
 80049de:	2301      	movne	r3, #1
 80049e0:	2300      	moveq	r3, #0
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f47f af6d 	bne.w	80048c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a00:	e034      	b.n	8004a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f8e3 	bl	8004bce <I2C_IsAcknowledgeFailed>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e034      	b.n	8004a7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d028      	beq.n	8004a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1a:	f7fe f83b 	bl	8002a94 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d302      	bcc.n	8004a30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d11d      	bne.n	8004a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a3a:	2b80      	cmp	r3, #128	@ 0x80
 8004a3c:	d016      	beq.n	8004a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a58:	f043 0220 	orr.w	r2, r3, #32
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e007      	b.n	8004a7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a76:	2b80      	cmp	r3, #128	@ 0x80
 8004a78:	d1c3      	bne.n	8004a02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a90:	e034      	b.n	8004afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f89b 	bl	8004bce <I2C_IsAcknowledgeFailed>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e034      	b.n	8004b0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa8:	d028      	beq.n	8004afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aaa:	f7fd fff3 	bl	8002a94 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d302      	bcc.n	8004ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d11d      	bne.n	8004afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d016      	beq.n	8004afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae8:	f043 0220 	orr.w	r2, r3, #32
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e007      	b.n	8004b0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d1c3      	bne.n	8004a92 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b20:	e049      	b.n	8004bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f003 0310 	and.w	r3, r3, #16
 8004b2c:	2b10      	cmp	r3, #16
 8004b2e:	d119      	bne.n	8004b64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f06f 0210 	mvn.w	r2, #16
 8004b38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e030      	b.n	8004bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b64:	f7fd ff96 	bl	8002a94 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d302      	bcc.n	8004b7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d11d      	bne.n	8004bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b84:	2b40      	cmp	r3, #64	@ 0x40
 8004b86:	d016      	beq.n	8004bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	f043 0220 	orr.w	r2, r3, #32
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e007      	b.n	8004bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc0:	2b40      	cmp	r3, #64	@ 0x40
 8004bc2:	d1ae      	bne.n	8004b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004be4:	d11b      	bne.n	8004c1e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	f043 0204 	orr.w	r2, r3, #4
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e0cc      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c40:	4b68      	ldr	r3, [pc, #416]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d90c      	bls.n	8004c68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4e:	4b65      	ldr	r3, [pc, #404]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c56:	4b63      	ldr	r3, [pc, #396]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0b8      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d020      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c80:	4b59      	ldr	r3, [pc, #356]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	4a58      	ldr	r2, [pc, #352]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c98:	4b53      	ldr	r3, [pc, #332]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	4a52      	ldr	r2, [pc, #328]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ca2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca4:	4b50      	ldr	r3, [pc, #320]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	494d      	ldr	r1, [pc, #308]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d044      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cca:	4b47      	ldr	r3, [pc, #284]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d119      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e07f      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d003      	beq.n	8004cea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d107      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cea:	4b3f      	ldr	r3, [pc, #252]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d109      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e06f      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e067      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d0a:	4b37      	ldr	r3, [pc, #220]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f023 0203 	bic.w	r2, r3, #3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	4934      	ldr	r1, [pc, #208]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d1c:	f7fd feba 	bl	8002a94 <HAL_GetTick>
 8004d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d22:	e00a      	b.n	8004d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d24:	f7fd feb6 	bl	8002a94 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e04f      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 020c 	and.w	r2, r3, #12
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d1eb      	bne.n	8004d24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d4c:	4b25      	ldr	r3, [pc, #148]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d20c      	bcs.n	8004d74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5a:	4b22      	ldr	r3, [pc, #136]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d62:	4b20      	ldr	r3, [pc, #128]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d001      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e032      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d80:	4b19      	ldr	r3, [pc, #100]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4916      	ldr	r1, [pc, #88]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d9e:	4b12      	ldr	r3, [pc, #72]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	490e      	ldr	r1, [pc, #56]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004db2:	f000 fdb5 	bl	8005920 <HAL_RCC_GetSysClockFreq>
 8004db6:	4602      	mov	r2, r0
 8004db8:	4b0b      	ldr	r3, [pc, #44]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	490a      	ldr	r1, [pc, #40]	@ (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004dc4:	5ccb      	ldrb	r3, [r1, r3]
 8004dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dca:	4a09      	ldr	r2, [pc, #36]	@ (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004dce:	4b09      	ldr	r3, [pc, #36]	@ (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fd fe1a 	bl	8002a0c <HAL_InitTick>

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40023c00 	.word	0x40023c00
 8004de8:	40023800 	.word	0x40023800
 8004dec:	0800b044 	.word	0x0800b044
 8004df0:	20000000 	.word	0x20000000
 8004df4:	20000040 	.word	0x20000040

08004df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dfc:	4b03      	ldr	r3, [pc, #12]	@ (8004e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000000 	.word	0x20000000

08004e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e14:	f7ff fff0 	bl	8004df8 <HAL_RCC_GetHCLKFreq>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	4b05      	ldr	r3, [pc, #20]	@ (8004e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	0a9b      	lsrs	r3, r3, #10
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	4903      	ldr	r1, [pc, #12]	@ (8004e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e26:	5ccb      	ldrb	r3, [r1, r3]
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40023800 	.word	0x40023800
 8004e34:	0800b054 	.word	0x0800b054

08004e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08c      	sub	sp, #48	@ 0x30
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d010      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004e70:	4b6f      	ldr	r3, [pc, #444]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e76:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7e:	496c      	ldr	r1, [pc, #432]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d010      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004e9e:	4b64      	ldr	r3, [pc, #400]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ea4:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eac:	4960      	ldr	r1, [pc, #384]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d017      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ecc:	4b58      	ldr	r3, [pc, #352]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ed2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eda:	4955      	ldr	r1, [pc, #340]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004eec:	2301      	movs	r3, #1
 8004eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d017      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f08:	4b49      	ldr	r3, [pc, #292]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f16:	4946      	ldr	r1, [pc, #280]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f26:	d101      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004f34:	2301      	movs	r3, #1
 8004f36:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0320 	and.w	r3, r3, #32
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 808a 	beq.w	800505a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f46:	2300      	movs	r3, #0
 8004f48:	60bb      	str	r3, [r7, #8]
 8004f4a:	4b39      	ldr	r3, [pc, #228]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	4a38      	ldr	r2, [pc, #224]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f56:	4b36      	ldr	r3, [pc, #216]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f5e:	60bb      	str	r3, [r7, #8]
 8004f60:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f62:	4b34      	ldr	r3, [pc, #208]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a33      	ldr	r2, [pc, #204]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f6e:	f7fd fd91 	bl	8002a94 <HAL_GetTick>
 8004f72:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f74:	e008      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f76:	f7fd fd8d 	bl	8002a94 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e278      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f88:	4b2a      	ldr	r3, [pc, #168]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0f0      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f94:	4b26      	ldr	r3, [pc, #152]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f9c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d02f      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fac:	6a3a      	ldr	r2, [r7, #32]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d028      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fba:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fc8:	4a19      	ldr	r2, [pc, #100]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fce:	4b18      	ldr	r3, [pc, #96]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d114      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fda:	f7fd fd5b 	bl	8002a94 <HAL_GetTick>
 8004fde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe0:	e00a      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe2:	f7fd fd57 	bl	8002a94 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e240      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0ee      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005008:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800500c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005010:	d114      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005012:	4b07      	ldr	r3, [pc, #28]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005022:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005026:	4902      	ldr	r1, [pc, #8]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005028:	4313      	orrs	r3, r2
 800502a:	608b      	str	r3, [r1, #8]
 800502c:	e00c      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800502e:	bf00      	nop
 8005030:	40023800 	.word	0x40023800
 8005034:	40007000 	.word	0x40007000
 8005038:	42470e40 	.word	0x42470e40
 800503c:	4b4a      	ldr	r3, [pc, #296]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	4a49      	ldr	r2, [pc, #292]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005042:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005046:	6093      	str	r3, [r2, #8]
 8005048:	4b47      	ldr	r3, [pc, #284]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800504a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005054:	4944      	ldr	r1, [pc, #272]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005056:	4313      	orrs	r3, r2
 8005058:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	2b00      	cmp	r3, #0
 8005064:	d004      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800506c:	4b3f      	ldr	r3, [pc, #252]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800506e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800507c:	4b3a      	ldr	r3, [pc, #232]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800507e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005082:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800508a:	4937      	ldr	r1, [pc, #220]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800509e:	4b32      	ldr	r3, [pc, #200]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050a4:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ac:	492e      	ldr	r1, [pc, #184]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d011      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80050c0:	4b29      	ldr	r3, [pc, #164]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050c6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ce:	4926      	ldr	r1, [pc, #152]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050de:	d101      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80050e0:	2301      	movs	r3, #1
 80050e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80050f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050f6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fe:	491a      	ldr	r1, [pc, #104]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800510e:	2b00      	cmp	r3, #0
 8005110:	d011      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005112:	4b15      	ldr	r3, [pc, #84]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005114:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005118:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005120:	4911      	ldr	r1, [pc, #68]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800512c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005130:	d101      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005132:	2301      	movs	r3, #1
 8005134:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005138:	2b01      	cmp	r3, #1
 800513a:	d005      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005144:	f040 80ff 	bne.w	8005346 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005148:	4b09      	ldr	r3, [pc, #36]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800514e:	f7fd fca1 	bl	8002a94 <HAL_GetTick>
 8005152:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005154:	e00e      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005156:	f7fd fc9d 	bl	8002a94 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d907      	bls.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e188      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005168:	40023800 	.word	0x40023800
 800516c:	424711e0 	.word	0x424711e0
 8005170:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005174:	4b7e      	ldr	r3, [pc, #504]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1ea      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005190:	2b00      	cmp	r3, #0
 8005192:	d009      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800519c:	2b00      	cmp	r3, #0
 800519e:	d028      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d124      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80051a8:	4b71      	ldr	r3, [pc, #452]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051ae:	0c1b      	lsrs	r3, r3, #16
 80051b0:	f003 0303 	and.w	r3, r3, #3
 80051b4:	3301      	adds	r3, #1
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051c0:	0e1b      	lsrs	r3, r3, #24
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	019b      	lsls	r3, r3, #6
 80051d2:	431a      	orrs	r2, r3
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	085b      	lsrs	r3, r3, #1
 80051d8:	3b01      	subs	r3, #1
 80051da:	041b      	lsls	r3, r3, #16
 80051dc:	431a      	orrs	r2, r3
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	061b      	lsls	r3, r3, #24
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	071b      	lsls	r3, r3, #28
 80051ea:	4961      	ldr	r1, [pc, #388]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d004      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005202:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005206:	d00a      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005210:	2b00      	cmp	r3, #0
 8005212:	d035      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005218:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800521c:	d130      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800521e:	4b54      	ldr	r3, [pc, #336]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005224:	0c1b      	lsrs	r3, r3, #16
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	3301      	adds	r3, #1
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005230:	4b4f      	ldr	r3, [pc, #316]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005236:	0f1b      	lsrs	r3, r3, #28
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	019b      	lsls	r3, r3, #6
 8005248:	431a      	orrs	r2, r3
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	085b      	lsrs	r3, r3, #1
 800524e:	3b01      	subs	r3, #1
 8005250:	041b      	lsls	r3, r3, #16
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	061b      	lsls	r3, r3, #24
 800525a:	431a      	orrs	r2, r3
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	071b      	lsls	r3, r3, #28
 8005260:	4943      	ldr	r1, [pc, #268]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005262:	4313      	orrs	r3, r2
 8005264:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005268:	4b41      	ldr	r3, [pc, #260]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800526a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800526e:	f023 021f 	bic.w	r2, r3, #31
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005276:	3b01      	subs	r3, #1
 8005278:	493d      	ldr	r1, [pc, #244]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005288:	2b00      	cmp	r3, #0
 800528a:	d029      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005294:	d124      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005296:	4b36      	ldr	r3, [pc, #216]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800529c:	0c1b      	lsrs	r3, r3, #16
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	3301      	adds	r3, #1
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052a8:	4b31      	ldr	r3, [pc, #196]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052ae:	0f1b      	lsrs	r3, r3, #28
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	019b      	lsls	r3, r3, #6
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	085b      	lsrs	r3, r3, #1
 80052c8:	3b01      	subs	r3, #1
 80052ca:	041b      	lsls	r3, r3, #16
 80052cc:	431a      	orrs	r2, r3
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	061b      	lsls	r3, r3, #24
 80052d2:	431a      	orrs	r2, r3
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	071b      	lsls	r3, r3, #28
 80052d8:	4925      	ldr	r1, [pc, #148]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d016      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	019b      	lsls	r3, r3, #6
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	085b      	lsrs	r3, r3, #1
 80052fe:	3b01      	subs	r3, #1
 8005300:	041b      	lsls	r3, r3, #16
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	061b      	lsls	r3, r3, #24
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	071b      	lsls	r3, r3, #28
 8005312:	4917      	ldr	r1, [pc, #92]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800531a:	4b16      	ldr	r3, [pc, #88]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800531c:	2201      	movs	r2, #1
 800531e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005320:	f7fd fbb8 	bl	8002a94 <HAL_GetTick>
 8005324:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005326:	e008      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005328:	f7fd fbb4 	bl	8002a94 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e09f      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800533a:	4b0d      	ldr	r3, [pc, #52]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0f0      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8005346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005348:	2b01      	cmp	r3, #1
 800534a:	f040 8095 	bne.w	8005478 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800534e:	4b0a      	ldr	r3, [pc, #40]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005354:	f7fd fb9e 	bl	8002a94 <HAL_GetTick>
 8005358:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800535a:	e00f      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800535c:	f7fd fb9a 	bl	8002a94 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d908      	bls.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e085      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800536e:	bf00      	nop
 8005370:	40023800 	.word	0x40023800
 8005374:	42470068 	.word	0x42470068
 8005378:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800537c:	4b41      	ldr	r3, [pc, #260]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005384:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005388:	d0e8      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539a:	2b00      	cmp	r3, #0
 800539c:	d009      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d02b      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d127      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80053b2:	4b34      	ldr	r3, [pc, #208]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b8:	0c1b      	lsrs	r3, r3, #16
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	3301      	adds	r3, #1
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	699a      	ldr	r2, [r3, #24]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	019b      	lsls	r3, r3, #6
 80053ce:	431a      	orrs	r2, r3
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	085b      	lsrs	r3, r3, #1
 80053d4:	3b01      	subs	r3, #1
 80053d6:	041b      	lsls	r3, r3, #16
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053de:	061b      	lsls	r3, r3, #24
 80053e0:	4928      	ldr	r1, [pc, #160]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053e8:	4b26      	ldr	r3, [pc, #152]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80053ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053ee:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f6:	3b01      	subs	r3, #1
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	4922      	ldr	r1, [pc, #136]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800540a:	2b00      	cmp	r3, #0
 800540c:	d01d      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005412:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005416:	d118      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005418:	4b1a      	ldr	r3, [pc, #104]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541e:	0e1b      	lsrs	r3, r3, #24
 8005420:	f003 030f 	and.w	r3, r3, #15
 8005424:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	019b      	lsls	r3, r3, #6
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	085b      	lsrs	r3, r3, #1
 8005438:	3b01      	subs	r3, #1
 800543a:	041b      	lsls	r3, r3, #16
 800543c:	431a      	orrs	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	061b      	lsls	r3, r3, #24
 8005442:	4910      	ldr	r1, [pc, #64]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800544a:	4b0f      	ldr	r3, [pc, #60]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800544c:	2201      	movs	r2, #1
 800544e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005450:	f7fd fb20 	bl	8002a94 <HAL_GetTick>
 8005454:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005456:	e008      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005458:	f7fd fb1c 	bl	8002a94 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e007      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800546a:	4b06      	ldr	r3, [pc, #24]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005472:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005476:	d1ef      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3730      	adds	r7, #48	@ 0x30
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40023800 	.word	0x40023800
 8005488:	42470070 	.word	0x42470070

0800548c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800548c:	b480      	push	{r7}
 800548e:	b089      	sub	sp, #36	@ 0x24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	2b07      	cmp	r3, #7
 80054b2:	f200 8224 	bhi.w	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80054b6:	a201      	add	r2, pc, #4	@ (adr r2, 80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80054b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054bc:	080056bf 	.word	0x080056bf
 80054c0:	080057e9 	.word	0x080057e9
 80054c4:	080058ff 	.word	0x080058ff
 80054c8:	080054dd 	.word	0x080054dd
 80054cc:	080058ff 	.word	0x080058ff
 80054d0:	080058ff 	.word	0x080058ff
 80054d4:	080058ff 	.word	0x080058ff
 80054d8:	080054dd 	.word	0x080054dd
  {
    case RCC_PERIPHCLK_SAI1:
    case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80054dc:	4ba8      	ldr	r3, [pc, #672]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80054de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054e2:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 80054ea:	613b      	str	r3, [r7, #16]
      switch (saiclocksource)
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80054f2:	f000 80d6 	beq.w	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80054fc:	f200 80dd 	bhi.w	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005506:	f000 809f 	beq.w	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005510:	f200 80d3 	bhi.w	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800551a:	d05b      	beq.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005522:	f200 80ca 	bhi.w	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800552c:	f000 80b6 	beq.w	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005536:	f200 80c0 	bhi.w	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005540:	f000 8082 	beq.w	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800554a:	f200 80b6 	bhi.w	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d004      	beq.n	800555e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800555a:	d03b      	beq.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
        default :
        {
          break;
 800555c:	e0ad      	b.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800555e:	4b88      	ldr	r3, [pc, #544]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d109      	bne.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800556a:	4b85      	ldr	r3, [pc, #532]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005574:	4a83      	ldr	r2, [pc, #524]	@ (8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005576:	fbb2 f3f3 	udiv	r3, r2, r3
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	e008      	b.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800557e:	4b80      	ldr	r3, [pc, #512]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005588:	4a7f      	ldr	r2, [pc, #508]	@ (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800558a:	fbb2 f3f3 	udiv	r3, r2, r3
 800558e:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8005590:	4b7b      	ldr	r3, [pc, #492]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005596:	0e1b      	lsrs	r3, r3, #24
 8005598:	f003 030f 	and.w	r3, r3, #15
 800559c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg1);
 800559e:	4b78      	ldr	r3, [pc, #480]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80055a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a4:	099b      	lsrs	r3, r3, #6
 80055a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	fb03 f202 	mul.w	r2, r3, r2
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b6:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80055b8:	4b71      	ldr	r3, [pc, #452]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80055ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055be:	0a1b      	lsrs	r3, r3, #8
 80055c0:	f003 031f 	and.w	r3, r3, #31
 80055c4:	3301      	adds	r3, #1
 80055c6:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 80055c8:	69fa      	ldr	r2, [r7, #28]
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d0:	61fb      	str	r3, [r7, #28]
          break;
 80055d2:	e073      	b.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80055d4:	4b6a      	ldr	r3, [pc, #424]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d109      	bne.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80055e0:	4b67      	ldr	r3, [pc, #412]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80055e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055ea:	4a66      	ldr	r2, [pc, #408]	@ (8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80055ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f0:	61bb      	str	r3, [r7, #24]
 80055f2:	e008      	b.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80055f4:	4b62      	ldr	r3, [pc, #392]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80055f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055fe:	4a62      	ldr	r2, [pc, #392]	@ (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005600:	fbb2 f3f3 	udiv	r3, r2, r3
 8005604:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8005606:	4b5e      	ldr	r3, [pc, #376]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800560c:	0e1b      	lsrs	r3, r3, #24
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg1);
 8005614:	4b5a      	ldr	r3, [pc, #360]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800561a:	099b      	lsrs	r3, r3, #6
 800561c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	fb03 f202 	mul.w	r2, r3, r2
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	fbb2 f3f3 	udiv	r3, r2, r3
 800562c:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800562e:	4b54      	ldr	r3, [pc, #336]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005634:	f003 031f 	and.w	r3, r3, #31
 8005638:	3301      	adds	r3, #1
 800563a:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 800563c:	69fa      	ldr	r2, [r7, #28]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	fbb2 f3f3 	udiv	r3, r2, r3
 8005644:	61fb      	str	r3, [r7, #28]
          break;
 8005646:	e039      	b.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005648:	4b4d      	ldr	r3, [pc, #308]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d108      	bne.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005654:	4b4a      	ldr	r3, [pc, #296]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800565c:	4a49      	ldr	r2, [pc, #292]	@ (8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800565e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005662:	61bb      	str	r3, [r7, #24]
 8005664:	e007      	b.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005666:	4b46      	ldr	r3, [pc, #280]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800566e:	4a46      	ldr	r2, [pc, #280]	@ (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005670:	fbb2 f3f3 	udiv	r3, r2, r3
 8005674:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8005676:	4b42      	ldr	r3, [pc, #264]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	0f1b      	lsrs	r3, r3, #28
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U)) / (tmpreg1);
 8005682:	4b3f      	ldr	r3, [pc, #252]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	099b      	lsrs	r3, r3, #6
 8005688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	fb03 f202 	mul.w	r2, r3, r2
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	fbb2 f3f3 	udiv	r3, r2, r3
 8005698:	61fb      	str	r3, [r7, #28]
          break;
 800569a:	e00f      	b.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 800569c:	4b3b      	ldr	r3, [pc, #236]	@ (800578c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800569e:	61fb      	str	r3, [r7, #28]
          break;
 80056a0:	e00c      	b.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80056a2:	4b37      	ldr	r3, [pc, #220]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d102      	bne.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80056ae:	4b35      	ldr	r3, [pc, #212]	@ (8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80056b0:	61fb      	str	r3, [r7, #28]
          break;
 80056b2:	e003      	b.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80056b4:	4b34      	ldr	r3, [pc, #208]	@ (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80056b6:	61fb      	str	r3, [r7, #28]
          break;
 80056b8:	e000      	b.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80056ba:	bf00      	nop
        }
      }
      break;
 80056bc:	e120      	b.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80056be:	4b30      	ldr	r3, [pc, #192]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80056c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056c4:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80056c8:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 80056d0:	d079      	beq.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 80056d8:	f200 8082 	bhi.w	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056e2:	d03c      	beq.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056ea:	d879      	bhi.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d006      	beq.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056f8:	d172      	bne.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80056fa:	4b24      	ldr	r3, [pc, #144]	@ (800578c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80056fc:	61fb      	str	r3, [r7, #28]
          break;
 80056fe:	e072      	b.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005700:	4b1f      	ldr	r3, [pc, #124]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005708:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800570c:	d109      	bne.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800570e:	4b1c      	ldr	r3, [pc, #112]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005710:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005718:	4a1b      	ldr	r2, [pc, #108]	@ (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800571a:	fbb2 f3f3 	udiv	r3, r2, r3
 800571e:	61bb      	str	r3, [r7, #24]
 8005720:	e008      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005722:	4b17      	ldr	r3, [pc, #92]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005724:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005728:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800572c:	4a15      	ldr	r2, [pc, #84]	@ (8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800572e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005732:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005734:	4b12      	ldr	r3, [pc, #72]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005736:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800573a:	099b      	lsrs	r3, r3, #6
 800573c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	fb02 f303 	mul.w	r3, r2, r3
 8005746:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005748:	4b0d      	ldr	r3, [pc, #52]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800574a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800574e:	0f1b      	lsrs	r3, r3, #28
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	fbb2 f3f3 	udiv	r3, r2, r3
 800575a:	61fb      	str	r3, [r7, #28]
          break;
 800575c:	e043      	b.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800575e:	4b08      	ldr	r3, [pc, #32]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005766:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800576a:	d111      	bne.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800576c:	4b04      	ldr	r3, [pc, #16]	@ (8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005774:	4a04      	ldr	r2, [pc, #16]	@ (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005776:	fbb2 f3f3 	udiv	r3, r2, r3
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	e010      	b.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800577e:	bf00      	nop
 8005780:	40023800 	.word	0x40023800
 8005784:	00f42400 	.word	0x00f42400
 8005788:	017d7840 	.word	0x017d7840
 800578c:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005790:	4b5f      	ldr	r3, [pc, #380]	@ (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005798:	4a5e      	ldr	r2, [pc, #376]	@ (8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800579a:	fbb2 f3f3 	udiv	r3, r2, r3
 800579e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80057a0:	4b5b      	ldr	r3, [pc, #364]	@ (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	099b      	lsrs	r3, r3, #6
 80057a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	fb02 f303 	mul.w	r3, r2, r3
 80057b0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80057b2:	4b57      	ldr	r3, [pc, #348]	@ (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	0f1b      	lsrs	r3, r3, #28
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c2:	61fb      	str	r3, [r7, #28]
          break;
 80057c4:	e00f      	b.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80057c6:	4b52      	ldr	r3, [pc, #328]	@ (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057d2:	d102      	bne.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 80057d4:	4b50      	ldr	r3, [pc, #320]	@ (8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80057d6:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80057d8:	e005      	b.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 80057da:	4b4e      	ldr	r3, [pc, #312]	@ (8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80057dc:	61fb      	str	r3, [r7, #28]
          break;
 80057de:	e002      	b.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	61fb      	str	r3, [r7, #28]
          break;
 80057e4:	bf00      	nop
        }
      }
      break;
 80057e6:	e08b      	b.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80057e8:	4b49      	ldr	r3, [pc, #292]	@ (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80057ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057ee:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 80057f2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80057fa:	d06f      	beq.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005802:	d878      	bhi.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800580a:	d03c      	beq.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005812:	d870      	bhi.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d006      	beq.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005820:	d169      	bne.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005822:	4b3e      	ldr	r3, [pc, #248]	@ (800591c <HAL_RCCEx_GetPeriphCLKFreq+0x490>)
 8005824:	61fb      	str	r3, [r7, #28]
          break;
 8005826:	e069      	b.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005828:	4b39      	ldr	r3, [pc, #228]	@ (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005830:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005834:	d109      	bne.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005836:	4b36      	ldr	r3, [pc, #216]	@ (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800583c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005840:	4a35      	ldr	r2, [pc, #212]	@ (8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8005842:	fbb2 f3f3 	udiv	r3, r2, r3
 8005846:	61bb      	str	r3, [r7, #24]
 8005848:	e008      	b.n	800585c <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800584a:	4b31      	ldr	r3, [pc, #196]	@ (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800584c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005854:	4a2f      	ldr	r2, [pc, #188]	@ (8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8005856:	fbb2 f3f3 	udiv	r3, r2, r3
 800585a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800585c:	4b2c      	ldr	r3, [pc, #176]	@ (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800585e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005862:	099b      	lsrs	r3, r3, #6
 8005864:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	fb02 f303 	mul.w	r3, r2, r3
 800586e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005870:	4b27      	ldr	r3, [pc, #156]	@ (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005872:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005876:	0f1b      	lsrs	r3, r3, #28
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005882:	61fb      	str	r3, [r7, #28]
          break;
 8005884:	e03a      	b.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005886:	4b22      	ldr	r3, [pc, #136]	@ (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800588e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005892:	d108      	bne.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005894:	4b1e      	ldr	r3, [pc, #120]	@ (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800589c:	4a1e      	ldr	r2, [pc, #120]	@ (8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800589e:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a2:	61bb      	str	r3, [r7, #24]
 80058a4:	e007      	b.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80058a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058ae:	4a19      	ldr	r2, [pc, #100]	@ (8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80058b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b4:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80058b6:	4b16      	ldr	r3, [pc, #88]	@ (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	099b      	lsrs	r3, r3, #6
 80058bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	fb02 f303 	mul.w	r3, r2, r3
 80058c6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80058c8:	4b11      	ldr	r3, [pc, #68]	@ (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	0f1b      	lsrs	r3, r3, #28
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d8:	61fb      	str	r3, [r7, #28]
          break;
 80058da:	e00f      	b.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80058dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058e8:	d102      	bne.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 80058ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80058ec:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80058ee:	e005      	b.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 80058f0:	4b08      	ldr	r3, [pc, #32]	@ (8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80058f2:	61fb      	str	r3, [r7, #28]
          break;
 80058f4:	e002      	b.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	61fb      	str	r3, [r7, #28]
          break;
 80058fa:	bf00      	nop
        }
      }
      break;
 80058fc:	e000      	b.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    default:
    {
      break;
 80058fe:	bf00      	nop
    }
  }
  return frequency;
 8005900:	69fb      	ldr	r3, [r7, #28]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3724      	adds	r7, #36	@ 0x24
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40023800 	.word	0x40023800
 8005914:	00f42400 	.word	0x00f42400
 8005918:	017d7840 	.word	0x017d7840
 800591c:	00bb8000 	.word	0x00bb8000

08005920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005924:	b0a6      	sub	sp, #152	@ 0x98
 8005926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800592e:	2300      	movs	r3, #0
 8005930:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005946:	4bc8      	ldr	r3, [pc, #800]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 030c 	and.w	r3, r3, #12
 800594e:	2b0c      	cmp	r3, #12
 8005950:	f200 817e 	bhi.w	8005c50 <HAL_RCC_GetSysClockFreq+0x330>
 8005954:	a201      	add	r2, pc, #4	@ (adr r2, 800595c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595a:	bf00      	nop
 800595c:	08005991 	.word	0x08005991
 8005960:	08005c51 	.word	0x08005c51
 8005964:	08005c51 	.word	0x08005c51
 8005968:	08005c51 	.word	0x08005c51
 800596c:	08005999 	.word	0x08005999
 8005970:	08005c51 	.word	0x08005c51
 8005974:	08005c51 	.word	0x08005c51
 8005978:	08005c51 	.word	0x08005c51
 800597c:	080059a1 	.word	0x080059a1
 8005980:	08005c51 	.word	0x08005c51
 8005984:	08005c51 	.word	0x08005c51
 8005988:	08005c51 	.word	0x08005c51
 800598c:	08005b0b 	.word	0x08005b0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005990:	4bb6      	ldr	r3, [pc, #728]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8005992:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005996:	e15f      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005998:	4bb5      	ldr	r3, [pc, #724]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x350>)
 800599a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800599e:	e15b      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059a0:	4bb1      	ldr	r3, [pc, #708]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x348>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059ac:	4bae      	ldr	r3, [pc, #696]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x348>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d031      	beq.n	8005a1c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059b8:	4bab      	ldr	r3, [pc, #684]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x348>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	099b      	lsrs	r3, r3, #6
 80059be:	2200      	movs	r2, #0
 80059c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80059cc:	2300      	movs	r3, #0
 80059ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80059d0:	4ba7      	ldr	r3, [pc, #668]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x350>)
 80059d2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80059d6:	462a      	mov	r2, r5
 80059d8:	fb03 f202 	mul.w	r2, r3, r2
 80059dc:	2300      	movs	r3, #0
 80059de:	4621      	mov	r1, r4
 80059e0:	fb01 f303 	mul.w	r3, r1, r3
 80059e4:	4413      	add	r3, r2
 80059e6:	4aa2      	ldr	r2, [pc, #648]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x350>)
 80059e8:	4621      	mov	r1, r4
 80059ea:	fba1 1202 	umull	r1, r2, r1, r2
 80059ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80059f0:	460a      	mov	r2, r1
 80059f2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80059f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80059f6:	4413      	add	r3, r2
 80059f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80059fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059fe:	2200      	movs	r2, #0
 8005a00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a02:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005a04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a08:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005a0c:	f7fb f9bc 	bl	8000d88 <__aeabi_uldivmod>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4613      	mov	r3, r2
 8005a16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a1a:	e064      	b.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a1c:	4b92      	ldr	r3, [pc, #584]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	099b      	lsrs	r3, r3, #6
 8005a22:	2200      	movs	r2, #0
 8005a24:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a26:	657a      	str	r2, [r7, #84]	@ 0x54
 8005a28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a30:	2300      	movs	r3, #0
 8005a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a34:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005a38:	4622      	mov	r2, r4
 8005a3a:	462b      	mov	r3, r5
 8005a3c:	f04f 0000 	mov.w	r0, #0
 8005a40:	f04f 0100 	mov.w	r1, #0
 8005a44:	0159      	lsls	r1, r3, #5
 8005a46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a4a:	0150      	lsls	r0, r2, #5
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4621      	mov	r1, r4
 8005a52:	1a51      	subs	r1, r2, r1
 8005a54:	6139      	str	r1, [r7, #16]
 8005a56:	4629      	mov	r1, r5
 8005a58:	eb63 0301 	sbc.w	r3, r3, r1
 8005a5c:	617b      	str	r3, [r7, #20]
 8005a5e:	f04f 0200 	mov.w	r2, #0
 8005a62:	f04f 0300 	mov.w	r3, #0
 8005a66:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a6a:	4659      	mov	r1, fp
 8005a6c:	018b      	lsls	r3, r1, #6
 8005a6e:	4651      	mov	r1, sl
 8005a70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a74:	4651      	mov	r1, sl
 8005a76:	018a      	lsls	r2, r1, #6
 8005a78:	4651      	mov	r1, sl
 8005a7a:	ebb2 0801 	subs.w	r8, r2, r1
 8005a7e:	4659      	mov	r1, fp
 8005a80:	eb63 0901 	sbc.w	r9, r3, r1
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a98:	4690      	mov	r8, r2
 8005a9a:	4699      	mov	r9, r3
 8005a9c:	4623      	mov	r3, r4
 8005a9e:	eb18 0303 	adds.w	r3, r8, r3
 8005aa2:	60bb      	str	r3, [r7, #8]
 8005aa4:	462b      	mov	r3, r5
 8005aa6:	eb49 0303 	adc.w	r3, r9, r3
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ab8:	4629      	mov	r1, r5
 8005aba:	028b      	lsls	r3, r1, #10
 8005abc:	4621      	mov	r1, r4
 8005abe:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	028a      	lsls	r2, r1, #10
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ace:	2200      	movs	r2, #0
 8005ad0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ad2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ad4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005ad8:	f7fb f956 	bl	8000d88 <__aeabi_uldivmod>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005ae6:	4b60      	ldr	r3, [pc, #384]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	0c1b      	lsrs	r3, r3, #16
 8005aec:	f003 0303 	and.w	r3, r3, #3
 8005af0:	3301      	adds	r3, #1
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8005af8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005b08:	e0a6      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b0a:	4b57      	ldr	r3, [pc, #348]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b16:	4b54      	ldr	r3, [pc, #336]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d02a      	beq.n	8005b78 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b22:	4b51      	ldr	r3, [pc, #324]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	099b      	lsrs	r3, r3, #6
 8005b28:	2200      	movs	r2, #0
 8005b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005b34:	2100      	movs	r1, #0
 8005b36:	4b4e      	ldr	r3, [pc, #312]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x350>)
 8005b38:	fb03 f201 	mul.w	r2, r3, r1
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	fb00 f303 	mul.w	r3, r0, r3
 8005b42:	4413      	add	r3, r2
 8005b44:	4a4a      	ldr	r2, [pc, #296]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x350>)
 8005b46:	fba0 1202 	umull	r1, r2, r0, r2
 8005b4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b4c:	460a      	mov	r2, r1
 8005b4e:	673a      	str	r2, [r7, #112]	@ 0x70
 8005b50:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005b52:	4413      	add	r3, r2
 8005b54:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b5e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005b60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005b64:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8005b68:	f7fb f90e 	bl	8000d88 <__aeabi_uldivmod>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4613      	mov	r3, r2
 8005b72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b76:	e05b      	b.n	8005c30 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b78:	4b3b      	ldr	r3, [pc, #236]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	099b      	lsrs	r3, r3, #6
 8005b7e:	2200      	movs	r2, #0
 8005b80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b8a:	623b      	str	r3, [r7, #32]
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b94:	4642      	mov	r2, r8
 8005b96:	464b      	mov	r3, r9
 8005b98:	f04f 0000 	mov.w	r0, #0
 8005b9c:	f04f 0100 	mov.w	r1, #0
 8005ba0:	0159      	lsls	r1, r3, #5
 8005ba2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ba6:	0150      	lsls	r0, r2, #5
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4641      	mov	r1, r8
 8005bae:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bb8:	f04f 0200 	mov.w	r2, #0
 8005bbc:	f04f 0300 	mov.w	r3, #0
 8005bc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bcc:	ebb2 040a 	subs.w	r4, r2, sl
 8005bd0:	eb63 050b 	sbc.w	r5, r3, fp
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	f04f 0300 	mov.w	r3, #0
 8005bdc:	00eb      	lsls	r3, r5, #3
 8005bde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005be2:	00e2      	lsls	r2, r4, #3
 8005be4:	4614      	mov	r4, r2
 8005be6:	461d      	mov	r5, r3
 8005be8:	4643      	mov	r3, r8
 8005bea:	18e3      	adds	r3, r4, r3
 8005bec:	603b      	str	r3, [r7, #0]
 8005bee:	464b      	mov	r3, r9
 8005bf0:	eb45 0303 	adc.w	r3, r5, r3
 8005bf4:	607b      	str	r3, [r7, #4]
 8005bf6:	f04f 0200 	mov.w	r2, #0
 8005bfa:	f04f 0300 	mov.w	r3, #0
 8005bfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c02:	4629      	mov	r1, r5
 8005c04:	028b      	lsls	r3, r1, #10
 8005c06:	4621      	mov	r1, r4
 8005c08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	028a      	lsls	r2, r1, #10
 8005c10:	4610      	mov	r0, r2
 8005c12:	4619      	mov	r1, r3
 8005c14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c18:	2200      	movs	r2, #0
 8005c1a:	61bb      	str	r3, [r7, #24]
 8005c1c:	61fa      	str	r2, [r7, #28]
 8005c1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c22:	f7fb f8b1 	bl	8000d88 <__aeabi_uldivmod>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005c30:	4b0d      	ldr	r3, [pc, #52]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	0f1b      	lsrs	r3, r3, #28
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8005c3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005c4e:	e003      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c50:	4b06      	ldr	r3, [pc, #24]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8005c52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005c56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3798      	adds	r7, #152	@ 0x98
 8005c60:	46bd      	mov	sp, r7
 8005c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c66:	bf00      	nop
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	00f42400 	.word	0x00f42400
 8005c70:	017d7840 	.word	0x017d7840

08005c74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e28d      	b.n	80061a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 8083 	beq.w	8005d9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c94:	4b94      	ldr	r3, [pc, #592]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 030c 	and.w	r3, r3, #12
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d019      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005ca0:	4b91      	ldr	r3, [pc, #580]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 030c 	and.w	r3, r3, #12
        || \
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d106      	bne.n	8005cba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005cac:	4b8e      	ldr	r3, [pc, #568]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cb8:	d00c      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cba:	4b8b      	ldr	r3, [pc, #556]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005cc2:	2b0c      	cmp	r3, #12
 8005cc4:	d112      	bne.n	8005cec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cc6:	4b88      	ldr	r3, [pc, #544]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cd2:	d10b      	bne.n	8005cec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cd4:	4b84      	ldr	r3, [pc, #528]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d05b      	beq.n	8005d98 <HAL_RCC_OscConfig+0x124>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d157      	bne.n	8005d98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e25a      	b.n	80061a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf4:	d106      	bne.n	8005d04 <HAL_RCC_OscConfig+0x90>
 8005cf6:	4b7c      	ldr	r3, [pc, #496]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a7b      	ldr	r2, [pc, #492]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	e01d      	b.n	8005d40 <HAL_RCC_OscConfig+0xcc>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d0c:	d10c      	bne.n	8005d28 <HAL_RCC_OscConfig+0xb4>
 8005d0e:	4b76      	ldr	r3, [pc, #472]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a75      	ldr	r2, [pc, #468]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	4b73      	ldr	r3, [pc, #460]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a72      	ldr	r2, [pc, #456]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	e00b      	b.n	8005d40 <HAL_RCC_OscConfig+0xcc>
 8005d28:	4b6f      	ldr	r3, [pc, #444]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a6e      	ldr	r2, [pc, #440]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	4b6c      	ldr	r3, [pc, #432]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a6b      	ldr	r2, [pc, #428]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005d3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d013      	beq.n	8005d70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d48:	f7fc fea4 	bl	8002a94 <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d50:	f7fc fea0 	bl	8002a94 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b64      	cmp	r3, #100	@ 0x64
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e21f      	b.n	80061a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d62:	4b61      	ldr	r3, [pc, #388]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0f0      	beq.n	8005d50 <HAL_RCC_OscConfig+0xdc>
 8005d6e:	e014      	b.n	8005d9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d70:	f7fc fe90 	bl	8002a94 <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d78:	f7fc fe8c 	bl	8002a94 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b64      	cmp	r3, #100	@ 0x64
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e20b      	b.n	80061a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d8a:	4b57      	ldr	r3, [pc, #348]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1f0      	bne.n	8005d78 <HAL_RCC_OscConfig+0x104>
 8005d96:	e000      	b.n	8005d9a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d06f      	beq.n	8005e86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005da6:	4b50      	ldr	r3, [pc, #320]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 030c 	and.w	r3, r3, #12
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d017      	beq.n	8005de2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005db2:	4b4d      	ldr	r3, [pc, #308]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 030c 	and.w	r3, r3, #12
        || \
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d105      	bne.n	8005dca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00b      	beq.n	8005de2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dca:	4b47      	ldr	r3, [pc, #284]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005dd2:	2b0c      	cmp	r3, #12
 8005dd4:	d11c      	bne.n	8005e10 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dd6:	4b44      	ldr	r3, [pc, #272]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d116      	bne.n	8005e10 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005de2:	4b41      	ldr	r3, [pc, #260]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d005      	beq.n	8005dfa <HAL_RCC_OscConfig+0x186>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d001      	beq.n	8005dfa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e1d3      	b.n	80061a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	4937      	ldr	r1, [pc, #220]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e0e:	e03a      	b.n	8005e86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d020      	beq.n	8005e5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e18:	4b34      	ldr	r3, [pc, #208]	@ (8005eec <HAL_RCC_OscConfig+0x278>)
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1e:	f7fc fe39 	bl	8002a94 <HAL_GetTick>
 8005e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e24:	e008      	b.n	8005e38 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e26:	f7fc fe35 	bl	8002a94 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d901      	bls.n	8005e38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e1b4      	b.n	80061a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e38:	4b2b      	ldr	r3, [pc, #172]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d0f0      	beq.n	8005e26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e44:	4b28      	ldr	r3, [pc, #160]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	4925      	ldr	r1, [pc, #148]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	600b      	str	r3, [r1, #0]
 8005e58:	e015      	b.n	8005e86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e5a:	4b24      	ldr	r3, [pc, #144]	@ (8005eec <HAL_RCC_OscConfig+0x278>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e60:	f7fc fe18 	bl	8002a94 <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e68:	f7fc fe14 	bl	8002a94 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e193      	b.n	80061a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1f0      	bne.n	8005e68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0308 	and.w	r3, r3, #8
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d036      	beq.n	8005f00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d016      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e9a:	4b15      	ldr	r3, [pc, #84]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea0:	f7fc fdf8 	bl	8002a94 <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ea8:	f7fc fdf4 	bl	8002a94 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e173      	b.n	80061a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eba:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee8 <HAL_RCC_OscConfig+0x274>)
 8005ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f0      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x234>
 8005ec6:	e01b      	b.n	8005f00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ec8:	4b09      	ldr	r3, [pc, #36]	@ (8005ef0 <HAL_RCC_OscConfig+0x27c>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ece:	f7fc fde1 	bl	8002a94 <HAL_GetTick>
 8005ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ed4:	e00e      	b.n	8005ef4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ed6:	f7fc fddd 	bl	8002a94 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d907      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e15c      	b.n	80061a2 <HAL_RCC_OscConfig+0x52e>
 8005ee8:	40023800 	.word	0x40023800
 8005eec:	42470000 	.word	0x42470000
 8005ef0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ef4:	4b8a      	ldr	r3, [pc, #552]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8005ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1ea      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 8097 	beq.w	800603c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f12:	4b83      	ldr	r3, [pc, #524]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8005f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10f      	bne.n	8005f3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60bb      	str	r3, [r7, #8]
 8005f22:	4b7f      	ldr	r3, [pc, #508]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8005f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f26:	4a7e      	ldr	r2, [pc, #504]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8005f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f2e:	4b7c      	ldr	r3, [pc, #496]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8005f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f36:	60bb      	str	r3, [r7, #8]
 8005f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f3e:	4b79      	ldr	r3, [pc, #484]	@ (8006124 <HAL_RCC_OscConfig+0x4b0>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d118      	bne.n	8005f7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f4a:	4b76      	ldr	r3, [pc, #472]	@ (8006124 <HAL_RCC_OscConfig+0x4b0>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a75      	ldr	r2, [pc, #468]	@ (8006124 <HAL_RCC_OscConfig+0x4b0>)
 8005f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f56:	f7fc fd9d 	bl	8002a94 <HAL_GetTick>
 8005f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f5c:	e008      	b.n	8005f70 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f5e:	f7fc fd99 	bl	8002a94 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e118      	b.n	80061a2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f70:	4b6c      	ldr	r3, [pc, #432]	@ (8006124 <HAL_RCC_OscConfig+0x4b0>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0f0      	beq.n	8005f5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d106      	bne.n	8005f92 <HAL_RCC_OscConfig+0x31e>
 8005f84:	4b66      	ldr	r3, [pc, #408]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8005f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f88:	4a65      	ldr	r2, [pc, #404]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8005f8a:	f043 0301 	orr.w	r3, r3, #1
 8005f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f90:	e01c      	b.n	8005fcc <HAL_RCC_OscConfig+0x358>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	2b05      	cmp	r3, #5
 8005f98:	d10c      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x340>
 8005f9a:	4b61      	ldr	r3, [pc, #388]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8005f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f9e:	4a60      	ldr	r2, [pc, #384]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8005fa0:	f043 0304 	orr.w	r3, r3, #4
 8005fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fa6:	4b5e      	ldr	r3, [pc, #376]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005faa:	4a5d      	ldr	r2, [pc, #372]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8005fac:	f043 0301 	orr.w	r3, r3, #1
 8005fb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fb2:	e00b      	b.n	8005fcc <HAL_RCC_OscConfig+0x358>
 8005fb4:	4b5a      	ldr	r3, [pc, #360]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8005fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb8:	4a59      	ldr	r2, [pc, #356]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8005fba:	f023 0301 	bic.w	r3, r3, #1
 8005fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fc0:	4b57      	ldr	r3, [pc, #348]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8005fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc4:	4a56      	ldr	r2, [pc, #344]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8005fc6:	f023 0304 	bic.w	r3, r3, #4
 8005fca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d015      	beq.n	8006000 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd4:	f7fc fd5e 	bl	8002a94 <HAL_GetTick>
 8005fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fda:	e00a      	b.n	8005ff2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fdc:	f7fc fd5a 	bl	8002a94 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e0d7      	b.n	80061a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ff2:	4b4b      	ldr	r3, [pc, #300]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0ee      	beq.n	8005fdc <HAL_RCC_OscConfig+0x368>
 8005ffe:	e014      	b.n	800602a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006000:	f7fc fd48 	bl	8002a94 <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006006:	e00a      	b.n	800601e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006008:	f7fc fd44 	bl	8002a94 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006016:	4293      	cmp	r3, r2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e0c1      	b.n	80061a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800601e:	4b40      	ldr	r3, [pc, #256]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8006020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1ee      	bne.n	8006008 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800602a:	7dfb      	ldrb	r3, [r7, #23]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d105      	bne.n	800603c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006030:	4b3b      	ldr	r3, [pc, #236]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8006032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006034:	4a3a      	ldr	r2, [pc, #232]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8006036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800603a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 80ad 	beq.w	80061a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006046:	4b36      	ldr	r3, [pc, #216]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 030c 	and.w	r3, r3, #12
 800604e:	2b08      	cmp	r3, #8
 8006050:	d060      	beq.n	8006114 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	2b02      	cmp	r3, #2
 8006058:	d145      	bne.n	80060e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800605a:	4b33      	ldr	r3, [pc, #204]	@ (8006128 <HAL_RCC_OscConfig+0x4b4>)
 800605c:	2200      	movs	r2, #0
 800605e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006060:	f7fc fd18 	bl	8002a94 <HAL_GetTick>
 8006064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006066:	e008      	b.n	800607a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006068:	f7fc fd14 	bl	8002a94 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e093      	b.n	80061a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800607a:	4b29      	ldr	r3, [pc, #164]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1f0      	bne.n	8006068 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	69da      	ldr	r2, [r3, #28]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	431a      	orrs	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006094:	019b      	lsls	r3, r3, #6
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609c:	085b      	lsrs	r3, r3, #1
 800609e:	3b01      	subs	r3, #1
 80060a0:	041b      	lsls	r3, r3, #16
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a8:	061b      	lsls	r3, r3, #24
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b0:	071b      	lsls	r3, r3, #28
 80060b2:	491b      	ldr	r1, [pc, #108]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006128 <HAL_RCC_OscConfig+0x4b4>)
 80060ba:	2201      	movs	r2, #1
 80060bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060be:	f7fc fce9 	bl	8002a94 <HAL_GetTick>
 80060c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060c4:	e008      	b.n	80060d8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c6:	f7fc fce5 	bl	8002a94 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e064      	b.n	80061a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060d8:	4b11      	ldr	r3, [pc, #68]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d0f0      	beq.n	80060c6 <HAL_RCC_OscConfig+0x452>
 80060e4:	e05c      	b.n	80061a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060e6:	4b10      	ldr	r3, [pc, #64]	@ (8006128 <HAL_RCC_OscConfig+0x4b4>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ec:	f7fc fcd2 	bl	8002a94 <HAL_GetTick>
 80060f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f4:	f7fc fcce 	bl	8002a94 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e04d      	b.n	80061a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006106:	4b06      	ldr	r3, [pc, #24]	@ (8006120 <HAL_RCC_OscConfig+0x4ac>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1f0      	bne.n	80060f4 <HAL_RCC_OscConfig+0x480>
 8006112:	e045      	b.n	80061a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d107      	bne.n	800612c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e040      	b.n	80061a2 <HAL_RCC_OscConfig+0x52e>
 8006120:	40023800 	.word	0x40023800
 8006124:	40007000 	.word	0x40007000
 8006128:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800612c:	4b1f      	ldr	r3, [pc, #124]	@ (80061ac <HAL_RCC_OscConfig+0x538>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d030      	beq.n	800619c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006144:	429a      	cmp	r2, r3
 8006146:	d129      	bne.n	800619c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006152:	429a      	cmp	r2, r3
 8006154:	d122      	bne.n	800619c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800615c:	4013      	ands	r3, r2
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006162:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006164:	4293      	cmp	r3, r2
 8006166:	d119      	bne.n	800619c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006172:	085b      	lsrs	r3, r3, #1
 8006174:	3b01      	subs	r3, #1
 8006176:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006178:	429a      	cmp	r2, r3
 800617a:	d10f      	bne.n	800619c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006186:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006188:	429a      	cmp	r2, r3
 800618a:	d107      	bne.n	800619c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006196:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006198:	429a      	cmp	r2, r3
 800619a:	d001      	beq.n	80061a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e000      	b.n	80061a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	40023800 	.word	0x40023800

080061b0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d904      	bls.n	80061d2 <HAL_SAI_InitProtocol+0x22>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	3b03      	subs	r3, #3
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d812      	bhi.n	80061f6 <HAL_SAI_InitProtocol+0x46>
 80061d0:	e008      	b.n	80061e4 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	68b9      	ldr	r1, [r7, #8]
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 f9dd 	bl	8006598 <SAI_InitI2S>
 80061de:	4603      	mov	r3, r0
 80061e0:	75fb      	strb	r3, [r7, #23]
      break;
 80061e2:	e00b      	b.n	80061fc <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	68b9      	ldr	r1, [r7, #8]
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 fa82 	bl	80066f4 <SAI_InitPCM>
 80061f0:	4603      	mov	r3, r0
 80061f2:	75fb      	strb	r3, [r7, #23]
      break;
 80061f4:	e002      	b.n	80061fc <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	75fb      	strb	r3, [r7, #23]
      break;
 80061fa:	bf00      	nop
  }

  if (status == HAL_OK)
 80061fc:	7dfb      	ldrb	r3, [r7, #23]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d104      	bne.n	800620c <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f000 f808 	bl	8006218 <HAL_SAI_Init>
 8006208:	4603      	mov	r3, r0
 800620a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800620c:	7dfb      	ldrb	r3, [r7, #23]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 800622c:	2300      	movs	r3, #0
 800622e:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e10c      	b.n	8006454 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fb ff0e 	bl	8002070 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 faff 	bl	8006860 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fba6 	bl	80069b4 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d030      	beq.n	80062d2 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fbe3 	bl	8006a3c <SAI_GetInputClock>
 8006276:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	461a      	mov	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	025b      	lsls	r3, r3, #9
 800628a:	fbb2 f3f3 	udiv	r3, r2, r3
 800628e:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4a72      	ldr	r2, [pc, #456]	@ (800645c <HAL_SAI_Init+0x244>)
 8006294:	fba2 2303 	umull	r2, r3, r2, r3
 8006298:	08da      	lsrs	r2, r3, #3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 800629e:	68f9      	ldr	r1, [r7, #12]
 80062a0:	4b6e      	ldr	r3, [pc, #440]	@ (800645c <HAL_SAI_Init+0x244>)
 80062a2:	fba3 2301 	umull	r2, r3, r3, r1
 80062a6:	08da      	lsrs	r2, r3, #3
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	1aca      	subs	r2, r1, r3
 80062b2:	2a08      	cmp	r2, #8
 80062b4:	d904      	bls.n	80062c0 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d104      	bne.n	80062d2 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062cc:	085a      	lsrs	r2, r3, #1
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_SAI_Init+0xca>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d109      	bne.n	80062f6 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d101      	bne.n	80062ee <HAL_SAI_Init+0xd6>
 80062ea:	2300      	movs	r3, #0
 80062ec:	e001      	b.n	80062f2 <HAL_SAI_Init+0xda>
 80062ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80062f2:	617b      	str	r3, [r7, #20]
 80062f4:	e008      	b.n	8006308 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d102      	bne.n	8006304 <HAL_SAI_Init+0xec>
 80062fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006302:	e000      	b.n	8006306 <HAL_SAI_Init+0xee>
 8006304:	2300      	movs	r3, #0
 8006306:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	2b03      	cmp	r3, #3
 800630e:	d811      	bhi.n	8006334 <HAL_SAI_Init+0x11c>
 8006310:	2b02      	cmp	r3, #2
 8006312:	d20b      	bcs.n	800632c <HAL_SAI_Init+0x114>
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <HAL_SAI_Init+0x106>
 8006318:	2b01      	cmp	r3, #1
 800631a:	d003      	beq.n	8006324 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 800631c:	e00a      	b.n	8006334 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	613b      	str	r3, [r7, #16]
    break;
 8006322:	e008      	b.n	8006336 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006324:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006328:	613b      	str	r3, [r7, #16]
    break;
 800632a:	e004      	b.n	8006336 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800632c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006330:	613b      	str	r3, [r7, #16]
    break;
 8006332:	e000      	b.n	8006336 <HAL_SAI_Init+0x11e>
      break;
 8006334:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6819      	ldr	r1, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	4b47      	ldr	r3, [pc, #284]	@ (8006460 <HAL_SAI_Init+0x248>)
 8006342:	400b      	ands	r3, r1
 8006344:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6819      	ldr	r1, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006354:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800635a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006360:	431a      	orrs	r2, r3
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 800636e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800637a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006380:	051b      	lsls	r3, r3, #20
 8006382:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6812      	ldr	r2, [r2, #0]
 8006396:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800639a:	f023 030f 	bic.w	r3, r3, #15
 800639e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6859      	ldr	r1, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699a      	ldr	r2, [r3, #24]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b4:	431a      	orrs	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6899      	ldr	r1, [r3, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	4b26      	ldr	r3, [pc, #152]	@ (8006464 <HAL_SAI_Init+0x24c>)
 80063ca:	400b      	ands	r3, r1
 80063cc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6899      	ldr	r1, [r3, #8]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063d8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80063de:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 80063e4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 80063ea:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063f0:	3b01      	subs	r3, #1
 80063f2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80063f4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68d9      	ldr	r1, [r3, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800640c:	400b      	ands	r3, r1
 800640e:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68d9      	ldr	r1, [r3, #12]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800641e:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006424:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8006426:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800642c:	3b01      	subs	r3, #1
 800642e:	021b      	lsls	r3, r3, #8
 8006430:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	cccccccd 	.word	0xcccccccd
 8006460:	ff05c010 	.word	0xff05c010
 8006464:	fff88000 	.word	0xfff88000

08006468 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	4613      	mov	r3, r2
 8006474:	80fb      	strh	r3, [r7, #6]
  if ((pData == NULL) || (Size == 0))
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <HAL_SAI_Receive_DMA+0x1a>
 800647c:	88fb      	ldrh	r3, [r7, #6]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e074      	b.n	8006570 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b01      	cmp	r3, #1
 8006490:	d16d      	bne.n	800656e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_SAI_Receive_DMA+0x38>
 800649c:	2302      	movs	r3, #2
 800649e:	e067      	b.n	8006570 <HAL_SAI_Receive_DMA+0x108>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    hsai->pBuffPtr = pData;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	669a      	str	r2, [r3, #104]	@ 0x68
    hsai->XferSize = Size;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	88fa      	ldrh	r2, [r7, #6]
 80064b2:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
    hsai->XferCount = Size;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	88fa      	ldrh	r2, [r7, #6]
 80064ba:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2222      	movs	r2, #34	@ 0x22
 80064ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064d2:	4a29      	ldr	r2, [pc, #164]	@ (8006578 <HAL_SAI_Receive_DMA+0x110>)
 80064d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064da:	4a28      	ldr	r2, [pc, #160]	@ (800657c <HAL_SAI_Receive_DMA+0x114>)
 80064dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064e2:	4a27      	ldr	r2, [pc, #156]	@ (8006580 <HAL_SAI_Receive_DMA+0x118>)
 80064e4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064ea:	2200      	movs	r2, #0
 80064ec:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	331c      	adds	r3, #28
 80064f8:	4619      	mov	r1, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064fe:	461a      	mov	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8006506:	f7fc ff27 	bl	8003358 <HAL_DMA_Start_IT>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d005      	beq.n	800651c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      return  HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e029      	b.n	8006570 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800651c:	2100      	movs	r1, #0
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 f968 	bl	80067f4 <SAI_InterruptFlag>
 8006524:	4601      	mov	r1, r0
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	691a      	ldr	r2, [r3, #16]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006542:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d107      	bne.n	8006562 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006560:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	e000      	b.n	8006570 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800656e:	2302      	movs	r3, #2
  }
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	08006931 	.word	0x08006931
 800657c:	080068d1 	.word	0x080068d1
 8006580:	0800694d 	.word	0x0800694d

08006584 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <SAI_InitI2S+0x2a>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d103      	bne.n	80065ca <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80065c8:	e002      	b.n	80065d0 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2201      	movs	r2, #1
 80065ce:	641a      	str	r2, [r3, #64]	@ 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80065d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80065de:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e076      	b.n	80066e8 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d107      	bne.n	8006610 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	651a      	str	r2, [r3, #80]	@ 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800660c:	655a      	str	r2, [r3, #84]	@ 0x54
 800660e:	e006      	b.n	800661e <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006616:	651a      	str	r2, [r3, #80]	@ 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Frame definition */
  switch (datasize)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b03      	cmp	r3, #3
 8006622:	d84f      	bhi.n	80066c4 <SAI_InitI2S+0x12c>
 8006624:	a201      	add	r2, pc, #4	@ (adr r2, 800662c <SAI_InitI2S+0x94>)
 8006626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662a:	bf00      	nop
 800662c:	0800663d 	.word	0x0800663d
 8006630:	0800665f 	.word	0x0800665f
 8006634:	08006681 	.word	0x08006681
 8006638:	080066a3 	.word	0x080066a3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2280      	movs	r2, #128	@ 0x80
 8006640:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	085b      	lsrs	r3, r3, #1
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	085b      	lsrs	r3, r3, #1
 8006650:	011a      	lsls	r2, r3, #4
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2240      	movs	r2, #64	@ 0x40
 800665a:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 800665c:	e034      	b.n	80066c8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2280      	movs	r2, #128	@ 0x80
 8006662:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	085b      	lsrs	r3, r3, #1
 8006668:	019a      	lsls	r2, r3, #6
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	085b      	lsrs	r3, r3, #1
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2280      	movs	r2, #128	@ 0x80
 800667c:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 800667e:	e023      	b.n	80066c8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	22c0      	movs	r2, #192	@ 0xc0
 8006684:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	085b      	lsrs	r3, r3, #1
 800668a:	019a      	lsls	r2, r3, #6
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	085b      	lsrs	r3, r3, #1
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2280      	movs	r2, #128	@ 0x80
 800669e:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 80066a0:	e012      	b.n	80066c8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	22e0      	movs	r2, #224	@ 0xe0
 80066a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	085b      	lsrs	r3, r3, #1
 80066ac:	019a      	lsls	r2, r3, #6
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	085b      	lsrs	r3, r3, #1
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2280      	movs	r2, #128	@ 0x80
 80066c0:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 80066c2:	e001      	b.n	80066c8 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e00f      	b.n	80066e8 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d10b      	bne.n	80066e6 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d102      	bne.n	80066da <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2210      	movs	r2, #16
 80066d8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d102      	bne.n	80066e6 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2208      	movs	r2, #8
 80066e4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <SAI_InitPCM+0x2a>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	2b02      	cmp	r3, #2
 800671c:	d103      	bne.n	8006726 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	641a      	str	r2, [r3, #64]	@ 0x40
 8006724:	e002      	b.n	800672c <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	641a      	str	r2, [r3, #64]	@ 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006738:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006740:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006754:	665a      	str	r2, [r3, #100]	@ 0x64

  if (protocol == SAI_PCM_SHORT)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b04      	cmp	r3, #4
 800675a:	d103      	bne.n	8006764 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2201      	movs	r2, #1
 8006760:	649a      	str	r2, [r3, #72]	@ 0x48
 8006762:	e002      	b.n	800676a <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	220d      	movs	r2, #13
 8006768:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  switch (datasize)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b03      	cmp	r3, #3
 800676e:	d837      	bhi.n	80067e0 <SAI_InitPCM+0xec>
 8006770:	a201      	add	r2, pc, #4	@ (adr r2, 8006778 <SAI_InitPCM+0x84>)
 8006772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006776:	bf00      	nop
 8006778:	08006789 	.word	0x08006789
 800677c:	0800679f 	.word	0x0800679f
 8006780:	080067b5 	.word	0x080067b5
 8006784:	080067cb 	.word	0x080067cb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2280      	movs	r2, #128	@ 0x80
 800678c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	011a      	lsls	r2, r3, #4
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2240      	movs	r2, #64	@ 0x40
 800679a:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 800679c:	e022      	b.n	80067e4 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2280      	movs	r2, #128	@ 0x80
 80067a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2280      	movs	r2, #128	@ 0x80
 80067b0:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 80067b2:	e017      	b.n	80067e4 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	22c0      	movs	r2, #192	@ 0xc0
 80067b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2280      	movs	r2, #128	@ 0x80
 80067c6:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 80067c8:	e00c      	b.n	80067e4 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	22e0      	movs	r2, #224	@ 0xe0
 80067ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2280      	movs	r2, #128	@ 0x80
 80067dc:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 80067de:	e001      	b.n	80067e4 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e000      	b.n	80067e6 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop

080067f4 <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80067fe:	2301      	movs	r3, #1
 8006800:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d103      	bne.n	8006810 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f043 0308 	orr.w	r3, r3, #8
 800680e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006814:	2b08      	cmp	r3, #8
 8006816:	d10b      	bne.n	8006830 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800681c:	2b03      	cmp	r3, #3
 800681e:	d003      	beq.n	8006828 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d103      	bne.n	8006830 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f043 0310 	orr.w	r3, r3, #16
 800682e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b03      	cmp	r3, #3
 8006836:	d003      	beq.n	8006840 <SAI_InterruptFlag+0x4c>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2b02      	cmp	r3, #2
 800683e:	d104      	bne.n	800684a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	e003      	b.n	8006852 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f043 0304 	orr.w	r3, r3, #4
 8006850:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006852:	68fb      	ldr	r3, [r7, #12]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006868:	4b17      	ldr	r3, [pc, #92]	@ (80068c8 <SAI_Disable+0x68>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a17      	ldr	r2, [pc, #92]	@ (80068cc <SAI_Disable+0x6c>)
 800686e:	fba2 2303 	umull	r2, r3, r2, r3
 8006872:	0b1b      	lsrs	r3, r3, #12
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800688a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	1e5a      	subs	r2, r3, #1
 8006890:	60fa      	str	r2, [r7, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10a      	bne.n	80068ac <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800689c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	72fb      	strb	r3, [r7, #11]
      break;
 80068aa:	e006      	b.n	80068ba <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1e8      	bne.n	800688c <SAI_Disable+0x2c>

  return status;
 80068ba:	7afb      	ldrb	r3, [r7, #11]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	20000000 	.word	0x20000000
 80068cc:	95cbec1b 	.word	0x95cbec1b

080068d0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068dc:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068e6:	d01c      	beq.n	8006922 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80068f6:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0U;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006900:	2100      	movs	r1, #0
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7ff ff76 	bl	80067f4 <SAI_InterruptFlag>
 8006908:	4603      	mov	r3, r0
 800690a:	43d9      	mvns	r1, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	691a      	ldr	r2, [r3, #16]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	400a      	ands	r2, r1
 8006918:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f7fb fb3c 	bl	8001fa0 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006928:	bf00      	nop
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800693c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f7fb fb44 	bl	8001fcc <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006944:	bf00      	nop
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006958:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006960:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006970:	2b01      	cmp	r3, #1
 8006972:	d004      	beq.n	800697e <SAI_DMAError+0x32>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800697a:	2b01      	cmp	r3, #1
 800697c:	d112      	bne.n	80069a4 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800698c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f7ff ff66 	bl	8006860 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f7ff fded 	bl	8006584 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80069aa:	bf00      	nop
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
	...

080069b4 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d00c      	beq.n	80069de <SAI_BlockSynchroConfig+0x2a>
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d80d      	bhi.n	80069e4 <SAI_BlockSynchroConfig+0x30>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <SAI_BlockSynchroConfig+0x1e>
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d003      	beq.n	80069d8 <SAI_BlockSynchroConfig+0x24>
 80069d0:	e008      	b.n	80069e4 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	60fb      	str	r3, [r7, #12]
      break;
 80069d6:	e008      	b.n	80069ea <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80069d8:	2310      	movs	r3, #16
 80069da:	60fb      	str	r3, [r7, #12]
      break;
 80069dc:	e005      	b.n	80069ea <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80069de:	2320      	movs	r3, #32
 80069e0:	60fb      	str	r3, [r7, #12]
      break;
 80069e2:	e002      	b.n	80069ea <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	60fb      	str	r3, [r7, #12]
      break;
 80069e8:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d103      	bne.n	80069fa <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f043 0301 	orr.w	r3, r3, #1
 80069f8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a0b      	ldr	r2, [pc, #44]	@ (8006a2c <SAI_BlockSynchroConfig+0x78>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d004      	beq.n	8006a0e <SAI_BlockSynchroConfig+0x5a>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a09      	ldr	r2, [pc, #36]	@ (8006a30 <SAI_BlockSynchroConfig+0x7c>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d103      	bne.n	8006a16 <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 8006a0e:	4a09      	ldr	r2, [pc, #36]	@ (8006a34 <SAI_BlockSynchroConfig+0x80>)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	e003      	b.n	8006a1e <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006a16:	4a08      	ldr	r2, [pc, #32]	@ (8006a38 <SAI_BlockSynchroConfig+0x84>)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8006a1c:	bf00      	nop
 8006a1e:	bf00      	nop
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	40015804 	.word	0x40015804
 8006a30:	40015824 	.word	0x40015824
 8006a34:	40015800 	.word	0x40015800
 8006a38:	40015c00 	.word	0x40015c00

08006a3c <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8006a78 <SAI_GetInputClock+0x3c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d004      	beq.n	8006a5c <SAI_GetInputClock+0x20>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a09      	ldr	r2, [pc, #36]	@ (8006a7c <SAI_GetInputClock+0x40>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d104      	bne.n	8006a66 <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006a5c:	2004      	movs	r0, #4
 8006a5e:	f7fe fd15 	bl	800548c <HAL_RCCEx_GetPeriphCLKFreq>
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	e003      	b.n	8006a6e <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006a66:	2008      	movs	r0, #8
 8006a68:	f7fe fd10 	bl	800548c <HAL_RCCEx_GetPeriphCLKFreq>
 8006a6c:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	40015804 	.word	0x40015804
 8006a7c:	40015824 	.word	0x40015824

08006a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e041      	b.n	8006b16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d106      	bne.n	8006aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7fb fc88 	bl	80023bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	3304      	adds	r3, #4
 8006abc:	4619      	mov	r1, r3
 8006abe:	4610      	mov	r0, r2
 8006ac0:	f000 f9ae 	bl	8006e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
	...

08006b20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d001      	beq.n	8006b38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e046      	b.n	8006bc6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a23      	ldr	r2, [pc, #140]	@ (8006bd4 <HAL_TIM_Base_Start+0xb4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d022      	beq.n	8006b90 <HAL_TIM_Base_Start+0x70>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b52:	d01d      	beq.n	8006b90 <HAL_TIM_Base_Start+0x70>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a1f      	ldr	r2, [pc, #124]	@ (8006bd8 <HAL_TIM_Base_Start+0xb8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d018      	beq.n	8006b90 <HAL_TIM_Base_Start+0x70>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a1e      	ldr	r2, [pc, #120]	@ (8006bdc <HAL_TIM_Base_Start+0xbc>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d013      	beq.n	8006b90 <HAL_TIM_Base_Start+0x70>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8006be0 <HAL_TIM_Base_Start+0xc0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d00e      	beq.n	8006b90 <HAL_TIM_Base_Start+0x70>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a1b      	ldr	r2, [pc, #108]	@ (8006be4 <HAL_TIM_Base_Start+0xc4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d009      	beq.n	8006b90 <HAL_TIM_Base_Start+0x70>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a19      	ldr	r2, [pc, #100]	@ (8006be8 <HAL_TIM_Base_Start+0xc8>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d004      	beq.n	8006b90 <HAL_TIM_Base_Start+0x70>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a18      	ldr	r2, [pc, #96]	@ (8006bec <HAL_TIM_Base_Start+0xcc>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d111      	bne.n	8006bb4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 0307 	and.w	r3, r3, #7
 8006b9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2b06      	cmp	r3, #6
 8006ba0:	d010      	beq.n	8006bc4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f042 0201 	orr.w	r2, r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bb2:	e007      	b.n	8006bc4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0201 	orr.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	40010000 	.word	0x40010000
 8006bd8:	40000400 	.word	0x40000400
 8006bdc:	40000800 	.word	0x40000800
 8006be0:	40000c00 	.word	0x40000c00
 8006be4:	40010400 	.word	0x40010400
 8006be8:	40014000 	.word	0x40014000
 8006bec:	40001800 	.word	0x40001800

08006bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d020      	beq.n	8006c54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01b      	beq.n	8006c54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f06f 0202 	mvn.w	r2, #2
 8006c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f8d2 	bl	8006de4 <HAL_TIM_IC_CaptureCallback>
 8006c40:	e005      	b.n	8006c4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f8c4 	bl	8006dd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f8d5 	bl	8006df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f003 0304 	and.w	r3, r3, #4
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d020      	beq.n	8006ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d01b      	beq.n	8006ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0204 	mvn.w	r2, #4
 8006c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2202      	movs	r2, #2
 8006c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f8ac 	bl	8006de4 <HAL_TIM_IC_CaptureCallback>
 8006c8c:	e005      	b.n	8006c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f89e 	bl	8006dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f8af 	bl	8006df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f003 0308 	and.w	r3, r3, #8
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d020      	beq.n	8006cec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f003 0308 	and.w	r3, r3, #8
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d01b      	beq.n	8006cec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f06f 0208 	mvn.w	r2, #8
 8006cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2204      	movs	r2, #4
 8006cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	f003 0303 	and.w	r3, r3, #3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f886 	bl	8006de4 <HAL_TIM_IC_CaptureCallback>
 8006cd8:	e005      	b.n	8006ce6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f878 	bl	8006dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f889 	bl	8006df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f003 0310 	and.w	r3, r3, #16
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d020      	beq.n	8006d38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f003 0310 	and.w	r3, r3, #16
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d01b      	beq.n	8006d38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f06f 0210 	mvn.w	r2, #16
 8006d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2208      	movs	r2, #8
 8006d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f860 	bl	8006de4 <HAL_TIM_IC_CaptureCallback>
 8006d24:	e005      	b.n	8006d32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f852 	bl	8006dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f863 	bl	8006df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00c      	beq.n	8006d5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d007      	beq.n	8006d5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f06f 0201 	mvn.w	r2, #1
 8006d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7fb f90c 	bl	8001f74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00c      	beq.n	8006d80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d007      	beq.n	8006d80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f97c 	bl	8007078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00c      	beq.n	8006da4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d007      	beq.n	8006da4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f834 	bl	8006e0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f003 0320 	and.w	r3, r3, #32
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00c      	beq.n	8006dc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f003 0320 	and.w	r3, r3, #32
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d007      	beq.n	8006dc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0220 	mvn.w	r2, #32
 8006dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f94e 	bl	8007064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dc8:	bf00      	nop
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a43      	ldr	r2, [pc, #268]	@ (8006f40 <TIM_Base_SetConfig+0x120>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d013      	beq.n	8006e60 <TIM_Base_SetConfig+0x40>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e3e:	d00f      	beq.n	8006e60 <TIM_Base_SetConfig+0x40>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a40      	ldr	r2, [pc, #256]	@ (8006f44 <TIM_Base_SetConfig+0x124>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d00b      	beq.n	8006e60 <TIM_Base_SetConfig+0x40>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a3f      	ldr	r2, [pc, #252]	@ (8006f48 <TIM_Base_SetConfig+0x128>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d007      	beq.n	8006e60 <TIM_Base_SetConfig+0x40>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a3e      	ldr	r2, [pc, #248]	@ (8006f4c <TIM_Base_SetConfig+0x12c>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d003      	beq.n	8006e60 <TIM_Base_SetConfig+0x40>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a3d      	ldr	r2, [pc, #244]	@ (8006f50 <TIM_Base_SetConfig+0x130>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d108      	bne.n	8006e72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a32      	ldr	r2, [pc, #200]	@ (8006f40 <TIM_Base_SetConfig+0x120>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d02b      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e80:	d027      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a2f      	ldr	r2, [pc, #188]	@ (8006f44 <TIM_Base_SetConfig+0x124>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d023      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a2e      	ldr	r2, [pc, #184]	@ (8006f48 <TIM_Base_SetConfig+0x128>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d01f      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a2d      	ldr	r2, [pc, #180]	@ (8006f4c <TIM_Base_SetConfig+0x12c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d01b      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a2c      	ldr	r2, [pc, #176]	@ (8006f50 <TIM_Base_SetConfig+0x130>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d017      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8006f54 <TIM_Base_SetConfig+0x134>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d013      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a2a      	ldr	r2, [pc, #168]	@ (8006f58 <TIM_Base_SetConfig+0x138>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d00f      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a29      	ldr	r2, [pc, #164]	@ (8006f5c <TIM_Base_SetConfig+0x13c>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d00b      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a28      	ldr	r2, [pc, #160]	@ (8006f60 <TIM_Base_SetConfig+0x140>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d007      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a27      	ldr	r2, [pc, #156]	@ (8006f64 <TIM_Base_SetConfig+0x144>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d003      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a26      	ldr	r2, [pc, #152]	@ (8006f68 <TIM_Base_SetConfig+0x148>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d108      	bne.n	8006ee4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	689a      	ldr	r2, [r3, #8]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a0e      	ldr	r2, [pc, #56]	@ (8006f40 <TIM_Base_SetConfig+0x120>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d003      	beq.n	8006f12 <TIM_Base_SetConfig+0xf2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a10      	ldr	r2, [pc, #64]	@ (8006f50 <TIM_Base_SetConfig+0x130>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d103      	bne.n	8006f1a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	691a      	ldr	r2, [r3, #16]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f043 0204 	orr.w	r2, r3, #4
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	601a      	str	r2, [r3, #0]
}
 8006f32:	bf00      	nop
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	40010000 	.word	0x40010000
 8006f44:	40000400 	.word	0x40000400
 8006f48:	40000800 	.word	0x40000800
 8006f4c:	40000c00 	.word	0x40000c00
 8006f50:	40010400 	.word	0x40010400
 8006f54:	40014000 	.word	0x40014000
 8006f58:	40014400 	.word	0x40014400
 8006f5c:	40014800 	.word	0x40014800
 8006f60:	40001800 	.word	0x40001800
 8006f64:	40001c00 	.word	0x40001c00
 8006f68:	40002000 	.word	0x40002000

08006f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d101      	bne.n	8006f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f80:	2302      	movs	r3, #2
 8006f82:	e05a      	b.n	800703a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a21      	ldr	r2, [pc, #132]	@ (8007048 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d022      	beq.n	800700e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fd0:	d01d      	beq.n	800700e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800704c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d018      	beq.n	800700e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8007050 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d013      	beq.n	800700e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a1a      	ldr	r2, [pc, #104]	@ (8007054 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d00e      	beq.n	800700e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a18      	ldr	r2, [pc, #96]	@ (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d009      	beq.n	800700e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a17      	ldr	r2, [pc, #92]	@ (800705c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d004      	beq.n	800700e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a15      	ldr	r2, [pc, #84]	@ (8007060 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d10c      	bne.n	8007028 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007014:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	4313      	orrs	r3, r2
 800701e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	40010000 	.word	0x40010000
 800704c:	40000400 	.word	0x40000400
 8007050:	40000800 	.word	0x40000800
 8007054:	40000c00 	.word	0x40000c00
 8007058:	40010400 	.word	0x40010400
 800705c:	40014000 	.word	0x40014000
 8007060:	40001800 	.word	0x40001800

08007064 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <arm_cfft_radix8by2_f32>:
 800708c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007090:	ed2d 8b08 	vpush	{d8-d11}
 8007094:	4607      	mov	r7, r0
 8007096:	4608      	mov	r0, r1
 8007098:	f8b7 e000 	ldrh.w	lr, [r7]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80070a2:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 80070a6:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80070aa:	f000 80b0 	beq.w	800720e <arm_cfft_radix8by2_f32+0x182>
 80070ae:	008b      	lsls	r3, r1, #2
 80070b0:	3310      	adds	r3, #16
 80070b2:	18c6      	adds	r6, r0, r3
 80070b4:	3210      	adds	r2, #16
 80070b6:	4443      	add	r3, r8
 80070b8:	f100 0510 	add.w	r5, r0, #16
 80070bc:	f108 0410 	add.w	r4, r8, #16
 80070c0:	ed54 1a04 	vldr	s3, [r4, #-16]
 80070c4:	ed54 6a03 	vldr	s13, [r4, #-12]
 80070c8:	ed13 4a04 	vldr	s8, [r3, #-16]
 80070cc:	ed53 3a03 	vldr	s7, [r3, #-12]
 80070d0:	ed53 5a02 	vldr	s11, [r3, #-8]
 80070d4:	ed13 5a01 	vldr	s10, [r3, #-4]
 80070d8:	ed14 0a02 	vldr	s0, [r4, #-8]
 80070dc:	ed54 7a01 	vldr	s15, [r4, #-4]
 80070e0:	ed16 2a04 	vldr	s4, [r6, #-16]
 80070e4:	ed56 2a03 	vldr	s5, [r6, #-12]
 80070e8:	ed15 6a03 	vldr	s12, [r5, #-12]
 80070ec:	ed15 7a01 	vldr	s14, [r5, #-4]
 80070f0:	ed15 3a04 	vldr	s6, [r5, #-16]
 80070f4:	ed56 0a02 	vldr	s1, [r6, #-8]
 80070f8:	ed16 1a01 	vldr	s2, [r6, #-4]
 80070fc:	ed55 4a02 	vldr	s9, [r5, #-8]
 8007100:	ee73 ba21 	vadd.f32	s23, s6, s3
 8007104:	ee36 ba26 	vadd.f32	s22, s12, s13
 8007108:	ee37 aa27 	vadd.f32	s20, s14, s15
 800710c:	ee72 9a04 	vadd.f32	s19, s4, s8
 8007110:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8007114:	ee31 8a05 	vadd.f32	s16, s2, s10
 8007118:	ee74 aa80 	vadd.f32	s21, s9, s0
 800711c:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8007120:	ed45 ba04 	vstr	s23, [r5, #-16]
 8007124:	ed05 ba03 	vstr	s22, [r5, #-12]
 8007128:	ed45 aa02 	vstr	s21, [r5, #-8]
 800712c:	ed05 aa01 	vstr	s20, [r5, #-4]
 8007130:	ed06 8a01 	vstr	s16, [r6, #-4]
 8007134:	ed46 9a04 	vstr	s19, [r6, #-16]
 8007138:	ed06 9a03 	vstr	s18, [r6, #-12]
 800713c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8007140:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007144:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8007148:	ed12 6a03 	vldr	s12, [r2, #-12]
 800714c:	ed52 2a04 	vldr	s5, [r2, #-16]
 8007150:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007154:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007158:	ee26 8a86 	vmul.f32	s16, s13, s12
 800715c:	ee24 2a06 	vmul.f32	s4, s8, s12
 8007160:	ee63 1a22 	vmul.f32	s3, s6, s5
 8007164:	ee24 4a22 	vmul.f32	s8, s8, s5
 8007168:	ee23 3a06 	vmul.f32	s6, s6, s12
 800716c:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8007170:	ee23 6a86 	vmul.f32	s12, s7, s12
 8007174:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8007178:	ee36 6a04 	vadd.f32	s12, s12, s8
 800717c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007180:	ee72 3a63 	vsub.f32	s7, s4, s7
 8007184:	ee71 2a88 	vadd.f32	s5, s3, s16
 8007188:	ed44 6a03 	vstr	s13, [r4, #-12]
 800718c:	ed44 2a04 	vstr	s5, [r4, #-16]
 8007190:	ed43 3a04 	vstr	s7, [r3, #-16]
 8007194:	ed03 6a03 	vstr	s12, [r3, #-12]
 8007198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800719c:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80071a0:	ed12 7a01 	vldr	s14, [r2, #-4]
 80071a4:	ed52 5a02 	vldr	s11, [r2, #-8]
 80071a8:	ee35 6a41 	vsub.f32	s12, s10, s2
 80071ac:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80071b0:	ee67 3a87 	vmul.f32	s7, s15, s14
 80071b4:	ee26 5a87 	vmul.f32	s10, s13, s14
 80071b8:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80071bc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80071c0:	ee64 4a87 	vmul.f32	s9, s9, s14
 80071c4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80071c8:	ee26 7a07 	vmul.f32	s14, s12, s14
 80071cc:	ee26 6a25 	vmul.f32	s12, s12, s11
 80071d0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80071d4:	ee74 5a23 	vadd.f32	s11, s8, s7
 80071d8:	ee35 6a46 	vsub.f32	s12, s10, s12
 80071dc:	ee37 7a26 	vadd.f32	s14, s14, s13
 80071e0:	f1be 0e01 	subs.w	lr, lr, #1
 80071e4:	ed44 5a02 	vstr	s11, [r4, #-8]
 80071e8:	f105 0510 	add.w	r5, r5, #16
 80071ec:	ed44 7a01 	vstr	s15, [r4, #-4]
 80071f0:	f106 0610 	add.w	r6, r6, #16
 80071f4:	ed03 6a02 	vstr	s12, [r3, #-8]
 80071f8:	ed03 7a01 	vstr	s14, [r3, #-4]
 80071fc:	f102 0210 	add.w	r2, r2, #16
 8007200:	f104 0410 	add.w	r4, r4, #16
 8007204:	f103 0310 	add.w	r3, r3, #16
 8007208:	f47f af5a 	bne.w	80070c0 <arm_cfft_radix8by2_f32+0x34>
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	b28c      	uxth	r4, r1
 8007210:	4621      	mov	r1, r4
 8007212:	2302      	movs	r3, #2
 8007214:	f000 fb22 	bl	800785c <arm_radix8_butterfly_f32>
 8007218:	ecbd 8b08 	vpop	{d8-d11}
 800721c:	4621      	mov	r1, r4
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	4640      	mov	r0, r8
 8007222:	2302      	movs	r3, #2
 8007224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007228:	f000 bb18 	b.w	800785c <arm_radix8_butterfly_f32>

0800722c <arm_cfft_radix8by4_f32>:
 800722c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007230:	ed2d 8b0a 	vpush	{d8-d12}
 8007234:	8802      	ldrh	r2, [r0, #0]
 8007236:	ed91 6a00 	vldr	s12, [r1]
 800723a:	b08f      	sub	sp, #60	@ 0x3c
 800723c:	460f      	mov	r7, r1
 800723e:	0852      	lsrs	r2, r2, #1
 8007240:	6841      	ldr	r1, [r0, #4]
 8007242:	900c      	str	r0, [sp, #48]	@ 0x30
 8007244:	0093      	lsls	r3, r2, #2
 8007246:	4638      	mov	r0, r7
 8007248:	4418      	add	r0, r3
 800724a:	4606      	mov	r6, r0
 800724c:	9009      	str	r0, [sp, #36]	@ 0x24
 800724e:	4418      	add	r0, r3
 8007250:	edd0 6a00 	vldr	s13, [r0]
 8007254:	ed96 4a00 	vldr	s8, [r6]
 8007258:	edd6 2a01 	vldr	s5, [r6, #4]
 800725c:	edd0 7a01 	vldr	s15, [r0, #4]
 8007260:	900a      	str	r0, [sp, #40]	@ 0x28
 8007262:	ee76 5a26 	vadd.f32	s11, s12, s13
 8007266:	4604      	mov	r4, r0
 8007268:	4625      	mov	r5, r4
 800726a:	441c      	add	r4, r3
 800726c:	edd4 4a00 	vldr	s9, [r4]
 8007270:	ed97 7a01 	vldr	s14, [r7, #4]
 8007274:	ed94 3a01 	vldr	s6, [r4, #4]
 8007278:	9401      	str	r4, [sp, #4]
 800727a:	ee35 5a84 	vadd.f32	s10, s11, s8
 800727e:	4630      	mov	r0, r6
 8007280:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007284:	463e      	mov	r6, r7
 8007286:	ee15 ea10 	vmov	lr, s10
 800728a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800728e:	f846 eb08 	str.w	lr, [r6], #8
 8007292:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007296:	ed90 5a01 	vldr	s10, [r0, #4]
 800729a:	9605      	str	r6, [sp, #20]
 800729c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072a0:	9e01      	ldr	r6, [sp, #4]
 80072a2:	9707      	str	r7, [sp, #28]
 80072a4:	ee76 3aa2 	vadd.f32	s7, s13, s5
 80072a8:	ed96 2a01 	vldr	s4, [r6, #4]
 80072ac:	ee36 7a05 	vadd.f32	s14, s12, s10
 80072b0:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80072b4:	ee37 5ac4 	vsub.f32	s10, s15, s8
 80072b8:	ee77 7a84 	vadd.f32	s15, s15, s8
 80072bc:	ee33 4ac3 	vsub.f32	s8, s7, s6
 80072c0:	4604      	mov	r4, r0
 80072c2:	46a3      	mov	fp, r4
 80072c4:	ee37 7a02 	vadd.f32	s14, s14, s4
 80072c8:	ee35 5a24 	vadd.f32	s10, s10, s9
 80072cc:	ee14 8a10 	vmov	r8, s8
 80072d0:	46a4      	mov	ip, r4
 80072d2:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80072d6:	ed87 7a01 	vstr	s14, [r7, #4]
 80072da:	f84b 8b08 	str.w	r8, [fp], #8
 80072de:	f1ac 0704 	sub.w	r7, ip, #4
 80072e2:	ed8c 5a01 	vstr	s10, [ip, #4]
 80072e6:	f101 0c08 	add.w	ip, r1, #8
 80072ea:	462c      	mov	r4, r5
 80072ec:	f8cd c010 	str.w	ip, [sp, #16]
 80072f0:	ee15 ca90 	vmov	ip, s11
 80072f4:	ee36 6a62 	vsub.f32	s12, s12, s5
 80072f8:	f844 cb08 	str.w	ip, [r4], #8
 80072fc:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8007300:	ee36 6a43 	vsub.f32	s12, s12, s6
 8007304:	9406      	str	r4, [sp, #24]
 8007306:	ee76 6a83 	vadd.f32	s13, s13, s6
 800730a:	f101 0410 	add.w	r4, r1, #16
 800730e:	0852      	lsrs	r2, r2, #1
 8007310:	9402      	str	r4, [sp, #8]
 8007312:	ed85 6a01 	vstr	s12, [r5, #4]
 8007316:	462c      	mov	r4, r5
 8007318:	f101 0518 	add.w	r5, r1, #24
 800731c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800731e:	46b2      	mov	sl, r6
 8007320:	9503      	str	r5, [sp, #12]
 8007322:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007326:	3a02      	subs	r2, #2
 8007328:	ee16 5a90 	vmov	r5, s13
 800732c:	46b6      	mov	lr, r6
 800732e:	4630      	mov	r0, r6
 8007330:	0852      	lsrs	r2, r2, #1
 8007332:	f84a 5b08 	str.w	r5, [sl], #8
 8007336:	f1a0 0604 	sub.w	r6, r0, #4
 800733a:	edce 7a01 	vstr	s15, [lr, #4]
 800733e:	9208      	str	r2, [sp, #32]
 8007340:	f000 8130 	beq.w	80075a4 <arm_cfft_radix8by4_f32+0x378>
 8007344:	4691      	mov	r9, r2
 8007346:	9a07      	ldr	r2, [sp, #28]
 8007348:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800734c:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8007350:	3b08      	subs	r3, #8
 8007352:	f102 0510 	add.w	r5, r2, #16
 8007356:	f101 0c20 	add.w	ip, r1, #32
 800735a:	f1a4 020c 	sub.w	r2, r4, #12
 800735e:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8007362:	4433      	add	r3, r6
 8007364:	3410      	adds	r4, #16
 8007366:	4650      	mov	r0, sl
 8007368:	4659      	mov	r1, fp
 800736a:	ed55 3a02 	vldr	s7, [r5, #-8]
 800736e:	ed14 5a02 	vldr	s10, [r4, #-8]
 8007372:	ed91 7a00 	vldr	s14, [r1]
 8007376:	edd0 7a00 	vldr	s15, [r0]
 800737a:	ed54 5a01 	vldr	s11, [r4, #-4]
 800737e:	ed15 4a01 	vldr	s8, [r5, #-4]
 8007382:	edd0 6a01 	vldr	s13, [r0, #4]
 8007386:	ed91 6a01 	vldr	s12, [r1, #4]
 800738a:	ee33 8a85 	vadd.f32	s16, s7, s10
 800738e:	ee34 0a25 	vadd.f32	s0, s8, s11
 8007392:	ee78 4a07 	vadd.f32	s9, s16, s14
 8007396:	ee74 5a65 	vsub.f32	s11, s8, s11
 800739a:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800739e:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80073a2:	ed45 4a02 	vstr	s9, [r5, #-8]
 80073a6:	edd1 4a01 	vldr	s9, [r1, #4]
 80073aa:	ed90 4a01 	vldr	s8, [r0, #4]
 80073ae:	ee70 4a24 	vadd.f32	s9, s0, s9
 80073b2:	ee75 aa06 	vadd.f32	s21, s10, s12
 80073b6:	ee74 4a84 	vadd.f32	s9, s9, s8
 80073ba:	ee35 aac7 	vsub.f32	s20, s11, s14
 80073be:	ed45 4a01 	vstr	s9, [r5, #-4]
 80073c2:	edd6 1a00 	vldr	s3, [r6]
 80073c6:	edd7 0a00 	vldr	s1, [r7]
 80073ca:	ed92 4a02 	vldr	s8, [r2, #8]
 80073ce:	edd3 3a02 	vldr	s7, [r3, #8]
 80073d2:	ed93 2a01 	vldr	s4, [r3, #4]
 80073d6:	ed16 1a01 	vldr	s2, [r6, #-4]
 80073da:	edd2 2a01 	vldr	s5, [r2, #4]
 80073de:	ed57 9a01 	vldr	s19, [r7, #-4]
 80073e2:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80073e6:	ee39 3a81 	vadd.f32	s6, s19, s2
 80073ea:	ee74 8a84 	vadd.f32	s17, s9, s8
 80073ee:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80073f2:	ee78 8aa3 	vadd.f32	s17, s17, s7
 80073f6:	ee7a aae6 	vsub.f32	s21, s21, s13
 80073fa:	ee18 aa90 	vmov	sl, s17
 80073fe:	f847 a908 	str.w	sl, [r7], #-8
 8007402:	edd2 8a01 	vldr	s17, [r2, #4]
 8007406:	ed93 9a01 	vldr	s18, [r3, #4]
 800740a:	ee73 8a28 	vadd.f32	s17, s6, s17
 800740e:	ee3a aa27 	vadd.f32	s20, s20, s15
 8007412:	ee78 8a89 	vadd.f32	s17, s17, s18
 8007416:	ee74 0a63 	vsub.f32	s1, s8, s7
 800741a:	edc7 8a01 	vstr	s17, [r7, #4]
 800741e:	ed18 ba02 	vldr	s22, [r8, #-8]
 8007422:	ed58 8a01 	vldr	s17, [r8, #-4]
 8007426:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800742a:	ee6a ba28 	vmul.f32	s23, s20, s17
 800742e:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8007432:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8007436:	ee31 9a20 	vadd.f32	s18, s2, s1
 800743a:	ee79 9a82 	vadd.f32	s19, s19, s4
 800743e:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8007442:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8007446:	ee69 baa8 	vmul.f32	s23, s19, s17
 800744a:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800744e:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8007452:	ee69 8a28 	vmul.f32	s17, s18, s17
 8007456:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800745a:	ee1c aa10 	vmov	sl, s24
 800745e:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8007462:	f841 ab08 	str.w	sl, [r1], #8
 8007466:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800746a:	ee3b bacb 	vsub.f32	s22, s23, s22
 800746e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8007472:	ee33 3a62 	vsub.f32	s6, s6, s5
 8007476:	ed01 aa01 	vstr	s20, [r1, #-4]
 800747a:	edc2 8a01 	vstr	s17, [r2, #4]
 800747e:	ed82 ba02 	vstr	s22, [r2, #8]
 8007482:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8007486:	ee74 3a63 	vsub.f32	s7, s8, s7
 800748a:	ee38 8a47 	vsub.f32	s16, s16, s14
 800748e:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8007492:	ee30 0a46 	vsub.f32	s0, s0, s12
 8007496:	ee33 3a42 	vsub.f32	s6, s6, s4
 800749a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800749e:	ee30 0a66 	vsub.f32	s0, s0, s13
 80074a2:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80074a6:	ee63 8a04 	vmul.f32	s17, s6, s8
 80074aa:	ee28 aa24 	vmul.f32	s20, s16, s9
 80074ae:	ee60 9a04 	vmul.f32	s19, s0, s8
 80074b2:	ee28 8a04 	vmul.f32	s16, s16, s8
 80074b6:	ee20 0a24 	vmul.f32	s0, s0, s9
 80074ba:	ee63 3a84 	vmul.f32	s7, s7, s8
 80074be:	ee39 4a68 	vsub.f32	s8, s18, s17
 80074c2:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80074c6:	ee14 aa10 	vmov	sl, s8
 80074ca:	ee30 0a48 	vsub.f32	s0, s0, s16
 80074ce:	ee63 4a24 	vmul.f32	s9, s6, s9
 80074d2:	ed44 9a02 	vstr	s19, [r4, #-8]
 80074d6:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80074da:	ed04 0a01 	vstr	s0, [r4, #-4]
 80074de:	f846 a908 	str.w	sl, [r6], #-8
 80074e2:	ee35 6a46 	vsub.f32	s12, s10, s12
 80074e6:	ee35 7a87 	vadd.f32	s14, s11, s14
 80074ea:	edc6 3a01 	vstr	s7, [r6, #4]
 80074ee:	ee76 6a26 	vadd.f32	s13, s12, s13
 80074f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074f6:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 80074fa:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 80074fe:	ee67 5a86 	vmul.f32	s11, s15, s12
 8007502:	ee26 5a87 	vmul.f32	s10, s13, s14
 8007506:	ee72 2a62 	vsub.f32	s5, s4, s5
 800750a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800750e:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8007512:	ee75 5a25 	vadd.f32	s11, s10, s11
 8007516:	ee62 0a86 	vmul.f32	s1, s5, s12
 800751a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800751e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007522:	ee21 6a06 	vmul.f32	s12, s2, s12
 8007526:	ee62 2a87 	vmul.f32	s5, s5, s14
 800752a:	ee21 1a07 	vmul.f32	s2, s2, s14
 800752e:	ee15 aa90 	vmov	sl, s11
 8007532:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007536:	f840 ab08 	str.w	sl, [r0], #8
 800753a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800753e:	ee76 2a22 	vadd.f32	s5, s12, s5
 8007542:	f1b9 0901 	subs.w	r9, r9, #1
 8007546:	ed40 7a01 	vstr	s15, [r0, #-4]
 800754a:	f105 0508 	add.w	r5, r5, #8
 800754e:	ed83 1a02 	vstr	s2, [r3, #8]
 8007552:	edc3 2a01 	vstr	s5, [r3, #4]
 8007556:	f108 0808 	add.w	r8, r8, #8
 800755a:	f1a2 0208 	sub.w	r2, r2, #8
 800755e:	f10c 0c10 	add.w	ip, ip, #16
 8007562:	f104 0408 	add.w	r4, r4, #8
 8007566:	f10e 0e18 	add.w	lr, lr, #24
 800756a:	f1a3 0308 	sub.w	r3, r3, #8
 800756e:	f47f aefc 	bne.w	800736a <arm_cfft_radix8by4_f32+0x13e>
 8007572:	9908      	ldr	r1, [sp, #32]
 8007574:	9802      	ldr	r0, [sp, #8]
 8007576:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 800757a:	00cb      	lsls	r3, r1, #3
 800757c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007580:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007584:	9102      	str	r1, [sp, #8]
 8007586:	9905      	ldr	r1, [sp, #20]
 8007588:	4419      	add	r1, r3
 800758a:	9105      	str	r1, [sp, #20]
 800758c:	9904      	ldr	r1, [sp, #16]
 800758e:	4419      	add	r1, r3
 8007590:	9104      	str	r1, [sp, #16]
 8007592:	9906      	ldr	r1, [sp, #24]
 8007594:	449b      	add	fp, r3
 8007596:	4419      	add	r1, r3
 8007598:	449a      	add	sl, r3
 800759a:	9b03      	ldr	r3, [sp, #12]
 800759c:	9106      	str	r1, [sp, #24]
 800759e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075a2:	9303      	str	r3, [sp, #12]
 80075a4:	9a05      	ldr	r2, [sp, #20]
 80075a6:	9806      	ldr	r0, [sp, #24]
 80075a8:	ed92 4a00 	vldr	s8, [r2]
 80075ac:	ed90 7a00 	vldr	s14, [r0]
 80075b0:	ed9b 3a00 	vldr	s6, [fp]
 80075b4:	edda 3a00 	vldr	s7, [sl]
 80075b8:	edd2 4a01 	vldr	s9, [r2, #4]
 80075bc:	edd0 6a01 	vldr	s13, [r0, #4]
 80075c0:	ed9a 2a01 	vldr	s4, [sl, #4]
 80075c4:	eddb 7a01 	vldr	s15, [fp, #4]
 80075c8:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80075cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075ce:	ee34 6a07 	vadd.f32	s12, s8, s14
 80075d2:	ee74 5aa6 	vadd.f32	s11, s9, s13
 80075d6:	ee36 5a03 	vadd.f32	s10, s12, s6
 80075da:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80075de:	ee35 5a23 	vadd.f32	s10, s10, s7
 80075e2:	ee34 7a47 	vsub.f32	s14, s8, s14
 80075e6:	ed82 5a00 	vstr	s10, [r2]
 80075ea:	ed9b 5a01 	vldr	s10, [fp, #4]
 80075ee:	edda 4a01 	vldr	s9, [sl, #4]
 80075f2:	ee35 5a85 	vadd.f32	s10, s11, s10
 80075f6:	ee37 4a27 	vadd.f32	s8, s14, s15
 80075fa:	ee35 5a24 	vadd.f32	s10, s10, s9
 80075fe:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8007602:	ed82 5a01 	vstr	s10, [r2, #4]
 8007606:	9a04      	ldr	r2, [sp, #16]
 8007608:	ee34 5aa3 	vadd.f32	s10, s9, s7
 800760c:	edd2 1a00 	vldr	s3, [r2]
 8007610:	edd2 2a01 	vldr	s5, [r2, #4]
 8007614:	9a02      	ldr	r2, [sp, #8]
 8007616:	ee34 4a42 	vsub.f32	s8, s8, s4
 800761a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800761e:	ee64 4a21 	vmul.f32	s9, s8, s3
 8007622:	ee24 4a22 	vmul.f32	s8, s8, s5
 8007626:	ee65 2a22 	vmul.f32	s5, s10, s5
 800762a:	ee25 5a21 	vmul.f32	s10, s10, s3
 800762e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8007632:	ee35 5a44 	vsub.f32	s10, s10, s8
 8007636:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800763a:	edcb 2a00 	vstr	s5, [fp]
 800763e:	ed8b 5a01 	vstr	s10, [fp, #4]
 8007642:	ed92 4a01 	vldr	s8, [r2, #4]
 8007646:	ed92 5a00 	vldr	s10, [r2]
 800764a:	9a03      	ldr	r2, [sp, #12]
 800764c:	ee36 6a63 	vsub.f32	s12, s12, s7
 8007650:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8007654:	ee66 4a05 	vmul.f32	s9, s12, s10
 8007658:	ee25 5a85 	vmul.f32	s10, s11, s10
 800765c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007660:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007664:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007668:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800766c:	ee76 6a83 	vadd.f32	s13, s13, s6
 8007670:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007674:	ed80 6a01 	vstr	s12, [r0, #4]
 8007678:	edc0 5a00 	vstr	s11, [r0]
 800767c:	edd2 5a01 	vldr	s11, [r2, #4]
 8007680:	9807      	ldr	r0, [sp, #28]
 8007682:	ee77 7a02 	vadd.f32	s15, s14, s4
 8007686:	ee36 7ae3 	vsub.f32	s14, s13, s7
 800768a:	edd2 6a00 	vldr	s13, [r2]
 800768e:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8007692:	ee67 6a26 	vmul.f32	s13, s14, s13
 8007696:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800769a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800769e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80076a2:	ee36 7a07 	vadd.f32	s14, s12, s14
 80076a6:	edca 7a01 	vstr	s15, [sl, #4]
 80076aa:	ed8a 7a00 	vstr	s14, [sl]
 80076ae:	6872      	ldr	r2, [r6, #4]
 80076b0:	4621      	mov	r1, r4
 80076b2:	2304      	movs	r3, #4
 80076b4:	f000 f8d2 	bl	800785c <arm_radix8_butterfly_f32>
 80076b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076ba:	6872      	ldr	r2, [r6, #4]
 80076bc:	4621      	mov	r1, r4
 80076be:	2304      	movs	r3, #4
 80076c0:	f000 f8cc 	bl	800785c <arm_radix8_butterfly_f32>
 80076c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80076c6:	6872      	ldr	r2, [r6, #4]
 80076c8:	4621      	mov	r1, r4
 80076ca:	2304      	movs	r3, #4
 80076cc:	f000 f8c6 	bl	800785c <arm_radix8_butterfly_f32>
 80076d0:	6872      	ldr	r2, [r6, #4]
 80076d2:	9801      	ldr	r0, [sp, #4]
 80076d4:	4621      	mov	r1, r4
 80076d6:	2304      	movs	r3, #4
 80076d8:	b00f      	add	sp, #60	@ 0x3c
 80076da:	ecbd 8b0a 	vpop	{d8-d12}
 80076de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e2:	f000 b8bb 	b.w	800785c <arm_radix8_butterfly_f32>
 80076e6:	bf00      	nop

080076e8 <arm_cfft_f32>:
 80076e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ec:	2a01      	cmp	r2, #1
 80076ee:	4606      	mov	r6, r0
 80076f0:	4617      	mov	r7, r2
 80076f2:	460c      	mov	r4, r1
 80076f4:	4698      	mov	r8, r3
 80076f6:	8805      	ldrh	r5, [r0, #0]
 80076f8:	d054      	beq.n	80077a4 <arm_cfft_f32+0xbc>
 80076fa:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80076fe:	d04c      	beq.n	800779a <arm_cfft_f32+0xb2>
 8007700:	d916      	bls.n	8007730 <arm_cfft_f32+0x48>
 8007702:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8007706:	d01a      	beq.n	800773e <arm_cfft_f32+0x56>
 8007708:	d95c      	bls.n	80077c4 <arm_cfft_f32+0xdc>
 800770a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800770e:	d044      	beq.n	800779a <arm_cfft_f32+0xb2>
 8007710:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8007714:	d105      	bne.n	8007722 <arm_cfft_f32+0x3a>
 8007716:	2301      	movs	r3, #1
 8007718:	6872      	ldr	r2, [r6, #4]
 800771a:	4629      	mov	r1, r5
 800771c:	4620      	mov	r0, r4
 800771e:	f000 f89d 	bl	800785c <arm_radix8_butterfly_f32>
 8007722:	f1b8 0f00 	cmp.w	r8, #0
 8007726:	d111      	bne.n	800774c <arm_cfft_f32+0x64>
 8007728:	2f01      	cmp	r7, #1
 800772a:	d016      	beq.n	800775a <arm_cfft_f32+0x72>
 800772c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007730:	2d20      	cmp	r5, #32
 8007732:	d032      	beq.n	800779a <arm_cfft_f32+0xb2>
 8007734:	d94a      	bls.n	80077cc <arm_cfft_f32+0xe4>
 8007736:	2d40      	cmp	r5, #64	@ 0x40
 8007738:	d0ed      	beq.n	8007716 <arm_cfft_f32+0x2e>
 800773a:	2d80      	cmp	r5, #128	@ 0x80
 800773c:	d1f1      	bne.n	8007722 <arm_cfft_f32+0x3a>
 800773e:	4621      	mov	r1, r4
 8007740:	4630      	mov	r0, r6
 8007742:	f7ff fca3 	bl	800708c <arm_cfft_radix8by2_f32>
 8007746:	f1b8 0f00 	cmp.w	r8, #0
 800774a:	d0ed      	beq.n	8007728 <arm_cfft_f32+0x40>
 800774c:	68b2      	ldr	r2, [r6, #8]
 800774e:	89b1      	ldrh	r1, [r6, #12]
 8007750:	4620      	mov	r0, r4
 8007752:	f7f8 fd5d 	bl	8000210 <arm_bitreversal_32>
 8007756:	2f01      	cmp	r7, #1
 8007758:	d1e8      	bne.n	800772c <arm_cfft_f32+0x44>
 800775a:	ee07 5a90 	vmov	s15, r5
 800775e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007762:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007766:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800776a:	2d00      	cmp	r5, #0
 800776c:	d0de      	beq.n	800772c <arm_cfft_f32+0x44>
 800776e:	f104 0108 	add.w	r1, r4, #8
 8007772:	2300      	movs	r3, #0
 8007774:	3301      	adds	r3, #1
 8007776:	429d      	cmp	r5, r3
 8007778:	f101 0108 	add.w	r1, r1, #8
 800777c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8007780:	ed51 7a03 	vldr	s15, [r1, #-12]
 8007784:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007788:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800778c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8007790:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007794:	d1ee      	bne.n	8007774 <arm_cfft_f32+0x8c>
 8007796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800779a:	4621      	mov	r1, r4
 800779c:	4630      	mov	r0, r6
 800779e:	f7ff fd45 	bl	800722c <arm_cfft_radix8by4_f32>
 80077a2:	e7be      	b.n	8007722 <arm_cfft_f32+0x3a>
 80077a4:	b1ad      	cbz	r5, 80077d2 <arm_cfft_f32+0xea>
 80077a6:	f101 030c 	add.w	r3, r1, #12
 80077aa:	2200      	movs	r2, #0
 80077ac:	ed53 7a02 	vldr	s15, [r3, #-8]
 80077b0:	3201      	adds	r2, #1
 80077b2:	eef1 7a67 	vneg.f32	s15, s15
 80077b6:	4295      	cmp	r5, r2
 80077b8:	ed43 7a02 	vstr	s15, [r3, #-8]
 80077bc:	f103 0308 	add.w	r3, r3, #8
 80077c0:	d1f4      	bne.n	80077ac <arm_cfft_f32+0xc4>
 80077c2:	e79a      	b.n	80076fa <arm_cfft_f32+0x12>
 80077c4:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80077c8:	d0a5      	beq.n	8007716 <arm_cfft_f32+0x2e>
 80077ca:	e7aa      	b.n	8007722 <arm_cfft_f32+0x3a>
 80077cc:	2d10      	cmp	r5, #16
 80077ce:	d0b6      	beq.n	800773e <arm_cfft_f32+0x56>
 80077d0:	e7a7      	b.n	8007722 <arm_cfft_f32+0x3a>
 80077d2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80077d6:	d894      	bhi.n	8007702 <arm_cfft_f32+0x1a>
 80077d8:	e7aa      	b.n	8007730 <arm_cfft_f32+0x48>
 80077da:	bf00      	nop

080077dc <arm_cos_f32>:
 80077dc:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8007850 <arm_cos_f32+0x74>
 80077e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80077e4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80077e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80077ec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80077f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077f4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80077f8:	d504      	bpl.n	8007804 <arm_cos_f32+0x28>
 80077fa:	ee17 3a90 	vmov	r3, s15
 80077fe:	3b01      	subs	r3, #1
 8007800:	ee07 3a90 	vmov	s15, r3
 8007804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007808:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8007854 <arm_cos_f32+0x78>
 800780c:	4a12      	ldr	r2, [pc, #72]	@ (8007858 <arm_cos_f32+0x7c>)
 800780e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007812:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007816:	ee20 0a26 	vmul.f32	s0, s0, s13
 800781a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800781e:	ee17 3a90 	vmov	r3, s15
 8007822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007826:	ee07 3a90 	vmov	s15, r3
 800782a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800782e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007832:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007836:	edd1 6a01 	vldr	s13, [r1, #4]
 800783a:	ed91 0a00 	vldr	s0, [r1]
 800783e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007842:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007846:	ee27 0a00 	vmul.f32	s0, s14, s0
 800784a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800784e:	4770      	bx	lr
 8007850:	3e22f983 	.word	0x3e22f983
 8007854:	44000000 	.word	0x44000000
 8007858:	0800b074 	.word	0x0800b074

0800785c <arm_radix8_butterfly_f32>:
 800785c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007860:	ed2d 8b10 	vpush	{d8-d15}
 8007864:	461c      	mov	r4, r3
 8007866:	b09d      	sub	sp, #116	@ 0x74
 8007868:	4603      	mov	r3, r0
 800786a:	3304      	adds	r3, #4
 800786c:	ed9f bac4 	vldr	s22, [pc, #784]	@ 8007b80 <arm_radix8_butterfly_f32+0x324>
 8007870:	9019      	str	r0, [sp, #100]	@ 0x64
 8007872:	921a      	str	r2, [sp, #104]	@ 0x68
 8007874:	468b      	mov	fp, r1
 8007876:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007878:	468a      	mov	sl, r1
 800787a:	46a1      	mov	r9, r4
 800787c:	4607      	mov	r7, r0
 800787e:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8007882:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8007886:	eb03 0508 	add.w	r5, r3, r8
 800788a:	195c      	adds	r4, r3, r5
 800788c:	00de      	lsls	r6, r3, #3
 800788e:	191a      	adds	r2, r3, r4
 8007890:	9600      	str	r6, [sp, #0]
 8007892:	1898      	adds	r0, r3, r2
 8007894:	4619      	mov	r1, r3
 8007896:	9e00      	ldr	r6, [sp, #0]
 8007898:	9311      	str	r3, [sp, #68]	@ 0x44
 800789a:	4401      	add	r1, r0
 800789c:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 80078a0:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80078a4:	19be      	adds	r6, r7, r6
 80078a6:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 80078aa:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 80078ae:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 80078b2:	9f00      	ldr	r7, [sp, #0]
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	eb06 0e07 	add.w	lr, r6, r7
 80078ba:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 80078bc:	9302      	str	r3, [sp, #8]
 80078be:	3204      	adds	r2, #4
 80078c0:	3104      	adds	r1, #4
 80078c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078c6:	f04f 0c00 	mov.w	ip, #0
 80078ca:	edde 7a00 	vldr	s15, [lr]
 80078ce:	edd6 6a00 	vldr	s13, [r6]
 80078d2:	ed95 2a00 	vldr	s4, [r5]
 80078d6:	ed17 aa01 	vldr	s20, [r7, #-4]
 80078da:	edd4 4a00 	vldr	s9, [r4]
 80078de:	ed90 5a00 	vldr	s10, [r0]
 80078e2:	ed12 7a01 	vldr	s14, [r2, #-4]
 80078e6:	ed51 0a01 	vldr	s1, [r1, #-4]
 80078ea:	ee77 8a85 	vadd.f32	s17, s15, s10
 80078ee:	ee76 3a87 	vadd.f32	s7, s13, s14
 80078f2:	ee32 4a20 	vadd.f32	s8, s4, s1
 80078f6:	ee3a 3a24 	vadd.f32	s6, s20, s9
 80078fa:	ee33 6a84 	vadd.f32	s12, s7, s8
 80078fe:	ee73 5a28 	vadd.f32	s11, s6, s17
 8007902:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007906:	ee75 6a86 	vadd.f32	s13, s11, s12
 800790a:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800790e:	ed47 6a01 	vstr	s13, [r7, #-4]
 8007912:	edc4 5a00 	vstr	s11, [r4]
 8007916:	ed92 9a00 	vldr	s18, [r2]
 800791a:	ed95 1a01 	vldr	s2, [r5, #4]
 800791e:	edd6 5a01 	vldr	s11, [r6, #4]
 8007922:	ed91 6a00 	vldr	s12, [r1]
 8007926:	edd7 2a00 	vldr	s5, [r7]
 800792a:	edd4 1a01 	vldr	s3, [r4, #4]
 800792e:	edde 6a01 	vldr	s13, [lr, #4]
 8007932:	edd0 9a01 	vldr	s19, [r0, #4]
 8007936:	ee72 0a60 	vsub.f32	s1, s4, s1
 800793a:	ee71 aa46 	vsub.f32	s21, s2, s12
 800793e:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8007942:	ee37 0a60 	vsub.f32	s0, s14, s1
 8007946:	ee32 8a2a 	vadd.f32	s16, s4, s21
 800794a:	ee37 7a20 	vadd.f32	s14, s14, s1
 800794e:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8007952:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8007956:	ee75 5a89 	vadd.f32	s11, s11, s18
 800795a:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800795e:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8007962:	ee31 6a06 	vadd.f32	s12, s2, s12
 8007966:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800796a:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800796e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8007972:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8007976:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800797a:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800797e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8007982:	ee33 3a68 	vsub.f32	s6, s6, s17
 8007986:	ee36 0a88 	vadd.f32	s0, s13, s16
 800798a:	ee75 8a86 	vadd.f32	s17, s11, s12
 800798e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8007992:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8007996:	ee74 6ae0 	vsub.f32	s13, s9, s1
 800799a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800799e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80079a2:	ee75 4a27 	vadd.f32	s9, s10, s15
 80079a6:	ee71 5a49 	vsub.f32	s11, s2, s18
 80079aa:	ee31 2a09 	vadd.f32	s4, s2, s18
 80079ae:	ee75 7a67 	vsub.f32	s15, s10, s15
 80079b2:	ee31 1aa2 	vadd.f32	s2, s3, s5
 80079b6:	ee71 2ae2 	vsub.f32	s5, s3, s5
 80079ba:	ee73 0a06 	vadd.f32	s1, s6, s12
 80079be:	ee75 1ac4 	vsub.f32	s3, s11, s8
 80079c2:	ee36 5a87 	vadd.f32	s10, s13, s14
 80079c6:	ee32 8a28 	vadd.f32	s16, s4, s17
 80079ca:	ee33 6a46 	vsub.f32	s12, s6, s12
 80079ce:	ee34 4a25 	vadd.f32	s8, s8, s11
 80079d2:	ee33 3a80 	vadd.f32	s6, s7, s0
 80079d6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80079da:	ee71 5a64 	vsub.f32	s11, s2, s9
 80079de:	ee72 6ae7 	vsub.f32	s13, s5, s15
 80079e2:	ee32 2a68 	vsub.f32	s4, s4, s17
 80079e6:	ee73 3ac0 	vsub.f32	s7, s7, s0
 80079ea:	ee74 4a81 	vadd.f32	s9, s9, s2
 80079ee:	ee77 7aa2 	vadd.f32	s15, s15, s5
 80079f2:	44dc      	add	ip, fp
 80079f4:	45e2      	cmp	sl, ip
 80079f6:	ed87 8a00 	vstr	s16, [r7]
 80079fa:	ed84 2a01 	vstr	s4, [r4, #4]
 80079fe:	441f      	add	r7, r3
 8007a00:	edce 0a00 	vstr	s1, [lr]
 8007a04:	441c      	add	r4, r3
 8007a06:	ed80 6a00 	vstr	s12, [r0]
 8007a0a:	edce 1a01 	vstr	s3, [lr, #4]
 8007a0e:	ed80 4a01 	vstr	s8, [r0, #4]
 8007a12:	449e      	add	lr, r3
 8007a14:	ed86 3a00 	vstr	s6, [r6]
 8007a18:	4418      	add	r0, r3
 8007a1a:	ed41 3a01 	vstr	s7, [r1, #-4]
 8007a1e:	ed02 5a01 	vstr	s10, [r2, #-4]
 8007a22:	ed85 7a00 	vstr	s14, [r5]
 8007a26:	edc6 5a01 	vstr	s11, [r6, #4]
 8007a2a:	edc1 4a00 	vstr	s9, [r1]
 8007a2e:	441e      	add	r6, r3
 8007a30:	edc2 6a00 	vstr	s13, [r2]
 8007a34:	4419      	add	r1, r3
 8007a36:	edc5 7a01 	vstr	s15, [r5, #4]
 8007a3a:	441a      	add	r2, r3
 8007a3c:	441d      	add	r5, r3
 8007a3e:	f63f af44 	bhi.w	80078ca <arm_radix8_butterfly_f32+0x6e>
 8007a42:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007a44:	2a07      	cmp	r2, #7
 8007a46:	f240 81f5 	bls.w	8007e34 <arm_radix8_butterfly_f32+0x5d8>
 8007a4a:	f108 0101 	add.w	r1, r8, #1
 8007a4e:	188f      	adds	r7, r1, r2
 8007a50:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8007a54:	19d6      	adds	r6, r2, r7
 8007a56:	eb08 0c09 	add.w	ip, r8, r9
 8007a5a:	1994      	adds	r4, r2, r6
 8007a5c:	eb0c 0e09 	add.w	lr, ip, r9
 8007a60:	4610      	mov	r0, r2
 8007a62:	9701      	str	r7, [sp, #4]
 8007a64:	4420      	add	r0, r4
 8007a66:	eb0e 0709 	add.w	r7, lr, r9
 8007a6a:	1815      	adds	r5, r2, r0
 8007a6c:	eb07 0209 	add.w	r2, r7, r9
 8007a70:	9203      	str	r2, [sp, #12]
 8007a72:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007a74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a78:	9117      	str	r1, [sp, #92]	@ 0x5c
 8007a7a:	440a      	add	r2, r1
 8007a7c:	9900      	ldr	r1, [sp, #0]
 8007a7e:	3108      	adds	r1, #8
 8007a80:	9100      	str	r1, [sp, #0]
 8007a82:	9902      	ldr	r1, [sp, #8]
 8007a84:	3108      	adds	r1, #8
 8007a86:	9102      	str	r1, [sp, #8]
 8007a88:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8007a8a:	00ff      	lsls	r7, r7, #3
 8007a8c:	9715      	str	r7, [sp, #84]	@ 0x54
 8007a8e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8007a92:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007a96:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8007a9a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8007a9c:	9903      	ldr	r1, [sp, #12]
 8007a9e:	19d7      	adds	r7, r2, r7
 8007aa0:	00c9      	lsls	r1, r1, #3
 8007aa2:	9114      	str	r1, [sp, #80]	@ 0x50
 8007aa4:	9710      	str	r7, [sp, #64]	@ 0x40
 8007aa6:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8007aa8:	9f00      	ldr	r7, [sp, #0]
 8007aaa:	19cf      	adds	r7, r1, r7
 8007aac:	970d      	str	r7, [sp, #52]	@ 0x34
 8007aae:	9f02      	ldr	r7, [sp, #8]
 8007ab0:	19cf      	adds	r7, r1, r7
 8007ab2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8007ab6:	970c      	str	r7, [sp, #48]	@ 0x30
 8007ab8:	9f01      	ldr	r7, [sp, #4]
 8007aba:	f8cd e058 	str.w	lr, [sp, #88]	@ 0x58
 8007abe:	3504      	adds	r5, #4
 8007ac0:	3004      	adds	r0, #4
 8007ac2:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8007ac6:	9508      	str	r5, [sp, #32]
 8007ac8:	9009      	str	r0, [sp, #36]	@ 0x24
 8007aca:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8007acc:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8007ace:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 8007ad2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8007ad6:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8007ada:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007adc:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 8007ae0:	1945      	adds	r5, r0, r5
 8007ae2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8007ae6:	460f      	mov	r7, r1
 8007ae8:	3404      	adds	r4, #4
 8007aea:	4641      	mov	r1, r8
 8007aec:	1841      	adds	r1, r0, r1
 8007aee:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
 8007af2:	940a      	str	r4, [sp, #40]	@ 0x28
 8007af4:	eb00 0c06 	add.w	ip, r0, r6
 8007af8:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 8007afc:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007afe:	9506      	str	r5, [sp, #24]
 8007b00:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8007b02:	9105      	str	r1, [sp, #20]
 8007b04:	4639      	mov	r1, r7
 8007b06:	1905      	adds	r5, r0, r4
 8007b08:	3108      	adds	r1, #8
 8007b0a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8007b0c:	9507      	str	r5, [sp, #28]
 8007b0e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8007b10:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8007b14:	2101      	movs	r1, #1
 8007b16:	eb00 0e06 	add.w	lr, r0, r6
 8007b1a:	9518      	str	r5, [sp, #96]	@ 0x60
 8007b1c:	9404      	str	r4, [sp, #16]
 8007b1e:	9103      	str	r1, [sp, #12]
 8007b20:	4620      	mov	r0, r4
 8007b22:	4689      	mov	r9, r1
 8007b24:	9e06      	ldr	r6, [sp, #24]
 8007b26:	ed90 fa00 	vldr	s30, [r0]
 8007b2a:	edd6 7a01 	vldr	s15, [r6, #4]
 8007b2e:	edd0 ba01 	vldr	s23, [r0, #4]
 8007b32:	edcd 7a00 	vstr	s15, [sp]
 8007b36:	a80d      	add	r0, sp, #52	@ 0x34
 8007b38:	edde 7a01 	vldr	s15, [lr, #4]
 8007b3c:	9c05      	ldr	r4, [sp, #20]
 8007b3e:	9d07      	ldr	r5, [sp, #28]
 8007b40:	edd2 fa00 	vldr	s31, [r2]
 8007b44:	ed92 ca01 	vldr	s24, [r2, #4]
 8007b48:	edcd 7a01 	vstr	s15, [sp, #4]
 8007b4c:	c807      	ldmia	r0, {r0, r1, r2}
 8007b4e:	eddc 7a01 	vldr	s15, [ip, #4]
 8007b52:	edd4 ea00 	vldr	s29, [r4]
 8007b56:	ed95 ea00 	vldr	s28, [r5]
 8007b5a:	edd6 da00 	vldr	s27, [r6]
 8007b5e:	edd4 aa01 	vldr	s21, [r4, #4]
 8007b62:	ed95 aa01 	vldr	s20, [r5, #4]
 8007b66:	ed9e da00 	vldr	s26, [lr]
 8007b6a:	eddc ca00 	vldr	s25, [ip]
 8007b6e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b72:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8007b74:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007b76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b78:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8007b7a:	edcd 7a02 	vstr	s15, [sp, #8]
 8007b7e:	e001      	b.n	8007b84 <arm_radix8_butterfly_f32+0x328>
 8007b80:	3f3504f3 	.word	0x3f3504f3
 8007b84:	ed16 6a01 	vldr	s12, [r6, #-4]
 8007b88:	ed91 5a00 	vldr	s10, [r1]
 8007b8c:	ed57 9a01 	vldr	s19, [r7, #-4]
 8007b90:	edd5 7a00 	vldr	s15, [r5]
 8007b94:	ed18 7a01 	vldr	s14, [r8, #-4]
 8007b98:	edd2 3a00 	vldr	s7, [r2]
 8007b9c:	ed94 3a00 	vldr	s6, [r4]
 8007ba0:	ed90 2a00 	vldr	s4, [r0]
 8007ba4:	ed92 0a01 	vldr	s0, [r2, #4]
 8007ba8:	ee33 8a85 	vadd.f32	s16, s7, s10
 8007bac:	ee32 1a06 	vadd.f32	s2, s4, s12
 8007bb0:	ee33 4a29 	vadd.f32	s8, s6, s19
 8007bb4:	ee77 4a87 	vadd.f32	s9, s15, s14
 8007bb8:	ee78 1a04 	vadd.f32	s3, s16, s8
 8007bbc:	ee71 6a24 	vadd.f32	s13, s2, s9
 8007bc0:	ee32 2a46 	vsub.f32	s4, s4, s12
 8007bc4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8007bc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007bcc:	ed82 6a00 	vstr	s12, [r2]
 8007bd0:	edd5 8a01 	vldr	s17, [r5, #4]
 8007bd4:	ed90 9a01 	vldr	s18, [r0, #4]
 8007bd8:	edd6 2a00 	vldr	s5, [r6]
 8007bdc:	ed98 7a00 	vldr	s14, [r8]
 8007be0:	edd4 0a01 	vldr	s1, [r4, #4]
 8007be4:	ed91 6a01 	vldr	s12, [r1, #4]
 8007be8:	edd7 5a00 	vldr	s11, [r7]
 8007bec:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8007bf0:	ee33 3a69 	vsub.f32	s6, s6, s19
 8007bf4:	ee39 5a62 	vsub.f32	s10, s18, s5
 8007bf8:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8007bfc:	ee38 4a44 	vsub.f32	s8, s16, s8
 8007c00:	ee38 7a87 	vadd.f32	s14, s17, s14
 8007c04:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8007c08:	ee79 2a22 	vadd.f32	s5, s18, s5
 8007c0c:	ee75 8a69 	vsub.f32	s17, s10, s19
 8007c10:	ee32 9a27 	vadd.f32	s18, s4, s15
 8007c14:	ee35 5a29 	vadd.f32	s10, s10, s19
 8007c18:	ee72 7a67 	vsub.f32	s15, s4, s15
 8007c1c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8007c20:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8007c24:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8007c28:	ee32 9a08 	vadd.f32	s18, s4, s16
 8007c2c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8007c30:	ee32 2a48 	vsub.f32	s4, s4, s16
 8007c34:	ee71 4a64 	vsub.f32	s9, s2, s9
 8007c38:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8007c3c:	ee32 1a87 	vadd.f32	s2, s5, s14
 8007c40:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8007c44:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8007c48:	ee30 6a46 	vsub.f32	s12, s0, s12
 8007c4c:	ee73 0a29 	vadd.f32	s1, s6, s19
 8007c50:	ee36 0a28 	vadd.f32	s0, s12, s17
 8007c54:	ee33 3a69 	vsub.f32	s6, s6, s19
 8007c58:	ee32 7a64 	vsub.f32	s14, s4, s9
 8007c5c:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8007c60:	ee36 6a68 	vsub.f32	s12, s12, s17
 8007c64:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8007c68:	ee75 8a85 	vadd.f32	s17, s11, s10
 8007c6c:	ee74 3a22 	vadd.f32	s7, s8, s5
 8007c70:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8007c74:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8007c78:	ee79 1a41 	vsub.f32	s3, s18, s2
 8007c7c:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8007c80:	ee76 5a43 	vsub.f32	s11, s12, s6
 8007c84:	ee74 2a62 	vsub.f32	s5, s8, s5
 8007c88:	ee74 4a82 	vadd.f32	s9, s9, s4
 8007c8c:	ee30 4a60 	vsub.f32	s8, s0, s1
 8007c90:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8007c94:	ee30 0a80 	vadd.f32	s0, s1, s0
 8007c98:	ee77 9a85 	vadd.f32	s19, s15, s10
 8007c9c:	ee33 6a06 	vadd.f32	s12, s6, s12
 8007ca0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8007ca4:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8007ca8:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8007cac:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8007cb0:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8007cb4:	ee39 1a01 	vadd.f32	s2, s18, s2
 8007cb8:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8007cbc:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8007cc0:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8007cc4:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8007cc8:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8007ccc:	ee35 3a03 	vadd.f32	s6, s10, s6
 8007cd0:	ee72 6a66 	vsub.f32	s13, s4, s13
 8007cd4:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8007cd8:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8007cdc:	ed9d 4a02 	vldr	s8, [sp, #8]
 8007ce0:	ed82 1a01 	vstr	s2, [r2, #4]
 8007ce4:	ee77 3a63 	vsub.f32	s7, s14, s7
 8007ce8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8007cec:	ed9d 7a01 	vldr	s14, [sp, #4]
 8007cf0:	ed81 3a00 	vstr	s6, [r1]
 8007cf4:	ee30 9a89 	vadd.f32	s18, s1, s18
 8007cf8:	ee32 2a05 	vadd.f32	s4, s4, s10
 8007cfc:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8007d00:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8007d04:	ee67 2a22 	vmul.f32	s5, s14, s5
 8007d08:	ee64 1a00 	vmul.f32	s3, s8, s0
 8007d0c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8007d10:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8007d14:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8007d18:	ee64 8a28 	vmul.f32	s17, s8, s17
 8007d1c:	ed9d 4a00 	vldr	s8, [sp]
 8007d20:	edc1 6a01 	vstr	s13, [r1, #4]
 8007d24:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8007d28:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8007d2c:	ee64 9a29 	vmul.f32	s19, s8, s19
 8007d30:	ee24 4a25 	vmul.f32	s8, s8, s11
 8007d34:	ee30 7a87 	vadd.f32	s14, s1, s14
 8007d38:	ee74 4a84 	vadd.f32	s9, s9, s8
 8007d3c:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8007d40:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8007d44:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8007d48:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8007d4c:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8007d50:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8007d54:	ee75 1a21 	vadd.f32	s3, s10, s3
 8007d58:	ee30 0a68 	vsub.f32	s0, s0, s17
 8007d5c:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8007d60:	ee70 0a84 	vadd.f32	s1, s1, s8
 8007d64:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007d68:	44d9      	add	r9, fp
 8007d6a:	45ca      	cmp	sl, r9
 8007d6c:	ed84 9a00 	vstr	s18, [r4]
 8007d70:	edc4 3a01 	vstr	s7, [r4, #4]
 8007d74:	441a      	add	r2, r3
 8007d76:	ed07 7a01 	vstr	s14, [r7, #-4]
 8007d7a:	edc7 2a00 	vstr	s5, [r7]
 8007d7e:	4419      	add	r1, r3
 8007d80:	ed80 2a00 	vstr	s4, [r0]
 8007d84:	ed80 8a01 	vstr	s16, [r0, #4]
 8007d88:	441c      	add	r4, r3
 8007d8a:	ed48 1a01 	vstr	s3, [r8, #-4]
 8007d8e:	ed88 0a00 	vstr	s0, [r8]
 8007d92:	441f      	add	r7, r3
 8007d94:	ed46 4a01 	vstr	s9, [r6, #-4]
 8007d98:	4418      	add	r0, r3
 8007d9a:	edc6 9a00 	vstr	s19, [r6]
 8007d9e:	4498      	add	r8, r3
 8007da0:	edc5 0a00 	vstr	s1, [r5]
 8007da4:	ed85 6a01 	vstr	s12, [r5, #4]
 8007da8:	441e      	add	r6, r3
 8007daa:	441d      	add	r5, r3
 8007dac:	f63f aeea 	bhi.w	8007b84 <arm_radix8_butterfly_f32+0x328>
 8007db0:	9a03      	ldr	r2, [sp, #12]
 8007db2:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8007db4:	3201      	adds	r2, #1
 8007db6:	4611      	mov	r1, r2
 8007db8:	9203      	str	r2, [sp, #12]
 8007dba:	9a04      	ldr	r2, [sp, #16]
 8007dbc:	4402      	add	r2, r0
 8007dbe:	9204      	str	r2, [sp, #16]
 8007dc0:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8007dc2:	9a05      	ldr	r2, [sp, #20]
 8007dc4:	4402      	add	r2, r0
 8007dc6:	9205      	str	r2, [sp, #20]
 8007dc8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007dca:	9a07      	ldr	r2, [sp, #28]
 8007dcc:	4402      	add	r2, r0
 8007dce:	9207      	str	r2, [sp, #28]
 8007dd0:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8007dd2:	9a06      	ldr	r2, [sp, #24]
 8007dd4:	4402      	add	r2, r0
 8007dd6:	9206      	str	r2, [sp, #24]
 8007dd8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007dda:	4496      	add	lr, r2
 8007ddc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007dde:	4494      	add	ip, r2
 8007de0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007de2:	3208      	adds	r2, #8
 8007de4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007de6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007de8:	3208      	adds	r2, #8
 8007dea:	920e      	str	r2, [sp, #56]	@ 0x38
 8007dec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007dee:	3208      	adds	r2, #8
 8007df0:	920d      	str	r2, [sp, #52]	@ 0x34
 8007df2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007df4:	3208      	adds	r2, #8
 8007df6:	920c      	str	r2, [sp, #48]	@ 0x30
 8007df8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007dfa:	3208      	adds	r2, #8
 8007dfc:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007dfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e00:	3208      	adds	r2, #8
 8007e02:	920a      	str	r2, [sp, #40]	@ 0x28
 8007e04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e06:	3208      	adds	r2, #8
 8007e08:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e0a:	9a08      	ldr	r2, [sp, #32]
 8007e0c:	3208      	adds	r2, #8
 8007e0e:	9208      	str	r2, [sp, #32]
 8007e10:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8007e12:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8007e14:	4288      	cmp	r0, r1
 8007e16:	4622      	mov	r2, r4
 8007e18:	d007      	beq.n	8007e2a <arm_radix8_butterfly_f32+0x5ce>
 8007e1a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8007e1c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007e20:	4621      	mov	r1, r4
 8007e22:	4401      	add	r1, r0
 8007e24:	9110      	str	r1, [sp, #64]	@ 0x40
 8007e26:	9804      	ldr	r0, [sp, #16]
 8007e28:	e67c      	b.n	8007b24 <arm_radix8_butterfly_f32+0x2c8>
 8007e2a:	4683      	mov	fp, r0
 8007e2c:	f8bd 905c 	ldrh.w	r9, [sp, #92]	@ 0x5c
 8007e30:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8007e32:	e524      	b.n	800787e <arm_radix8_butterfly_f32+0x22>
 8007e34:	b01d      	add	sp, #116	@ 0x74
 8007e36:	ecbd 8b10 	vpop	{d8-d15}
 8007e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3e:	bf00      	nop

08007e40 <__cvt>:
 8007e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e44:	ec57 6b10 	vmov	r6, r7, d0
 8007e48:	2f00      	cmp	r7, #0
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	463b      	mov	r3, r7
 8007e50:	bfbb      	ittet	lt
 8007e52:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007e56:	461f      	movlt	r7, r3
 8007e58:	2300      	movge	r3, #0
 8007e5a:	232d      	movlt	r3, #45	@ 0x2d
 8007e5c:	700b      	strb	r3, [r1, #0]
 8007e5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e60:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007e64:	4691      	mov	r9, r2
 8007e66:	f023 0820 	bic.w	r8, r3, #32
 8007e6a:	bfbc      	itt	lt
 8007e6c:	4632      	movlt	r2, r6
 8007e6e:	4616      	movlt	r6, r2
 8007e70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e74:	d005      	beq.n	8007e82 <__cvt+0x42>
 8007e76:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007e7a:	d100      	bne.n	8007e7e <__cvt+0x3e>
 8007e7c:	3401      	adds	r4, #1
 8007e7e:	2102      	movs	r1, #2
 8007e80:	e000      	b.n	8007e84 <__cvt+0x44>
 8007e82:	2103      	movs	r1, #3
 8007e84:	ab03      	add	r3, sp, #12
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	ab02      	add	r3, sp, #8
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	ec47 6b10 	vmov	d0, r6, r7
 8007e90:	4653      	mov	r3, sl
 8007e92:	4622      	mov	r2, r4
 8007e94:	f000 fecc 	bl	8008c30 <_dtoa_r>
 8007e98:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007e9c:	4605      	mov	r5, r0
 8007e9e:	d119      	bne.n	8007ed4 <__cvt+0x94>
 8007ea0:	f019 0f01 	tst.w	r9, #1
 8007ea4:	d00e      	beq.n	8007ec4 <__cvt+0x84>
 8007ea6:	eb00 0904 	add.w	r9, r0, r4
 8007eaa:	2200      	movs	r2, #0
 8007eac:	2300      	movs	r3, #0
 8007eae:	4630      	mov	r0, r6
 8007eb0:	4639      	mov	r1, r7
 8007eb2:	f7f8 fe89 	bl	8000bc8 <__aeabi_dcmpeq>
 8007eb6:	b108      	cbz	r0, 8007ebc <__cvt+0x7c>
 8007eb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ebc:	2230      	movs	r2, #48	@ 0x30
 8007ebe:	9b03      	ldr	r3, [sp, #12]
 8007ec0:	454b      	cmp	r3, r9
 8007ec2:	d31e      	bcc.n	8007f02 <__cvt+0xc2>
 8007ec4:	9b03      	ldr	r3, [sp, #12]
 8007ec6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ec8:	1b5b      	subs	r3, r3, r5
 8007eca:	4628      	mov	r0, r5
 8007ecc:	6013      	str	r3, [r2, #0]
 8007ece:	b004      	add	sp, #16
 8007ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ed8:	eb00 0904 	add.w	r9, r0, r4
 8007edc:	d1e5      	bne.n	8007eaa <__cvt+0x6a>
 8007ede:	7803      	ldrb	r3, [r0, #0]
 8007ee0:	2b30      	cmp	r3, #48	@ 0x30
 8007ee2:	d10a      	bne.n	8007efa <__cvt+0xba>
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	4630      	mov	r0, r6
 8007eea:	4639      	mov	r1, r7
 8007eec:	f7f8 fe6c 	bl	8000bc8 <__aeabi_dcmpeq>
 8007ef0:	b918      	cbnz	r0, 8007efa <__cvt+0xba>
 8007ef2:	f1c4 0401 	rsb	r4, r4, #1
 8007ef6:	f8ca 4000 	str.w	r4, [sl]
 8007efa:	f8da 3000 	ldr.w	r3, [sl]
 8007efe:	4499      	add	r9, r3
 8007f00:	e7d3      	b.n	8007eaa <__cvt+0x6a>
 8007f02:	1c59      	adds	r1, r3, #1
 8007f04:	9103      	str	r1, [sp, #12]
 8007f06:	701a      	strb	r2, [r3, #0]
 8007f08:	e7d9      	b.n	8007ebe <__cvt+0x7e>

08007f0a <__exponent>:
 8007f0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f0c:	2900      	cmp	r1, #0
 8007f0e:	bfba      	itte	lt
 8007f10:	4249      	neglt	r1, r1
 8007f12:	232d      	movlt	r3, #45	@ 0x2d
 8007f14:	232b      	movge	r3, #43	@ 0x2b
 8007f16:	2909      	cmp	r1, #9
 8007f18:	7002      	strb	r2, [r0, #0]
 8007f1a:	7043      	strb	r3, [r0, #1]
 8007f1c:	dd29      	ble.n	8007f72 <__exponent+0x68>
 8007f1e:	f10d 0307 	add.w	r3, sp, #7
 8007f22:	461d      	mov	r5, r3
 8007f24:	270a      	movs	r7, #10
 8007f26:	461a      	mov	r2, r3
 8007f28:	fbb1 f6f7 	udiv	r6, r1, r7
 8007f2c:	fb07 1416 	mls	r4, r7, r6, r1
 8007f30:	3430      	adds	r4, #48	@ 0x30
 8007f32:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007f36:	460c      	mov	r4, r1
 8007f38:	2c63      	cmp	r4, #99	@ 0x63
 8007f3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f3e:	4631      	mov	r1, r6
 8007f40:	dcf1      	bgt.n	8007f26 <__exponent+0x1c>
 8007f42:	3130      	adds	r1, #48	@ 0x30
 8007f44:	1e94      	subs	r4, r2, #2
 8007f46:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007f4a:	1c41      	adds	r1, r0, #1
 8007f4c:	4623      	mov	r3, r4
 8007f4e:	42ab      	cmp	r3, r5
 8007f50:	d30a      	bcc.n	8007f68 <__exponent+0x5e>
 8007f52:	f10d 0309 	add.w	r3, sp, #9
 8007f56:	1a9b      	subs	r3, r3, r2
 8007f58:	42ac      	cmp	r4, r5
 8007f5a:	bf88      	it	hi
 8007f5c:	2300      	movhi	r3, #0
 8007f5e:	3302      	adds	r3, #2
 8007f60:	4403      	add	r3, r0
 8007f62:	1a18      	subs	r0, r3, r0
 8007f64:	b003      	add	sp, #12
 8007f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f68:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007f6c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007f70:	e7ed      	b.n	8007f4e <__exponent+0x44>
 8007f72:	2330      	movs	r3, #48	@ 0x30
 8007f74:	3130      	adds	r1, #48	@ 0x30
 8007f76:	7083      	strb	r3, [r0, #2]
 8007f78:	70c1      	strb	r1, [r0, #3]
 8007f7a:	1d03      	adds	r3, r0, #4
 8007f7c:	e7f1      	b.n	8007f62 <__exponent+0x58>
	...

08007f80 <_printf_float>:
 8007f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f84:	b08d      	sub	sp, #52	@ 0x34
 8007f86:	460c      	mov	r4, r1
 8007f88:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007f8c:	4616      	mov	r6, r2
 8007f8e:	461f      	mov	r7, r3
 8007f90:	4605      	mov	r5, r0
 8007f92:	f000 fd4d 	bl	8008a30 <_localeconv_r>
 8007f96:	6803      	ldr	r3, [r0, #0]
 8007f98:	9304      	str	r3, [sp, #16]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7f8 f9e8 	bl	8000370 <strlen>
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8007fa8:	9005      	str	r0, [sp, #20]
 8007faa:	3307      	adds	r3, #7
 8007fac:	f023 0307 	bic.w	r3, r3, #7
 8007fb0:	f103 0208 	add.w	r2, r3, #8
 8007fb4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007fb8:	f8d4 b000 	ldr.w	fp, [r4]
 8007fbc:	f8c8 2000 	str.w	r2, [r8]
 8007fc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fc4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007fc8:	9307      	str	r3, [sp, #28]
 8007fca:	f8cd 8018 	str.w	r8, [sp, #24]
 8007fce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007fd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fd6:	4b9c      	ldr	r3, [pc, #624]	@ (8008248 <_printf_float+0x2c8>)
 8007fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fdc:	f7f8 fe26 	bl	8000c2c <__aeabi_dcmpun>
 8007fe0:	bb70      	cbnz	r0, 8008040 <_printf_float+0xc0>
 8007fe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fe6:	4b98      	ldr	r3, [pc, #608]	@ (8008248 <_printf_float+0x2c8>)
 8007fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fec:	f7f8 fe00 	bl	8000bf0 <__aeabi_dcmple>
 8007ff0:	bb30      	cbnz	r0, 8008040 <_printf_float+0xc0>
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	4640      	mov	r0, r8
 8007ff8:	4649      	mov	r1, r9
 8007ffa:	f7f8 fdef 	bl	8000bdc <__aeabi_dcmplt>
 8007ffe:	b110      	cbz	r0, 8008006 <_printf_float+0x86>
 8008000:	232d      	movs	r3, #45	@ 0x2d
 8008002:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008006:	4a91      	ldr	r2, [pc, #580]	@ (800824c <_printf_float+0x2cc>)
 8008008:	4b91      	ldr	r3, [pc, #580]	@ (8008250 <_printf_float+0x2d0>)
 800800a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800800e:	bf8c      	ite	hi
 8008010:	4690      	movhi	r8, r2
 8008012:	4698      	movls	r8, r3
 8008014:	2303      	movs	r3, #3
 8008016:	6123      	str	r3, [r4, #16]
 8008018:	f02b 0304 	bic.w	r3, fp, #4
 800801c:	6023      	str	r3, [r4, #0]
 800801e:	f04f 0900 	mov.w	r9, #0
 8008022:	9700      	str	r7, [sp, #0]
 8008024:	4633      	mov	r3, r6
 8008026:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008028:	4621      	mov	r1, r4
 800802a:	4628      	mov	r0, r5
 800802c:	f000 f9d2 	bl	80083d4 <_printf_common>
 8008030:	3001      	adds	r0, #1
 8008032:	f040 808d 	bne.w	8008150 <_printf_float+0x1d0>
 8008036:	f04f 30ff 	mov.w	r0, #4294967295
 800803a:	b00d      	add	sp, #52	@ 0x34
 800803c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008040:	4642      	mov	r2, r8
 8008042:	464b      	mov	r3, r9
 8008044:	4640      	mov	r0, r8
 8008046:	4649      	mov	r1, r9
 8008048:	f7f8 fdf0 	bl	8000c2c <__aeabi_dcmpun>
 800804c:	b140      	cbz	r0, 8008060 <_printf_float+0xe0>
 800804e:	464b      	mov	r3, r9
 8008050:	2b00      	cmp	r3, #0
 8008052:	bfbc      	itt	lt
 8008054:	232d      	movlt	r3, #45	@ 0x2d
 8008056:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800805a:	4a7e      	ldr	r2, [pc, #504]	@ (8008254 <_printf_float+0x2d4>)
 800805c:	4b7e      	ldr	r3, [pc, #504]	@ (8008258 <_printf_float+0x2d8>)
 800805e:	e7d4      	b.n	800800a <_printf_float+0x8a>
 8008060:	6863      	ldr	r3, [r4, #4]
 8008062:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008066:	9206      	str	r2, [sp, #24]
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	d13b      	bne.n	80080e4 <_printf_float+0x164>
 800806c:	2306      	movs	r3, #6
 800806e:	6063      	str	r3, [r4, #4]
 8008070:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008074:	2300      	movs	r3, #0
 8008076:	6022      	str	r2, [r4, #0]
 8008078:	9303      	str	r3, [sp, #12]
 800807a:	ab0a      	add	r3, sp, #40	@ 0x28
 800807c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008080:	ab09      	add	r3, sp, #36	@ 0x24
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	6861      	ldr	r1, [r4, #4]
 8008086:	ec49 8b10 	vmov	d0, r8, r9
 800808a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800808e:	4628      	mov	r0, r5
 8008090:	f7ff fed6 	bl	8007e40 <__cvt>
 8008094:	9b06      	ldr	r3, [sp, #24]
 8008096:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008098:	2b47      	cmp	r3, #71	@ 0x47
 800809a:	4680      	mov	r8, r0
 800809c:	d129      	bne.n	80080f2 <_printf_float+0x172>
 800809e:	1cc8      	adds	r0, r1, #3
 80080a0:	db02      	blt.n	80080a8 <_printf_float+0x128>
 80080a2:	6863      	ldr	r3, [r4, #4]
 80080a4:	4299      	cmp	r1, r3
 80080a6:	dd41      	ble.n	800812c <_printf_float+0x1ac>
 80080a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80080ac:	fa5f fa8a 	uxtb.w	sl, sl
 80080b0:	3901      	subs	r1, #1
 80080b2:	4652      	mov	r2, sl
 80080b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80080b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80080ba:	f7ff ff26 	bl	8007f0a <__exponent>
 80080be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080c0:	1813      	adds	r3, r2, r0
 80080c2:	2a01      	cmp	r2, #1
 80080c4:	4681      	mov	r9, r0
 80080c6:	6123      	str	r3, [r4, #16]
 80080c8:	dc02      	bgt.n	80080d0 <_printf_float+0x150>
 80080ca:	6822      	ldr	r2, [r4, #0]
 80080cc:	07d2      	lsls	r2, r2, #31
 80080ce:	d501      	bpl.n	80080d4 <_printf_float+0x154>
 80080d0:	3301      	adds	r3, #1
 80080d2:	6123      	str	r3, [r4, #16]
 80080d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d0a2      	beq.n	8008022 <_printf_float+0xa2>
 80080dc:	232d      	movs	r3, #45	@ 0x2d
 80080de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080e2:	e79e      	b.n	8008022 <_printf_float+0xa2>
 80080e4:	9a06      	ldr	r2, [sp, #24]
 80080e6:	2a47      	cmp	r2, #71	@ 0x47
 80080e8:	d1c2      	bne.n	8008070 <_printf_float+0xf0>
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1c0      	bne.n	8008070 <_printf_float+0xf0>
 80080ee:	2301      	movs	r3, #1
 80080f0:	e7bd      	b.n	800806e <_printf_float+0xee>
 80080f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80080f6:	d9db      	bls.n	80080b0 <_printf_float+0x130>
 80080f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80080fc:	d118      	bne.n	8008130 <_printf_float+0x1b0>
 80080fe:	2900      	cmp	r1, #0
 8008100:	6863      	ldr	r3, [r4, #4]
 8008102:	dd0b      	ble.n	800811c <_printf_float+0x19c>
 8008104:	6121      	str	r1, [r4, #16]
 8008106:	b913      	cbnz	r3, 800810e <_printf_float+0x18e>
 8008108:	6822      	ldr	r2, [r4, #0]
 800810a:	07d0      	lsls	r0, r2, #31
 800810c:	d502      	bpl.n	8008114 <_printf_float+0x194>
 800810e:	3301      	adds	r3, #1
 8008110:	440b      	add	r3, r1
 8008112:	6123      	str	r3, [r4, #16]
 8008114:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008116:	f04f 0900 	mov.w	r9, #0
 800811a:	e7db      	b.n	80080d4 <_printf_float+0x154>
 800811c:	b913      	cbnz	r3, 8008124 <_printf_float+0x1a4>
 800811e:	6822      	ldr	r2, [r4, #0]
 8008120:	07d2      	lsls	r2, r2, #31
 8008122:	d501      	bpl.n	8008128 <_printf_float+0x1a8>
 8008124:	3302      	adds	r3, #2
 8008126:	e7f4      	b.n	8008112 <_printf_float+0x192>
 8008128:	2301      	movs	r3, #1
 800812a:	e7f2      	b.n	8008112 <_printf_float+0x192>
 800812c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008130:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008132:	4299      	cmp	r1, r3
 8008134:	db05      	blt.n	8008142 <_printf_float+0x1c2>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	6121      	str	r1, [r4, #16]
 800813a:	07d8      	lsls	r0, r3, #31
 800813c:	d5ea      	bpl.n	8008114 <_printf_float+0x194>
 800813e:	1c4b      	adds	r3, r1, #1
 8008140:	e7e7      	b.n	8008112 <_printf_float+0x192>
 8008142:	2900      	cmp	r1, #0
 8008144:	bfd4      	ite	le
 8008146:	f1c1 0202 	rsble	r2, r1, #2
 800814a:	2201      	movgt	r2, #1
 800814c:	4413      	add	r3, r2
 800814e:	e7e0      	b.n	8008112 <_printf_float+0x192>
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	055a      	lsls	r2, r3, #21
 8008154:	d407      	bmi.n	8008166 <_printf_float+0x1e6>
 8008156:	6923      	ldr	r3, [r4, #16]
 8008158:	4642      	mov	r2, r8
 800815a:	4631      	mov	r1, r6
 800815c:	4628      	mov	r0, r5
 800815e:	47b8      	blx	r7
 8008160:	3001      	adds	r0, #1
 8008162:	d12b      	bne.n	80081bc <_printf_float+0x23c>
 8008164:	e767      	b.n	8008036 <_printf_float+0xb6>
 8008166:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800816a:	f240 80dd 	bls.w	8008328 <_printf_float+0x3a8>
 800816e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008172:	2200      	movs	r2, #0
 8008174:	2300      	movs	r3, #0
 8008176:	f7f8 fd27 	bl	8000bc8 <__aeabi_dcmpeq>
 800817a:	2800      	cmp	r0, #0
 800817c:	d033      	beq.n	80081e6 <_printf_float+0x266>
 800817e:	4a37      	ldr	r2, [pc, #220]	@ (800825c <_printf_float+0x2dc>)
 8008180:	2301      	movs	r3, #1
 8008182:	4631      	mov	r1, r6
 8008184:	4628      	mov	r0, r5
 8008186:	47b8      	blx	r7
 8008188:	3001      	adds	r0, #1
 800818a:	f43f af54 	beq.w	8008036 <_printf_float+0xb6>
 800818e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008192:	4543      	cmp	r3, r8
 8008194:	db02      	blt.n	800819c <_printf_float+0x21c>
 8008196:	6823      	ldr	r3, [r4, #0]
 8008198:	07d8      	lsls	r0, r3, #31
 800819a:	d50f      	bpl.n	80081bc <_printf_float+0x23c>
 800819c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081a0:	4631      	mov	r1, r6
 80081a2:	4628      	mov	r0, r5
 80081a4:	47b8      	blx	r7
 80081a6:	3001      	adds	r0, #1
 80081a8:	f43f af45 	beq.w	8008036 <_printf_float+0xb6>
 80081ac:	f04f 0900 	mov.w	r9, #0
 80081b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80081b4:	f104 0a1a 	add.w	sl, r4, #26
 80081b8:	45c8      	cmp	r8, r9
 80081ba:	dc09      	bgt.n	80081d0 <_printf_float+0x250>
 80081bc:	6823      	ldr	r3, [r4, #0]
 80081be:	079b      	lsls	r3, r3, #30
 80081c0:	f100 8103 	bmi.w	80083ca <_printf_float+0x44a>
 80081c4:	68e0      	ldr	r0, [r4, #12]
 80081c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081c8:	4298      	cmp	r0, r3
 80081ca:	bfb8      	it	lt
 80081cc:	4618      	movlt	r0, r3
 80081ce:	e734      	b.n	800803a <_printf_float+0xba>
 80081d0:	2301      	movs	r3, #1
 80081d2:	4652      	mov	r2, sl
 80081d4:	4631      	mov	r1, r6
 80081d6:	4628      	mov	r0, r5
 80081d8:	47b8      	blx	r7
 80081da:	3001      	adds	r0, #1
 80081dc:	f43f af2b 	beq.w	8008036 <_printf_float+0xb6>
 80081e0:	f109 0901 	add.w	r9, r9, #1
 80081e4:	e7e8      	b.n	80081b8 <_printf_float+0x238>
 80081e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	dc39      	bgt.n	8008260 <_printf_float+0x2e0>
 80081ec:	4a1b      	ldr	r2, [pc, #108]	@ (800825c <_printf_float+0x2dc>)
 80081ee:	2301      	movs	r3, #1
 80081f0:	4631      	mov	r1, r6
 80081f2:	4628      	mov	r0, r5
 80081f4:	47b8      	blx	r7
 80081f6:	3001      	adds	r0, #1
 80081f8:	f43f af1d 	beq.w	8008036 <_printf_float+0xb6>
 80081fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008200:	ea59 0303 	orrs.w	r3, r9, r3
 8008204:	d102      	bne.n	800820c <_printf_float+0x28c>
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	07d9      	lsls	r1, r3, #31
 800820a:	d5d7      	bpl.n	80081bc <_printf_float+0x23c>
 800820c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008210:	4631      	mov	r1, r6
 8008212:	4628      	mov	r0, r5
 8008214:	47b8      	blx	r7
 8008216:	3001      	adds	r0, #1
 8008218:	f43f af0d 	beq.w	8008036 <_printf_float+0xb6>
 800821c:	f04f 0a00 	mov.w	sl, #0
 8008220:	f104 0b1a 	add.w	fp, r4, #26
 8008224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008226:	425b      	negs	r3, r3
 8008228:	4553      	cmp	r3, sl
 800822a:	dc01      	bgt.n	8008230 <_printf_float+0x2b0>
 800822c:	464b      	mov	r3, r9
 800822e:	e793      	b.n	8008158 <_printf_float+0x1d8>
 8008230:	2301      	movs	r3, #1
 8008232:	465a      	mov	r2, fp
 8008234:	4631      	mov	r1, r6
 8008236:	4628      	mov	r0, r5
 8008238:	47b8      	blx	r7
 800823a:	3001      	adds	r0, #1
 800823c:	f43f aefb 	beq.w	8008036 <_printf_float+0xb6>
 8008240:	f10a 0a01 	add.w	sl, sl, #1
 8008244:	e7ee      	b.n	8008224 <_printf_float+0x2a4>
 8008246:	bf00      	nop
 8008248:	7fefffff 	.word	0x7fefffff
 800824c:	0800cbfc 	.word	0x0800cbfc
 8008250:	0800cbf8 	.word	0x0800cbf8
 8008254:	0800cc04 	.word	0x0800cc04
 8008258:	0800cc00 	.word	0x0800cc00
 800825c:	0800cc08 	.word	0x0800cc08
 8008260:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008262:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008266:	4553      	cmp	r3, sl
 8008268:	bfa8      	it	ge
 800826a:	4653      	movge	r3, sl
 800826c:	2b00      	cmp	r3, #0
 800826e:	4699      	mov	r9, r3
 8008270:	dc36      	bgt.n	80082e0 <_printf_float+0x360>
 8008272:	f04f 0b00 	mov.w	fp, #0
 8008276:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800827a:	f104 021a 	add.w	r2, r4, #26
 800827e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008280:	9306      	str	r3, [sp, #24]
 8008282:	eba3 0309 	sub.w	r3, r3, r9
 8008286:	455b      	cmp	r3, fp
 8008288:	dc31      	bgt.n	80082ee <_printf_float+0x36e>
 800828a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800828c:	459a      	cmp	sl, r3
 800828e:	dc3a      	bgt.n	8008306 <_printf_float+0x386>
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	07da      	lsls	r2, r3, #31
 8008294:	d437      	bmi.n	8008306 <_printf_float+0x386>
 8008296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008298:	ebaa 0903 	sub.w	r9, sl, r3
 800829c:	9b06      	ldr	r3, [sp, #24]
 800829e:	ebaa 0303 	sub.w	r3, sl, r3
 80082a2:	4599      	cmp	r9, r3
 80082a4:	bfa8      	it	ge
 80082a6:	4699      	movge	r9, r3
 80082a8:	f1b9 0f00 	cmp.w	r9, #0
 80082ac:	dc33      	bgt.n	8008316 <_printf_float+0x396>
 80082ae:	f04f 0800 	mov.w	r8, #0
 80082b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082b6:	f104 0b1a 	add.w	fp, r4, #26
 80082ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082bc:	ebaa 0303 	sub.w	r3, sl, r3
 80082c0:	eba3 0309 	sub.w	r3, r3, r9
 80082c4:	4543      	cmp	r3, r8
 80082c6:	f77f af79 	ble.w	80081bc <_printf_float+0x23c>
 80082ca:	2301      	movs	r3, #1
 80082cc:	465a      	mov	r2, fp
 80082ce:	4631      	mov	r1, r6
 80082d0:	4628      	mov	r0, r5
 80082d2:	47b8      	blx	r7
 80082d4:	3001      	adds	r0, #1
 80082d6:	f43f aeae 	beq.w	8008036 <_printf_float+0xb6>
 80082da:	f108 0801 	add.w	r8, r8, #1
 80082de:	e7ec      	b.n	80082ba <_printf_float+0x33a>
 80082e0:	4642      	mov	r2, r8
 80082e2:	4631      	mov	r1, r6
 80082e4:	4628      	mov	r0, r5
 80082e6:	47b8      	blx	r7
 80082e8:	3001      	adds	r0, #1
 80082ea:	d1c2      	bne.n	8008272 <_printf_float+0x2f2>
 80082ec:	e6a3      	b.n	8008036 <_printf_float+0xb6>
 80082ee:	2301      	movs	r3, #1
 80082f0:	4631      	mov	r1, r6
 80082f2:	4628      	mov	r0, r5
 80082f4:	9206      	str	r2, [sp, #24]
 80082f6:	47b8      	blx	r7
 80082f8:	3001      	adds	r0, #1
 80082fa:	f43f ae9c 	beq.w	8008036 <_printf_float+0xb6>
 80082fe:	9a06      	ldr	r2, [sp, #24]
 8008300:	f10b 0b01 	add.w	fp, fp, #1
 8008304:	e7bb      	b.n	800827e <_printf_float+0x2fe>
 8008306:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800830a:	4631      	mov	r1, r6
 800830c:	4628      	mov	r0, r5
 800830e:	47b8      	blx	r7
 8008310:	3001      	adds	r0, #1
 8008312:	d1c0      	bne.n	8008296 <_printf_float+0x316>
 8008314:	e68f      	b.n	8008036 <_printf_float+0xb6>
 8008316:	9a06      	ldr	r2, [sp, #24]
 8008318:	464b      	mov	r3, r9
 800831a:	4442      	add	r2, r8
 800831c:	4631      	mov	r1, r6
 800831e:	4628      	mov	r0, r5
 8008320:	47b8      	blx	r7
 8008322:	3001      	adds	r0, #1
 8008324:	d1c3      	bne.n	80082ae <_printf_float+0x32e>
 8008326:	e686      	b.n	8008036 <_printf_float+0xb6>
 8008328:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800832c:	f1ba 0f01 	cmp.w	sl, #1
 8008330:	dc01      	bgt.n	8008336 <_printf_float+0x3b6>
 8008332:	07db      	lsls	r3, r3, #31
 8008334:	d536      	bpl.n	80083a4 <_printf_float+0x424>
 8008336:	2301      	movs	r3, #1
 8008338:	4642      	mov	r2, r8
 800833a:	4631      	mov	r1, r6
 800833c:	4628      	mov	r0, r5
 800833e:	47b8      	blx	r7
 8008340:	3001      	adds	r0, #1
 8008342:	f43f ae78 	beq.w	8008036 <_printf_float+0xb6>
 8008346:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800834a:	4631      	mov	r1, r6
 800834c:	4628      	mov	r0, r5
 800834e:	47b8      	blx	r7
 8008350:	3001      	adds	r0, #1
 8008352:	f43f ae70 	beq.w	8008036 <_printf_float+0xb6>
 8008356:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800835a:	2200      	movs	r2, #0
 800835c:	2300      	movs	r3, #0
 800835e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008362:	f7f8 fc31 	bl	8000bc8 <__aeabi_dcmpeq>
 8008366:	b9c0      	cbnz	r0, 800839a <_printf_float+0x41a>
 8008368:	4653      	mov	r3, sl
 800836a:	f108 0201 	add.w	r2, r8, #1
 800836e:	4631      	mov	r1, r6
 8008370:	4628      	mov	r0, r5
 8008372:	47b8      	blx	r7
 8008374:	3001      	adds	r0, #1
 8008376:	d10c      	bne.n	8008392 <_printf_float+0x412>
 8008378:	e65d      	b.n	8008036 <_printf_float+0xb6>
 800837a:	2301      	movs	r3, #1
 800837c:	465a      	mov	r2, fp
 800837e:	4631      	mov	r1, r6
 8008380:	4628      	mov	r0, r5
 8008382:	47b8      	blx	r7
 8008384:	3001      	adds	r0, #1
 8008386:	f43f ae56 	beq.w	8008036 <_printf_float+0xb6>
 800838a:	f108 0801 	add.w	r8, r8, #1
 800838e:	45d0      	cmp	r8, sl
 8008390:	dbf3      	blt.n	800837a <_printf_float+0x3fa>
 8008392:	464b      	mov	r3, r9
 8008394:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008398:	e6df      	b.n	800815a <_printf_float+0x1da>
 800839a:	f04f 0800 	mov.w	r8, #0
 800839e:	f104 0b1a 	add.w	fp, r4, #26
 80083a2:	e7f4      	b.n	800838e <_printf_float+0x40e>
 80083a4:	2301      	movs	r3, #1
 80083a6:	4642      	mov	r2, r8
 80083a8:	e7e1      	b.n	800836e <_printf_float+0x3ee>
 80083aa:	2301      	movs	r3, #1
 80083ac:	464a      	mov	r2, r9
 80083ae:	4631      	mov	r1, r6
 80083b0:	4628      	mov	r0, r5
 80083b2:	47b8      	blx	r7
 80083b4:	3001      	adds	r0, #1
 80083b6:	f43f ae3e 	beq.w	8008036 <_printf_float+0xb6>
 80083ba:	f108 0801 	add.w	r8, r8, #1
 80083be:	68e3      	ldr	r3, [r4, #12]
 80083c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083c2:	1a5b      	subs	r3, r3, r1
 80083c4:	4543      	cmp	r3, r8
 80083c6:	dcf0      	bgt.n	80083aa <_printf_float+0x42a>
 80083c8:	e6fc      	b.n	80081c4 <_printf_float+0x244>
 80083ca:	f04f 0800 	mov.w	r8, #0
 80083ce:	f104 0919 	add.w	r9, r4, #25
 80083d2:	e7f4      	b.n	80083be <_printf_float+0x43e>

080083d4 <_printf_common>:
 80083d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083d8:	4616      	mov	r6, r2
 80083da:	4698      	mov	r8, r3
 80083dc:	688a      	ldr	r2, [r1, #8]
 80083de:	690b      	ldr	r3, [r1, #16]
 80083e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083e4:	4293      	cmp	r3, r2
 80083e6:	bfb8      	it	lt
 80083e8:	4613      	movlt	r3, r2
 80083ea:	6033      	str	r3, [r6, #0]
 80083ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80083f0:	4607      	mov	r7, r0
 80083f2:	460c      	mov	r4, r1
 80083f4:	b10a      	cbz	r2, 80083fa <_printf_common+0x26>
 80083f6:	3301      	adds	r3, #1
 80083f8:	6033      	str	r3, [r6, #0]
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	0699      	lsls	r1, r3, #26
 80083fe:	bf42      	ittt	mi
 8008400:	6833      	ldrmi	r3, [r6, #0]
 8008402:	3302      	addmi	r3, #2
 8008404:	6033      	strmi	r3, [r6, #0]
 8008406:	6825      	ldr	r5, [r4, #0]
 8008408:	f015 0506 	ands.w	r5, r5, #6
 800840c:	d106      	bne.n	800841c <_printf_common+0x48>
 800840e:	f104 0a19 	add.w	sl, r4, #25
 8008412:	68e3      	ldr	r3, [r4, #12]
 8008414:	6832      	ldr	r2, [r6, #0]
 8008416:	1a9b      	subs	r3, r3, r2
 8008418:	42ab      	cmp	r3, r5
 800841a:	dc26      	bgt.n	800846a <_printf_common+0x96>
 800841c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008420:	6822      	ldr	r2, [r4, #0]
 8008422:	3b00      	subs	r3, #0
 8008424:	bf18      	it	ne
 8008426:	2301      	movne	r3, #1
 8008428:	0692      	lsls	r2, r2, #26
 800842a:	d42b      	bmi.n	8008484 <_printf_common+0xb0>
 800842c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008430:	4641      	mov	r1, r8
 8008432:	4638      	mov	r0, r7
 8008434:	47c8      	blx	r9
 8008436:	3001      	adds	r0, #1
 8008438:	d01e      	beq.n	8008478 <_printf_common+0xa4>
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	6922      	ldr	r2, [r4, #16]
 800843e:	f003 0306 	and.w	r3, r3, #6
 8008442:	2b04      	cmp	r3, #4
 8008444:	bf02      	ittt	eq
 8008446:	68e5      	ldreq	r5, [r4, #12]
 8008448:	6833      	ldreq	r3, [r6, #0]
 800844a:	1aed      	subeq	r5, r5, r3
 800844c:	68a3      	ldr	r3, [r4, #8]
 800844e:	bf0c      	ite	eq
 8008450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008454:	2500      	movne	r5, #0
 8008456:	4293      	cmp	r3, r2
 8008458:	bfc4      	itt	gt
 800845a:	1a9b      	subgt	r3, r3, r2
 800845c:	18ed      	addgt	r5, r5, r3
 800845e:	2600      	movs	r6, #0
 8008460:	341a      	adds	r4, #26
 8008462:	42b5      	cmp	r5, r6
 8008464:	d11a      	bne.n	800849c <_printf_common+0xc8>
 8008466:	2000      	movs	r0, #0
 8008468:	e008      	b.n	800847c <_printf_common+0xa8>
 800846a:	2301      	movs	r3, #1
 800846c:	4652      	mov	r2, sl
 800846e:	4641      	mov	r1, r8
 8008470:	4638      	mov	r0, r7
 8008472:	47c8      	blx	r9
 8008474:	3001      	adds	r0, #1
 8008476:	d103      	bne.n	8008480 <_printf_common+0xac>
 8008478:	f04f 30ff 	mov.w	r0, #4294967295
 800847c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008480:	3501      	adds	r5, #1
 8008482:	e7c6      	b.n	8008412 <_printf_common+0x3e>
 8008484:	18e1      	adds	r1, r4, r3
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	2030      	movs	r0, #48	@ 0x30
 800848a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800848e:	4422      	add	r2, r4
 8008490:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008494:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008498:	3302      	adds	r3, #2
 800849a:	e7c7      	b.n	800842c <_printf_common+0x58>
 800849c:	2301      	movs	r3, #1
 800849e:	4622      	mov	r2, r4
 80084a0:	4641      	mov	r1, r8
 80084a2:	4638      	mov	r0, r7
 80084a4:	47c8      	blx	r9
 80084a6:	3001      	adds	r0, #1
 80084a8:	d0e6      	beq.n	8008478 <_printf_common+0xa4>
 80084aa:	3601      	adds	r6, #1
 80084ac:	e7d9      	b.n	8008462 <_printf_common+0x8e>
	...

080084b0 <_printf_i>:
 80084b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084b4:	7e0f      	ldrb	r7, [r1, #24]
 80084b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80084b8:	2f78      	cmp	r7, #120	@ 0x78
 80084ba:	4691      	mov	r9, r2
 80084bc:	4680      	mov	r8, r0
 80084be:	460c      	mov	r4, r1
 80084c0:	469a      	mov	sl, r3
 80084c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80084c6:	d807      	bhi.n	80084d8 <_printf_i+0x28>
 80084c8:	2f62      	cmp	r7, #98	@ 0x62
 80084ca:	d80a      	bhi.n	80084e2 <_printf_i+0x32>
 80084cc:	2f00      	cmp	r7, #0
 80084ce:	f000 80d1 	beq.w	8008674 <_printf_i+0x1c4>
 80084d2:	2f58      	cmp	r7, #88	@ 0x58
 80084d4:	f000 80b8 	beq.w	8008648 <_printf_i+0x198>
 80084d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80084e0:	e03a      	b.n	8008558 <_printf_i+0xa8>
 80084e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80084e6:	2b15      	cmp	r3, #21
 80084e8:	d8f6      	bhi.n	80084d8 <_printf_i+0x28>
 80084ea:	a101      	add	r1, pc, #4	@ (adr r1, 80084f0 <_printf_i+0x40>)
 80084ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084f0:	08008549 	.word	0x08008549
 80084f4:	0800855d 	.word	0x0800855d
 80084f8:	080084d9 	.word	0x080084d9
 80084fc:	080084d9 	.word	0x080084d9
 8008500:	080084d9 	.word	0x080084d9
 8008504:	080084d9 	.word	0x080084d9
 8008508:	0800855d 	.word	0x0800855d
 800850c:	080084d9 	.word	0x080084d9
 8008510:	080084d9 	.word	0x080084d9
 8008514:	080084d9 	.word	0x080084d9
 8008518:	080084d9 	.word	0x080084d9
 800851c:	0800865b 	.word	0x0800865b
 8008520:	08008587 	.word	0x08008587
 8008524:	08008615 	.word	0x08008615
 8008528:	080084d9 	.word	0x080084d9
 800852c:	080084d9 	.word	0x080084d9
 8008530:	0800867d 	.word	0x0800867d
 8008534:	080084d9 	.word	0x080084d9
 8008538:	08008587 	.word	0x08008587
 800853c:	080084d9 	.word	0x080084d9
 8008540:	080084d9 	.word	0x080084d9
 8008544:	0800861d 	.word	0x0800861d
 8008548:	6833      	ldr	r3, [r6, #0]
 800854a:	1d1a      	adds	r2, r3, #4
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6032      	str	r2, [r6, #0]
 8008550:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008554:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008558:	2301      	movs	r3, #1
 800855a:	e09c      	b.n	8008696 <_printf_i+0x1e6>
 800855c:	6833      	ldr	r3, [r6, #0]
 800855e:	6820      	ldr	r0, [r4, #0]
 8008560:	1d19      	adds	r1, r3, #4
 8008562:	6031      	str	r1, [r6, #0]
 8008564:	0606      	lsls	r6, r0, #24
 8008566:	d501      	bpl.n	800856c <_printf_i+0xbc>
 8008568:	681d      	ldr	r5, [r3, #0]
 800856a:	e003      	b.n	8008574 <_printf_i+0xc4>
 800856c:	0645      	lsls	r5, r0, #25
 800856e:	d5fb      	bpl.n	8008568 <_printf_i+0xb8>
 8008570:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008574:	2d00      	cmp	r5, #0
 8008576:	da03      	bge.n	8008580 <_printf_i+0xd0>
 8008578:	232d      	movs	r3, #45	@ 0x2d
 800857a:	426d      	negs	r5, r5
 800857c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008580:	4858      	ldr	r0, [pc, #352]	@ (80086e4 <_printf_i+0x234>)
 8008582:	230a      	movs	r3, #10
 8008584:	e011      	b.n	80085aa <_printf_i+0xfa>
 8008586:	6821      	ldr	r1, [r4, #0]
 8008588:	6833      	ldr	r3, [r6, #0]
 800858a:	0608      	lsls	r0, r1, #24
 800858c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008590:	d402      	bmi.n	8008598 <_printf_i+0xe8>
 8008592:	0649      	lsls	r1, r1, #25
 8008594:	bf48      	it	mi
 8008596:	b2ad      	uxthmi	r5, r5
 8008598:	2f6f      	cmp	r7, #111	@ 0x6f
 800859a:	4852      	ldr	r0, [pc, #328]	@ (80086e4 <_printf_i+0x234>)
 800859c:	6033      	str	r3, [r6, #0]
 800859e:	bf14      	ite	ne
 80085a0:	230a      	movne	r3, #10
 80085a2:	2308      	moveq	r3, #8
 80085a4:	2100      	movs	r1, #0
 80085a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085aa:	6866      	ldr	r6, [r4, #4]
 80085ac:	60a6      	str	r6, [r4, #8]
 80085ae:	2e00      	cmp	r6, #0
 80085b0:	db05      	blt.n	80085be <_printf_i+0x10e>
 80085b2:	6821      	ldr	r1, [r4, #0]
 80085b4:	432e      	orrs	r6, r5
 80085b6:	f021 0104 	bic.w	r1, r1, #4
 80085ba:	6021      	str	r1, [r4, #0]
 80085bc:	d04b      	beq.n	8008656 <_printf_i+0x1a6>
 80085be:	4616      	mov	r6, r2
 80085c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80085c4:	fb03 5711 	mls	r7, r3, r1, r5
 80085c8:	5dc7      	ldrb	r7, [r0, r7]
 80085ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085ce:	462f      	mov	r7, r5
 80085d0:	42bb      	cmp	r3, r7
 80085d2:	460d      	mov	r5, r1
 80085d4:	d9f4      	bls.n	80085c0 <_printf_i+0x110>
 80085d6:	2b08      	cmp	r3, #8
 80085d8:	d10b      	bne.n	80085f2 <_printf_i+0x142>
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	07df      	lsls	r7, r3, #31
 80085de:	d508      	bpl.n	80085f2 <_printf_i+0x142>
 80085e0:	6923      	ldr	r3, [r4, #16]
 80085e2:	6861      	ldr	r1, [r4, #4]
 80085e4:	4299      	cmp	r1, r3
 80085e6:	bfde      	ittt	le
 80085e8:	2330      	movle	r3, #48	@ 0x30
 80085ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085f2:	1b92      	subs	r2, r2, r6
 80085f4:	6122      	str	r2, [r4, #16]
 80085f6:	f8cd a000 	str.w	sl, [sp]
 80085fa:	464b      	mov	r3, r9
 80085fc:	aa03      	add	r2, sp, #12
 80085fe:	4621      	mov	r1, r4
 8008600:	4640      	mov	r0, r8
 8008602:	f7ff fee7 	bl	80083d4 <_printf_common>
 8008606:	3001      	adds	r0, #1
 8008608:	d14a      	bne.n	80086a0 <_printf_i+0x1f0>
 800860a:	f04f 30ff 	mov.w	r0, #4294967295
 800860e:	b004      	add	sp, #16
 8008610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	f043 0320 	orr.w	r3, r3, #32
 800861a:	6023      	str	r3, [r4, #0]
 800861c:	4832      	ldr	r0, [pc, #200]	@ (80086e8 <_printf_i+0x238>)
 800861e:	2778      	movs	r7, #120	@ 0x78
 8008620:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	6831      	ldr	r1, [r6, #0]
 8008628:	061f      	lsls	r7, r3, #24
 800862a:	f851 5b04 	ldr.w	r5, [r1], #4
 800862e:	d402      	bmi.n	8008636 <_printf_i+0x186>
 8008630:	065f      	lsls	r7, r3, #25
 8008632:	bf48      	it	mi
 8008634:	b2ad      	uxthmi	r5, r5
 8008636:	6031      	str	r1, [r6, #0]
 8008638:	07d9      	lsls	r1, r3, #31
 800863a:	bf44      	itt	mi
 800863c:	f043 0320 	orrmi.w	r3, r3, #32
 8008640:	6023      	strmi	r3, [r4, #0]
 8008642:	b11d      	cbz	r5, 800864c <_printf_i+0x19c>
 8008644:	2310      	movs	r3, #16
 8008646:	e7ad      	b.n	80085a4 <_printf_i+0xf4>
 8008648:	4826      	ldr	r0, [pc, #152]	@ (80086e4 <_printf_i+0x234>)
 800864a:	e7e9      	b.n	8008620 <_printf_i+0x170>
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	f023 0320 	bic.w	r3, r3, #32
 8008652:	6023      	str	r3, [r4, #0]
 8008654:	e7f6      	b.n	8008644 <_printf_i+0x194>
 8008656:	4616      	mov	r6, r2
 8008658:	e7bd      	b.n	80085d6 <_printf_i+0x126>
 800865a:	6833      	ldr	r3, [r6, #0]
 800865c:	6825      	ldr	r5, [r4, #0]
 800865e:	6961      	ldr	r1, [r4, #20]
 8008660:	1d18      	adds	r0, r3, #4
 8008662:	6030      	str	r0, [r6, #0]
 8008664:	062e      	lsls	r6, r5, #24
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	d501      	bpl.n	800866e <_printf_i+0x1be>
 800866a:	6019      	str	r1, [r3, #0]
 800866c:	e002      	b.n	8008674 <_printf_i+0x1c4>
 800866e:	0668      	lsls	r0, r5, #25
 8008670:	d5fb      	bpl.n	800866a <_printf_i+0x1ba>
 8008672:	8019      	strh	r1, [r3, #0]
 8008674:	2300      	movs	r3, #0
 8008676:	6123      	str	r3, [r4, #16]
 8008678:	4616      	mov	r6, r2
 800867a:	e7bc      	b.n	80085f6 <_printf_i+0x146>
 800867c:	6833      	ldr	r3, [r6, #0]
 800867e:	1d1a      	adds	r2, r3, #4
 8008680:	6032      	str	r2, [r6, #0]
 8008682:	681e      	ldr	r6, [r3, #0]
 8008684:	6862      	ldr	r2, [r4, #4]
 8008686:	2100      	movs	r1, #0
 8008688:	4630      	mov	r0, r6
 800868a:	f7f7 fe21 	bl	80002d0 <memchr>
 800868e:	b108      	cbz	r0, 8008694 <_printf_i+0x1e4>
 8008690:	1b80      	subs	r0, r0, r6
 8008692:	6060      	str	r0, [r4, #4]
 8008694:	6863      	ldr	r3, [r4, #4]
 8008696:	6123      	str	r3, [r4, #16]
 8008698:	2300      	movs	r3, #0
 800869a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800869e:	e7aa      	b.n	80085f6 <_printf_i+0x146>
 80086a0:	6923      	ldr	r3, [r4, #16]
 80086a2:	4632      	mov	r2, r6
 80086a4:	4649      	mov	r1, r9
 80086a6:	4640      	mov	r0, r8
 80086a8:	47d0      	blx	sl
 80086aa:	3001      	adds	r0, #1
 80086ac:	d0ad      	beq.n	800860a <_printf_i+0x15a>
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	079b      	lsls	r3, r3, #30
 80086b2:	d413      	bmi.n	80086dc <_printf_i+0x22c>
 80086b4:	68e0      	ldr	r0, [r4, #12]
 80086b6:	9b03      	ldr	r3, [sp, #12]
 80086b8:	4298      	cmp	r0, r3
 80086ba:	bfb8      	it	lt
 80086bc:	4618      	movlt	r0, r3
 80086be:	e7a6      	b.n	800860e <_printf_i+0x15e>
 80086c0:	2301      	movs	r3, #1
 80086c2:	4632      	mov	r2, r6
 80086c4:	4649      	mov	r1, r9
 80086c6:	4640      	mov	r0, r8
 80086c8:	47d0      	blx	sl
 80086ca:	3001      	adds	r0, #1
 80086cc:	d09d      	beq.n	800860a <_printf_i+0x15a>
 80086ce:	3501      	adds	r5, #1
 80086d0:	68e3      	ldr	r3, [r4, #12]
 80086d2:	9903      	ldr	r1, [sp, #12]
 80086d4:	1a5b      	subs	r3, r3, r1
 80086d6:	42ab      	cmp	r3, r5
 80086d8:	dcf2      	bgt.n	80086c0 <_printf_i+0x210>
 80086da:	e7eb      	b.n	80086b4 <_printf_i+0x204>
 80086dc:	2500      	movs	r5, #0
 80086de:	f104 0619 	add.w	r6, r4, #25
 80086e2:	e7f5      	b.n	80086d0 <_printf_i+0x220>
 80086e4:	0800cc0a 	.word	0x0800cc0a
 80086e8:	0800cc1b 	.word	0x0800cc1b

080086ec <std>:
 80086ec:	2300      	movs	r3, #0
 80086ee:	b510      	push	{r4, lr}
 80086f0:	4604      	mov	r4, r0
 80086f2:	e9c0 3300 	strd	r3, r3, [r0]
 80086f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086fa:	6083      	str	r3, [r0, #8]
 80086fc:	8181      	strh	r1, [r0, #12]
 80086fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8008700:	81c2      	strh	r2, [r0, #14]
 8008702:	6183      	str	r3, [r0, #24]
 8008704:	4619      	mov	r1, r3
 8008706:	2208      	movs	r2, #8
 8008708:	305c      	adds	r0, #92	@ 0x5c
 800870a:	f000 f989 	bl	8008a20 <memset>
 800870e:	4b0d      	ldr	r3, [pc, #52]	@ (8008744 <std+0x58>)
 8008710:	6263      	str	r3, [r4, #36]	@ 0x24
 8008712:	4b0d      	ldr	r3, [pc, #52]	@ (8008748 <std+0x5c>)
 8008714:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008716:	4b0d      	ldr	r3, [pc, #52]	@ (800874c <std+0x60>)
 8008718:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800871a:	4b0d      	ldr	r3, [pc, #52]	@ (8008750 <std+0x64>)
 800871c:	6323      	str	r3, [r4, #48]	@ 0x30
 800871e:	4b0d      	ldr	r3, [pc, #52]	@ (8008754 <std+0x68>)
 8008720:	6224      	str	r4, [r4, #32]
 8008722:	429c      	cmp	r4, r3
 8008724:	d006      	beq.n	8008734 <std+0x48>
 8008726:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800872a:	4294      	cmp	r4, r2
 800872c:	d002      	beq.n	8008734 <std+0x48>
 800872e:	33d0      	adds	r3, #208	@ 0xd0
 8008730:	429c      	cmp	r4, r3
 8008732:	d105      	bne.n	8008740 <std+0x54>
 8008734:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800873c:	f000 b9ec 	b.w	8008b18 <__retarget_lock_init_recursive>
 8008740:	bd10      	pop	{r4, pc}
 8008742:	bf00      	nop
 8008744:	08008871 	.word	0x08008871
 8008748:	08008893 	.word	0x08008893
 800874c:	080088cb 	.word	0x080088cb
 8008750:	080088ef 	.word	0x080088ef
 8008754:	2000543c 	.word	0x2000543c

08008758 <stdio_exit_handler>:
 8008758:	4a02      	ldr	r2, [pc, #8]	@ (8008764 <stdio_exit_handler+0xc>)
 800875a:	4903      	ldr	r1, [pc, #12]	@ (8008768 <stdio_exit_handler+0x10>)
 800875c:	4803      	ldr	r0, [pc, #12]	@ (800876c <stdio_exit_handler+0x14>)
 800875e:	f000 b869 	b.w	8008834 <_fwalk_sglue>
 8008762:	bf00      	nop
 8008764:	20000048 	.word	0x20000048
 8008768:	0800a1cd 	.word	0x0800a1cd
 800876c:	20000058 	.word	0x20000058

08008770 <cleanup_stdio>:
 8008770:	6841      	ldr	r1, [r0, #4]
 8008772:	4b0c      	ldr	r3, [pc, #48]	@ (80087a4 <cleanup_stdio+0x34>)
 8008774:	4299      	cmp	r1, r3
 8008776:	b510      	push	{r4, lr}
 8008778:	4604      	mov	r4, r0
 800877a:	d001      	beq.n	8008780 <cleanup_stdio+0x10>
 800877c:	f001 fd26 	bl	800a1cc <_fflush_r>
 8008780:	68a1      	ldr	r1, [r4, #8]
 8008782:	4b09      	ldr	r3, [pc, #36]	@ (80087a8 <cleanup_stdio+0x38>)
 8008784:	4299      	cmp	r1, r3
 8008786:	d002      	beq.n	800878e <cleanup_stdio+0x1e>
 8008788:	4620      	mov	r0, r4
 800878a:	f001 fd1f 	bl	800a1cc <_fflush_r>
 800878e:	68e1      	ldr	r1, [r4, #12]
 8008790:	4b06      	ldr	r3, [pc, #24]	@ (80087ac <cleanup_stdio+0x3c>)
 8008792:	4299      	cmp	r1, r3
 8008794:	d004      	beq.n	80087a0 <cleanup_stdio+0x30>
 8008796:	4620      	mov	r0, r4
 8008798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800879c:	f001 bd16 	b.w	800a1cc <_fflush_r>
 80087a0:	bd10      	pop	{r4, pc}
 80087a2:	bf00      	nop
 80087a4:	2000543c 	.word	0x2000543c
 80087a8:	200054a4 	.word	0x200054a4
 80087ac:	2000550c 	.word	0x2000550c

080087b0 <global_stdio_init.part.0>:
 80087b0:	b510      	push	{r4, lr}
 80087b2:	4b0b      	ldr	r3, [pc, #44]	@ (80087e0 <global_stdio_init.part.0+0x30>)
 80087b4:	4c0b      	ldr	r4, [pc, #44]	@ (80087e4 <global_stdio_init.part.0+0x34>)
 80087b6:	4a0c      	ldr	r2, [pc, #48]	@ (80087e8 <global_stdio_init.part.0+0x38>)
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	4620      	mov	r0, r4
 80087bc:	2200      	movs	r2, #0
 80087be:	2104      	movs	r1, #4
 80087c0:	f7ff ff94 	bl	80086ec <std>
 80087c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80087c8:	2201      	movs	r2, #1
 80087ca:	2109      	movs	r1, #9
 80087cc:	f7ff ff8e 	bl	80086ec <std>
 80087d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80087d4:	2202      	movs	r2, #2
 80087d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087da:	2112      	movs	r1, #18
 80087dc:	f7ff bf86 	b.w	80086ec <std>
 80087e0:	20005574 	.word	0x20005574
 80087e4:	2000543c 	.word	0x2000543c
 80087e8:	08008759 	.word	0x08008759

080087ec <__sfp_lock_acquire>:
 80087ec:	4801      	ldr	r0, [pc, #4]	@ (80087f4 <__sfp_lock_acquire+0x8>)
 80087ee:	f000 b994 	b.w	8008b1a <__retarget_lock_acquire_recursive>
 80087f2:	bf00      	nop
 80087f4:	2000557d 	.word	0x2000557d

080087f8 <__sfp_lock_release>:
 80087f8:	4801      	ldr	r0, [pc, #4]	@ (8008800 <__sfp_lock_release+0x8>)
 80087fa:	f000 b98f 	b.w	8008b1c <__retarget_lock_release_recursive>
 80087fe:	bf00      	nop
 8008800:	2000557d 	.word	0x2000557d

08008804 <__sinit>:
 8008804:	b510      	push	{r4, lr}
 8008806:	4604      	mov	r4, r0
 8008808:	f7ff fff0 	bl	80087ec <__sfp_lock_acquire>
 800880c:	6a23      	ldr	r3, [r4, #32]
 800880e:	b11b      	cbz	r3, 8008818 <__sinit+0x14>
 8008810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008814:	f7ff bff0 	b.w	80087f8 <__sfp_lock_release>
 8008818:	4b04      	ldr	r3, [pc, #16]	@ (800882c <__sinit+0x28>)
 800881a:	6223      	str	r3, [r4, #32]
 800881c:	4b04      	ldr	r3, [pc, #16]	@ (8008830 <__sinit+0x2c>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1f5      	bne.n	8008810 <__sinit+0xc>
 8008824:	f7ff ffc4 	bl	80087b0 <global_stdio_init.part.0>
 8008828:	e7f2      	b.n	8008810 <__sinit+0xc>
 800882a:	bf00      	nop
 800882c:	08008771 	.word	0x08008771
 8008830:	20005574 	.word	0x20005574

08008834 <_fwalk_sglue>:
 8008834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008838:	4607      	mov	r7, r0
 800883a:	4688      	mov	r8, r1
 800883c:	4614      	mov	r4, r2
 800883e:	2600      	movs	r6, #0
 8008840:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008844:	f1b9 0901 	subs.w	r9, r9, #1
 8008848:	d505      	bpl.n	8008856 <_fwalk_sglue+0x22>
 800884a:	6824      	ldr	r4, [r4, #0]
 800884c:	2c00      	cmp	r4, #0
 800884e:	d1f7      	bne.n	8008840 <_fwalk_sglue+0xc>
 8008850:	4630      	mov	r0, r6
 8008852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008856:	89ab      	ldrh	r3, [r5, #12]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d907      	bls.n	800886c <_fwalk_sglue+0x38>
 800885c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008860:	3301      	adds	r3, #1
 8008862:	d003      	beq.n	800886c <_fwalk_sglue+0x38>
 8008864:	4629      	mov	r1, r5
 8008866:	4638      	mov	r0, r7
 8008868:	47c0      	blx	r8
 800886a:	4306      	orrs	r6, r0
 800886c:	3568      	adds	r5, #104	@ 0x68
 800886e:	e7e9      	b.n	8008844 <_fwalk_sglue+0x10>

08008870 <__sread>:
 8008870:	b510      	push	{r4, lr}
 8008872:	460c      	mov	r4, r1
 8008874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008878:	f000 f900 	bl	8008a7c <_read_r>
 800887c:	2800      	cmp	r0, #0
 800887e:	bfab      	itete	ge
 8008880:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008882:	89a3      	ldrhlt	r3, [r4, #12]
 8008884:	181b      	addge	r3, r3, r0
 8008886:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800888a:	bfac      	ite	ge
 800888c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800888e:	81a3      	strhlt	r3, [r4, #12]
 8008890:	bd10      	pop	{r4, pc}

08008892 <__swrite>:
 8008892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008896:	461f      	mov	r7, r3
 8008898:	898b      	ldrh	r3, [r1, #12]
 800889a:	05db      	lsls	r3, r3, #23
 800889c:	4605      	mov	r5, r0
 800889e:	460c      	mov	r4, r1
 80088a0:	4616      	mov	r6, r2
 80088a2:	d505      	bpl.n	80088b0 <__swrite+0x1e>
 80088a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a8:	2302      	movs	r3, #2
 80088aa:	2200      	movs	r2, #0
 80088ac:	f000 f8d4 	bl	8008a58 <_lseek_r>
 80088b0:	89a3      	ldrh	r3, [r4, #12]
 80088b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088ba:	81a3      	strh	r3, [r4, #12]
 80088bc:	4632      	mov	r2, r6
 80088be:	463b      	mov	r3, r7
 80088c0:	4628      	mov	r0, r5
 80088c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088c6:	f000 b8eb 	b.w	8008aa0 <_write_r>

080088ca <__sseek>:
 80088ca:	b510      	push	{r4, lr}
 80088cc:	460c      	mov	r4, r1
 80088ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d2:	f000 f8c1 	bl	8008a58 <_lseek_r>
 80088d6:	1c43      	adds	r3, r0, #1
 80088d8:	89a3      	ldrh	r3, [r4, #12]
 80088da:	bf15      	itete	ne
 80088dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80088de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80088e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80088e6:	81a3      	strheq	r3, [r4, #12]
 80088e8:	bf18      	it	ne
 80088ea:	81a3      	strhne	r3, [r4, #12]
 80088ec:	bd10      	pop	{r4, pc}

080088ee <__sclose>:
 80088ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f2:	f000 b8a1 	b.w	8008a38 <_close_r>

080088f6 <__swbuf_r>:
 80088f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f8:	460e      	mov	r6, r1
 80088fa:	4614      	mov	r4, r2
 80088fc:	4605      	mov	r5, r0
 80088fe:	b118      	cbz	r0, 8008908 <__swbuf_r+0x12>
 8008900:	6a03      	ldr	r3, [r0, #32]
 8008902:	b90b      	cbnz	r3, 8008908 <__swbuf_r+0x12>
 8008904:	f7ff ff7e 	bl	8008804 <__sinit>
 8008908:	69a3      	ldr	r3, [r4, #24]
 800890a:	60a3      	str	r3, [r4, #8]
 800890c:	89a3      	ldrh	r3, [r4, #12]
 800890e:	071a      	lsls	r2, r3, #28
 8008910:	d501      	bpl.n	8008916 <__swbuf_r+0x20>
 8008912:	6923      	ldr	r3, [r4, #16]
 8008914:	b943      	cbnz	r3, 8008928 <__swbuf_r+0x32>
 8008916:	4621      	mov	r1, r4
 8008918:	4628      	mov	r0, r5
 800891a:	f000 f82b 	bl	8008974 <__swsetup_r>
 800891e:	b118      	cbz	r0, 8008928 <__swbuf_r+0x32>
 8008920:	f04f 37ff 	mov.w	r7, #4294967295
 8008924:	4638      	mov	r0, r7
 8008926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	6922      	ldr	r2, [r4, #16]
 800892c:	1a98      	subs	r0, r3, r2
 800892e:	6963      	ldr	r3, [r4, #20]
 8008930:	b2f6      	uxtb	r6, r6
 8008932:	4283      	cmp	r3, r0
 8008934:	4637      	mov	r7, r6
 8008936:	dc05      	bgt.n	8008944 <__swbuf_r+0x4e>
 8008938:	4621      	mov	r1, r4
 800893a:	4628      	mov	r0, r5
 800893c:	f001 fc46 	bl	800a1cc <_fflush_r>
 8008940:	2800      	cmp	r0, #0
 8008942:	d1ed      	bne.n	8008920 <__swbuf_r+0x2a>
 8008944:	68a3      	ldr	r3, [r4, #8]
 8008946:	3b01      	subs	r3, #1
 8008948:	60a3      	str	r3, [r4, #8]
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	1c5a      	adds	r2, r3, #1
 800894e:	6022      	str	r2, [r4, #0]
 8008950:	701e      	strb	r6, [r3, #0]
 8008952:	6962      	ldr	r2, [r4, #20]
 8008954:	1c43      	adds	r3, r0, #1
 8008956:	429a      	cmp	r2, r3
 8008958:	d004      	beq.n	8008964 <__swbuf_r+0x6e>
 800895a:	89a3      	ldrh	r3, [r4, #12]
 800895c:	07db      	lsls	r3, r3, #31
 800895e:	d5e1      	bpl.n	8008924 <__swbuf_r+0x2e>
 8008960:	2e0a      	cmp	r6, #10
 8008962:	d1df      	bne.n	8008924 <__swbuf_r+0x2e>
 8008964:	4621      	mov	r1, r4
 8008966:	4628      	mov	r0, r5
 8008968:	f001 fc30 	bl	800a1cc <_fflush_r>
 800896c:	2800      	cmp	r0, #0
 800896e:	d0d9      	beq.n	8008924 <__swbuf_r+0x2e>
 8008970:	e7d6      	b.n	8008920 <__swbuf_r+0x2a>
	...

08008974 <__swsetup_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4b29      	ldr	r3, [pc, #164]	@ (8008a1c <__swsetup_r+0xa8>)
 8008978:	4605      	mov	r5, r0
 800897a:	6818      	ldr	r0, [r3, #0]
 800897c:	460c      	mov	r4, r1
 800897e:	b118      	cbz	r0, 8008988 <__swsetup_r+0x14>
 8008980:	6a03      	ldr	r3, [r0, #32]
 8008982:	b90b      	cbnz	r3, 8008988 <__swsetup_r+0x14>
 8008984:	f7ff ff3e 	bl	8008804 <__sinit>
 8008988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800898c:	0719      	lsls	r1, r3, #28
 800898e:	d422      	bmi.n	80089d6 <__swsetup_r+0x62>
 8008990:	06da      	lsls	r2, r3, #27
 8008992:	d407      	bmi.n	80089a4 <__swsetup_r+0x30>
 8008994:	2209      	movs	r2, #9
 8008996:	602a      	str	r2, [r5, #0]
 8008998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800899c:	81a3      	strh	r3, [r4, #12]
 800899e:	f04f 30ff 	mov.w	r0, #4294967295
 80089a2:	e033      	b.n	8008a0c <__swsetup_r+0x98>
 80089a4:	0758      	lsls	r0, r3, #29
 80089a6:	d512      	bpl.n	80089ce <__swsetup_r+0x5a>
 80089a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089aa:	b141      	cbz	r1, 80089be <__swsetup_r+0x4a>
 80089ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089b0:	4299      	cmp	r1, r3
 80089b2:	d002      	beq.n	80089ba <__swsetup_r+0x46>
 80089b4:	4628      	mov	r0, r5
 80089b6:	f000 ff0b 	bl	80097d0 <_free_r>
 80089ba:	2300      	movs	r3, #0
 80089bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80089be:	89a3      	ldrh	r3, [r4, #12]
 80089c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80089c4:	81a3      	strh	r3, [r4, #12]
 80089c6:	2300      	movs	r3, #0
 80089c8:	6063      	str	r3, [r4, #4]
 80089ca:	6923      	ldr	r3, [r4, #16]
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	f043 0308 	orr.w	r3, r3, #8
 80089d4:	81a3      	strh	r3, [r4, #12]
 80089d6:	6923      	ldr	r3, [r4, #16]
 80089d8:	b94b      	cbnz	r3, 80089ee <__swsetup_r+0x7a>
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80089e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089e4:	d003      	beq.n	80089ee <__swsetup_r+0x7a>
 80089e6:	4621      	mov	r1, r4
 80089e8:	4628      	mov	r0, r5
 80089ea:	f001 fc3d 	bl	800a268 <__smakebuf_r>
 80089ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089f2:	f013 0201 	ands.w	r2, r3, #1
 80089f6:	d00a      	beq.n	8008a0e <__swsetup_r+0x9a>
 80089f8:	2200      	movs	r2, #0
 80089fa:	60a2      	str	r2, [r4, #8]
 80089fc:	6962      	ldr	r2, [r4, #20]
 80089fe:	4252      	negs	r2, r2
 8008a00:	61a2      	str	r2, [r4, #24]
 8008a02:	6922      	ldr	r2, [r4, #16]
 8008a04:	b942      	cbnz	r2, 8008a18 <__swsetup_r+0xa4>
 8008a06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a0a:	d1c5      	bne.n	8008998 <__swsetup_r+0x24>
 8008a0c:	bd38      	pop	{r3, r4, r5, pc}
 8008a0e:	0799      	lsls	r1, r3, #30
 8008a10:	bf58      	it	pl
 8008a12:	6962      	ldrpl	r2, [r4, #20]
 8008a14:	60a2      	str	r2, [r4, #8]
 8008a16:	e7f4      	b.n	8008a02 <__swsetup_r+0x8e>
 8008a18:	2000      	movs	r0, #0
 8008a1a:	e7f7      	b.n	8008a0c <__swsetup_r+0x98>
 8008a1c:	20000054 	.word	0x20000054

08008a20 <memset>:
 8008a20:	4402      	add	r2, r0
 8008a22:	4603      	mov	r3, r0
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d100      	bne.n	8008a2a <memset+0xa>
 8008a28:	4770      	bx	lr
 8008a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a2e:	e7f9      	b.n	8008a24 <memset+0x4>

08008a30 <_localeconv_r>:
 8008a30:	4800      	ldr	r0, [pc, #0]	@ (8008a34 <_localeconv_r+0x4>)
 8008a32:	4770      	bx	lr
 8008a34:	20000194 	.word	0x20000194

08008a38 <_close_r>:
 8008a38:	b538      	push	{r3, r4, r5, lr}
 8008a3a:	4d06      	ldr	r5, [pc, #24]	@ (8008a54 <_close_r+0x1c>)
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	4604      	mov	r4, r0
 8008a40:	4608      	mov	r0, r1
 8008a42:	602b      	str	r3, [r5, #0]
 8008a44:	f001 ff78 	bl	800a938 <_close>
 8008a48:	1c43      	adds	r3, r0, #1
 8008a4a:	d102      	bne.n	8008a52 <_close_r+0x1a>
 8008a4c:	682b      	ldr	r3, [r5, #0]
 8008a4e:	b103      	cbz	r3, 8008a52 <_close_r+0x1a>
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	bd38      	pop	{r3, r4, r5, pc}
 8008a54:	20005578 	.word	0x20005578

08008a58 <_lseek_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4d07      	ldr	r5, [pc, #28]	@ (8008a78 <_lseek_r+0x20>)
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	4608      	mov	r0, r1
 8008a60:	4611      	mov	r1, r2
 8008a62:	2200      	movs	r2, #0
 8008a64:	602a      	str	r2, [r5, #0]
 8008a66:	461a      	mov	r2, r3
 8008a68:	f001 ff27 	bl	800a8ba <_lseek>
 8008a6c:	1c43      	adds	r3, r0, #1
 8008a6e:	d102      	bne.n	8008a76 <_lseek_r+0x1e>
 8008a70:	682b      	ldr	r3, [r5, #0]
 8008a72:	b103      	cbz	r3, 8008a76 <_lseek_r+0x1e>
 8008a74:	6023      	str	r3, [r4, #0]
 8008a76:	bd38      	pop	{r3, r4, r5, pc}
 8008a78:	20005578 	.word	0x20005578

08008a7c <_read_r>:
 8008a7c:	b538      	push	{r3, r4, r5, lr}
 8008a7e:	4d07      	ldr	r5, [pc, #28]	@ (8008a9c <_read_r+0x20>)
 8008a80:	4604      	mov	r4, r0
 8008a82:	4608      	mov	r0, r1
 8008a84:	4611      	mov	r1, r2
 8008a86:	2200      	movs	r2, #0
 8008a88:	602a      	str	r2, [r5, #0]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	f001 febf 	bl	800a80e <_read>
 8008a90:	1c43      	adds	r3, r0, #1
 8008a92:	d102      	bne.n	8008a9a <_read_r+0x1e>
 8008a94:	682b      	ldr	r3, [r5, #0]
 8008a96:	b103      	cbz	r3, 8008a9a <_read_r+0x1e>
 8008a98:	6023      	str	r3, [r4, #0]
 8008a9a:	bd38      	pop	{r3, r4, r5, pc}
 8008a9c:	20005578 	.word	0x20005578

08008aa0 <_write_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4d07      	ldr	r5, [pc, #28]	@ (8008ac0 <_write_r+0x20>)
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	4608      	mov	r0, r1
 8008aa8:	4611      	mov	r1, r2
 8008aaa:	2200      	movs	r2, #0
 8008aac:	602a      	str	r2, [r5, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f001 ff15 	bl	800a8de <_write>
 8008ab4:	1c43      	adds	r3, r0, #1
 8008ab6:	d102      	bne.n	8008abe <_write_r+0x1e>
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	b103      	cbz	r3, 8008abe <_write_r+0x1e>
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	20005578 	.word	0x20005578

08008ac4 <__errno>:
 8008ac4:	4b01      	ldr	r3, [pc, #4]	@ (8008acc <__errno+0x8>)
 8008ac6:	6818      	ldr	r0, [r3, #0]
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	20000054 	.word	0x20000054

08008ad0 <__libc_init_array>:
 8008ad0:	b570      	push	{r4, r5, r6, lr}
 8008ad2:	4d0d      	ldr	r5, [pc, #52]	@ (8008b08 <__libc_init_array+0x38>)
 8008ad4:	4c0d      	ldr	r4, [pc, #52]	@ (8008b0c <__libc_init_array+0x3c>)
 8008ad6:	1b64      	subs	r4, r4, r5
 8008ad8:	10a4      	asrs	r4, r4, #2
 8008ada:	2600      	movs	r6, #0
 8008adc:	42a6      	cmp	r6, r4
 8008ade:	d109      	bne.n	8008af4 <__libc_init_array+0x24>
 8008ae0:	4d0b      	ldr	r5, [pc, #44]	@ (8008b10 <__libc_init_array+0x40>)
 8008ae2:	4c0c      	ldr	r4, [pc, #48]	@ (8008b14 <__libc_init_array+0x44>)
 8008ae4:	f002 fa6e 	bl	800afc4 <_init>
 8008ae8:	1b64      	subs	r4, r4, r5
 8008aea:	10a4      	asrs	r4, r4, #2
 8008aec:	2600      	movs	r6, #0
 8008aee:	42a6      	cmp	r6, r4
 8008af0:	d105      	bne.n	8008afe <__libc_init_array+0x2e>
 8008af2:	bd70      	pop	{r4, r5, r6, pc}
 8008af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008af8:	4798      	blx	r3
 8008afa:	3601      	adds	r6, #1
 8008afc:	e7ee      	b.n	8008adc <__libc_init_array+0xc>
 8008afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b02:	4798      	blx	r3
 8008b04:	3601      	adds	r6, #1
 8008b06:	e7f2      	b.n	8008aee <__libc_init_array+0x1e>
 8008b08:	0800cf8c 	.word	0x0800cf8c
 8008b0c:	0800cf8c 	.word	0x0800cf8c
 8008b10:	0800cf8c 	.word	0x0800cf8c
 8008b14:	0800cf90 	.word	0x0800cf90

08008b18 <__retarget_lock_init_recursive>:
 8008b18:	4770      	bx	lr

08008b1a <__retarget_lock_acquire_recursive>:
 8008b1a:	4770      	bx	lr

08008b1c <__retarget_lock_release_recursive>:
 8008b1c:	4770      	bx	lr

08008b1e <quorem>:
 8008b1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b22:	6903      	ldr	r3, [r0, #16]
 8008b24:	690c      	ldr	r4, [r1, #16]
 8008b26:	42a3      	cmp	r3, r4
 8008b28:	4607      	mov	r7, r0
 8008b2a:	db7e      	blt.n	8008c2a <quorem+0x10c>
 8008b2c:	3c01      	subs	r4, #1
 8008b2e:	f101 0814 	add.w	r8, r1, #20
 8008b32:	00a3      	lsls	r3, r4, #2
 8008b34:	f100 0514 	add.w	r5, r0, #20
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b3e:	9301      	str	r3, [sp, #4]
 8008b40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b50:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b54:	d32e      	bcc.n	8008bb4 <quorem+0x96>
 8008b56:	f04f 0a00 	mov.w	sl, #0
 8008b5a:	46c4      	mov	ip, r8
 8008b5c:	46ae      	mov	lr, r5
 8008b5e:	46d3      	mov	fp, sl
 8008b60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b64:	b298      	uxth	r0, r3
 8008b66:	fb06 a000 	mla	r0, r6, r0, sl
 8008b6a:	0c02      	lsrs	r2, r0, #16
 8008b6c:	0c1b      	lsrs	r3, r3, #16
 8008b6e:	fb06 2303 	mla	r3, r6, r3, r2
 8008b72:	f8de 2000 	ldr.w	r2, [lr]
 8008b76:	b280      	uxth	r0, r0
 8008b78:	b292      	uxth	r2, r2
 8008b7a:	1a12      	subs	r2, r2, r0
 8008b7c:	445a      	add	r2, fp
 8008b7e:	f8de 0000 	ldr.w	r0, [lr]
 8008b82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008b8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008b90:	b292      	uxth	r2, r2
 8008b92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008b96:	45e1      	cmp	r9, ip
 8008b98:	f84e 2b04 	str.w	r2, [lr], #4
 8008b9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008ba0:	d2de      	bcs.n	8008b60 <quorem+0x42>
 8008ba2:	9b00      	ldr	r3, [sp, #0]
 8008ba4:	58eb      	ldr	r3, [r5, r3]
 8008ba6:	b92b      	cbnz	r3, 8008bb4 <quorem+0x96>
 8008ba8:	9b01      	ldr	r3, [sp, #4]
 8008baa:	3b04      	subs	r3, #4
 8008bac:	429d      	cmp	r5, r3
 8008bae:	461a      	mov	r2, r3
 8008bb0:	d32f      	bcc.n	8008c12 <quorem+0xf4>
 8008bb2:	613c      	str	r4, [r7, #16]
 8008bb4:	4638      	mov	r0, r7
 8008bb6:	f001 f97d 	bl	8009eb4 <__mcmp>
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	db25      	blt.n	8008c0a <quorem+0xec>
 8008bbe:	4629      	mov	r1, r5
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	f858 2b04 	ldr.w	r2, [r8], #4
 8008bc6:	f8d1 c000 	ldr.w	ip, [r1]
 8008bca:	fa1f fe82 	uxth.w	lr, r2
 8008bce:	fa1f f38c 	uxth.w	r3, ip
 8008bd2:	eba3 030e 	sub.w	r3, r3, lr
 8008bd6:	4403      	add	r3, r0
 8008bd8:	0c12      	lsrs	r2, r2, #16
 8008bda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008bde:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008be8:	45c1      	cmp	r9, r8
 8008bea:	f841 3b04 	str.w	r3, [r1], #4
 8008bee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008bf2:	d2e6      	bcs.n	8008bc2 <quorem+0xa4>
 8008bf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bfc:	b922      	cbnz	r2, 8008c08 <quorem+0xea>
 8008bfe:	3b04      	subs	r3, #4
 8008c00:	429d      	cmp	r5, r3
 8008c02:	461a      	mov	r2, r3
 8008c04:	d30b      	bcc.n	8008c1e <quorem+0x100>
 8008c06:	613c      	str	r4, [r7, #16]
 8008c08:	3601      	adds	r6, #1
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	b003      	add	sp, #12
 8008c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c12:	6812      	ldr	r2, [r2, #0]
 8008c14:	3b04      	subs	r3, #4
 8008c16:	2a00      	cmp	r2, #0
 8008c18:	d1cb      	bne.n	8008bb2 <quorem+0x94>
 8008c1a:	3c01      	subs	r4, #1
 8008c1c:	e7c6      	b.n	8008bac <quorem+0x8e>
 8008c1e:	6812      	ldr	r2, [r2, #0]
 8008c20:	3b04      	subs	r3, #4
 8008c22:	2a00      	cmp	r2, #0
 8008c24:	d1ef      	bne.n	8008c06 <quorem+0xe8>
 8008c26:	3c01      	subs	r4, #1
 8008c28:	e7ea      	b.n	8008c00 <quorem+0xe2>
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	e7ee      	b.n	8008c0c <quorem+0xee>
	...

08008c30 <_dtoa_r>:
 8008c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c34:	69c7      	ldr	r7, [r0, #28]
 8008c36:	b097      	sub	sp, #92	@ 0x5c
 8008c38:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008c3c:	ec55 4b10 	vmov	r4, r5, d0
 8008c40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008c42:	9107      	str	r1, [sp, #28]
 8008c44:	4681      	mov	r9, r0
 8008c46:	920c      	str	r2, [sp, #48]	@ 0x30
 8008c48:	9311      	str	r3, [sp, #68]	@ 0x44
 8008c4a:	b97f      	cbnz	r7, 8008c6c <_dtoa_r+0x3c>
 8008c4c:	2010      	movs	r0, #16
 8008c4e:	f000 fe09 	bl	8009864 <malloc>
 8008c52:	4602      	mov	r2, r0
 8008c54:	f8c9 001c 	str.w	r0, [r9, #28]
 8008c58:	b920      	cbnz	r0, 8008c64 <_dtoa_r+0x34>
 8008c5a:	4ba9      	ldr	r3, [pc, #676]	@ (8008f00 <_dtoa_r+0x2d0>)
 8008c5c:	21ef      	movs	r1, #239	@ 0xef
 8008c5e:	48a9      	ldr	r0, [pc, #676]	@ (8008f04 <_dtoa_r+0x2d4>)
 8008c60:	f001 fb7e 	bl	800a360 <__assert_func>
 8008c64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008c68:	6007      	str	r7, [r0, #0]
 8008c6a:	60c7      	str	r7, [r0, #12]
 8008c6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008c70:	6819      	ldr	r1, [r3, #0]
 8008c72:	b159      	cbz	r1, 8008c8c <_dtoa_r+0x5c>
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	604a      	str	r2, [r1, #4]
 8008c78:	2301      	movs	r3, #1
 8008c7a:	4093      	lsls	r3, r2
 8008c7c:	608b      	str	r3, [r1, #8]
 8008c7e:	4648      	mov	r0, r9
 8008c80:	f000 fee6 	bl	8009a50 <_Bfree>
 8008c84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]
 8008c8c:	1e2b      	subs	r3, r5, #0
 8008c8e:	bfb9      	ittee	lt
 8008c90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008c94:	9305      	strlt	r3, [sp, #20]
 8008c96:	2300      	movge	r3, #0
 8008c98:	6033      	strge	r3, [r6, #0]
 8008c9a:	9f05      	ldr	r7, [sp, #20]
 8008c9c:	4b9a      	ldr	r3, [pc, #616]	@ (8008f08 <_dtoa_r+0x2d8>)
 8008c9e:	bfbc      	itt	lt
 8008ca0:	2201      	movlt	r2, #1
 8008ca2:	6032      	strlt	r2, [r6, #0]
 8008ca4:	43bb      	bics	r3, r7
 8008ca6:	d112      	bne.n	8008cce <_dtoa_r+0x9e>
 8008ca8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008caa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008cb4:	4323      	orrs	r3, r4
 8008cb6:	f000 855a 	beq.w	800976e <_dtoa_r+0xb3e>
 8008cba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008cbc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008f1c <_dtoa_r+0x2ec>
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f000 855c 	beq.w	800977e <_dtoa_r+0xb4e>
 8008cc6:	f10a 0303 	add.w	r3, sl, #3
 8008cca:	f000 bd56 	b.w	800977a <_dtoa_r+0xb4a>
 8008cce:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	ec51 0b17 	vmov	r0, r1, d7
 8008cd8:	2300      	movs	r3, #0
 8008cda:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008cde:	f7f7 ff73 	bl	8000bc8 <__aeabi_dcmpeq>
 8008ce2:	4680      	mov	r8, r0
 8008ce4:	b158      	cbz	r0, 8008cfe <_dtoa_r+0xce>
 8008ce6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008ce8:	2301      	movs	r3, #1
 8008cea:	6013      	str	r3, [r2, #0]
 8008cec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008cee:	b113      	cbz	r3, 8008cf6 <_dtoa_r+0xc6>
 8008cf0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008cf2:	4b86      	ldr	r3, [pc, #536]	@ (8008f0c <_dtoa_r+0x2dc>)
 8008cf4:	6013      	str	r3, [r2, #0]
 8008cf6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008f20 <_dtoa_r+0x2f0>
 8008cfa:	f000 bd40 	b.w	800977e <_dtoa_r+0xb4e>
 8008cfe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008d02:	aa14      	add	r2, sp, #80	@ 0x50
 8008d04:	a915      	add	r1, sp, #84	@ 0x54
 8008d06:	4648      	mov	r0, r9
 8008d08:	f001 f984 	bl	800a014 <__d2b>
 8008d0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008d10:	9002      	str	r0, [sp, #8]
 8008d12:	2e00      	cmp	r6, #0
 8008d14:	d078      	beq.n	8008e08 <_dtoa_r+0x1d8>
 8008d16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d18:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008d24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008d28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008d2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008d30:	4619      	mov	r1, r3
 8008d32:	2200      	movs	r2, #0
 8008d34:	4b76      	ldr	r3, [pc, #472]	@ (8008f10 <_dtoa_r+0x2e0>)
 8008d36:	f7f7 fb27 	bl	8000388 <__aeabi_dsub>
 8008d3a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008ee8 <_dtoa_r+0x2b8>)
 8008d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d40:	f7f7 fcda 	bl	80006f8 <__aeabi_dmul>
 8008d44:	a36a      	add	r3, pc, #424	@ (adr r3, 8008ef0 <_dtoa_r+0x2c0>)
 8008d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4a:	f7f7 fb1f 	bl	800038c <__adddf3>
 8008d4e:	4604      	mov	r4, r0
 8008d50:	4630      	mov	r0, r6
 8008d52:	460d      	mov	r5, r1
 8008d54:	f7f7 fc66 	bl	8000624 <__aeabi_i2d>
 8008d58:	a367      	add	r3, pc, #412	@ (adr r3, 8008ef8 <_dtoa_r+0x2c8>)
 8008d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5e:	f7f7 fccb 	bl	80006f8 <__aeabi_dmul>
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	4620      	mov	r0, r4
 8008d68:	4629      	mov	r1, r5
 8008d6a:	f7f7 fb0f 	bl	800038c <__adddf3>
 8008d6e:	4604      	mov	r4, r0
 8008d70:	460d      	mov	r5, r1
 8008d72:	f7f7 ff71 	bl	8000c58 <__aeabi_d2iz>
 8008d76:	2200      	movs	r2, #0
 8008d78:	4607      	mov	r7, r0
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	4629      	mov	r1, r5
 8008d80:	f7f7 ff2c 	bl	8000bdc <__aeabi_dcmplt>
 8008d84:	b140      	cbz	r0, 8008d98 <_dtoa_r+0x168>
 8008d86:	4638      	mov	r0, r7
 8008d88:	f7f7 fc4c 	bl	8000624 <__aeabi_i2d>
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	462b      	mov	r3, r5
 8008d90:	f7f7 ff1a 	bl	8000bc8 <__aeabi_dcmpeq>
 8008d94:	b900      	cbnz	r0, 8008d98 <_dtoa_r+0x168>
 8008d96:	3f01      	subs	r7, #1
 8008d98:	2f16      	cmp	r7, #22
 8008d9a:	d852      	bhi.n	8008e42 <_dtoa_r+0x212>
 8008d9c:	4b5d      	ldr	r3, [pc, #372]	@ (8008f14 <_dtoa_r+0x2e4>)
 8008d9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008daa:	f7f7 ff17 	bl	8000bdc <__aeabi_dcmplt>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d049      	beq.n	8008e46 <_dtoa_r+0x216>
 8008db2:	3f01      	subs	r7, #1
 8008db4:	2300      	movs	r3, #0
 8008db6:	9310      	str	r3, [sp, #64]	@ 0x40
 8008db8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008dba:	1b9b      	subs	r3, r3, r6
 8008dbc:	1e5a      	subs	r2, r3, #1
 8008dbe:	bf45      	ittet	mi
 8008dc0:	f1c3 0301 	rsbmi	r3, r3, #1
 8008dc4:	9300      	strmi	r3, [sp, #0]
 8008dc6:	2300      	movpl	r3, #0
 8008dc8:	2300      	movmi	r3, #0
 8008dca:	9206      	str	r2, [sp, #24]
 8008dcc:	bf54      	ite	pl
 8008dce:	9300      	strpl	r3, [sp, #0]
 8008dd0:	9306      	strmi	r3, [sp, #24]
 8008dd2:	2f00      	cmp	r7, #0
 8008dd4:	db39      	blt.n	8008e4a <_dtoa_r+0x21a>
 8008dd6:	9b06      	ldr	r3, [sp, #24]
 8008dd8:	970d      	str	r7, [sp, #52]	@ 0x34
 8008dda:	443b      	add	r3, r7
 8008ddc:	9306      	str	r3, [sp, #24]
 8008dde:	2300      	movs	r3, #0
 8008de0:	9308      	str	r3, [sp, #32]
 8008de2:	9b07      	ldr	r3, [sp, #28]
 8008de4:	2b09      	cmp	r3, #9
 8008de6:	d863      	bhi.n	8008eb0 <_dtoa_r+0x280>
 8008de8:	2b05      	cmp	r3, #5
 8008dea:	bfc4      	itt	gt
 8008dec:	3b04      	subgt	r3, #4
 8008dee:	9307      	strgt	r3, [sp, #28]
 8008df0:	9b07      	ldr	r3, [sp, #28]
 8008df2:	f1a3 0302 	sub.w	r3, r3, #2
 8008df6:	bfcc      	ite	gt
 8008df8:	2400      	movgt	r4, #0
 8008dfa:	2401      	movle	r4, #1
 8008dfc:	2b03      	cmp	r3, #3
 8008dfe:	d863      	bhi.n	8008ec8 <_dtoa_r+0x298>
 8008e00:	e8df f003 	tbb	[pc, r3]
 8008e04:	2b375452 	.word	0x2b375452
 8008e08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008e0c:	441e      	add	r6, r3
 8008e0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008e12:	2b20      	cmp	r3, #32
 8008e14:	bfc1      	itttt	gt
 8008e16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008e1a:	409f      	lslgt	r7, r3
 8008e1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008e20:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008e24:	bfd6      	itet	le
 8008e26:	f1c3 0320 	rsble	r3, r3, #32
 8008e2a:	ea47 0003 	orrgt.w	r0, r7, r3
 8008e2e:	fa04 f003 	lslle.w	r0, r4, r3
 8008e32:	f7f7 fbe7 	bl	8000604 <__aeabi_ui2d>
 8008e36:	2201      	movs	r2, #1
 8008e38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008e3c:	3e01      	subs	r6, #1
 8008e3e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008e40:	e776      	b.n	8008d30 <_dtoa_r+0x100>
 8008e42:	2301      	movs	r3, #1
 8008e44:	e7b7      	b.n	8008db6 <_dtoa_r+0x186>
 8008e46:	9010      	str	r0, [sp, #64]	@ 0x40
 8008e48:	e7b6      	b.n	8008db8 <_dtoa_r+0x188>
 8008e4a:	9b00      	ldr	r3, [sp, #0]
 8008e4c:	1bdb      	subs	r3, r3, r7
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	427b      	negs	r3, r7
 8008e52:	9308      	str	r3, [sp, #32]
 8008e54:	2300      	movs	r3, #0
 8008e56:	930d      	str	r3, [sp, #52]	@ 0x34
 8008e58:	e7c3      	b.n	8008de2 <_dtoa_r+0x1b2>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e60:	eb07 0b03 	add.w	fp, r7, r3
 8008e64:	f10b 0301 	add.w	r3, fp, #1
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	9303      	str	r3, [sp, #12]
 8008e6c:	bfb8      	it	lt
 8008e6e:	2301      	movlt	r3, #1
 8008e70:	e006      	b.n	8008e80 <_dtoa_r+0x250>
 8008e72:	2301      	movs	r3, #1
 8008e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	dd28      	ble.n	8008ece <_dtoa_r+0x29e>
 8008e7c:	469b      	mov	fp, r3
 8008e7e:	9303      	str	r3, [sp, #12]
 8008e80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008e84:	2100      	movs	r1, #0
 8008e86:	2204      	movs	r2, #4
 8008e88:	f102 0514 	add.w	r5, r2, #20
 8008e8c:	429d      	cmp	r5, r3
 8008e8e:	d926      	bls.n	8008ede <_dtoa_r+0x2ae>
 8008e90:	6041      	str	r1, [r0, #4]
 8008e92:	4648      	mov	r0, r9
 8008e94:	f000 fd9c 	bl	80099d0 <_Balloc>
 8008e98:	4682      	mov	sl, r0
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	d142      	bne.n	8008f24 <_dtoa_r+0x2f4>
 8008e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8008f18 <_dtoa_r+0x2e8>)
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	f240 11af 	movw	r1, #431	@ 0x1af
 8008ea6:	e6da      	b.n	8008c5e <_dtoa_r+0x2e>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	e7e3      	b.n	8008e74 <_dtoa_r+0x244>
 8008eac:	2300      	movs	r3, #0
 8008eae:	e7d5      	b.n	8008e5c <_dtoa_r+0x22c>
 8008eb0:	2401      	movs	r4, #1
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	9307      	str	r3, [sp, #28]
 8008eb6:	9409      	str	r4, [sp, #36]	@ 0x24
 8008eb8:	f04f 3bff 	mov.w	fp, #4294967295
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f8cd b00c 	str.w	fp, [sp, #12]
 8008ec2:	2312      	movs	r3, #18
 8008ec4:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ec6:	e7db      	b.n	8008e80 <_dtoa_r+0x250>
 8008ec8:	2301      	movs	r3, #1
 8008eca:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ecc:	e7f4      	b.n	8008eb8 <_dtoa_r+0x288>
 8008ece:	f04f 0b01 	mov.w	fp, #1
 8008ed2:	f8cd b00c 	str.w	fp, [sp, #12]
 8008ed6:	465b      	mov	r3, fp
 8008ed8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008edc:	e7d0      	b.n	8008e80 <_dtoa_r+0x250>
 8008ede:	3101      	adds	r1, #1
 8008ee0:	0052      	lsls	r2, r2, #1
 8008ee2:	e7d1      	b.n	8008e88 <_dtoa_r+0x258>
 8008ee4:	f3af 8000 	nop.w
 8008ee8:	636f4361 	.word	0x636f4361
 8008eec:	3fd287a7 	.word	0x3fd287a7
 8008ef0:	8b60c8b3 	.word	0x8b60c8b3
 8008ef4:	3fc68a28 	.word	0x3fc68a28
 8008ef8:	509f79fb 	.word	0x509f79fb
 8008efc:	3fd34413 	.word	0x3fd34413
 8008f00:	0800cc39 	.word	0x0800cc39
 8008f04:	0800cc50 	.word	0x0800cc50
 8008f08:	7ff00000 	.word	0x7ff00000
 8008f0c:	0800cc09 	.word	0x0800cc09
 8008f10:	3ff80000 	.word	0x3ff80000
 8008f14:	0800cdb8 	.word	0x0800cdb8
 8008f18:	0800cca8 	.word	0x0800cca8
 8008f1c:	0800cc35 	.word	0x0800cc35
 8008f20:	0800cc08 	.word	0x0800cc08
 8008f24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008f28:	6018      	str	r0, [r3, #0]
 8008f2a:	9b03      	ldr	r3, [sp, #12]
 8008f2c:	2b0e      	cmp	r3, #14
 8008f2e:	f200 80a1 	bhi.w	8009074 <_dtoa_r+0x444>
 8008f32:	2c00      	cmp	r4, #0
 8008f34:	f000 809e 	beq.w	8009074 <_dtoa_r+0x444>
 8008f38:	2f00      	cmp	r7, #0
 8008f3a:	dd33      	ble.n	8008fa4 <_dtoa_r+0x374>
 8008f3c:	4b9c      	ldr	r3, [pc, #624]	@ (80091b0 <_dtoa_r+0x580>)
 8008f3e:	f007 020f 	and.w	r2, r7, #15
 8008f42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f46:	ed93 7b00 	vldr	d7, [r3]
 8008f4a:	05f8      	lsls	r0, r7, #23
 8008f4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008f50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008f54:	d516      	bpl.n	8008f84 <_dtoa_r+0x354>
 8008f56:	4b97      	ldr	r3, [pc, #604]	@ (80091b4 <_dtoa_r+0x584>)
 8008f58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008f5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f60:	f7f7 fcf4 	bl	800094c <__aeabi_ddiv>
 8008f64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f68:	f004 040f 	and.w	r4, r4, #15
 8008f6c:	2603      	movs	r6, #3
 8008f6e:	4d91      	ldr	r5, [pc, #580]	@ (80091b4 <_dtoa_r+0x584>)
 8008f70:	b954      	cbnz	r4, 8008f88 <_dtoa_r+0x358>
 8008f72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008f76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f7a:	f7f7 fce7 	bl	800094c <__aeabi_ddiv>
 8008f7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f82:	e028      	b.n	8008fd6 <_dtoa_r+0x3a6>
 8008f84:	2602      	movs	r6, #2
 8008f86:	e7f2      	b.n	8008f6e <_dtoa_r+0x33e>
 8008f88:	07e1      	lsls	r1, r4, #31
 8008f8a:	d508      	bpl.n	8008f9e <_dtoa_r+0x36e>
 8008f8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008f90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f94:	f7f7 fbb0 	bl	80006f8 <__aeabi_dmul>
 8008f98:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008f9c:	3601      	adds	r6, #1
 8008f9e:	1064      	asrs	r4, r4, #1
 8008fa0:	3508      	adds	r5, #8
 8008fa2:	e7e5      	b.n	8008f70 <_dtoa_r+0x340>
 8008fa4:	f000 80af 	beq.w	8009106 <_dtoa_r+0x4d6>
 8008fa8:	427c      	negs	r4, r7
 8008faa:	4b81      	ldr	r3, [pc, #516]	@ (80091b0 <_dtoa_r+0x580>)
 8008fac:	4d81      	ldr	r5, [pc, #516]	@ (80091b4 <_dtoa_r+0x584>)
 8008fae:	f004 020f 	and.w	r2, r4, #15
 8008fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008fbe:	f7f7 fb9b 	bl	80006f8 <__aeabi_dmul>
 8008fc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fc6:	1124      	asrs	r4, r4, #4
 8008fc8:	2300      	movs	r3, #0
 8008fca:	2602      	movs	r6, #2
 8008fcc:	2c00      	cmp	r4, #0
 8008fce:	f040 808f 	bne.w	80090f0 <_dtoa_r+0x4c0>
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1d3      	bne.n	8008f7e <_dtoa_r+0x34e>
 8008fd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008fd8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 8094 	beq.w	800910a <_dtoa_r+0x4da>
 8008fe2:	4b75      	ldr	r3, [pc, #468]	@ (80091b8 <_dtoa_r+0x588>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	4629      	mov	r1, r5
 8008fea:	f7f7 fdf7 	bl	8000bdc <__aeabi_dcmplt>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	f000 808b 	beq.w	800910a <_dtoa_r+0x4da>
 8008ff4:	9b03      	ldr	r3, [sp, #12]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f000 8087 	beq.w	800910a <_dtoa_r+0x4da>
 8008ffc:	f1bb 0f00 	cmp.w	fp, #0
 8009000:	dd34      	ble.n	800906c <_dtoa_r+0x43c>
 8009002:	4620      	mov	r0, r4
 8009004:	4b6d      	ldr	r3, [pc, #436]	@ (80091bc <_dtoa_r+0x58c>)
 8009006:	2200      	movs	r2, #0
 8009008:	4629      	mov	r1, r5
 800900a:	f7f7 fb75 	bl	80006f8 <__aeabi_dmul>
 800900e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009012:	f107 38ff 	add.w	r8, r7, #4294967295
 8009016:	3601      	adds	r6, #1
 8009018:	465c      	mov	r4, fp
 800901a:	4630      	mov	r0, r6
 800901c:	f7f7 fb02 	bl	8000624 <__aeabi_i2d>
 8009020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009024:	f7f7 fb68 	bl	80006f8 <__aeabi_dmul>
 8009028:	4b65      	ldr	r3, [pc, #404]	@ (80091c0 <_dtoa_r+0x590>)
 800902a:	2200      	movs	r2, #0
 800902c:	f7f7 f9ae 	bl	800038c <__adddf3>
 8009030:	4605      	mov	r5, r0
 8009032:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009036:	2c00      	cmp	r4, #0
 8009038:	d16a      	bne.n	8009110 <_dtoa_r+0x4e0>
 800903a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800903e:	4b61      	ldr	r3, [pc, #388]	@ (80091c4 <_dtoa_r+0x594>)
 8009040:	2200      	movs	r2, #0
 8009042:	f7f7 f9a1 	bl	8000388 <__aeabi_dsub>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800904e:	462a      	mov	r2, r5
 8009050:	4633      	mov	r3, r6
 8009052:	f7f7 fde1 	bl	8000c18 <__aeabi_dcmpgt>
 8009056:	2800      	cmp	r0, #0
 8009058:	f040 8298 	bne.w	800958c <_dtoa_r+0x95c>
 800905c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009060:	462a      	mov	r2, r5
 8009062:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009066:	f7f7 fdb9 	bl	8000bdc <__aeabi_dcmplt>
 800906a:	bb38      	cbnz	r0, 80090bc <_dtoa_r+0x48c>
 800906c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009070:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009074:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009076:	2b00      	cmp	r3, #0
 8009078:	f2c0 8157 	blt.w	800932a <_dtoa_r+0x6fa>
 800907c:	2f0e      	cmp	r7, #14
 800907e:	f300 8154 	bgt.w	800932a <_dtoa_r+0x6fa>
 8009082:	4b4b      	ldr	r3, [pc, #300]	@ (80091b0 <_dtoa_r+0x580>)
 8009084:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009088:	ed93 7b00 	vldr	d7, [r3]
 800908c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800908e:	2b00      	cmp	r3, #0
 8009090:	ed8d 7b00 	vstr	d7, [sp]
 8009094:	f280 80e5 	bge.w	8009262 <_dtoa_r+0x632>
 8009098:	9b03      	ldr	r3, [sp, #12]
 800909a:	2b00      	cmp	r3, #0
 800909c:	f300 80e1 	bgt.w	8009262 <_dtoa_r+0x632>
 80090a0:	d10c      	bne.n	80090bc <_dtoa_r+0x48c>
 80090a2:	4b48      	ldr	r3, [pc, #288]	@ (80091c4 <_dtoa_r+0x594>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	ec51 0b17 	vmov	r0, r1, d7
 80090aa:	f7f7 fb25 	bl	80006f8 <__aeabi_dmul>
 80090ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090b2:	f7f7 fda7 	bl	8000c04 <__aeabi_dcmpge>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	f000 8266 	beq.w	8009588 <_dtoa_r+0x958>
 80090bc:	2400      	movs	r4, #0
 80090be:	4625      	mov	r5, r4
 80090c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80090c2:	4656      	mov	r6, sl
 80090c4:	ea6f 0803 	mvn.w	r8, r3
 80090c8:	2700      	movs	r7, #0
 80090ca:	4621      	mov	r1, r4
 80090cc:	4648      	mov	r0, r9
 80090ce:	f000 fcbf 	bl	8009a50 <_Bfree>
 80090d2:	2d00      	cmp	r5, #0
 80090d4:	f000 80bd 	beq.w	8009252 <_dtoa_r+0x622>
 80090d8:	b12f      	cbz	r7, 80090e6 <_dtoa_r+0x4b6>
 80090da:	42af      	cmp	r7, r5
 80090dc:	d003      	beq.n	80090e6 <_dtoa_r+0x4b6>
 80090de:	4639      	mov	r1, r7
 80090e0:	4648      	mov	r0, r9
 80090e2:	f000 fcb5 	bl	8009a50 <_Bfree>
 80090e6:	4629      	mov	r1, r5
 80090e8:	4648      	mov	r0, r9
 80090ea:	f000 fcb1 	bl	8009a50 <_Bfree>
 80090ee:	e0b0      	b.n	8009252 <_dtoa_r+0x622>
 80090f0:	07e2      	lsls	r2, r4, #31
 80090f2:	d505      	bpl.n	8009100 <_dtoa_r+0x4d0>
 80090f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090f8:	f7f7 fafe 	bl	80006f8 <__aeabi_dmul>
 80090fc:	3601      	adds	r6, #1
 80090fe:	2301      	movs	r3, #1
 8009100:	1064      	asrs	r4, r4, #1
 8009102:	3508      	adds	r5, #8
 8009104:	e762      	b.n	8008fcc <_dtoa_r+0x39c>
 8009106:	2602      	movs	r6, #2
 8009108:	e765      	b.n	8008fd6 <_dtoa_r+0x3a6>
 800910a:	9c03      	ldr	r4, [sp, #12]
 800910c:	46b8      	mov	r8, r7
 800910e:	e784      	b.n	800901a <_dtoa_r+0x3ea>
 8009110:	4b27      	ldr	r3, [pc, #156]	@ (80091b0 <_dtoa_r+0x580>)
 8009112:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009114:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009118:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800911c:	4454      	add	r4, sl
 800911e:	2900      	cmp	r1, #0
 8009120:	d054      	beq.n	80091cc <_dtoa_r+0x59c>
 8009122:	4929      	ldr	r1, [pc, #164]	@ (80091c8 <_dtoa_r+0x598>)
 8009124:	2000      	movs	r0, #0
 8009126:	f7f7 fc11 	bl	800094c <__aeabi_ddiv>
 800912a:	4633      	mov	r3, r6
 800912c:	462a      	mov	r2, r5
 800912e:	f7f7 f92b 	bl	8000388 <__aeabi_dsub>
 8009132:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009136:	4656      	mov	r6, sl
 8009138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800913c:	f7f7 fd8c 	bl	8000c58 <__aeabi_d2iz>
 8009140:	4605      	mov	r5, r0
 8009142:	f7f7 fa6f 	bl	8000624 <__aeabi_i2d>
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800914e:	f7f7 f91b 	bl	8000388 <__aeabi_dsub>
 8009152:	3530      	adds	r5, #48	@ 0x30
 8009154:	4602      	mov	r2, r0
 8009156:	460b      	mov	r3, r1
 8009158:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800915c:	f806 5b01 	strb.w	r5, [r6], #1
 8009160:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009164:	f7f7 fd3a 	bl	8000bdc <__aeabi_dcmplt>
 8009168:	2800      	cmp	r0, #0
 800916a:	d172      	bne.n	8009252 <_dtoa_r+0x622>
 800916c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009170:	4911      	ldr	r1, [pc, #68]	@ (80091b8 <_dtoa_r+0x588>)
 8009172:	2000      	movs	r0, #0
 8009174:	f7f7 f908 	bl	8000388 <__aeabi_dsub>
 8009178:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800917c:	f7f7 fd2e 	bl	8000bdc <__aeabi_dcmplt>
 8009180:	2800      	cmp	r0, #0
 8009182:	f040 80b4 	bne.w	80092ee <_dtoa_r+0x6be>
 8009186:	42a6      	cmp	r6, r4
 8009188:	f43f af70 	beq.w	800906c <_dtoa_r+0x43c>
 800918c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009190:	4b0a      	ldr	r3, [pc, #40]	@ (80091bc <_dtoa_r+0x58c>)
 8009192:	2200      	movs	r2, #0
 8009194:	f7f7 fab0 	bl	80006f8 <__aeabi_dmul>
 8009198:	4b08      	ldr	r3, [pc, #32]	@ (80091bc <_dtoa_r+0x58c>)
 800919a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800919e:	2200      	movs	r2, #0
 80091a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091a4:	f7f7 faa8 	bl	80006f8 <__aeabi_dmul>
 80091a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091ac:	e7c4      	b.n	8009138 <_dtoa_r+0x508>
 80091ae:	bf00      	nop
 80091b0:	0800cdb8 	.word	0x0800cdb8
 80091b4:	0800cd90 	.word	0x0800cd90
 80091b8:	3ff00000 	.word	0x3ff00000
 80091bc:	40240000 	.word	0x40240000
 80091c0:	401c0000 	.word	0x401c0000
 80091c4:	40140000 	.word	0x40140000
 80091c8:	3fe00000 	.word	0x3fe00000
 80091cc:	4631      	mov	r1, r6
 80091ce:	4628      	mov	r0, r5
 80091d0:	f7f7 fa92 	bl	80006f8 <__aeabi_dmul>
 80091d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80091d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80091da:	4656      	mov	r6, sl
 80091dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091e0:	f7f7 fd3a 	bl	8000c58 <__aeabi_d2iz>
 80091e4:	4605      	mov	r5, r0
 80091e6:	f7f7 fa1d 	bl	8000624 <__aeabi_i2d>
 80091ea:	4602      	mov	r2, r0
 80091ec:	460b      	mov	r3, r1
 80091ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091f2:	f7f7 f8c9 	bl	8000388 <__aeabi_dsub>
 80091f6:	3530      	adds	r5, #48	@ 0x30
 80091f8:	f806 5b01 	strb.w	r5, [r6], #1
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	42a6      	cmp	r6, r4
 8009202:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009206:	f04f 0200 	mov.w	r2, #0
 800920a:	d124      	bne.n	8009256 <_dtoa_r+0x626>
 800920c:	4baf      	ldr	r3, [pc, #700]	@ (80094cc <_dtoa_r+0x89c>)
 800920e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009212:	f7f7 f8bb 	bl	800038c <__adddf3>
 8009216:	4602      	mov	r2, r0
 8009218:	460b      	mov	r3, r1
 800921a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800921e:	f7f7 fcfb 	bl	8000c18 <__aeabi_dcmpgt>
 8009222:	2800      	cmp	r0, #0
 8009224:	d163      	bne.n	80092ee <_dtoa_r+0x6be>
 8009226:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800922a:	49a8      	ldr	r1, [pc, #672]	@ (80094cc <_dtoa_r+0x89c>)
 800922c:	2000      	movs	r0, #0
 800922e:	f7f7 f8ab 	bl	8000388 <__aeabi_dsub>
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800923a:	f7f7 fccf 	bl	8000bdc <__aeabi_dcmplt>
 800923e:	2800      	cmp	r0, #0
 8009240:	f43f af14 	beq.w	800906c <_dtoa_r+0x43c>
 8009244:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009246:	1e73      	subs	r3, r6, #1
 8009248:	9313      	str	r3, [sp, #76]	@ 0x4c
 800924a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800924e:	2b30      	cmp	r3, #48	@ 0x30
 8009250:	d0f8      	beq.n	8009244 <_dtoa_r+0x614>
 8009252:	4647      	mov	r7, r8
 8009254:	e03b      	b.n	80092ce <_dtoa_r+0x69e>
 8009256:	4b9e      	ldr	r3, [pc, #632]	@ (80094d0 <_dtoa_r+0x8a0>)
 8009258:	f7f7 fa4e 	bl	80006f8 <__aeabi_dmul>
 800925c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009260:	e7bc      	b.n	80091dc <_dtoa_r+0x5ac>
 8009262:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009266:	4656      	mov	r6, sl
 8009268:	e9dd 2300 	ldrd	r2, r3, [sp]
 800926c:	4620      	mov	r0, r4
 800926e:	4629      	mov	r1, r5
 8009270:	f7f7 fb6c 	bl	800094c <__aeabi_ddiv>
 8009274:	f7f7 fcf0 	bl	8000c58 <__aeabi_d2iz>
 8009278:	4680      	mov	r8, r0
 800927a:	f7f7 f9d3 	bl	8000624 <__aeabi_i2d>
 800927e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009282:	f7f7 fa39 	bl	80006f8 <__aeabi_dmul>
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	4620      	mov	r0, r4
 800928c:	4629      	mov	r1, r5
 800928e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009292:	f7f7 f879 	bl	8000388 <__aeabi_dsub>
 8009296:	f806 4b01 	strb.w	r4, [r6], #1
 800929a:	9d03      	ldr	r5, [sp, #12]
 800929c:	eba6 040a 	sub.w	r4, r6, sl
 80092a0:	42a5      	cmp	r5, r4
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	d133      	bne.n	8009310 <_dtoa_r+0x6e0>
 80092a8:	f7f7 f870 	bl	800038c <__adddf3>
 80092ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092b0:	4604      	mov	r4, r0
 80092b2:	460d      	mov	r5, r1
 80092b4:	f7f7 fcb0 	bl	8000c18 <__aeabi_dcmpgt>
 80092b8:	b9c0      	cbnz	r0, 80092ec <_dtoa_r+0x6bc>
 80092ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092be:	4620      	mov	r0, r4
 80092c0:	4629      	mov	r1, r5
 80092c2:	f7f7 fc81 	bl	8000bc8 <__aeabi_dcmpeq>
 80092c6:	b110      	cbz	r0, 80092ce <_dtoa_r+0x69e>
 80092c8:	f018 0f01 	tst.w	r8, #1
 80092cc:	d10e      	bne.n	80092ec <_dtoa_r+0x6bc>
 80092ce:	9902      	ldr	r1, [sp, #8]
 80092d0:	4648      	mov	r0, r9
 80092d2:	f000 fbbd 	bl	8009a50 <_Bfree>
 80092d6:	2300      	movs	r3, #0
 80092d8:	7033      	strb	r3, [r6, #0]
 80092da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80092dc:	3701      	adds	r7, #1
 80092de:	601f      	str	r7, [r3, #0]
 80092e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 824b 	beq.w	800977e <_dtoa_r+0xb4e>
 80092e8:	601e      	str	r6, [r3, #0]
 80092ea:	e248      	b.n	800977e <_dtoa_r+0xb4e>
 80092ec:	46b8      	mov	r8, r7
 80092ee:	4633      	mov	r3, r6
 80092f0:	461e      	mov	r6, r3
 80092f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092f6:	2a39      	cmp	r2, #57	@ 0x39
 80092f8:	d106      	bne.n	8009308 <_dtoa_r+0x6d8>
 80092fa:	459a      	cmp	sl, r3
 80092fc:	d1f8      	bne.n	80092f0 <_dtoa_r+0x6c0>
 80092fe:	2230      	movs	r2, #48	@ 0x30
 8009300:	f108 0801 	add.w	r8, r8, #1
 8009304:	f88a 2000 	strb.w	r2, [sl]
 8009308:	781a      	ldrb	r2, [r3, #0]
 800930a:	3201      	adds	r2, #1
 800930c:	701a      	strb	r2, [r3, #0]
 800930e:	e7a0      	b.n	8009252 <_dtoa_r+0x622>
 8009310:	4b6f      	ldr	r3, [pc, #444]	@ (80094d0 <_dtoa_r+0x8a0>)
 8009312:	2200      	movs	r2, #0
 8009314:	f7f7 f9f0 	bl	80006f8 <__aeabi_dmul>
 8009318:	2200      	movs	r2, #0
 800931a:	2300      	movs	r3, #0
 800931c:	4604      	mov	r4, r0
 800931e:	460d      	mov	r5, r1
 8009320:	f7f7 fc52 	bl	8000bc8 <__aeabi_dcmpeq>
 8009324:	2800      	cmp	r0, #0
 8009326:	d09f      	beq.n	8009268 <_dtoa_r+0x638>
 8009328:	e7d1      	b.n	80092ce <_dtoa_r+0x69e>
 800932a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800932c:	2a00      	cmp	r2, #0
 800932e:	f000 80ea 	beq.w	8009506 <_dtoa_r+0x8d6>
 8009332:	9a07      	ldr	r2, [sp, #28]
 8009334:	2a01      	cmp	r2, #1
 8009336:	f300 80cd 	bgt.w	80094d4 <_dtoa_r+0x8a4>
 800933a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800933c:	2a00      	cmp	r2, #0
 800933e:	f000 80c1 	beq.w	80094c4 <_dtoa_r+0x894>
 8009342:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009346:	9c08      	ldr	r4, [sp, #32]
 8009348:	9e00      	ldr	r6, [sp, #0]
 800934a:	9a00      	ldr	r2, [sp, #0]
 800934c:	441a      	add	r2, r3
 800934e:	9200      	str	r2, [sp, #0]
 8009350:	9a06      	ldr	r2, [sp, #24]
 8009352:	2101      	movs	r1, #1
 8009354:	441a      	add	r2, r3
 8009356:	4648      	mov	r0, r9
 8009358:	9206      	str	r2, [sp, #24]
 800935a:	f000 fc2d 	bl	8009bb8 <__i2b>
 800935e:	4605      	mov	r5, r0
 8009360:	b166      	cbz	r6, 800937c <_dtoa_r+0x74c>
 8009362:	9b06      	ldr	r3, [sp, #24]
 8009364:	2b00      	cmp	r3, #0
 8009366:	dd09      	ble.n	800937c <_dtoa_r+0x74c>
 8009368:	42b3      	cmp	r3, r6
 800936a:	9a00      	ldr	r2, [sp, #0]
 800936c:	bfa8      	it	ge
 800936e:	4633      	movge	r3, r6
 8009370:	1ad2      	subs	r2, r2, r3
 8009372:	9200      	str	r2, [sp, #0]
 8009374:	9a06      	ldr	r2, [sp, #24]
 8009376:	1af6      	subs	r6, r6, r3
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	9306      	str	r3, [sp, #24]
 800937c:	9b08      	ldr	r3, [sp, #32]
 800937e:	b30b      	cbz	r3, 80093c4 <_dtoa_r+0x794>
 8009380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009382:	2b00      	cmp	r3, #0
 8009384:	f000 80c6 	beq.w	8009514 <_dtoa_r+0x8e4>
 8009388:	2c00      	cmp	r4, #0
 800938a:	f000 80c0 	beq.w	800950e <_dtoa_r+0x8de>
 800938e:	4629      	mov	r1, r5
 8009390:	4622      	mov	r2, r4
 8009392:	4648      	mov	r0, r9
 8009394:	f000 fcc8 	bl	8009d28 <__pow5mult>
 8009398:	9a02      	ldr	r2, [sp, #8]
 800939a:	4601      	mov	r1, r0
 800939c:	4605      	mov	r5, r0
 800939e:	4648      	mov	r0, r9
 80093a0:	f000 fc20 	bl	8009be4 <__multiply>
 80093a4:	9902      	ldr	r1, [sp, #8]
 80093a6:	4680      	mov	r8, r0
 80093a8:	4648      	mov	r0, r9
 80093aa:	f000 fb51 	bl	8009a50 <_Bfree>
 80093ae:	9b08      	ldr	r3, [sp, #32]
 80093b0:	1b1b      	subs	r3, r3, r4
 80093b2:	9308      	str	r3, [sp, #32]
 80093b4:	f000 80b1 	beq.w	800951a <_dtoa_r+0x8ea>
 80093b8:	9a08      	ldr	r2, [sp, #32]
 80093ba:	4641      	mov	r1, r8
 80093bc:	4648      	mov	r0, r9
 80093be:	f000 fcb3 	bl	8009d28 <__pow5mult>
 80093c2:	9002      	str	r0, [sp, #8]
 80093c4:	2101      	movs	r1, #1
 80093c6:	4648      	mov	r0, r9
 80093c8:	f000 fbf6 	bl	8009bb8 <__i2b>
 80093cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80093ce:	4604      	mov	r4, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 81d8 	beq.w	8009786 <_dtoa_r+0xb56>
 80093d6:	461a      	mov	r2, r3
 80093d8:	4601      	mov	r1, r0
 80093da:	4648      	mov	r0, r9
 80093dc:	f000 fca4 	bl	8009d28 <__pow5mult>
 80093e0:	9b07      	ldr	r3, [sp, #28]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	4604      	mov	r4, r0
 80093e6:	f300 809f 	bgt.w	8009528 <_dtoa_r+0x8f8>
 80093ea:	9b04      	ldr	r3, [sp, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f040 8097 	bne.w	8009520 <_dtoa_r+0x8f0>
 80093f2:	9b05      	ldr	r3, [sp, #20]
 80093f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f040 8093 	bne.w	8009524 <_dtoa_r+0x8f4>
 80093fe:	9b05      	ldr	r3, [sp, #20]
 8009400:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009404:	0d1b      	lsrs	r3, r3, #20
 8009406:	051b      	lsls	r3, r3, #20
 8009408:	b133      	cbz	r3, 8009418 <_dtoa_r+0x7e8>
 800940a:	9b00      	ldr	r3, [sp, #0]
 800940c:	3301      	adds	r3, #1
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	9b06      	ldr	r3, [sp, #24]
 8009412:	3301      	adds	r3, #1
 8009414:	9306      	str	r3, [sp, #24]
 8009416:	2301      	movs	r3, #1
 8009418:	9308      	str	r3, [sp, #32]
 800941a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 81b8 	beq.w	8009792 <_dtoa_r+0xb62>
 8009422:	6923      	ldr	r3, [r4, #16]
 8009424:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009428:	6918      	ldr	r0, [r3, #16]
 800942a:	f000 fb79 	bl	8009b20 <__hi0bits>
 800942e:	f1c0 0020 	rsb	r0, r0, #32
 8009432:	9b06      	ldr	r3, [sp, #24]
 8009434:	4418      	add	r0, r3
 8009436:	f010 001f 	ands.w	r0, r0, #31
 800943a:	f000 8082 	beq.w	8009542 <_dtoa_r+0x912>
 800943e:	f1c0 0320 	rsb	r3, r0, #32
 8009442:	2b04      	cmp	r3, #4
 8009444:	dd73      	ble.n	800952e <_dtoa_r+0x8fe>
 8009446:	9b00      	ldr	r3, [sp, #0]
 8009448:	f1c0 001c 	rsb	r0, r0, #28
 800944c:	4403      	add	r3, r0
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	9b06      	ldr	r3, [sp, #24]
 8009452:	4403      	add	r3, r0
 8009454:	4406      	add	r6, r0
 8009456:	9306      	str	r3, [sp, #24]
 8009458:	9b00      	ldr	r3, [sp, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	dd05      	ble.n	800946a <_dtoa_r+0x83a>
 800945e:	9902      	ldr	r1, [sp, #8]
 8009460:	461a      	mov	r2, r3
 8009462:	4648      	mov	r0, r9
 8009464:	f000 fcba 	bl	8009ddc <__lshift>
 8009468:	9002      	str	r0, [sp, #8]
 800946a:	9b06      	ldr	r3, [sp, #24]
 800946c:	2b00      	cmp	r3, #0
 800946e:	dd05      	ble.n	800947c <_dtoa_r+0x84c>
 8009470:	4621      	mov	r1, r4
 8009472:	461a      	mov	r2, r3
 8009474:	4648      	mov	r0, r9
 8009476:	f000 fcb1 	bl	8009ddc <__lshift>
 800947a:	4604      	mov	r4, r0
 800947c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800947e:	2b00      	cmp	r3, #0
 8009480:	d061      	beq.n	8009546 <_dtoa_r+0x916>
 8009482:	9802      	ldr	r0, [sp, #8]
 8009484:	4621      	mov	r1, r4
 8009486:	f000 fd15 	bl	8009eb4 <__mcmp>
 800948a:	2800      	cmp	r0, #0
 800948c:	da5b      	bge.n	8009546 <_dtoa_r+0x916>
 800948e:	2300      	movs	r3, #0
 8009490:	9902      	ldr	r1, [sp, #8]
 8009492:	220a      	movs	r2, #10
 8009494:	4648      	mov	r0, r9
 8009496:	f000 fafd 	bl	8009a94 <__multadd>
 800949a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800949c:	9002      	str	r0, [sp, #8]
 800949e:	f107 38ff 	add.w	r8, r7, #4294967295
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f000 8177 	beq.w	8009796 <_dtoa_r+0xb66>
 80094a8:	4629      	mov	r1, r5
 80094aa:	2300      	movs	r3, #0
 80094ac:	220a      	movs	r2, #10
 80094ae:	4648      	mov	r0, r9
 80094b0:	f000 faf0 	bl	8009a94 <__multadd>
 80094b4:	f1bb 0f00 	cmp.w	fp, #0
 80094b8:	4605      	mov	r5, r0
 80094ba:	dc6f      	bgt.n	800959c <_dtoa_r+0x96c>
 80094bc:	9b07      	ldr	r3, [sp, #28]
 80094be:	2b02      	cmp	r3, #2
 80094c0:	dc49      	bgt.n	8009556 <_dtoa_r+0x926>
 80094c2:	e06b      	b.n	800959c <_dtoa_r+0x96c>
 80094c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80094c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80094ca:	e73c      	b.n	8009346 <_dtoa_r+0x716>
 80094cc:	3fe00000 	.word	0x3fe00000
 80094d0:	40240000 	.word	0x40240000
 80094d4:	9b03      	ldr	r3, [sp, #12]
 80094d6:	1e5c      	subs	r4, r3, #1
 80094d8:	9b08      	ldr	r3, [sp, #32]
 80094da:	42a3      	cmp	r3, r4
 80094dc:	db09      	blt.n	80094f2 <_dtoa_r+0x8c2>
 80094de:	1b1c      	subs	r4, r3, r4
 80094e0:	9b03      	ldr	r3, [sp, #12]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f6bf af30 	bge.w	8009348 <_dtoa_r+0x718>
 80094e8:	9b00      	ldr	r3, [sp, #0]
 80094ea:	9a03      	ldr	r2, [sp, #12]
 80094ec:	1a9e      	subs	r6, r3, r2
 80094ee:	2300      	movs	r3, #0
 80094f0:	e72b      	b.n	800934a <_dtoa_r+0x71a>
 80094f2:	9b08      	ldr	r3, [sp, #32]
 80094f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80094f6:	9408      	str	r4, [sp, #32]
 80094f8:	1ae3      	subs	r3, r4, r3
 80094fa:	441a      	add	r2, r3
 80094fc:	9e00      	ldr	r6, [sp, #0]
 80094fe:	9b03      	ldr	r3, [sp, #12]
 8009500:	920d      	str	r2, [sp, #52]	@ 0x34
 8009502:	2400      	movs	r4, #0
 8009504:	e721      	b.n	800934a <_dtoa_r+0x71a>
 8009506:	9c08      	ldr	r4, [sp, #32]
 8009508:	9e00      	ldr	r6, [sp, #0]
 800950a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800950c:	e728      	b.n	8009360 <_dtoa_r+0x730>
 800950e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009512:	e751      	b.n	80093b8 <_dtoa_r+0x788>
 8009514:	9a08      	ldr	r2, [sp, #32]
 8009516:	9902      	ldr	r1, [sp, #8]
 8009518:	e750      	b.n	80093bc <_dtoa_r+0x78c>
 800951a:	f8cd 8008 	str.w	r8, [sp, #8]
 800951e:	e751      	b.n	80093c4 <_dtoa_r+0x794>
 8009520:	2300      	movs	r3, #0
 8009522:	e779      	b.n	8009418 <_dtoa_r+0x7e8>
 8009524:	9b04      	ldr	r3, [sp, #16]
 8009526:	e777      	b.n	8009418 <_dtoa_r+0x7e8>
 8009528:	2300      	movs	r3, #0
 800952a:	9308      	str	r3, [sp, #32]
 800952c:	e779      	b.n	8009422 <_dtoa_r+0x7f2>
 800952e:	d093      	beq.n	8009458 <_dtoa_r+0x828>
 8009530:	9a00      	ldr	r2, [sp, #0]
 8009532:	331c      	adds	r3, #28
 8009534:	441a      	add	r2, r3
 8009536:	9200      	str	r2, [sp, #0]
 8009538:	9a06      	ldr	r2, [sp, #24]
 800953a:	441a      	add	r2, r3
 800953c:	441e      	add	r6, r3
 800953e:	9206      	str	r2, [sp, #24]
 8009540:	e78a      	b.n	8009458 <_dtoa_r+0x828>
 8009542:	4603      	mov	r3, r0
 8009544:	e7f4      	b.n	8009530 <_dtoa_r+0x900>
 8009546:	9b03      	ldr	r3, [sp, #12]
 8009548:	2b00      	cmp	r3, #0
 800954a:	46b8      	mov	r8, r7
 800954c:	dc20      	bgt.n	8009590 <_dtoa_r+0x960>
 800954e:	469b      	mov	fp, r3
 8009550:	9b07      	ldr	r3, [sp, #28]
 8009552:	2b02      	cmp	r3, #2
 8009554:	dd1e      	ble.n	8009594 <_dtoa_r+0x964>
 8009556:	f1bb 0f00 	cmp.w	fp, #0
 800955a:	f47f adb1 	bne.w	80090c0 <_dtoa_r+0x490>
 800955e:	4621      	mov	r1, r4
 8009560:	465b      	mov	r3, fp
 8009562:	2205      	movs	r2, #5
 8009564:	4648      	mov	r0, r9
 8009566:	f000 fa95 	bl	8009a94 <__multadd>
 800956a:	4601      	mov	r1, r0
 800956c:	4604      	mov	r4, r0
 800956e:	9802      	ldr	r0, [sp, #8]
 8009570:	f000 fca0 	bl	8009eb4 <__mcmp>
 8009574:	2800      	cmp	r0, #0
 8009576:	f77f ada3 	ble.w	80090c0 <_dtoa_r+0x490>
 800957a:	4656      	mov	r6, sl
 800957c:	2331      	movs	r3, #49	@ 0x31
 800957e:	f806 3b01 	strb.w	r3, [r6], #1
 8009582:	f108 0801 	add.w	r8, r8, #1
 8009586:	e59f      	b.n	80090c8 <_dtoa_r+0x498>
 8009588:	9c03      	ldr	r4, [sp, #12]
 800958a:	46b8      	mov	r8, r7
 800958c:	4625      	mov	r5, r4
 800958e:	e7f4      	b.n	800957a <_dtoa_r+0x94a>
 8009590:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009596:	2b00      	cmp	r3, #0
 8009598:	f000 8101 	beq.w	800979e <_dtoa_r+0xb6e>
 800959c:	2e00      	cmp	r6, #0
 800959e:	dd05      	ble.n	80095ac <_dtoa_r+0x97c>
 80095a0:	4629      	mov	r1, r5
 80095a2:	4632      	mov	r2, r6
 80095a4:	4648      	mov	r0, r9
 80095a6:	f000 fc19 	bl	8009ddc <__lshift>
 80095aa:	4605      	mov	r5, r0
 80095ac:	9b08      	ldr	r3, [sp, #32]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d05c      	beq.n	800966c <_dtoa_r+0xa3c>
 80095b2:	6869      	ldr	r1, [r5, #4]
 80095b4:	4648      	mov	r0, r9
 80095b6:	f000 fa0b 	bl	80099d0 <_Balloc>
 80095ba:	4606      	mov	r6, r0
 80095bc:	b928      	cbnz	r0, 80095ca <_dtoa_r+0x99a>
 80095be:	4b82      	ldr	r3, [pc, #520]	@ (80097c8 <_dtoa_r+0xb98>)
 80095c0:	4602      	mov	r2, r0
 80095c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80095c6:	f7ff bb4a 	b.w	8008c5e <_dtoa_r+0x2e>
 80095ca:	692a      	ldr	r2, [r5, #16]
 80095cc:	3202      	adds	r2, #2
 80095ce:	0092      	lsls	r2, r2, #2
 80095d0:	f105 010c 	add.w	r1, r5, #12
 80095d4:	300c      	adds	r0, #12
 80095d6:	f000 feb5 	bl	800a344 <memcpy>
 80095da:	2201      	movs	r2, #1
 80095dc:	4631      	mov	r1, r6
 80095de:	4648      	mov	r0, r9
 80095e0:	f000 fbfc 	bl	8009ddc <__lshift>
 80095e4:	f10a 0301 	add.w	r3, sl, #1
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	eb0a 030b 	add.w	r3, sl, fp
 80095ee:	9308      	str	r3, [sp, #32]
 80095f0:	9b04      	ldr	r3, [sp, #16]
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	462f      	mov	r7, r5
 80095f8:	9306      	str	r3, [sp, #24]
 80095fa:	4605      	mov	r5, r0
 80095fc:	9b00      	ldr	r3, [sp, #0]
 80095fe:	9802      	ldr	r0, [sp, #8]
 8009600:	4621      	mov	r1, r4
 8009602:	f103 3bff 	add.w	fp, r3, #4294967295
 8009606:	f7ff fa8a 	bl	8008b1e <quorem>
 800960a:	4603      	mov	r3, r0
 800960c:	3330      	adds	r3, #48	@ 0x30
 800960e:	9003      	str	r0, [sp, #12]
 8009610:	4639      	mov	r1, r7
 8009612:	9802      	ldr	r0, [sp, #8]
 8009614:	9309      	str	r3, [sp, #36]	@ 0x24
 8009616:	f000 fc4d 	bl	8009eb4 <__mcmp>
 800961a:	462a      	mov	r2, r5
 800961c:	9004      	str	r0, [sp, #16]
 800961e:	4621      	mov	r1, r4
 8009620:	4648      	mov	r0, r9
 8009622:	f000 fc63 	bl	8009eec <__mdiff>
 8009626:	68c2      	ldr	r2, [r0, #12]
 8009628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800962a:	4606      	mov	r6, r0
 800962c:	bb02      	cbnz	r2, 8009670 <_dtoa_r+0xa40>
 800962e:	4601      	mov	r1, r0
 8009630:	9802      	ldr	r0, [sp, #8]
 8009632:	f000 fc3f 	bl	8009eb4 <__mcmp>
 8009636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009638:	4602      	mov	r2, r0
 800963a:	4631      	mov	r1, r6
 800963c:	4648      	mov	r0, r9
 800963e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009640:	9309      	str	r3, [sp, #36]	@ 0x24
 8009642:	f000 fa05 	bl	8009a50 <_Bfree>
 8009646:	9b07      	ldr	r3, [sp, #28]
 8009648:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800964a:	9e00      	ldr	r6, [sp, #0]
 800964c:	ea42 0103 	orr.w	r1, r2, r3
 8009650:	9b06      	ldr	r3, [sp, #24]
 8009652:	4319      	orrs	r1, r3
 8009654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009656:	d10d      	bne.n	8009674 <_dtoa_r+0xa44>
 8009658:	2b39      	cmp	r3, #57	@ 0x39
 800965a:	d027      	beq.n	80096ac <_dtoa_r+0xa7c>
 800965c:	9a04      	ldr	r2, [sp, #16]
 800965e:	2a00      	cmp	r2, #0
 8009660:	dd01      	ble.n	8009666 <_dtoa_r+0xa36>
 8009662:	9b03      	ldr	r3, [sp, #12]
 8009664:	3331      	adds	r3, #49	@ 0x31
 8009666:	f88b 3000 	strb.w	r3, [fp]
 800966a:	e52e      	b.n	80090ca <_dtoa_r+0x49a>
 800966c:	4628      	mov	r0, r5
 800966e:	e7b9      	b.n	80095e4 <_dtoa_r+0x9b4>
 8009670:	2201      	movs	r2, #1
 8009672:	e7e2      	b.n	800963a <_dtoa_r+0xa0a>
 8009674:	9904      	ldr	r1, [sp, #16]
 8009676:	2900      	cmp	r1, #0
 8009678:	db04      	blt.n	8009684 <_dtoa_r+0xa54>
 800967a:	9807      	ldr	r0, [sp, #28]
 800967c:	4301      	orrs	r1, r0
 800967e:	9806      	ldr	r0, [sp, #24]
 8009680:	4301      	orrs	r1, r0
 8009682:	d120      	bne.n	80096c6 <_dtoa_r+0xa96>
 8009684:	2a00      	cmp	r2, #0
 8009686:	ddee      	ble.n	8009666 <_dtoa_r+0xa36>
 8009688:	9902      	ldr	r1, [sp, #8]
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	2201      	movs	r2, #1
 800968e:	4648      	mov	r0, r9
 8009690:	f000 fba4 	bl	8009ddc <__lshift>
 8009694:	4621      	mov	r1, r4
 8009696:	9002      	str	r0, [sp, #8]
 8009698:	f000 fc0c 	bl	8009eb4 <__mcmp>
 800969c:	2800      	cmp	r0, #0
 800969e:	9b00      	ldr	r3, [sp, #0]
 80096a0:	dc02      	bgt.n	80096a8 <_dtoa_r+0xa78>
 80096a2:	d1e0      	bne.n	8009666 <_dtoa_r+0xa36>
 80096a4:	07da      	lsls	r2, r3, #31
 80096a6:	d5de      	bpl.n	8009666 <_dtoa_r+0xa36>
 80096a8:	2b39      	cmp	r3, #57	@ 0x39
 80096aa:	d1da      	bne.n	8009662 <_dtoa_r+0xa32>
 80096ac:	2339      	movs	r3, #57	@ 0x39
 80096ae:	f88b 3000 	strb.w	r3, [fp]
 80096b2:	4633      	mov	r3, r6
 80096b4:	461e      	mov	r6, r3
 80096b6:	3b01      	subs	r3, #1
 80096b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80096bc:	2a39      	cmp	r2, #57	@ 0x39
 80096be:	d04e      	beq.n	800975e <_dtoa_r+0xb2e>
 80096c0:	3201      	adds	r2, #1
 80096c2:	701a      	strb	r2, [r3, #0]
 80096c4:	e501      	b.n	80090ca <_dtoa_r+0x49a>
 80096c6:	2a00      	cmp	r2, #0
 80096c8:	dd03      	ble.n	80096d2 <_dtoa_r+0xaa2>
 80096ca:	2b39      	cmp	r3, #57	@ 0x39
 80096cc:	d0ee      	beq.n	80096ac <_dtoa_r+0xa7c>
 80096ce:	3301      	adds	r3, #1
 80096d0:	e7c9      	b.n	8009666 <_dtoa_r+0xa36>
 80096d2:	9a00      	ldr	r2, [sp, #0]
 80096d4:	9908      	ldr	r1, [sp, #32]
 80096d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80096da:	428a      	cmp	r2, r1
 80096dc:	d028      	beq.n	8009730 <_dtoa_r+0xb00>
 80096de:	9902      	ldr	r1, [sp, #8]
 80096e0:	2300      	movs	r3, #0
 80096e2:	220a      	movs	r2, #10
 80096e4:	4648      	mov	r0, r9
 80096e6:	f000 f9d5 	bl	8009a94 <__multadd>
 80096ea:	42af      	cmp	r7, r5
 80096ec:	9002      	str	r0, [sp, #8]
 80096ee:	f04f 0300 	mov.w	r3, #0
 80096f2:	f04f 020a 	mov.w	r2, #10
 80096f6:	4639      	mov	r1, r7
 80096f8:	4648      	mov	r0, r9
 80096fa:	d107      	bne.n	800970c <_dtoa_r+0xadc>
 80096fc:	f000 f9ca 	bl	8009a94 <__multadd>
 8009700:	4607      	mov	r7, r0
 8009702:	4605      	mov	r5, r0
 8009704:	9b00      	ldr	r3, [sp, #0]
 8009706:	3301      	adds	r3, #1
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	e777      	b.n	80095fc <_dtoa_r+0x9cc>
 800970c:	f000 f9c2 	bl	8009a94 <__multadd>
 8009710:	4629      	mov	r1, r5
 8009712:	4607      	mov	r7, r0
 8009714:	2300      	movs	r3, #0
 8009716:	220a      	movs	r2, #10
 8009718:	4648      	mov	r0, r9
 800971a:	f000 f9bb 	bl	8009a94 <__multadd>
 800971e:	4605      	mov	r5, r0
 8009720:	e7f0      	b.n	8009704 <_dtoa_r+0xad4>
 8009722:	f1bb 0f00 	cmp.w	fp, #0
 8009726:	bfcc      	ite	gt
 8009728:	465e      	movgt	r6, fp
 800972a:	2601      	movle	r6, #1
 800972c:	4456      	add	r6, sl
 800972e:	2700      	movs	r7, #0
 8009730:	9902      	ldr	r1, [sp, #8]
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	2201      	movs	r2, #1
 8009736:	4648      	mov	r0, r9
 8009738:	f000 fb50 	bl	8009ddc <__lshift>
 800973c:	4621      	mov	r1, r4
 800973e:	9002      	str	r0, [sp, #8]
 8009740:	f000 fbb8 	bl	8009eb4 <__mcmp>
 8009744:	2800      	cmp	r0, #0
 8009746:	dcb4      	bgt.n	80096b2 <_dtoa_r+0xa82>
 8009748:	d102      	bne.n	8009750 <_dtoa_r+0xb20>
 800974a:	9b00      	ldr	r3, [sp, #0]
 800974c:	07db      	lsls	r3, r3, #31
 800974e:	d4b0      	bmi.n	80096b2 <_dtoa_r+0xa82>
 8009750:	4633      	mov	r3, r6
 8009752:	461e      	mov	r6, r3
 8009754:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009758:	2a30      	cmp	r2, #48	@ 0x30
 800975a:	d0fa      	beq.n	8009752 <_dtoa_r+0xb22>
 800975c:	e4b5      	b.n	80090ca <_dtoa_r+0x49a>
 800975e:	459a      	cmp	sl, r3
 8009760:	d1a8      	bne.n	80096b4 <_dtoa_r+0xa84>
 8009762:	2331      	movs	r3, #49	@ 0x31
 8009764:	f108 0801 	add.w	r8, r8, #1
 8009768:	f88a 3000 	strb.w	r3, [sl]
 800976c:	e4ad      	b.n	80090ca <_dtoa_r+0x49a>
 800976e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009770:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80097cc <_dtoa_r+0xb9c>
 8009774:	b11b      	cbz	r3, 800977e <_dtoa_r+0xb4e>
 8009776:	f10a 0308 	add.w	r3, sl, #8
 800977a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800977c:	6013      	str	r3, [r2, #0]
 800977e:	4650      	mov	r0, sl
 8009780:	b017      	add	sp, #92	@ 0x5c
 8009782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009786:	9b07      	ldr	r3, [sp, #28]
 8009788:	2b01      	cmp	r3, #1
 800978a:	f77f ae2e 	ble.w	80093ea <_dtoa_r+0x7ba>
 800978e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009790:	9308      	str	r3, [sp, #32]
 8009792:	2001      	movs	r0, #1
 8009794:	e64d      	b.n	8009432 <_dtoa_r+0x802>
 8009796:	f1bb 0f00 	cmp.w	fp, #0
 800979a:	f77f aed9 	ble.w	8009550 <_dtoa_r+0x920>
 800979e:	4656      	mov	r6, sl
 80097a0:	9802      	ldr	r0, [sp, #8]
 80097a2:	4621      	mov	r1, r4
 80097a4:	f7ff f9bb 	bl	8008b1e <quorem>
 80097a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80097ac:	f806 3b01 	strb.w	r3, [r6], #1
 80097b0:	eba6 020a 	sub.w	r2, r6, sl
 80097b4:	4593      	cmp	fp, r2
 80097b6:	ddb4      	ble.n	8009722 <_dtoa_r+0xaf2>
 80097b8:	9902      	ldr	r1, [sp, #8]
 80097ba:	2300      	movs	r3, #0
 80097bc:	220a      	movs	r2, #10
 80097be:	4648      	mov	r0, r9
 80097c0:	f000 f968 	bl	8009a94 <__multadd>
 80097c4:	9002      	str	r0, [sp, #8]
 80097c6:	e7eb      	b.n	80097a0 <_dtoa_r+0xb70>
 80097c8:	0800cca8 	.word	0x0800cca8
 80097cc:	0800cc2c 	.word	0x0800cc2c

080097d0 <_free_r>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	4605      	mov	r5, r0
 80097d4:	2900      	cmp	r1, #0
 80097d6:	d041      	beq.n	800985c <_free_r+0x8c>
 80097d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097dc:	1f0c      	subs	r4, r1, #4
 80097de:	2b00      	cmp	r3, #0
 80097e0:	bfb8      	it	lt
 80097e2:	18e4      	addlt	r4, r4, r3
 80097e4:	f000 f8e8 	bl	80099b8 <__malloc_lock>
 80097e8:	4a1d      	ldr	r2, [pc, #116]	@ (8009860 <_free_r+0x90>)
 80097ea:	6813      	ldr	r3, [r2, #0]
 80097ec:	b933      	cbnz	r3, 80097fc <_free_r+0x2c>
 80097ee:	6063      	str	r3, [r4, #4]
 80097f0:	6014      	str	r4, [r2, #0]
 80097f2:	4628      	mov	r0, r5
 80097f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097f8:	f000 b8e4 	b.w	80099c4 <__malloc_unlock>
 80097fc:	42a3      	cmp	r3, r4
 80097fe:	d908      	bls.n	8009812 <_free_r+0x42>
 8009800:	6820      	ldr	r0, [r4, #0]
 8009802:	1821      	adds	r1, r4, r0
 8009804:	428b      	cmp	r3, r1
 8009806:	bf01      	itttt	eq
 8009808:	6819      	ldreq	r1, [r3, #0]
 800980a:	685b      	ldreq	r3, [r3, #4]
 800980c:	1809      	addeq	r1, r1, r0
 800980e:	6021      	streq	r1, [r4, #0]
 8009810:	e7ed      	b.n	80097ee <_free_r+0x1e>
 8009812:	461a      	mov	r2, r3
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	b10b      	cbz	r3, 800981c <_free_r+0x4c>
 8009818:	42a3      	cmp	r3, r4
 800981a:	d9fa      	bls.n	8009812 <_free_r+0x42>
 800981c:	6811      	ldr	r1, [r2, #0]
 800981e:	1850      	adds	r0, r2, r1
 8009820:	42a0      	cmp	r0, r4
 8009822:	d10b      	bne.n	800983c <_free_r+0x6c>
 8009824:	6820      	ldr	r0, [r4, #0]
 8009826:	4401      	add	r1, r0
 8009828:	1850      	adds	r0, r2, r1
 800982a:	4283      	cmp	r3, r0
 800982c:	6011      	str	r1, [r2, #0]
 800982e:	d1e0      	bne.n	80097f2 <_free_r+0x22>
 8009830:	6818      	ldr	r0, [r3, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	6053      	str	r3, [r2, #4]
 8009836:	4408      	add	r0, r1
 8009838:	6010      	str	r0, [r2, #0]
 800983a:	e7da      	b.n	80097f2 <_free_r+0x22>
 800983c:	d902      	bls.n	8009844 <_free_r+0x74>
 800983e:	230c      	movs	r3, #12
 8009840:	602b      	str	r3, [r5, #0]
 8009842:	e7d6      	b.n	80097f2 <_free_r+0x22>
 8009844:	6820      	ldr	r0, [r4, #0]
 8009846:	1821      	adds	r1, r4, r0
 8009848:	428b      	cmp	r3, r1
 800984a:	bf04      	itt	eq
 800984c:	6819      	ldreq	r1, [r3, #0]
 800984e:	685b      	ldreq	r3, [r3, #4]
 8009850:	6063      	str	r3, [r4, #4]
 8009852:	bf04      	itt	eq
 8009854:	1809      	addeq	r1, r1, r0
 8009856:	6021      	streq	r1, [r4, #0]
 8009858:	6054      	str	r4, [r2, #4]
 800985a:	e7ca      	b.n	80097f2 <_free_r+0x22>
 800985c:	bd38      	pop	{r3, r4, r5, pc}
 800985e:	bf00      	nop
 8009860:	20005584 	.word	0x20005584

08009864 <malloc>:
 8009864:	4b02      	ldr	r3, [pc, #8]	@ (8009870 <malloc+0xc>)
 8009866:	4601      	mov	r1, r0
 8009868:	6818      	ldr	r0, [r3, #0]
 800986a:	f000 b825 	b.w	80098b8 <_malloc_r>
 800986e:	bf00      	nop
 8009870:	20000054 	.word	0x20000054

08009874 <sbrk_aligned>:
 8009874:	b570      	push	{r4, r5, r6, lr}
 8009876:	4e0f      	ldr	r6, [pc, #60]	@ (80098b4 <sbrk_aligned+0x40>)
 8009878:	460c      	mov	r4, r1
 800987a:	6831      	ldr	r1, [r6, #0]
 800987c:	4605      	mov	r5, r0
 800987e:	b911      	cbnz	r1, 8009886 <sbrk_aligned+0x12>
 8009880:	f000 fd50 	bl	800a324 <_sbrk_r>
 8009884:	6030      	str	r0, [r6, #0]
 8009886:	4621      	mov	r1, r4
 8009888:	4628      	mov	r0, r5
 800988a:	f000 fd4b 	bl	800a324 <_sbrk_r>
 800988e:	1c43      	adds	r3, r0, #1
 8009890:	d103      	bne.n	800989a <sbrk_aligned+0x26>
 8009892:	f04f 34ff 	mov.w	r4, #4294967295
 8009896:	4620      	mov	r0, r4
 8009898:	bd70      	pop	{r4, r5, r6, pc}
 800989a:	1cc4      	adds	r4, r0, #3
 800989c:	f024 0403 	bic.w	r4, r4, #3
 80098a0:	42a0      	cmp	r0, r4
 80098a2:	d0f8      	beq.n	8009896 <sbrk_aligned+0x22>
 80098a4:	1a21      	subs	r1, r4, r0
 80098a6:	4628      	mov	r0, r5
 80098a8:	f000 fd3c 	bl	800a324 <_sbrk_r>
 80098ac:	3001      	adds	r0, #1
 80098ae:	d1f2      	bne.n	8009896 <sbrk_aligned+0x22>
 80098b0:	e7ef      	b.n	8009892 <sbrk_aligned+0x1e>
 80098b2:	bf00      	nop
 80098b4:	20005580 	.word	0x20005580

080098b8 <_malloc_r>:
 80098b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098bc:	1ccd      	adds	r5, r1, #3
 80098be:	f025 0503 	bic.w	r5, r5, #3
 80098c2:	3508      	adds	r5, #8
 80098c4:	2d0c      	cmp	r5, #12
 80098c6:	bf38      	it	cc
 80098c8:	250c      	movcc	r5, #12
 80098ca:	2d00      	cmp	r5, #0
 80098cc:	4606      	mov	r6, r0
 80098ce:	db01      	blt.n	80098d4 <_malloc_r+0x1c>
 80098d0:	42a9      	cmp	r1, r5
 80098d2:	d904      	bls.n	80098de <_malloc_r+0x26>
 80098d4:	230c      	movs	r3, #12
 80098d6:	6033      	str	r3, [r6, #0]
 80098d8:	2000      	movs	r0, #0
 80098da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80099b4 <_malloc_r+0xfc>
 80098e2:	f000 f869 	bl	80099b8 <__malloc_lock>
 80098e6:	f8d8 3000 	ldr.w	r3, [r8]
 80098ea:	461c      	mov	r4, r3
 80098ec:	bb44      	cbnz	r4, 8009940 <_malloc_r+0x88>
 80098ee:	4629      	mov	r1, r5
 80098f0:	4630      	mov	r0, r6
 80098f2:	f7ff ffbf 	bl	8009874 <sbrk_aligned>
 80098f6:	1c43      	adds	r3, r0, #1
 80098f8:	4604      	mov	r4, r0
 80098fa:	d158      	bne.n	80099ae <_malloc_r+0xf6>
 80098fc:	f8d8 4000 	ldr.w	r4, [r8]
 8009900:	4627      	mov	r7, r4
 8009902:	2f00      	cmp	r7, #0
 8009904:	d143      	bne.n	800998e <_malloc_r+0xd6>
 8009906:	2c00      	cmp	r4, #0
 8009908:	d04b      	beq.n	80099a2 <_malloc_r+0xea>
 800990a:	6823      	ldr	r3, [r4, #0]
 800990c:	4639      	mov	r1, r7
 800990e:	4630      	mov	r0, r6
 8009910:	eb04 0903 	add.w	r9, r4, r3
 8009914:	f000 fd06 	bl	800a324 <_sbrk_r>
 8009918:	4581      	cmp	r9, r0
 800991a:	d142      	bne.n	80099a2 <_malloc_r+0xea>
 800991c:	6821      	ldr	r1, [r4, #0]
 800991e:	1a6d      	subs	r5, r5, r1
 8009920:	4629      	mov	r1, r5
 8009922:	4630      	mov	r0, r6
 8009924:	f7ff ffa6 	bl	8009874 <sbrk_aligned>
 8009928:	3001      	adds	r0, #1
 800992a:	d03a      	beq.n	80099a2 <_malloc_r+0xea>
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	442b      	add	r3, r5
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	f8d8 3000 	ldr.w	r3, [r8]
 8009936:	685a      	ldr	r2, [r3, #4]
 8009938:	bb62      	cbnz	r2, 8009994 <_malloc_r+0xdc>
 800993a:	f8c8 7000 	str.w	r7, [r8]
 800993e:	e00f      	b.n	8009960 <_malloc_r+0xa8>
 8009940:	6822      	ldr	r2, [r4, #0]
 8009942:	1b52      	subs	r2, r2, r5
 8009944:	d420      	bmi.n	8009988 <_malloc_r+0xd0>
 8009946:	2a0b      	cmp	r2, #11
 8009948:	d917      	bls.n	800997a <_malloc_r+0xc2>
 800994a:	1961      	adds	r1, r4, r5
 800994c:	42a3      	cmp	r3, r4
 800994e:	6025      	str	r5, [r4, #0]
 8009950:	bf18      	it	ne
 8009952:	6059      	strne	r1, [r3, #4]
 8009954:	6863      	ldr	r3, [r4, #4]
 8009956:	bf08      	it	eq
 8009958:	f8c8 1000 	streq.w	r1, [r8]
 800995c:	5162      	str	r2, [r4, r5]
 800995e:	604b      	str	r3, [r1, #4]
 8009960:	4630      	mov	r0, r6
 8009962:	f000 f82f 	bl	80099c4 <__malloc_unlock>
 8009966:	f104 000b 	add.w	r0, r4, #11
 800996a:	1d23      	adds	r3, r4, #4
 800996c:	f020 0007 	bic.w	r0, r0, #7
 8009970:	1ac2      	subs	r2, r0, r3
 8009972:	bf1c      	itt	ne
 8009974:	1a1b      	subne	r3, r3, r0
 8009976:	50a3      	strne	r3, [r4, r2]
 8009978:	e7af      	b.n	80098da <_malloc_r+0x22>
 800997a:	6862      	ldr	r2, [r4, #4]
 800997c:	42a3      	cmp	r3, r4
 800997e:	bf0c      	ite	eq
 8009980:	f8c8 2000 	streq.w	r2, [r8]
 8009984:	605a      	strne	r2, [r3, #4]
 8009986:	e7eb      	b.n	8009960 <_malloc_r+0xa8>
 8009988:	4623      	mov	r3, r4
 800998a:	6864      	ldr	r4, [r4, #4]
 800998c:	e7ae      	b.n	80098ec <_malloc_r+0x34>
 800998e:	463c      	mov	r4, r7
 8009990:	687f      	ldr	r7, [r7, #4]
 8009992:	e7b6      	b.n	8009902 <_malloc_r+0x4a>
 8009994:	461a      	mov	r2, r3
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	42a3      	cmp	r3, r4
 800999a:	d1fb      	bne.n	8009994 <_malloc_r+0xdc>
 800999c:	2300      	movs	r3, #0
 800999e:	6053      	str	r3, [r2, #4]
 80099a0:	e7de      	b.n	8009960 <_malloc_r+0xa8>
 80099a2:	230c      	movs	r3, #12
 80099a4:	6033      	str	r3, [r6, #0]
 80099a6:	4630      	mov	r0, r6
 80099a8:	f000 f80c 	bl	80099c4 <__malloc_unlock>
 80099ac:	e794      	b.n	80098d8 <_malloc_r+0x20>
 80099ae:	6005      	str	r5, [r0, #0]
 80099b0:	e7d6      	b.n	8009960 <_malloc_r+0xa8>
 80099b2:	bf00      	nop
 80099b4:	20005584 	.word	0x20005584

080099b8 <__malloc_lock>:
 80099b8:	4801      	ldr	r0, [pc, #4]	@ (80099c0 <__malloc_lock+0x8>)
 80099ba:	f7ff b8ae 	b.w	8008b1a <__retarget_lock_acquire_recursive>
 80099be:	bf00      	nop
 80099c0:	2000557c 	.word	0x2000557c

080099c4 <__malloc_unlock>:
 80099c4:	4801      	ldr	r0, [pc, #4]	@ (80099cc <__malloc_unlock+0x8>)
 80099c6:	f7ff b8a9 	b.w	8008b1c <__retarget_lock_release_recursive>
 80099ca:	bf00      	nop
 80099cc:	2000557c 	.word	0x2000557c

080099d0 <_Balloc>:
 80099d0:	b570      	push	{r4, r5, r6, lr}
 80099d2:	69c6      	ldr	r6, [r0, #28]
 80099d4:	4604      	mov	r4, r0
 80099d6:	460d      	mov	r5, r1
 80099d8:	b976      	cbnz	r6, 80099f8 <_Balloc+0x28>
 80099da:	2010      	movs	r0, #16
 80099dc:	f7ff ff42 	bl	8009864 <malloc>
 80099e0:	4602      	mov	r2, r0
 80099e2:	61e0      	str	r0, [r4, #28]
 80099e4:	b920      	cbnz	r0, 80099f0 <_Balloc+0x20>
 80099e6:	4b18      	ldr	r3, [pc, #96]	@ (8009a48 <_Balloc+0x78>)
 80099e8:	4818      	ldr	r0, [pc, #96]	@ (8009a4c <_Balloc+0x7c>)
 80099ea:	216b      	movs	r1, #107	@ 0x6b
 80099ec:	f000 fcb8 	bl	800a360 <__assert_func>
 80099f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099f4:	6006      	str	r6, [r0, #0]
 80099f6:	60c6      	str	r6, [r0, #12]
 80099f8:	69e6      	ldr	r6, [r4, #28]
 80099fa:	68f3      	ldr	r3, [r6, #12]
 80099fc:	b183      	cbz	r3, 8009a20 <_Balloc+0x50>
 80099fe:	69e3      	ldr	r3, [r4, #28]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a06:	b9b8      	cbnz	r0, 8009a38 <_Balloc+0x68>
 8009a08:	2101      	movs	r1, #1
 8009a0a:	fa01 f605 	lsl.w	r6, r1, r5
 8009a0e:	1d72      	adds	r2, r6, #5
 8009a10:	0092      	lsls	r2, r2, #2
 8009a12:	4620      	mov	r0, r4
 8009a14:	f000 fcc2 	bl	800a39c <_calloc_r>
 8009a18:	b160      	cbz	r0, 8009a34 <_Balloc+0x64>
 8009a1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a1e:	e00e      	b.n	8009a3e <_Balloc+0x6e>
 8009a20:	2221      	movs	r2, #33	@ 0x21
 8009a22:	2104      	movs	r1, #4
 8009a24:	4620      	mov	r0, r4
 8009a26:	f000 fcb9 	bl	800a39c <_calloc_r>
 8009a2a:	69e3      	ldr	r3, [r4, #28]
 8009a2c:	60f0      	str	r0, [r6, #12]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1e4      	bne.n	80099fe <_Balloc+0x2e>
 8009a34:	2000      	movs	r0, #0
 8009a36:	bd70      	pop	{r4, r5, r6, pc}
 8009a38:	6802      	ldr	r2, [r0, #0]
 8009a3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a3e:	2300      	movs	r3, #0
 8009a40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a44:	e7f7      	b.n	8009a36 <_Balloc+0x66>
 8009a46:	bf00      	nop
 8009a48:	0800cc39 	.word	0x0800cc39
 8009a4c:	0800ccb9 	.word	0x0800ccb9

08009a50 <_Bfree>:
 8009a50:	b570      	push	{r4, r5, r6, lr}
 8009a52:	69c6      	ldr	r6, [r0, #28]
 8009a54:	4605      	mov	r5, r0
 8009a56:	460c      	mov	r4, r1
 8009a58:	b976      	cbnz	r6, 8009a78 <_Bfree+0x28>
 8009a5a:	2010      	movs	r0, #16
 8009a5c:	f7ff ff02 	bl	8009864 <malloc>
 8009a60:	4602      	mov	r2, r0
 8009a62:	61e8      	str	r0, [r5, #28]
 8009a64:	b920      	cbnz	r0, 8009a70 <_Bfree+0x20>
 8009a66:	4b09      	ldr	r3, [pc, #36]	@ (8009a8c <_Bfree+0x3c>)
 8009a68:	4809      	ldr	r0, [pc, #36]	@ (8009a90 <_Bfree+0x40>)
 8009a6a:	218f      	movs	r1, #143	@ 0x8f
 8009a6c:	f000 fc78 	bl	800a360 <__assert_func>
 8009a70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a74:	6006      	str	r6, [r0, #0]
 8009a76:	60c6      	str	r6, [r0, #12]
 8009a78:	b13c      	cbz	r4, 8009a8a <_Bfree+0x3a>
 8009a7a:	69eb      	ldr	r3, [r5, #28]
 8009a7c:	6862      	ldr	r2, [r4, #4]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a84:	6021      	str	r1, [r4, #0]
 8009a86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a8a:	bd70      	pop	{r4, r5, r6, pc}
 8009a8c:	0800cc39 	.word	0x0800cc39
 8009a90:	0800ccb9 	.word	0x0800ccb9

08009a94 <__multadd>:
 8009a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a98:	690d      	ldr	r5, [r1, #16]
 8009a9a:	4607      	mov	r7, r0
 8009a9c:	460c      	mov	r4, r1
 8009a9e:	461e      	mov	r6, r3
 8009aa0:	f101 0c14 	add.w	ip, r1, #20
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	f8dc 3000 	ldr.w	r3, [ip]
 8009aaa:	b299      	uxth	r1, r3
 8009aac:	fb02 6101 	mla	r1, r2, r1, r6
 8009ab0:	0c1e      	lsrs	r6, r3, #16
 8009ab2:	0c0b      	lsrs	r3, r1, #16
 8009ab4:	fb02 3306 	mla	r3, r2, r6, r3
 8009ab8:	b289      	uxth	r1, r1
 8009aba:	3001      	adds	r0, #1
 8009abc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ac0:	4285      	cmp	r5, r0
 8009ac2:	f84c 1b04 	str.w	r1, [ip], #4
 8009ac6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009aca:	dcec      	bgt.n	8009aa6 <__multadd+0x12>
 8009acc:	b30e      	cbz	r6, 8009b12 <__multadd+0x7e>
 8009ace:	68a3      	ldr	r3, [r4, #8]
 8009ad0:	42ab      	cmp	r3, r5
 8009ad2:	dc19      	bgt.n	8009b08 <__multadd+0x74>
 8009ad4:	6861      	ldr	r1, [r4, #4]
 8009ad6:	4638      	mov	r0, r7
 8009ad8:	3101      	adds	r1, #1
 8009ada:	f7ff ff79 	bl	80099d0 <_Balloc>
 8009ade:	4680      	mov	r8, r0
 8009ae0:	b928      	cbnz	r0, 8009aee <__multadd+0x5a>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8009b18 <__multadd+0x84>)
 8009ae6:	480d      	ldr	r0, [pc, #52]	@ (8009b1c <__multadd+0x88>)
 8009ae8:	21ba      	movs	r1, #186	@ 0xba
 8009aea:	f000 fc39 	bl	800a360 <__assert_func>
 8009aee:	6922      	ldr	r2, [r4, #16]
 8009af0:	3202      	adds	r2, #2
 8009af2:	f104 010c 	add.w	r1, r4, #12
 8009af6:	0092      	lsls	r2, r2, #2
 8009af8:	300c      	adds	r0, #12
 8009afa:	f000 fc23 	bl	800a344 <memcpy>
 8009afe:	4621      	mov	r1, r4
 8009b00:	4638      	mov	r0, r7
 8009b02:	f7ff ffa5 	bl	8009a50 <_Bfree>
 8009b06:	4644      	mov	r4, r8
 8009b08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b0c:	3501      	adds	r5, #1
 8009b0e:	615e      	str	r6, [r3, #20]
 8009b10:	6125      	str	r5, [r4, #16]
 8009b12:	4620      	mov	r0, r4
 8009b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b18:	0800cca8 	.word	0x0800cca8
 8009b1c:	0800ccb9 	.word	0x0800ccb9

08009b20 <__hi0bits>:
 8009b20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009b24:	4603      	mov	r3, r0
 8009b26:	bf36      	itet	cc
 8009b28:	0403      	lslcc	r3, r0, #16
 8009b2a:	2000      	movcs	r0, #0
 8009b2c:	2010      	movcc	r0, #16
 8009b2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b32:	bf3c      	itt	cc
 8009b34:	021b      	lslcc	r3, r3, #8
 8009b36:	3008      	addcc	r0, #8
 8009b38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b3c:	bf3c      	itt	cc
 8009b3e:	011b      	lslcc	r3, r3, #4
 8009b40:	3004      	addcc	r0, #4
 8009b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b46:	bf3c      	itt	cc
 8009b48:	009b      	lslcc	r3, r3, #2
 8009b4a:	3002      	addcc	r0, #2
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	db05      	blt.n	8009b5c <__hi0bits+0x3c>
 8009b50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009b54:	f100 0001 	add.w	r0, r0, #1
 8009b58:	bf08      	it	eq
 8009b5a:	2020      	moveq	r0, #32
 8009b5c:	4770      	bx	lr

08009b5e <__lo0bits>:
 8009b5e:	6803      	ldr	r3, [r0, #0]
 8009b60:	4602      	mov	r2, r0
 8009b62:	f013 0007 	ands.w	r0, r3, #7
 8009b66:	d00b      	beq.n	8009b80 <__lo0bits+0x22>
 8009b68:	07d9      	lsls	r1, r3, #31
 8009b6a:	d421      	bmi.n	8009bb0 <__lo0bits+0x52>
 8009b6c:	0798      	lsls	r0, r3, #30
 8009b6e:	bf49      	itett	mi
 8009b70:	085b      	lsrmi	r3, r3, #1
 8009b72:	089b      	lsrpl	r3, r3, #2
 8009b74:	2001      	movmi	r0, #1
 8009b76:	6013      	strmi	r3, [r2, #0]
 8009b78:	bf5c      	itt	pl
 8009b7a:	6013      	strpl	r3, [r2, #0]
 8009b7c:	2002      	movpl	r0, #2
 8009b7e:	4770      	bx	lr
 8009b80:	b299      	uxth	r1, r3
 8009b82:	b909      	cbnz	r1, 8009b88 <__lo0bits+0x2a>
 8009b84:	0c1b      	lsrs	r3, r3, #16
 8009b86:	2010      	movs	r0, #16
 8009b88:	b2d9      	uxtb	r1, r3
 8009b8a:	b909      	cbnz	r1, 8009b90 <__lo0bits+0x32>
 8009b8c:	3008      	adds	r0, #8
 8009b8e:	0a1b      	lsrs	r3, r3, #8
 8009b90:	0719      	lsls	r1, r3, #28
 8009b92:	bf04      	itt	eq
 8009b94:	091b      	lsreq	r3, r3, #4
 8009b96:	3004      	addeq	r0, #4
 8009b98:	0799      	lsls	r1, r3, #30
 8009b9a:	bf04      	itt	eq
 8009b9c:	089b      	lsreq	r3, r3, #2
 8009b9e:	3002      	addeq	r0, #2
 8009ba0:	07d9      	lsls	r1, r3, #31
 8009ba2:	d403      	bmi.n	8009bac <__lo0bits+0x4e>
 8009ba4:	085b      	lsrs	r3, r3, #1
 8009ba6:	f100 0001 	add.w	r0, r0, #1
 8009baa:	d003      	beq.n	8009bb4 <__lo0bits+0x56>
 8009bac:	6013      	str	r3, [r2, #0]
 8009bae:	4770      	bx	lr
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	4770      	bx	lr
 8009bb4:	2020      	movs	r0, #32
 8009bb6:	4770      	bx	lr

08009bb8 <__i2b>:
 8009bb8:	b510      	push	{r4, lr}
 8009bba:	460c      	mov	r4, r1
 8009bbc:	2101      	movs	r1, #1
 8009bbe:	f7ff ff07 	bl	80099d0 <_Balloc>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	b928      	cbnz	r0, 8009bd2 <__i2b+0x1a>
 8009bc6:	4b05      	ldr	r3, [pc, #20]	@ (8009bdc <__i2b+0x24>)
 8009bc8:	4805      	ldr	r0, [pc, #20]	@ (8009be0 <__i2b+0x28>)
 8009bca:	f240 1145 	movw	r1, #325	@ 0x145
 8009bce:	f000 fbc7 	bl	800a360 <__assert_func>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	6144      	str	r4, [r0, #20]
 8009bd6:	6103      	str	r3, [r0, #16]
 8009bd8:	bd10      	pop	{r4, pc}
 8009bda:	bf00      	nop
 8009bdc:	0800cca8 	.word	0x0800cca8
 8009be0:	0800ccb9 	.word	0x0800ccb9

08009be4 <__multiply>:
 8009be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be8:	4617      	mov	r7, r2
 8009bea:	690a      	ldr	r2, [r1, #16]
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	bfa8      	it	ge
 8009bf2:	463b      	movge	r3, r7
 8009bf4:	4689      	mov	r9, r1
 8009bf6:	bfa4      	itt	ge
 8009bf8:	460f      	movge	r7, r1
 8009bfa:	4699      	movge	r9, r3
 8009bfc:	693d      	ldr	r5, [r7, #16]
 8009bfe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	6879      	ldr	r1, [r7, #4]
 8009c06:	eb05 060a 	add.w	r6, r5, sl
 8009c0a:	42b3      	cmp	r3, r6
 8009c0c:	b085      	sub	sp, #20
 8009c0e:	bfb8      	it	lt
 8009c10:	3101      	addlt	r1, #1
 8009c12:	f7ff fedd 	bl	80099d0 <_Balloc>
 8009c16:	b930      	cbnz	r0, 8009c26 <__multiply+0x42>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	4b41      	ldr	r3, [pc, #260]	@ (8009d20 <__multiply+0x13c>)
 8009c1c:	4841      	ldr	r0, [pc, #260]	@ (8009d24 <__multiply+0x140>)
 8009c1e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009c22:	f000 fb9d 	bl	800a360 <__assert_func>
 8009c26:	f100 0414 	add.w	r4, r0, #20
 8009c2a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009c2e:	4623      	mov	r3, r4
 8009c30:	2200      	movs	r2, #0
 8009c32:	4573      	cmp	r3, lr
 8009c34:	d320      	bcc.n	8009c78 <__multiply+0x94>
 8009c36:	f107 0814 	add.w	r8, r7, #20
 8009c3a:	f109 0114 	add.w	r1, r9, #20
 8009c3e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009c42:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009c46:	9302      	str	r3, [sp, #8]
 8009c48:	1beb      	subs	r3, r5, r7
 8009c4a:	3b15      	subs	r3, #21
 8009c4c:	f023 0303 	bic.w	r3, r3, #3
 8009c50:	3304      	adds	r3, #4
 8009c52:	3715      	adds	r7, #21
 8009c54:	42bd      	cmp	r5, r7
 8009c56:	bf38      	it	cc
 8009c58:	2304      	movcc	r3, #4
 8009c5a:	9301      	str	r3, [sp, #4]
 8009c5c:	9b02      	ldr	r3, [sp, #8]
 8009c5e:	9103      	str	r1, [sp, #12]
 8009c60:	428b      	cmp	r3, r1
 8009c62:	d80c      	bhi.n	8009c7e <__multiply+0x9a>
 8009c64:	2e00      	cmp	r6, #0
 8009c66:	dd03      	ble.n	8009c70 <__multiply+0x8c>
 8009c68:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d055      	beq.n	8009d1c <__multiply+0x138>
 8009c70:	6106      	str	r6, [r0, #16]
 8009c72:	b005      	add	sp, #20
 8009c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c78:	f843 2b04 	str.w	r2, [r3], #4
 8009c7c:	e7d9      	b.n	8009c32 <__multiply+0x4e>
 8009c7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009c82:	f1ba 0f00 	cmp.w	sl, #0
 8009c86:	d01f      	beq.n	8009cc8 <__multiply+0xe4>
 8009c88:	46c4      	mov	ip, r8
 8009c8a:	46a1      	mov	r9, r4
 8009c8c:	2700      	movs	r7, #0
 8009c8e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009c92:	f8d9 3000 	ldr.w	r3, [r9]
 8009c96:	fa1f fb82 	uxth.w	fp, r2
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009ca0:	443b      	add	r3, r7
 8009ca2:	f8d9 7000 	ldr.w	r7, [r9]
 8009ca6:	0c12      	lsrs	r2, r2, #16
 8009ca8:	0c3f      	lsrs	r7, r7, #16
 8009caa:	fb0a 7202 	mla	r2, sl, r2, r7
 8009cae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cb8:	4565      	cmp	r5, ip
 8009cba:	f849 3b04 	str.w	r3, [r9], #4
 8009cbe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009cc2:	d8e4      	bhi.n	8009c8e <__multiply+0xaa>
 8009cc4:	9b01      	ldr	r3, [sp, #4]
 8009cc6:	50e7      	str	r7, [r4, r3]
 8009cc8:	9b03      	ldr	r3, [sp, #12]
 8009cca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009cce:	3104      	adds	r1, #4
 8009cd0:	f1b9 0f00 	cmp.w	r9, #0
 8009cd4:	d020      	beq.n	8009d18 <__multiply+0x134>
 8009cd6:	6823      	ldr	r3, [r4, #0]
 8009cd8:	4647      	mov	r7, r8
 8009cda:	46a4      	mov	ip, r4
 8009cdc:	f04f 0a00 	mov.w	sl, #0
 8009ce0:	f8b7 b000 	ldrh.w	fp, [r7]
 8009ce4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009ce8:	fb09 220b 	mla	r2, r9, fp, r2
 8009cec:	4452      	add	r2, sl
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cf4:	f84c 3b04 	str.w	r3, [ip], #4
 8009cf8:	f857 3b04 	ldr.w	r3, [r7], #4
 8009cfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d00:	f8bc 3000 	ldrh.w	r3, [ip]
 8009d04:	fb09 330a 	mla	r3, r9, sl, r3
 8009d08:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009d0c:	42bd      	cmp	r5, r7
 8009d0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d12:	d8e5      	bhi.n	8009ce0 <__multiply+0xfc>
 8009d14:	9a01      	ldr	r2, [sp, #4]
 8009d16:	50a3      	str	r3, [r4, r2]
 8009d18:	3404      	adds	r4, #4
 8009d1a:	e79f      	b.n	8009c5c <__multiply+0x78>
 8009d1c:	3e01      	subs	r6, #1
 8009d1e:	e7a1      	b.n	8009c64 <__multiply+0x80>
 8009d20:	0800cca8 	.word	0x0800cca8
 8009d24:	0800ccb9 	.word	0x0800ccb9

08009d28 <__pow5mult>:
 8009d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d2c:	4615      	mov	r5, r2
 8009d2e:	f012 0203 	ands.w	r2, r2, #3
 8009d32:	4607      	mov	r7, r0
 8009d34:	460e      	mov	r6, r1
 8009d36:	d007      	beq.n	8009d48 <__pow5mult+0x20>
 8009d38:	4c25      	ldr	r4, [pc, #148]	@ (8009dd0 <__pow5mult+0xa8>)
 8009d3a:	3a01      	subs	r2, #1
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d42:	f7ff fea7 	bl	8009a94 <__multadd>
 8009d46:	4606      	mov	r6, r0
 8009d48:	10ad      	asrs	r5, r5, #2
 8009d4a:	d03d      	beq.n	8009dc8 <__pow5mult+0xa0>
 8009d4c:	69fc      	ldr	r4, [r7, #28]
 8009d4e:	b97c      	cbnz	r4, 8009d70 <__pow5mult+0x48>
 8009d50:	2010      	movs	r0, #16
 8009d52:	f7ff fd87 	bl	8009864 <malloc>
 8009d56:	4602      	mov	r2, r0
 8009d58:	61f8      	str	r0, [r7, #28]
 8009d5a:	b928      	cbnz	r0, 8009d68 <__pow5mult+0x40>
 8009d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8009dd4 <__pow5mult+0xac>)
 8009d5e:	481e      	ldr	r0, [pc, #120]	@ (8009dd8 <__pow5mult+0xb0>)
 8009d60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009d64:	f000 fafc 	bl	800a360 <__assert_func>
 8009d68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d6c:	6004      	str	r4, [r0, #0]
 8009d6e:	60c4      	str	r4, [r0, #12]
 8009d70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009d74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d78:	b94c      	cbnz	r4, 8009d8e <__pow5mult+0x66>
 8009d7a:	f240 2171 	movw	r1, #625	@ 0x271
 8009d7e:	4638      	mov	r0, r7
 8009d80:	f7ff ff1a 	bl	8009bb8 <__i2b>
 8009d84:	2300      	movs	r3, #0
 8009d86:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	6003      	str	r3, [r0, #0]
 8009d8e:	f04f 0900 	mov.w	r9, #0
 8009d92:	07eb      	lsls	r3, r5, #31
 8009d94:	d50a      	bpl.n	8009dac <__pow5mult+0x84>
 8009d96:	4631      	mov	r1, r6
 8009d98:	4622      	mov	r2, r4
 8009d9a:	4638      	mov	r0, r7
 8009d9c:	f7ff ff22 	bl	8009be4 <__multiply>
 8009da0:	4631      	mov	r1, r6
 8009da2:	4680      	mov	r8, r0
 8009da4:	4638      	mov	r0, r7
 8009da6:	f7ff fe53 	bl	8009a50 <_Bfree>
 8009daa:	4646      	mov	r6, r8
 8009dac:	106d      	asrs	r5, r5, #1
 8009dae:	d00b      	beq.n	8009dc8 <__pow5mult+0xa0>
 8009db0:	6820      	ldr	r0, [r4, #0]
 8009db2:	b938      	cbnz	r0, 8009dc4 <__pow5mult+0x9c>
 8009db4:	4622      	mov	r2, r4
 8009db6:	4621      	mov	r1, r4
 8009db8:	4638      	mov	r0, r7
 8009dba:	f7ff ff13 	bl	8009be4 <__multiply>
 8009dbe:	6020      	str	r0, [r4, #0]
 8009dc0:	f8c0 9000 	str.w	r9, [r0]
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	e7e4      	b.n	8009d92 <__pow5mult+0x6a>
 8009dc8:	4630      	mov	r0, r6
 8009dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dce:	bf00      	nop
 8009dd0:	0800cd80 	.word	0x0800cd80
 8009dd4:	0800cc39 	.word	0x0800cc39
 8009dd8:	0800ccb9 	.word	0x0800ccb9

08009ddc <__lshift>:
 8009ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de0:	460c      	mov	r4, r1
 8009de2:	6849      	ldr	r1, [r1, #4]
 8009de4:	6923      	ldr	r3, [r4, #16]
 8009de6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009dea:	68a3      	ldr	r3, [r4, #8]
 8009dec:	4607      	mov	r7, r0
 8009dee:	4691      	mov	r9, r2
 8009df0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009df4:	f108 0601 	add.w	r6, r8, #1
 8009df8:	42b3      	cmp	r3, r6
 8009dfa:	db0b      	blt.n	8009e14 <__lshift+0x38>
 8009dfc:	4638      	mov	r0, r7
 8009dfe:	f7ff fde7 	bl	80099d0 <_Balloc>
 8009e02:	4605      	mov	r5, r0
 8009e04:	b948      	cbnz	r0, 8009e1a <__lshift+0x3e>
 8009e06:	4602      	mov	r2, r0
 8009e08:	4b28      	ldr	r3, [pc, #160]	@ (8009eac <__lshift+0xd0>)
 8009e0a:	4829      	ldr	r0, [pc, #164]	@ (8009eb0 <__lshift+0xd4>)
 8009e0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009e10:	f000 faa6 	bl	800a360 <__assert_func>
 8009e14:	3101      	adds	r1, #1
 8009e16:	005b      	lsls	r3, r3, #1
 8009e18:	e7ee      	b.n	8009df8 <__lshift+0x1c>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f100 0114 	add.w	r1, r0, #20
 8009e20:	f100 0210 	add.w	r2, r0, #16
 8009e24:	4618      	mov	r0, r3
 8009e26:	4553      	cmp	r3, sl
 8009e28:	db33      	blt.n	8009e92 <__lshift+0xb6>
 8009e2a:	6920      	ldr	r0, [r4, #16]
 8009e2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e30:	f104 0314 	add.w	r3, r4, #20
 8009e34:	f019 091f 	ands.w	r9, r9, #31
 8009e38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e40:	d02b      	beq.n	8009e9a <__lshift+0xbe>
 8009e42:	f1c9 0e20 	rsb	lr, r9, #32
 8009e46:	468a      	mov	sl, r1
 8009e48:	2200      	movs	r2, #0
 8009e4a:	6818      	ldr	r0, [r3, #0]
 8009e4c:	fa00 f009 	lsl.w	r0, r0, r9
 8009e50:	4310      	orrs	r0, r2
 8009e52:	f84a 0b04 	str.w	r0, [sl], #4
 8009e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e5a:	459c      	cmp	ip, r3
 8009e5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e60:	d8f3      	bhi.n	8009e4a <__lshift+0x6e>
 8009e62:	ebac 0304 	sub.w	r3, ip, r4
 8009e66:	3b15      	subs	r3, #21
 8009e68:	f023 0303 	bic.w	r3, r3, #3
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	f104 0015 	add.w	r0, r4, #21
 8009e72:	4560      	cmp	r0, ip
 8009e74:	bf88      	it	hi
 8009e76:	2304      	movhi	r3, #4
 8009e78:	50ca      	str	r2, [r1, r3]
 8009e7a:	b10a      	cbz	r2, 8009e80 <__lshift+0xa4>
 8009e7c:	f108 0602 	add.w	r6, r8, #2
 8009e80:	3e01      	subs	r6, #1
 8009e82:	4638      	mov	r0, r7
 8009e84:	612e      	str	r6, [r5, #16]
 8009e86:	4621      	mov	r1, r4
 8009e88:	f7ff fde2 	bl	8009a50 <_Bfree>
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e92:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e96:	3301      	adds	r3, #1
 8009e98:	e7c5      	b.n	8009e26 <__lshift+0x4a>
 8009e9a:	3904      	subs	r1, #4
 8009e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ea4:	459c      	cmp	ip, r3
 8009ea6:	d8f9      	bhi.n	8009e9c <__lshift+0xc0>
 8009ea8:	e7ea      	b.n	8009e80 <__lshift+0xa4>
 8009eaa:	bf00      	nop
 8009eac:	0800cca8 	.word	0x0800cca8
 8009eb0:	0800ccb9 	.word	0x0800ccb9

08009eb4 <__mcmp>:
 8009eb4:	690a      	ldr	r2, [r1, #16]
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	6900      	ldr	r0, [r0, #16]
 8009eba:	1a80      	subs	r0, r0, r2
 8009ebc:	b530      	push	{r4, r5, lr}
 8009ebe:	d10e      	bne.n	8009ede <__mcmp+0x2a>
 8009ec0:	3314      	adds	r3, #20
 8009ec2:	3114      	adds	r1, #20
 8009ec4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ec8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ecc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ed0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ed4:	4295      	cmp	r5, r2
 8009ed6:	d003      	beq.n	8009ee0 <__mcmp+0x2c>
 8009ed8:	d205      	bcs.n	8009ee6 <__mcmp+0x32>
 8009eda:	f04f 30ff 	mov.w	r0, #4294967295
 8009ede:	bd30      	pop	{r4, r5, pc}
 8009ee0:	42a3      	cmp	r3, r4
 8009ee2:	d3f3      	bcc.n	8009ecc <__mcmp+0x18>
 8009ee4:	e7fb      	b.n	8009ede <__mcmp+0x2a>
 8009ee6:	2001      	movs	r0, #1
 8009ee8:	e7f9      	b.n	8009ede <__mcmp+0x2a>
	...

08009eec <__mdiff>:
 8009eec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef0:	4689      	mov	r9, r1
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	4611      	mov	r1, r2
 8009ef6:	4648      	mov	r0, r9
 8009ef8:	4614      	mov	r4, r2
 8009efa:	f7ff ffdb 	bl	8009eb4 <__mcmp>
 8009efe:	1e05      	subs	r5, r0, #0
 8009f00:	d112      	bne.n	8009f28 <__mdiff+0x3c>
 8009f02:	4629      	mov	r1, r5
 8009f04:	4630      	mov	r0, r6
 8009f06:	f7ff fd63 	bl	80099d0 <_Balloc>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	b928      	cbnz	r0, 8009f1a <__mdiff+0x2e>
 8009f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800a00c <__mdiff+0x120>)
 8009f10:	f240 2137 	movw	r1, #567	@ 0x237
 8009f14:	483e      	ldr	r0, [pc, #248]	@ (800a010 <__mdiff+0x124>)
 8009f16:	f000 fa23 	bl	800a360 <__assert_func>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f20:	4610      	mov	r0, r2
 8009f22:	b003      	add	sp, #12
 8009f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f28:	bfbc      	itt	lt
 8009f2a:	464b      	movlt	r3, r9
 8009f2c:	46a1      	movlt	r9, r4
 8009f2e:	4630      	mov	r0, r6
 8009f30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009f34:	bfba      	itte	lt
 8009f36:	461c      	movlt	r4, r3
 8009f38:	2501      	movlt	r5, #1
 8009f3a:	2500      	movge	r5, #0
 8009f3c:	f7ff fd48 	bl	80099d0 <_Balloc>
 8009f40:	4602      	mov	r2, r0
 8009f42:	b918      	cbnz	r0, 8009f4c <__mdiff+0x60>
 8009f44:	4b31      	ldr	r3, [pc, #196]	@ (800a00c <__mdiff+0x120>)
 8009f46:	f240 2145 	movw	r1, #581	@ 0x245
 8009f4a:	e7e3      	b.n	8009f14 <__mdiff+0x28>
 8009f4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009f50:	6926      	ldr	r6, [r4, #16]
 8009f52:	60c5      	str	r5, [r0, #12]
 8009f54:	f109 0310 	add.w	r3, r9, #16
 8009f58:	f109 0514 	add.w	r5, r9, #20
 8009f5c:	f104 0e14 	add.w	lr, r4, #20
 8009f60:	f100 0b14 	add.w	fp, r0, #20
 8009f64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009f68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009f6c:	9301      	str	r3, [sp, #4]
 8009f6e:	46d9      	mov	r9, fp
 8009f70:	f04f 0c00 	mov.w	ip, #0
 8009f74:	9b01      	ldr	r3, [sp, #4]
 8009f76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009f7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009f7e:	9301      	str	r3, [sp, #4]
 8009f80:	fa1f f38a 	uxth.w	r3, sl
 8009f84:	4619      	mov	r1, r3
 8009f86:	b283      	uxth	r3, r0
 8009f88:	1acb      	subs	r3, r1, r3
 8009f8a:	0c00      	lsrs	r0, r0, #16
 8009f8c:	4463      	add	r3, ip
 8009f8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009f92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009f9c:	4576      	cmp	r6, lr
 8009f9e:	f849 3b04 	str.w	r3, [r9], #4
 8009fa2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009fa6:	d8e5      	bhi.n	8009f74 <__mdiff+0x88>
 8009fa8:	1b33      	subs	r3, r6, r4
 8009faa:	3b15      	subs	r3, #21
 8009fac:	f023 0303 	bic.w	r3, r3, #3
 8009fb0:	3415      	adds	r4, #21
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	42a6      	cmp	r6, r4
 8009fb6:	bf38      	it	cc
 8009fb8:	2304      	movcc	r3, #4
 8009fba:	441d      	add	r5, r3
 8009fbc:	445b      	add	r3, fp
 8009fbe:	461e      	mov	r6, r3
 8009fc0:	462c      	mov	r4, r5
 8009fc2:	4544      	cmp	r4, r8
 8009fc4:	d30e      	bcc.n	8009fe4 <__mdiff+0xf8>
 8009fc6:	f108 0103 	add.w	r1, r8, #3
 8009fca:	1b49      	subs	r1, r1, r5
 8009fcc:	f021 0103 	bic.w	r1, r1, #3
 8009fd0:	3d03      	subs	r5, #3
 8009fd2:	45a8      	cmp	r8, r5
 8009fd4:	bf38      	it	cc
 8009fd6:	2100      	movcc	r1, #0
 8009fd8:	440b      	add	r3, r1
 8009fda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009fde:	b191      	cbz	r1, 800a006 <__mdiff+0x11a>
 8009fe0:	6117      	str	r7, [r2, #16]
 8009fe2:	e79d      	b.n	8009f20 <__mdiff+0x34>
 8009fe4:	f854 1b04 	ldr.w	r1, [r4], #4
 8009fe8:	46e6      	mov	lr, ip
 8009fea:	0c08      	lsrs	r0, r1, #16
 8009fec:	fa1c fc81 	uxtah	ip, ip, r1
 8009ff0:	4471      	add	r1, lr
 8009ff2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ff6:	b289      	uxth	r1, r1
 8009ff8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ffc:	f846 1b04 	str.w	r1, [r6], #4
 800a000:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a004:	e7dd      	b.n	8009fc2 <__mdiff+0xd6>
 800a006:	3f01      	subs	r7, #1
 800a008:	e7e7      	b.n	8009fda <__mdiff+0xee>
 800a00a:	bf00      	nop
 800a00c:	0800cca8 	.word	0x0800cca8
 800a010:	0800ccb9 	.word	0x0800ccb9

0800a014 <__d2b>:
 800a014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a018:	460f      	mov	r7, r1
 800a01a:	2101      	movs	r1, #1
 800a01c:	ec59 8b10 	vmov	r8, r9, d0
 800a020:	4616      	mov	r6, r2
 800a022:	f7ff fcd5 	bl	80099d0 <_Balloc>
 800a026:	4604      	mov	r4, r0
 800a028:	b930      	cbnz	r0, 800a038 <__d2b+0x24>
 800a02a:	4602      	mov	r2, r0
 800a02c:	4b23      	ldr	r3, [pc, #140]	@ (800a0bc <__d2b+0xa8>)
 800a02e:	4824      	ldr	r0, [pc, #144]	@ (800a0c0 <__d2b+0xac>)
 800a030:	f240 310f 	movw	r1, #783	@ 0x30f
 800a034:	f000 f994 	bl	800a360 <__assert_func>
 800a038:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a03c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a040:	b10d      	cbz	r5, 800a046 <__d2b+0x32>
 800a042:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a046:	9301      	str	r3, [sp, #4]
 800a048:	f1b8 0300 	subs.w	r3, r8, #0
 800a04c:	d023      	beq.n	800a096 <__d2b+0x82>
 800a04e:	4668      	mov	r0, sp
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	f7ff fd84 	bl	8009b5e <__lo0bits>
 800a056:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a05a:	b1d0      	cbz	r0, 800a092 <__d2b+0x7e>
 800a05c:	f1c0 0320 	rsb	r3, r0, #32
 800a060:	fa02 f303 	lsl.w	r3, r2, r3
 800a064:	430b      	orrs	r3, r1
 800a066:	40c2      	lsrs	r2, r0
 800a068:	6163      	str	r3, [r4, #20]
 800a06a:	9201      	str	r2, [sp, #4]
 800a06c:	9b01      	ldr	r3, [sp, #4]
 800a06e:	61a3      	str	r3, [r4, #24]
 800a070:	2b00      	cmp	r3, #0
 800a072:	bf0c      	ite	eq
 800a074:	2201      	moveq	r2, #1
 800a076:	2202      	movne	r2, #2
 800a078:	6122      	str	r2, [r4, #16]
 800a07a:	b1a5      	cbz	r5, 800a0a6 <__d2b+0x92>
 800a07c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a080:	4405      	add	r5, r0
 800a082:	603d      	str	r5, [r7, #0]
 800a084:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a088:	6030      	str	r0, [r6, #0]
 800a08a:	4620      	mov	r0, r4
 800a08c:	b003      	add	sp, #12
 800a08e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a092:	6161      	str	r1, [r4, #20]
 800a094:	e7ea      	b.n	800a06c <__d2b+0x58>
 800a096:	a801      	add	r0, sp, #4
 800a098:	f7ff fd61 	bl	8009b5e <__lo0bits>
 800a09c:	9b01      	ldr	r3, [sp, #4]
 800a09e:	6163      	str	r3, [r4, #20]
 800a0a0:	3020      	adds	r0, #32
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	e7e8      	b.n	800a078 <__d2b+0x64>
 800a0a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a0ae:	6038      	str	r0, [r7, #0]
 800a0b0:	6918      	ldr	r0, [r3, #16]
 800a0b2:	f7ff fd35 	bl	8009b20 <__hi0bits>
 800a0b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0ba:	e7e5      	b.n	800a088 <__d2b+0x74>
 800a0bc:	0800cca8 	.word	0x0800cca8
 800a0c0:	0800ccb9 	.word	0x0800ccb9

0800a0c4 <__sflush_r>:
 800a0c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0cc:	0716      	lsls	r6, r2, #28
 800a0ce:	4605      	mov	r5, r0
 800a0d0:	460c      	mov	r4, r1
 800a0d2:	d454      	bmi.n	800a17e <__sflush_r+0xba>
 800a0d4:	684b      	ldr	r3, [r1, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	dc02      	bgt.n	800a0e0 <__sflush_r+0x1c>
 800a0da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	dd48      	ble.n	800a172 <__sflush_r+0xae>
 800a0e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0e2:	2e00      	cmp	r6, #0
 800a0e4:	d045      	beq.n	800a172 <__sflush_r+0xae>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a0ec:	682f      	ldr	r7, [r5, #0]
 800a0ee:	6a21      	ldr	r1, [r4, #32]
 800a0f0:	602b      	str	r3, [r5, #0]
 800a0f2:	d030      	beq.n	800a156 <__sflush_r+0x92>
 800a0f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a0f6:	89a3      	ldrh	r3, [r4, #12]
 800a0f8:	0759      	lsls	r1, r3, #29
 800a0fa:	d505      	bpl.n	800a108 <__sflush_r+0x44>
 800a0fc:	6863      	ldr	r3, [r4, #4]
 800a0fe:	1ad2      	subs	r2, r2, r3
 800a100:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a102:	b10b      	cbz	r3, 800a108 <__sflush_r+0x44>
 800a104:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a106:	1ad2      	subs	r2, r2, r3
 800a108:	2300      	movs	r3, #0
 800a10a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a10c:	6a21      	ldr	r1, [r4, #32]
 800a10e:	4628      	mov	r0, r5
 800a110:	47b0      	blx	r6
 800a112:	1c43      	adds	r3, r0, #1
 800a114:	89a3      	ldrh	r3, [r4, #12]
 800a116:	d106      	bne.n	800a126 <__sflush_r+0x62>
 800a118:	6829      	ldr	r1, [r5, #0]
 800a11a:	291d      	cmp	r1, #29
 800a11c:	d82b      	bhi.n	800a176 <__sflush_r+0xb2>
 800a11e:	4a2a      	ldr	r2, [pc, #168]	@ (800a1c8 <__sflush_r+0x104>)
 800a120:	40ca      	lsrs	r2, r1
 800a122:	07d6      	lsls	r6, r2, #31
 800a124:	d527      	bpl.n	800a176 <__sflush_r+0xb2>
 800a126:	2200      	movs	r2, #0
 800a128:	6062      	str	r2, [r4, #4]
 800a12a:	04d9      	lsls	r1, r3, #19
 800a12c:	6922      	ldr	r2, [r4, #16]
 800a12e:	6022      	str	r2, [r4, #0]
 800a130:	d504      	bpl.n	800a13c <__sflush_r+0x78>
 800a132:	1c42      	adds	r2, r0, #1
 800a134:	d101      	bne.n	800a13a <__sflush_r+0x76>
 800a136:	682b      	ldr	r3, [r5, #0]
 800a138:	b903      	cbnz	r3, 800a13c <__sflush_r+0x78>
 800a13a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a13c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a13e:	602f      	str	r7, [r5, #0]
 800a140:	b1b9      	cbz	r1, 800a172 <__sflush_r+0xae>
 800a142:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a146:	4299      	cmp	r1, r3
 800a148:	d002      	beq.n	800a150 <__sflush_r+0x8c>
 800a14a:	4628      	mov	r0, r5
 800a14c:	f7ff fb40 	bl	80097d0 <_free_r>
 800a150:	2300      	movs	r3, #0
 800a152:	6363      	str	r3, [r4, #52]	@ 0x34
 800a154:	e00d      	b.n	800a172 <__sflush_r+0xae>
 800a156:	2301      	movs	r3, #1
 800a158:	4628      	mov	r0, r5
 800a15a:	47b0      	blx	r6
 800a15c:	4602      	mov	r2, r0
 800a15e:	1c50      	adds	r0, r2, #1
 800a160:	d1c9      	bne.n	800a0f6 <__sflush_r+0x32>
 800a162:	682b      	ldr	r3, [r5, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d0c6      	beq.n	800a0f6 <__sflush_r+0x32>
 800a168:	2b1d      	cmp	r3, #29
 800a16a:	d001      	beq.n	800a170 <__sflush_r+0xac>
 800a16c:	2b16      	cmp	r3, #22
 800a16e:	d11e      	bne.n	800a1ae <__sflush_r+0xea>
 800a170:	602f      	str	r7, [r5, #0]
 800a172:	2000      	movs	r0, #0
 800a174:	e022      	b.n	800a1bc <__sflush_r+0xf8>
 800a176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a17a:	b21b      	sxth	r3, r3
 800a17c:	e01b      	b.n	800a1b6 <__sflush_r+0xf2>
 800a17e:	690f      	ldr	r7, [r1, #16]
 800a180:	2f00      	cmp	r7, #0
 800a182:	d0f6      	beq.n	800a172 <__sflush_r+0xae>
 800a184:	0793      	lsls	r3, r2, #30
 800a186:	680e      	ldr	r6, [r1, #0]
 800a188:	bf08      	it	eq
 800a18a:	694b      	ldreq	r3, [r1, #20]
 800a18c:	600f      	str	r7, [r1, #0]
 800a18e:	bf18      	it	ne
 800a190:	2300      	movne	r3, #0
 800a192:	eba6 0807 	sub.w	r8, r6, r7
 800a196:	608b      	str	r3, [r1, #8]
 800a198:	f1b8 0f00 	cmp.w	r8, #0
 800a19c:	dde9      	ble.n	800a172 <__sflush_r+0xae>
 800a19e:	6a21      	ldr	r1, [r4, #32]
 800a1a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a1a2:	4643      	mov	r3, r8
 800a1a4:	463a      	mov	r2, r7
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	47b0      	blx	r6
 800a1aa:	2800      	cmp	r0, #0
 800a1ac:	dc08      	bgt.n	800a1c0 <__sflush_r+0xfc>
 800a1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1b6:	81a3      	strh	r3, [r4, #12]
 800a1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c0:	4407      	add	r7, r0
 800a1c2:	eba8 0800 	sub.w	r8, r8, r0
 800a1c6:	e7e7      	b.n	800a198 <__sflush_r+0xd4>
 800a1c8:	20400001 	.word	0x20400001

0800a1cc <_fflush_r>:
 800a1cc:	b538      	push	{r3, r4, r5, lr}
 800a1ce:	690b      	ldr	r3, [r1, #16]
 800a1d0:	4605      	mov	r5, r0
 800a1d2:	460c      	mov	r4, r1
 800a1d4:	b913      	cbnz	r3, 800a1dc <_fflush_r+0x10>
 800a1d6:	2500      	movs	r5, #0
 800a1d8:	4628      	mov	r0, r5
 800a1da:	bd38      	pop	{r3, r4, r5, pc}
 800a1dc:	b118      	cbz	r0, 800a1e6 <_fflush_r+0x1a>
 800a1de:	6a03      	ldr	r3, [r0, #32]
 800a1e0:	b90b      	cbnz	r3, 800a1e6 <_fflush_r+0x1a>
 800a1e2:	f7fe fb0f 	bl	8008804 <__sinit>
 800a1e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d0f3      	beq.n	800a1d6 <_fflush_r+0xa>
 800a1ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a1f0:	07d0      	lsls	r0, r2, #31
 800a1f2:	d404      	bmi.n	800a1fe <_fflush_r+0x32>
 800a1f4:	0599      	lsls	r1, r3, #22
 800a1f6:	d402      	bmi.n	800a1fe <_fflush_r+0x32>
 800a1f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1fa:	f7fe fc8e 	bl	8008b1a <__retarget_lock_acquire_recursive>
 800a1fe:	4628      	mov	r0, r5
 800a200:	4621      	mov	r1, r4
 800a202:	f7ff ff5f 	bl	800a0c4 <__sflush_r>
 800a206:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a208:	07da      	lsls	r2, r3, #31
 800a20a:	4605      	mov	r5, r0
 800a20c:	d4e4      	bmi.n	800a1d8 <_fflush_r+0xc>
 800a20e:	89a3      	ldrh	r3, [r4, #12]
 800a210:	059b      	lsls	r3, r3, #22
 800a212:	d4e1      	bmi.n	800a1d8 <_fflush_r+0xc>
 800a214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a216:	f7fe fc81 	bl	8008b1c <__retarget_lock_release_recursive>
 800a21a:	e7dd      	b.n	800a1d8 <_fflush_r+0xc>

0800a21c <__swhatbuf_r>:
 800a21c:	b570      	push	{r4, r5, r6, lr}
 800a21e:	460c      	mov	r4, r1
 800a220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a224:	2900      	cmp	r1, #0
 800a226:	b096      	sub	sp, #88	@ 0x58
 800a228:	4615      	mov	r5, r2
 800a22a:	461e      	mov	r6, r3
 800a22c:	da0d      	bge.n	800a24a <__swhatbuf_r+0x2e>
 800a22e:	89a3      	ldrh	r3, [r4, #12]
 800a230:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a234:	f04f 0100 	mov.w	r1, #0
 800a238:	bf14      	ite	ne
 800a23a:	2340      	movne	r3, #64	@ 0x40
 800a23c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a240:	2000      	movs	r0, #0
 800a242:	6031      	str	r1, [r6, #0]
 800a244:	602b      	str	r3, [r5, #0]
 800a246:	b016      	add	sp, #88	@ 0x58
 800a248:	bd70      	pop	{r4, r5, r6, pc}
 800a24a:	466a      	mov	r2, sp
 800a24c:	f000 f848 	bl	800a2e0 <_fstat_r>
 800a250:	2800      	cmp	r0, #0
 800a252:	dbec      	blt.n	800a22e <__swhatbuf_r+0x12>
 800a254:	9901      	ldr	r1, [sp, #4]
 800a256:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a25a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a25e:	4259      	negs	r1, r3
 800a260:	4159      	adcs	r1, r3
 800a262:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a266:	e7eb      	b.n	800a240 <__swhatbuf_r+0x24>

0800a268 <__smakebuf_r>:
 800a268:	898b      	ldrh	r3, [r1, #12]
 800a26a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a26c:	079d      	lsls	r5, r3, #30
 800a26e:	4606      	mov	r6, r0
 800a270:	460c      	mov	r4, r1
 800a272:	d507      	bpl.n	800a284 <__smakebuf_r+0x1c>
 800a274:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a278:	6023      	str	r3, [r4, #0]
 800a27a:	6123      	str	r3, [r4, #16]
 800a27c:	2301      	movs	r3, #1
 800a27e:	6163      	str	r3, [r4, #20]
 800a280:	b003      	add	sp, #12
 800a282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a284:	ab01      	add	r3, sp, #4
 800a286:	466a      	mov	r2, sp
 800a288:	f7ff ffc8 	bl	800a21c <__swhatbuf_r>
 800a28c:	9f00      	ldr	r7, [sp, #0]
 800a28e:	4605      	mov	r5, r0
 800a290:	4639      	mov	r1, r7
 800a292:	4630      	mov	r0, r6
 800a294:	f7ff fb10 	bl	80098b8 <_malloc_r>
 800a298:	b948      	cbnz	r0, 800a2ae <__smakebuf_r+0x46>
 800a29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a29e:	059a      	lsls	r2, r3, #22
 800a2a0:	d4ee      	bmi.n	800a280 <__smakebuf_r+0x18>
 800a2a2:	f023 0303 	bic.w	r3, r3, #3
 800a2a6:	f043 0302 	orr.w	r3, r3, #2
 800a2aa:	81a3      	strh	r3, [r4, #12]
 800a2ac:	e7e2      	b.n	800a274 <__smakebuf_r+0xc>
 800a2ae:	89a3      	ldrh	r3, [r4, #12]
 800a2b0:	6020      	str	r0, [r4, #0]
 800a2b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2b6:	81a3      	strh	r3, [r4, #12]
 800a2b8:	9b01      	ldr	r3, [sp, #4]
 800a2ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a2be:	b15b      	cbz	r3, 800a2d8 <__smakebuf_r+0x70>
 800a2c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	f000 f81d 	bl	800a304 <_isatty_r>
 800a2ca:	b128      	cbz	r0, 800a2d8 <__smakebuf_r+0x70>
 800a2cc:	89a3      	ldrh	r3, [r4, #12]
 800a2ce:	f023 0303 	bic.w	r3, r3, #3
 800a2d2:	f043 0301 	orr.w	r3, r3, #1
 800a2d6:	81a3      	strh	r3, [r4, #12]
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	431d      	orrs	r5, r3
 800a2dc:	81a5      	strh	r5, [r4, #12]
 800a2de:	e7cf      	b.n	800a280 <__smakebuf_r+0x18>

0800a2e0 <_fstat_r>:
 800a2e0:	b538      	push	{r3, r4, r5, lr}
 800a2e2:	4d07      	ldr	r5, [pc, #28]	@ (800a300 <_fstat_r+0x20>)
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	4608      	mov	r0, r1
 800a2ea:	4611      	mov	r1, r2
 800a2ec:	602b      	str	r3, [r5, #0]
 800a2ee:	f000 fb6c 	bl	800a9ca <_fstat>
 800a2f2:	1c43      	adds	r3, r0, #1
 800a2f4:	d102      	bne.n	800a2fc <_fstat_r+0x1c>
 800a2f6:	682b      	ldr	r3, [r5, #0]
 800a2f8:	b103      	cbz	r3, 800a2fc <_fstat_r+0x1c>
 800a2fa:	6023      	str	r3, [r4, #0]
 800a2fc:	bd38      	pop	{r3, r4, r5, pc}
 800a2fe:	bf00      	nop
 800a300:	20005578 	.word	0x20005578

0800a304 <_isatty_r>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	4d06      	ldr	r5, [pc, #24]	@ (800a320 <_isatty_r+0x1c>)
 800a308:	2300      	movs	r3, #0
 800a30a:	4604      	mov	r4, r0
 800a30c:	4608      	mov	r0, r1
 800a30e:	602b      	str	r3, [r5, #0]
 800a310:	f000 fc60 	bl	800abd4 <_isatty>
 800a314:	1c43      	adds	r3, r0, #1
 800a316:	d102      	bne.n	800a31e <_isatty_r+0x1a>
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	b103      	cbz	r3, 800a31e <_isatty_r+0x1a>
 800a31c:	6023      	str	r3, [r4, #0]
 800a31e:	bd38      	pop	{r3, r4, r5, pc}
 800a320:	20005578 	.word	0x20005578

0800a324 <_sbrk_r>:
 800a324:	b538      	push	{r3, r4, r5, lr}
 800a326:	4d06      	ldr	r5, [pc, #24]	@ (800a340 <_sbrk_r+0x1c>)
 800a328:	2300      	movs	r3, #0
 800a32a:	4604      	mov	r4, r0
 800a32c:	4608      	mov	r0, r1
 800a32e:	602b      	str	r3, [r5, #0]
 800a330:	f7f7 ffc6 	bl	80022c0 <_sbrk>
 800a334:	1c43      	adds	r3, r0, #1
 800a336:	d102      	bne.n	800a33e <_sbrk_r+0x1a>
 800a338:	682b      	ldr	r3, [r5, #0]
 800a33a:	b103      	cbz	r3, 800a33e <_sbrk_r+0x1a>
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	bd38      	pop	{r3, r4, r5, pc}
 800a340:	20005578 	.word	0x20005578

0800a344 <memcpy>:
 800a344:	440a      	add	r2, r1
 800a346:	4291      	cmp	r1, r2
 800a348:	f100 33ff 	add.w	r3, r0, #4294967295
 800a34c:	d100      	bne.n	800a350 <memcpy+0xc>
 800a34e:	4770      	bx	lr
 800a350:	b510      	push	{r4, lr}
 800a352:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a35a:	4291      	cmp	r1, r2
 800a35c:	d1f9      	bne.n	800a352 <memcpy+0xe>
 800a35e:	bd10      	pop	{r4, pc}

0800a360 <__assert_func>:
 800a360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a362:	4614      	mov	r4, r2
 800a364:	461a      	mov	r2, r3
 800a366:	4b09      	ldr	r3, [pc, #36]	@ (800a38c <__assert_func+0x2c>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4605      	mov	r5, r0
 800a36c:	68d8      	ldr	r0, [r3, #12]
 800a36e:	b14c      	cbz	r4, 800a384 <__assert_func+0x24>
 800a370:	4b07      	ldr	r3, [pc, #28]	@ (800a390 <__assert_func+0x30>)
 800a372:	9100      	str	r1, [sp, #0]
 800a374:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a378:	4906      	ldr	r1, [pc, #24]	@ (800a394 <__assert_func+0x34>)
 800a37a:	462b      	mov	r3, r5
 800a37c:	f000 f842 	bl	800a404 <fiprintf>
 800a380:	f000 f852 	bl	800a428 <abort>
 800a384:	4b04      	ldr	r3, [pc, #16]	@ (800a398 <__assert_func+0x38>)
 800a386:	461c      	mov	r4, r3
 800a388:	e7f3      	b.n	800a372 <__assert_func+0x12>
 800a38a:	bf00      	nop
 800a38c:	20000054 	.word	0x20000054
 800a390:	0800cd1c 	.word	0x0800cd1c
 800a394:	0800cd29 	.word	0x0800cd29
 800a398:	0800cd57 	.word	0x0800cd57

0800a39c <_calloc_r>:
 800a39c:	b570      	push	{r4, r5, r6, lr}
 800a39e:	fba1 5402 	umull	r5, r4, r1, r2
 800a3a2:	b934      	cbnz	r4, 800a3b2 <_calloc_r+0x16>
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	f7ff fa87 	bl	80098b8 <_malloc_r>
 800a3aa:	4606      	mov	r6, r0
 800a3ac:	b928      	cbnz	r0, 800a3ba <_calloc_r+0x1e>
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	bd70      	pop	{r4, r5, r6, pc}
 800a3b2:	220c      	movs	r2, #12
 800a3b4:	6002      	str	r2, [r0, #0]
 800a3b6:	2600      	movs	r6, #0
 800a3b8:	e7f9      	b.n	800a3ae <_calloc_r+0x12>
 800a3ba:	462a      	mov	r2, r5
 800a3bc:	4621      	mov	r1, r4
 800a3be:	f7fe fb2f 	bl	8008a20 <memset>
 800a3c2:	e7f4      	b.n	800a3ae <_calloc_r+0x12>

0800a3c4 <__ascii_mbtowc>:
 800a3c4:	b082      	sub	sp, #8
 800a3c6:	b901      	cbnz	r1, 800a3ca <__ascii_mbtowc+0x6>
 800a3c8:	a901      	add	r1, sp, #4
 800a3ca:	b142      	cbz	r2, 800a3de <__ascii_mbtowc+0x1a>
 800a3cc:	b14b      	cbz	r3, 800a3e2 <__ascii_mbtowc+0x1e>
 800a3ce:	7813      	ldrb	r3, [r2, #0]
 800a3d0:	600b      	str	r3, [r1, #0]
 800a3d2:	7812      	ldrb	r2, [r2, #0]
 800a3d4:	1e10      	subs	r0, r2, #0
 800a3d6:	bf18      	it	ne
 800a3d8:	2001      	movne	r0, #1
 800a3da:	b002      	add	sp, #8
 800a3dc:	4770      	bx	lr
 800a3de:	4610      	mov	r0, r2
 800a3e0:	e7fb      	b.n	800a3da <__ascii_mbtowc+0x16>
 800a3e2:	f06f 0001 	mvn.w	r0, #1
 800a3e6:	e7f8      	b.n	800a3da <__ascii_mbtowc+0x16>

0800a3e8 <__ascii_wctomb>:
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	4608      	mov	r0, r1
 800a3ec:	b141      	cbz	r1, 800a400 <__ascii_wctomb+0x18>
 800a3ee:	2aff      	cmp	r2, #255	@ 0xff
 800a3f0:	d904      	bls.n	800a3fc <__ascii_wctomb+0x14>
 800a3f2:	228a      	movs	r2, #138	@ 0x8a
 800a3f4:	601a      	str	r2, [r3, #0]
 800a3f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3fa:	4770      	bx	lr
 800a3fc:	700a      	strb	r2, [r1, #0]
 800a3fe:	2001      	movs	r0, #1
 800a400:	4770      	bx	lr
	...

0800a404 <fiprintf>:
 800a404:	b40e      	push	{r1, r2, r3}
 800a406:	b503      	push	{r0, r1, lr}
 800a408:	4601      	mov	r1, r0
 800a40a:	ab03      	add	r3, sp, #12
 800a40c:	4805      	ldr	r0, [pc, #20]	@ (800a424 <fiprintf+0x20>)
 800a40e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a412:	6800      	ldr	r0, [r0, #0]
 800a414:	9301      	str	r3, [sp, #4]
 800a416:	f000 f837 	bl	800a488 <_vfiprintf_r>
 800a41a:	b002      	add	sp, #8
 800a41c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a420:	b003      	add	sp, #12
 800a422:	4770      	bx	lr
 800a424:	20000054 	.word	0x20000054

0800a428 <abort>:
 800a428:	b508      	push	{r3, lr}
 800a42a:	2006      	movs	r0, #6
 800a42c:	f000 f96c 	bl	800a708 <raise>
 800a430:	2001      	movs	r0, #1
 800a432:	f000 f985 	bl	800a740 <_exit>

0800a436 <__sfputc_r>:
 800a436:	6893      	ldr	r3, [r2, #8]
 800a438:	3b01      	subs	r3, #1
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	b410      	push	{r4}
 800a43e:	6093      	str	r3, [r2, #8]
 800a440:	da08      	bge.n	800a454 <__sfputc_r+0x1e>
 800a442:	6994      	ldr	r4, [r2, #24]
 800a444:	42a3      	cmp	r3, r4
 800a446:	db01      	blt.n	800a44c <__sfputc_r+0x16>
 800a448:	290a      	cmp	r1, #10
 800a44a:	d103      	bne.n	800a454 <__sfputc_r+0x1e>
 800a44c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a450:	f7fe ba51 	b.w	80088f6 <__swbuf_r>
 800a454:	6813      	ldr	r3, [r2, #0]
 800a456:	1c58      	adds	r0, r3, #1
 800a458:	6010      	str	r0, [r2, #0]
 800a45a:	7019      	strb	r1, [r3, #0]
 800a45c:	4608      	mov	r0, r1
 800a45e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <__sfputs_r>:
 800a464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a466:	4606      	mov	r6, r0
 800a468:	460f      	mov	r7, r1
 800a46a:	4614      	mov	r4, r2
 800a46c:	18d5      	adds	r5, r2, r3
 800a46e:	42ac      	cmp	r4, r5
 800a470:	d101      	bne.n	800a476 <__sfputs_r+0x12>
 800a472:	2000      	movs	r0, #0
 800a474:	e007      	b.n	800a486 <__sfputs_r+0x22>
 800a476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a47a:	463a      	mov	r2, r7
 800a47c:	4630      	mov	r0, r6
 800a47e:	f7ff ffda 	bl	800a436 <__sfputc_r>
 800a482:	1c43      	adds	r3, r0, #1
 800a484:	d1f3      	bne.n	800a46e <__sfputs_r+0xa>
 800a486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a488 <_vfiprintf_r>:
 800a488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a48c:	460d      	mov	r5, r1
 800a48e:	b09d      	sub	sp, #116	@ 0x74
 800a490:	4614      	mov	r4, r2
 800a492:	4698      	mov	r8, r3
 800a494:	4606      	mov	r6, r0
 800a496:	b118      	cbz	r0, 800a4a0 <_vfiprintf_r+0x18>
 800a498:	6a03      	ldr	r3, [r0, #32]
 800a49a:	b90b      	cbnz	r3, 800a4a0 <_vfiprintf_r+0x18>
 800a49c:	f7fe f9b2 	bl	8008804 <__sinit>
 800a4a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4a2:	07d9      	lsls	r1, r3, #31
 800a4a4:	d405      	bmi.n	800a4b2 <_vfiprintf_r+0x2a>
 800a4a6:	89ab      	ldrh	r3, [r5, #12]
 800a4a8:	059a      	lsls	r2, r3, #22
 800a4aa:	d402      	bmi.n	800a4b2 <_vfiprintf_r+0x2a>
 800a4ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4ae:	f7fe fb34 	bl	8008b1a <__retarget_lock_acquire_recursive>
 800a4b2:	89ab      	ldrh	r3, [r5, #12]
 800a4b4:	071b      	lsls	r3, r3, #28
 800a4b6:	d501      	bpl.n	800a4bc <_vfiprintf_r+0x34>
 800a4b8:	692b      	ldr	r3, [r5, #16]
 800a4ba:	b99b      	cbnz	r3, 800a4e4 <_vfiprintf_r+0x5c>
 800a4bc:	4629      	mov	r1, r5
 800a4be:	4630      	mov	r0, r6
 800a4c0:	f7fe fa58 	bl	8008974 <__swsetup_r>
 800a4c4:	b170      	cbz	r0, 800a4e4 <_vfiprintf_r+0x5c>
 800a4c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4c8:	07dc      	lsls	r4, r3, #31
 800a4ca:	d504      	bpl.n	800a4d6 <_vfiprintf_r+0x4e>
 800a4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d0:	b01d      	add	sp, #116	@ 0x74
 800a4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d6:	89ab      	ldrh	r3, [r5, #12]
 800a4d8:	0598      	lsls	r0, r3, #22
 800a4da:	d4f7      	bmi.n	800a4cc <_vfiprintf_r+0x44>
 800a4dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4de:	f7fe fb1d 	bl	8008b1c <__retarget_lock_release_recursive>
 800a4e2:	e7f3      	b.n	800a4cc <_vfiprintf_r+0x44>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4e8:	2320      	movs	r3, #32
 800a4ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4f2:	2330      	movs	r3, #48	@ 0x30
 800a4f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a6a4 <_vfiprintf_r+0x21c>
 800a4f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4fc:	f04f 0901 	mov.w	r9, #1
 800a500:	4623      	mov	r3, r4
 800a502:	469a      	mov	sl, r3
 800a504:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a508:	b10a      	cbz	r2, 800a50e <_vfiprintf_r+0x86>
 800a50a:	2a25      	cmp	r2, #37	@ 0x25
 800a50c:	d1f9      	bne.n	800a502 <_vfiprintf_r+0x7a>
 800a50e:	ebba 0b04 	subs.w	fp, sl, r4
 800a512:	d00b      	beq.n	800a52c <_vfiprintf_r+0xa4>
 800a514:	465b      	mov	r3, fp
 800a516:	4622      	mov	r2, r4
 800a518:	4629      	mov	r1, r5
 800a51a:	4630      	mov	r0, r6
 800a51c:	f7ff ffa2 	bl	800a464 <__sfputs_r>
 800a520:	3001      	adds	r0, #1
 800a522:	f000 80a7 	beq.w	800a674 <_vfiprintf_r+0x1ec>
 800a526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a528:	445a      	add	r2, fp
 800a52a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a52c:	f89a 3000 	ldrb.w	r3, [sl]
 800a530:	2b00      	cmp	r3, #0
 800a532:	f000 809f 	beq.w	800a674 <_vfiprintf_r+0x1ec>
 800a536:	2300      	movs	r3, #0
 800a538:	f04f 32ff 	mov.w	r2, #4294967295
 800a53c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a540:	f10a 0a01 	add.w	sl, sl, #1
 800a544:	9304      	str	r3, [sp, #16]
 800a546:	9307      	str	r3, [sp, #28]
 800a548:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a54c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a54e:	4654      	mov	r4, sl
 800a550:	2205      	movs	r2, #5
 800a552:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a556:	4853      	ldr	r0, [pc, #332]	@ (800a6a4 <_vfiprintf_r+0x21c>)
 800a558:	f7f5 feba 	bl	80002d0 <memchr>
 800a55c:	9a04      	ldr	r2, [sp, #16]
 800a55e:	b9d8      	cbnz	r0, 800a598 <_vfiprintf_r+0x110>
 800a560:	06d1      	lsls	r1, r2, #27
 800a562:	bf44      	itt	mi
 800a564:	2320      	movmi	r3, #32
 800a566:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a56a:	0713      	lsls	r3, r2, #28
 800a56c:	bf44      	itt	mi
 800a56e:	232b      	movmi	r3, #43	@ 0x2b
 800a570:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a574:	f89a 3000 	ldrb.w	r3, [sl]
 800a578:	2b2a      	cmp	r3, #42	@ 0x2a
 800a57a:	d015      	beq.n	800a5a8 <_vfiprintf_r+0x120>
 800a57c:	9a07      	ldr	r2, [sp, #28]
 800a57e:	4654      	mov	r4, sl
 800a580:	2000      	movs	r0, #0
 800a582:	f04f 0c0a 	mov.w	ip, #10
 800a586:	4621      	mov	r1, r4
 800a588:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a58c:	3b30      	subs	r3, #48	@ 0x30
 800a58e:	2b09      	cmp	r3, #9
 800a590:	d94b      	bls.n	800a62a <_vfiprintf_r+0x1a2>
 800a592:	b1b0      	cbz	r0, 800a5c2 <_vfiprintf_r+0x13a>
 800a594:	9207      	str	r2, [sp, #28]
 800a596:	e014      	b.n	800a5c2 <_vfiprintf_r+0x13a>
 800a598:	eba0 0308 	sub.w	r3, r0, r8
 800a59c:	fa09 f303 	lsl.w	r3, r9, r3
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	9304      	str	r3, [sp, #16]
 800a5a4:	46a2      	mov	sl, r4
 800a5a6:	e7d2      	b.n	800a54e <_vfiprintf_r+0xc6>
 800a5a8:	9b03      	ldr	r3, [sp, #12]
 800a5aa:	1d19      	adds	r1, r3, #4
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	9103      	str	r1, [sp, #12]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	bfbb      	ittet	lt
 800a5b4:	425b      	neglt	r3, r3
 800a5b6:	f042 0202 	orrlt.w	r2, r2, #2
 800a5ba:	9307      	strge	r3, [sp, #28]
 800a5bc:	9307      	strlt	r3, [sp, #28]
 800a5be:	bfb8      	it	lt
 800a5c0:	9204      	strlt	r2, [sp, #16]
 800a5c2:	7823      	ldrb	r3, [r4, #0]
 800a5c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5c6:	d10a      	bne.n	800a5de <_vfiprintf_r+0x156>
 800a5c8:	7863      	ldrb	r3, [r4, #1]
 800a5ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5cc:	d132      	bne.n	800a634 <_vfiprintf_r+0x1ac>
 800a5ce:	9b03      	ldr	r3, [sp, #12]
 800a5d0:	1d1a      	adds	r2, r3, #4
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	9203      	str	r2, [sp, #12]
 800a5d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5da:	3402      	adds	r4, #2
 800a5dc:	9305      	str	r3, [sp, #20]
 800a5de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a6b4 <_vfiprintf_r+0x22c>
 800a5e2:	7821      	ldrb	r1, [r4, #0]
 800a5e4:	2203      	movs	r2, #3
 800a5e6:	4650      	mov	r0, sl
 800a5e8:	f7f5 fe72 	bl	80002d0 <memchr>
 800a5ec:	b138      	cbz	r0, 800a5fe <_vfiprintf_r+0x176>
 800a5ee:	9b04      	ldr	r3, [sp, #16]
 800a5f0:	eba0 000a 	sub.w	r0, r0, sl
 800a5f4:	2240      	movs	r2, #64	@ 0x40
 800a5f6:	4082      	lsls	r2, r0
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	3401      	adds	r4, #1
 800a5fc:	9304      	str	r3, [sp, #16]
 800a5fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a602:	4829      	ldr	r0, [pc, #164]	@ (800a6a8 <_vfiprintf_r+0x220>)
 800a604:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a608:	2206      	movs	r2, #6
 800a60a:	f7f5 fe61 	bl	80002d0 <memchr>
 800a60e:	2800      	cmp	r0, #0
 800a610:	d03f      	beq.n	800a692 <_vfiprintf_r+0x20a>
 800a612:	4b26      	ldr	r3, [pc, #152]	@ (800a6ac <_vfiprintf_r+0x224>)
 800a614:	bb1b      	cbnz	r3, 800a65e <_vfiprintf_r+0x1d6>
 800a616:	9b03      	ldr	r3, [sp, #12]
 800a618:	3307      	adds	r3, #7
 800a61a:	f023 0307 	bic.w	r3, r3, #7
 800a61e:	3308      	adds	r3, #8
 800a620:	9303      	str	r3, [sp, #12]
 800a622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a624:	443b      	add	r3, r7
 800a626:	9309      	str	r3, [sp, #36]	@ 0x24
 800a628:	e76a      	b.n	800a500 <_vfiprintf_r+0x78>
 800a62a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a62e:	460c      	mov	r4, r1
 800a630:	2001      	movs	r0, #1
 800a632:	e7a8      	b.n	800a586 <_vfiprintf_r+0xfe>
 800a634:	2300      	movs	r3, #0
 800a636:	3401      	adds	r4, #1
 800a638:	9305      	str	r3, [sp, #20]
 800a63a:	4619      	mov	r1, r3
 800a63c:	f04f 0c0a 	mov.w	ip, #10
 800a640:	4620      	mov	r0, r4
 800a642:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a646:	3a30      	subs	r2, #48	@ 0x30
 800a648:	2a09      	cmp	r2, #9
 800a64a:	d903      	bls.n	800a654 <_vfiprintf_r+0x1cc>
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d0c6      	beq.n	800a5de <_vfiprintf_r+0x156>
 800a650:	9105      	str	r1, [sp, #20]
 800a652:	e7c4      	b.n	800a5de <_vfiprintf_r+0x156>
 800a654:	fb0c 2101 	mla	r1, ip, r1, r2
 800a658:	4604      	mov	r4, r0
 800a65a:	2301      	movs	r3, #1
 800a65c:	e7f0      	b.n	800a640 <_vfiprintf_r+0x1b8>
 800a65e:	ab03      	add	r3, sp, #12
 800a660:	9300      	str	r3, [sp, #0]
 800a662:	462a      	mov	r2, r5
 800a664:	4b12      	ldr	r3, [pc, #72]	@ (800a6b0 <_vfiprintf_r+0x228>)
 800a666:	a904      	add	r1, sp, #16
 800a668:	4630      	mov	r0, r6
 800a66a:	f7fd fc89 	bl	8007f80 <_printf_float>
 800a66e:	4607      	mov	r7, r0
 800a670:	1c78      	adds	r0, r7, #1
 800a672:	d1d6      	bne.n	800a622 <_vfiprintf_r+0x19a>
 800a674:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a676:	07d9      	lsls	r1, r3, #31
 800a678:	d405      	bmi.n	800a686 <_vfiprintf_r+0x1fe>
 800a67a:	89ab      	ldrh	r3, [r5, #12]
 800a67c:	059a      	lsls	r2, r3, #22
 800a67e:	d402      	bmi.n	800a686 <_vfiprintf_r+0x1fe>
 800a680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a682:	f7fe fa4b 	bl	8008b1c <__retarget_lock_release_recursive>
 800a686:	89ab      	ldrh	r3, [r5, #12]
 800a688:	065b      	lsls	r3, r3, #25
 800a68a:	f53f af1f 	bmi.w	800a4cc <_vfiprintf_r+0x44>
 800a68e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a690:	e71e      	b.n	800a4d0 <_vfiprintf_r+0x48>
 800a692:	ab03      	add	r3, sp, #12
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	462a      	mov	r2, r5
 800a698:	4b05      	ldr	r3, [pc, #20]	@ (800a6b0 <_vfiprintf_r+0x228>)
 800a69a:	a904      	add	r1, sp, #16
 800a69c:	4630      	mov	r0, r6
 800a69e:	f7fd ff07 	bl	80084b0 <_printf_i>
 800a6a2:	e7e4      	b.n	800a66e <_vfiprintf_r+0x1e6>
 800a6a4:	0800cd58 	.word	0x0800cd58
 800a6a8:	0800cd62 	.word	0x0800cd62
 800a6ac:	08007f81 	.word	0x08007f81
 800a6b0:	0800a465 	.word	0x0800a465
 800a6b4:	0800cd5e 	.word	0x0800cd5e

0800a6b8 <_raise_r>:
 800a6b8:	291f      	cmp	r1, #31
 800a6ba:	b538      	push	{r3, r4, r5, lr}
 800a6bc:	4605      	mov	r5, r0
 800a6be:	460c      	mov	r4, r1
 800a6c0:	d904      	bls.n	800a6cc <_raise_r+0x14>
 800a6c2:	2316      	movs	r3, #22
 800a6c4:	6003      	str	r3, [r0, #0]
 800a6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ca:	bd38      	pop	{r3, r4, r5, pc}
 800a6cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a6ce:	b112      	cbz	r2, 800a6d6 <_raise_r+0x1e>
 800a6d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6d4:	b94b      	cbnz	r3, 800a6ea <_raise_r+0x32>
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	f000 f830 	bl	800a73c <_getpid_r>
 800a6dc:	4622      	mov	r2, r4
 800a6de:	4601      	mov	r1, r0
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6e6:	f000 b817 	b.w	800a718 <_kill_r>
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d00a      	beq.n	800a704 <_raise_r+0x4c>
 800a6ee:	1c59      	adds	r1, r3, #1
 800a6f0:	d103      	bne.n	800a6fa <_raise_r+0x42>
 800a6f2:	2316      	movs	r3, #22
 800a6f4:	6003      	str	r3, [r0, #0]
 800a6f6:	2001      	movs	r0, #1
 800a6f8:	e7e7      	b.n	800a6ca <_raise_r+0x12>
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a700:	4620      	mov	r0, r4
 800a702:	4798      	blx	r3
 800a704:	2000      	movs	r0, #0
 800a706:	e7e0      	b.n	800a6ca <_raise_r+0x12>

0800a708 <raise>:
 800a708:	4b02      	ldr	r3, [pc, #8]	@ (800a714 <raise+0xc>)
 800a70a:	4601      	mov	r1, r0
 800a70c:	6818      	ldr	r0, [r3, #0]
 800a70e:	f7ff bfd3 	b.w	800a6b8 <_raise_r>
 800a712:	bf00      	nop
 800a714:	20000054 	.word	0x20000054

0800a718 <_kill_r>:
 800a718:	b538      	push	{r3, r4, r5, lr}
 800a71a:	4d07      	ldr	r5, [pc, #28]	@ (800a738 <_kill_r+0x20>)
 800a71c:	2300      	movs	r3, #0
 800a71e:	4604      	mov	r4, r0
 800a720:	4608      	mov	r0, r1
 800a722:	4611      	mov	r1, r2
 800a724:	602b      	str	r3, [r5, #0]
 800a726:	f000 f829 	bl	800a77c <_kill>
 800a72a:	1c43      	adds	r3, r0, #1
 800a72c:	d102      	bne.n	800a734 <_kill_r+0x1c>
 800a72e:	682b      	ldr	r3, [r5, #0]
 800a730:	b103      	cbz	r3, 800a734 <_kill_r+0x1c>
 800a732:	6023      	str	r3, [r4, #0]
 800a734:	bd38      	pop	{r3, r4, r5, pc}
 800a736:	bf00      	nop
 800a738:	20005578 	.word	0x20005578

0800a73c <_getpid_r>:
 800a73c:	f000 b922 	b.w	800a984 <_getpid>

0800a740 <_exit>:
 800a740:	4601      	mov	r1, r0
 800a742:	b508      	push	{r3, lr}
 800a744:	4a02      	ldr	r2, [pc, #8]	@ (800a750 <_exit+0x10>)
 800a746:	f04f 30ff 	mov.w	r0, #4294967295
 800a74a:	f000 f803 	bl	800a754 <_kill_shared>
 800a74e:	bf00      	nop
 800a750:	00020026 	.word	0x00020026

0800a754 <_kill_shared>:
 800a754:	b507      	push	{r0, r1, r2, lr}
 800a756:	e9cd 2100 	strd	r2, r1, [sp]
 800a75a:	f000 fa2f 	bl	800abbc <_has_ext_exit_extended>
 800a75e:	2800      	cmp	r0, #0
 800a760:	bf0c      	ite	eq
 800a762:	2418      	moveq	r4, #24
 800a764:	2420      	movne	r4, #32
 800a766:	f000 fa29 	bl	800abbc <_has_ext_exit_extended>
 800a76a:	b120      	cbz	r0, 800a776 <_kill_shared+0x22>
 800a76c:	466d      	mov	r5, sp
 800a76e:	4620      	mov	r0, r4
 800a770:	4629      	mov	r1, r5
 800a772:	beab      	bkpt	0x00ab
 800a774:	4604      	mov	r4, r0
 800a776:	9d00      	ldr	r5, [sp, #0]
 800a778:	e7f9      	b.n	800a76e <_kill_shared+0x1a>
	...

0800a77c <_kill>:
 800a77c:	2906      	cmp	r1, #6
 800a77e:	b508      	push	{r3, lr}
 800a780:	bf0c      	ite	eq
 800a782:	4a02      	ldreq	r2, [pc, #8]	@ (800a78c <_kill+0x10>)
 800a784:	4a02      	ldrne	r2, [pc, #8]	@ (800a790 <_kill+0x14>)
 800a786:	f7ff ffe5 	bl	800a754 <_kill_shared>
 800a78a:	bf00      	nop
 800a78c:	00020023 	.word	0x00020023
 800a790:	00020026 	.word	0x00020026

0800a794 <findslot>:
 800a794:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c0 <findslot+0x2c>)
 800a796:	b510      	push	{r4, lr}
 800a798:	4604      	mov	r4, r0
 800a79a:	6818      	ldr	r0, [r3, #0]
 800a79c:	b118      	cbz	r0, 800a7a6 <findslot+0x12>
 800a79e:	6a03      	ldr	r3, [r0, #32]
 800a7a0:	b90b      	cbnz	r3, 800a7a6 <findslot+0x12>
 800a7a2:	f7fe f82f 	bl	8008804 <__sinit>
 800a7a6:	2c13      	cmp	r4, #19
 800a7a8:	d807      	bhi.n	800a7ba <findslot+0x26>
 800a7aa:	4806      	ldr	r0, [pc, #24]	@ (800a7c4 <findslot+0x30>)
 800a7ac:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800a7b0:	3201      	adds	r2, #1
 800a7b2:	d002      	beq.n	800a7ba <findslot+0x26>
 800a7b4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800a7b8:	bd10      	pop	{r4, pc}
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	e7fc      	b.n	800a7b8 <findslot+0x24>
 800a7be:	bf00      	nop
 800a7c0:	20000054 	.word	0x20000054
 800a7c4:	20005588 	.word	0x20005588

0800a7c8 <error>:
 800a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	f7fe f97a 	bl	8008ac4 <__errno>
 800a7d0:	2613      	movs	r6, #19
 800a7d2:	4605      	mov	r5, r0
 800a7d4:	2700      	movs	r7, #0
 800a7d6:	4630      	mov	r0, r6
 800a7d8:	4639      	mov	r1, r7
 800a7da:	beab      	bkpt	0x00ab
 800a7dc:	4606      	mov	r6, r0
 800a7de:	602e      	str	r6, [r5, #0]
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a7e4 <checkerror>:
 800a7e4:	1c43      	adds	r3, r0, #1
 800a7e6:	d101      	bne.n	800a7ec <checkerror+0x8>
 800a7e8:	f7ff bfee 	b.w	800a7c8 <error>
 800a7ec:	4770      	bx	lr

0800a7ee <_swiread>:
 800a7ee:	b530      	push	{r4, r5, lr}
 800a7f0:	b085      	sub	sp, #20
 800a7f2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800a7f6:	9203      	str	r2, [sp, #12]
 800a7f8:	2406      	movs	r4, #6
 800a7fa:	ad01      	add	r5, sp, #4
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	4629      	mov	r1, r5
 800a800:	beab      	bkpt	0x00ab
 800a802:	4604      	mov	r4, r0
 800a804:	4620      	mov	r0, r4
 800a806:	f7ff ffed 	bl	800a7e4 <checkerror>
 800a80a:	b005      	add	sp, #20
 800a80c:	bd30      	pop	{r4, r5, pc}

0800a80e <_read>:
 800a80e:	b570      	push	{r4, r5, r6, lr}
 800a810:	460e      	mov	r6, r1
 800a812:	4614      	mov	r4, r2
 800a814:	f7ff ffbe 	bl	800a794 <findslot>
 800a818:	4605      	mov	r5, r0
 800a81a:	b930      	cbnz	r0, 800a82a <_read+0x1c>
 800a81c:	f7fe f952 	bl	8008ac4 <__errno>
 800a820:	2309      	movs	r3, #9
 800a822:	6003      	str	r3, [r0, #0]
 800a824:	f04f 30ff 	mov.w	r0, #4294967295
 800a828:	bd70      	pop	{r4, r5, r6, pc}
 800a82a:	6800      	ldr	r0, [r0, #0]
 800a82c:	4622      	mov	r2, r4
 800a82e:	4631      	mov	r1, r6
 800a830:	f7ff ffdd 	bl	800a7ee <_swiread>
 800a834:	1c43      	adds	r3, r0, #1
 800a836:	d0f5      	beq.n	800a824 <_read+0x16>
 800a838:	686b      	ldr	r3, [r5, #4]
 800a83a:	1a20      	subs	r0, r4, r0
 800a83c:	4403      	add	r3, r0
 800a83e:	606b      	str	r3, [r5, #4]
 800a840:	e7f2      	b.n	800a828 <_read+0x1a>

0800a842 <_swilseek>:
 800a842:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a844:	460c      	mov	r4, r1
 800a846:	4616      	mov	r6, r2
 800a848:	f7ff ffa4 	bl	800a794 <findslot>
 800a84c:	4605      	mov	r5, r0
 800a84e:	b940      	cbnz	r0, 800a862 <_swilseek+0x20>
 800a850:	f7fe f938 	bl	8008ac4 <__errno>
 800a854:	2309      	movs	r3, #9
 800a856:	6003      	str	r3, [r0, #0]
 800a858:	f04f 34ff 	mov.w	r4, #4294967295
 800a85c:	4620      	mov	r0, r4
 800a85e:	b003      	add	sp, #12
 800a860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a862:	2e02      	cmp	r6, #2
 800a864:	d903      	bls.n	800a86e <_swilseek+0x2c>
 800a866:	f7fe f92d 	bl	8008ac4 <__errno>
 800a86a:	2316      	movs	r3, #22
 800a86c:	e7f3      	b.n	800a856 <_swilseek+0x14>
 800a86e:	2e01      	cmp	r6, #1
 800a870:	d112      	bne.n	800a898 <_swilseek+0x56>
 800a872:	6843      	ldr	r3, [r0, #4]
 800a874:	18e4      	adds	r4, r4, r3
 800a876:	d4f6      	bmi.n	800a866 <_swilseek+0x24>
 800a878:	682b      	ldr	r3, [r5, #0]
 800a87a:	260a      	movs	r6, #10
 800a87c:	e9cd 3400 	strd	r3, r4, [sp]
 800a880:	466f      	mov	r7, sp
 800a882:	4630      	mov	r0, r6
 800a884:	4639      	mov	r1, r7
 800a886:	beab      	bkpt	0x00ab
 800a888:	4606      	mov	r6, r0
 800a88a:	4630      	mov	r0, r6
 800a88c:	f7ff ffaa 	bl	800a7e4 <checkerror>
 800a890:	2800      	cmp	r0, #0
 800a892:	dbe1      	blt.n	800a858 <_swilseek+0x16>
 800a894:	606c      	str	r4, [r5, #4]
 800a896:	e7e1      	b.n	800a85c <_swilseek+0x1a>
 800a898:	2e02      	cmp	r6, #2
 800a89a:	6803      	ldr	r3, [r0, #0]
 800a89c:	d1ec      	bne.n	800a878 <_swilseek+0x36>
 800a89e:	9300      	str	r3, [sp, #0]
 800a8a0:	260c      	movs	r6, #12
 800a8a2:	466f      	mov	r7, sp
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	4639      	mov	r1, r7
 800a8a8:	beab      	bkpt	0x00ab
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	f7ff ff99 	bl	800a7e4 <checkerror>
 800a8b2:	1c43      	adds	r3, r0, #1
 800a8b4:	d0d0      	beq.n	800a858 <_swilseek+0x16>
 800a8b6:	4404      	add	r4, r0
 800a8b8:	e7de      	b.n	800a878 <_swilseek+0x36>

0800a8ba <_lseek>:
 800a8ba:	f7ff bfc2 	b.w	800a842 <_swilseek>

0800a8be <_swiwrite>:
 800a8be:	b530      	push	{r4, r5, lr}
 800a8c0:	b085      	sub	sp, #20
 800a8c2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800a8c6:	9203      	str	r2, [sp, #12]
 800a8c8:	2405      	movs	r4, #5
 800a8ca:	ad01      	add	r5, sp, #4
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	beab      	bkpt	0x00ab
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f7ff ff85 	bl	800a7e4 <checkerror>
 800a8da:	b005      	add	sp, #20
 800a8dc:	bd30      	pop	{r4, r5, pc}

0800a8de <_write>:
 800a8de:	b570      	push	{r4, r5, r6, lr}
 800a8e0:	460e      	mov	r6, r1
 800a8e2:	4615      	mov	r5, r2
 800a8e4:	f7ff ff56 	bl	800a794 <findslot>
 800a8e8:	4604      	mov	r4, r0
 800a8ea:	b930      	cbnz	r0, 800a8fa <_write+0x1c>
 800a8ec:	f7fe f8ea 	bl	8008ac4 <__errno>
 800a8f0:	2309      	movs	r3, #9
 800a8f2:	6003      	str	r3, [r0, #0]
 800a8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f8:	bd70      	pop	{r4, r5, r6, pc}
 800a8fa:	6800      	ldr	r0, [r0, #0]
 800a8fc:	462a      	mov	r2, r5
 800a8fe:	4631      	mov	r1, r6
 800a900:	f7ff ffdd 	bl	800a8be <_swiwrite>
 800a904:	1e03      	subs	r3, r0, #0
 800a906:	dbf5      	blt.n	800a8f4 <_write+0x16>
 800a908:	6862      	ldr	r2, [r4, #4]
 800a90a:	1ae8      	subs	r0, r5, r3
 800a90c:	4402      	add	r2, r0
 800a90e:	42ab      	cmp	r3, r5
 800a910:	6062      	str	r2, [r4, #4]
 800a912:	d1f1      	bne.n	800a8f8 <_write+0x1a>
 800a914:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a918:	2000      	movs	r0, #0
 800a91a:	f7ff bf55 	b.w	800a7c8 <error>

0800a91e <_swiclose>:
 800a91e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a920:	2402      	movs	r4, #2
 800a922:	9001      	str	r0, [sp, #4]
 800a924:	ad01      	add	r5, sp, #4
 800a926:	4620      	mov	r0, r4
 800a928:	4629      	mov	r1, r5
 800a92a:	beab      	bkpt	0x00ab
 800a92c:	4604      	mov	r4, r0
 800a92e:	4620      	mov	r0, r4
 800a930:	f7ff ff58 	bl	800a7e4 <checkerror>
 800a934:	b003      	add	sp, #12
 800a936:	bd30      	pop	{r4, r5, pc}

0800a938 <_close>:
 800a938:	b538      	push	{r3, r4, r5, lr}
 800a93a:	4605      	mov	r5, r0
 800a93c:	f7ff ff2a 	bl	800a794 <findslot>
 800a940:	4604      	mov	r4, r0
 800a942:	b930      	cbnz	r0, 800a952 <_close+0x1a>
 800a944:	f7fe f8be 	bl	8008ac4 <__errno>
 800a948:	2309      	movs	r3, #9
 800a94a:	6003      	str	r3, [r0, #0]
 800a94c:	f04f 30ff 	mov.w	r0, #4294967295
 800a950:	bd38      	pop	{r3, r4, r5, pc}
 800a952:	3d01      	subs	r5, #1
 800a954:	2d01      	cmp	r5, #1
 800a956:	d809      	bhi.n	800a96c <_close+0x34>
 800a958:	4b09      	ldr	r3, [pc, #36]	@ (800a980 <_close+0x48>)
 800a95a:	689a      	ldr	r2, [r3, #8]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d104      	bne.n	800a96c <_close+0x34>
 800a962:	f04f 33ff 	mov.w	r3, #4294967295
 800a966:	6003      	str	r3, [r0, #0]
 800a968:	2000      	movs	r0, #0
 800a96a:	e7f1      	b.n	800a950 <_close+0x18>
 800a96c:	6820      	ldr	r0, [r4, #0]
 800a96e:	f7ff ffd6 	bl	800a91e <_swiclose>
 800a972:	2800      	cmp	r0, #0
 800a974:	d1ec      	bne.n	800a950 <_close+0x18>
 800a976:	f04f 33ff 	mov.w	r3, #4294967295
 800a97a:	6023      	str	r3, [r4, #0]
 800a97c:	e7e8      	b.n	800a950 <_close+0x18>
 800a97e:	bf00      	nop
 800a980:	20005588 	.word	0x20005588

0800a984 <_getpid>:
 800a984:	2001      	movs	r0, #1
 800a986:	4770      	bx	lr

0800a988 <_swistat>:
 800a988:	b570      	push	{r4, r5, r6, lr}
 800a98a:	460c      	mov	r4, r1
 800a98c:	f7ff ff02 	bl	800a794 <findslot>
 800a990:	4605      	mov	r5, r0
 800a992:	b930      	cbnz	r0, 800a9a2 <_swistat+0x1a>
 800a994:	f7fe f896 	bl	8008ac4 <__errno>
 800a998:	2309      	movs	r3, #9
 800a99a:	6003      	str	r3, [r0, #0]
 800a99c:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a0:	bd70      	pop	{r4, r5, r6, pc}
 800a9a2:	6863      	ldr	r3, [r4, #4]
 800a9a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a9a8:	6063      	str	r3, [r4, #4]
 800a9aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9ae:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a9b0:	260c      	movs	r6, #12
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	beab      	bkpt	0x00ab
 800a9b8:	4605      	mov	r5, r0
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	f7ff ff12 	bl	800a7e4 <checkerror>
 800a9c0:	1c43      	adds	r3, r0, #1
 800a9c2:	d0eb      	beq.n	800a99c <_swistat+0x14>
 800a9c4:	6120      	str	r0, [r4, #16]
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	e7ea      	b.n	800a9a0 <_swistat+0x18>

0800a9ca <_fstat>:
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	b510      	push	{r4, lr}
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	2258      	movs	r2, #88	@ 0x58
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7fe f823 	bl	8008a20 <memset>
 800a9da:	4601      	mov	r1, r0
 800a9dc:	4620      	mov	r0, r4
 800a9de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9e2:	f7ff bfd1 	b.w	800a988 <_swistat>

0800a9e6 <_stat>:
 800a9e6:	b538      	push	{r3, r4, r5, lr}
 800a9e8:	460d      	mov	r5, r1
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	2258      	movs	r2, #88	@ 0x58
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	f7fe f815 	bl	8008a20 <memset>
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	2100      	movs	r1, #0
 800a9fa:	f000 f811 	bl	800aa20 <_swiopen>
 800a9fe:	1c43      	adds	r3, r0, #1
 800aa00:	4604      	mov	r4, r0
 800aa02:	d00b      	beq.n	800aa1c <_stat+0x36>
 800aa04:	686b      	ldr	r3, [r5, #4]
 800aa06:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800aa0a:	606b      	str	r3, [r5, #4]
 800aa0c:	4629      	mov	r1, r5
 800aa0e:	f7ff ffbb 	bl	800a988 <_swistat>
 800aa12:	4605      	mov	r5, r0
 800aa14:	4620      	mov	r0, r4
 800aa16:	f7ff ff8f 	bl	800a938 <_close>
 800aa1a:	462c      	mov	r4, r5
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	bd38      	pop	{r3, r4, r5, pc}

0800aa20 <_swiopen>:
 800aa20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa24:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 800aad0 <_swiopen+0xb0>
 800aa28:	b096      	sub	sp, #88	@ 0x58
 800aa2a:	4607      	mov	r7, r0
 800aa2c:	460e      	mov	r6, r1
 800aa2e:	2400      	movs	r4, #0
 800aa30:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 800aa34:	3301      	adds	r3, #1
 800aa36:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800aa3a:	d032      	beq.n	800aaa2 <_swiopen+0x82>
 800aa3c:	3401      	adds	r4, #1
 800aa3e:	2c14      	cmp	r4, #20
 800aa40:	d1f6      	bne.n	800aa30 <_swiopen+0x10>
 800aa42:	f7fe f83f 	bl	8008ac4 <__errno>
 800aa46:	2318      	movs	r3, #24
 800aa48:	e03a      	b.n	800aac0 <_swiopen+0xa0>
 800aa4a:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800aa4e:	f240 6301 	movw	r3, #1537	@ 0x601
 800aa52:	07b2      	lsls	r2, r6, #30
 800aa54:	bf48      	it	mi
 800aa56:	f045 0502 	orrmi.w	r5, r5, #2
 800aa5a:	421e      	tst	r6, r3
 800aa5c:	bf18      	it	ne
 800aa5e:	f045 0504 	orrne.w	r5, r5, #4
 800aa62:	0733      	lsls	r3, r6, #28
 800aa64:	bf48      	it	mi
 800aa66:	f025 0504 	bicmi.w	r5, r5, #4
 800aa6a:	4638      	mov	r0, r7
 800aa6c:	bf48      	it	mi
 800aa6e:	f045 0508 	orrmi.w	r5, r5, #8
 800aa72:	9700      	str	r7, [sp, #0]
 800aa74:	f7f5 fc7c 	bl	8000370 <strlen>
 800aa78:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800aa7c:	2501      	movs	r5, #1
 800aa7e:	4628      	mov	r0, r5
 800aa80:	4651      	mov	r1, sl
 800aa82:	beab      	bkpt	0x00ab
 800aa84:	4605      	mov	r5, r0
 800aa86:	2d00      	cmp	r5, #0
 800aa88:	db06      	blt.n	800aa98 <_swiopen+0x78>
 800aa8a:	44c8      	add	r8, r9
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 800aa92:	f8c8 3004 	str.w	r3, [r8, #4]
 800aa96:	e016      	b.n	800aac6 <_swiopen+0xa6>
 800aa98:	4628      	mov	r0, r5
 800aa9a:	f7ff fe95 	bl	800a7c8 <error>
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	e011      	b.n	800aac6 <_swiopen+0xa6>
 800aaa2:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800aaa6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800aaaa:	46ea      	mov	sl, sp
 800aaac:	d1cd      	bne.n	800aa4a <_swiopen+0x2a>
 800aaae:	4651      	mov	r1, sl
 800aab0:	4638      	mov	r0, r7
 800aab2:	f7ff ff98 	bl	800a9e6 <_stat>
 800aab6:	3001      	adds	r0, #1
 800aab8:	d0c7      	beq.n	800aa4a <_swiopen+0x2a>
 800aaba:	f7fe f803 	bl	8008ac4 <__errno>
 800aabe:	2311      	movs	r3, #17
 800aac0:	6003      	str	r3, [r0, #0]
 800aac2:	f04f 34ff 	mov.w	r4, #4294967295
 800aac6:	4620      	mov	r0, r4
 800aac8:	b016      	add	sp, #88	@ 0x58
 800aaca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aace:	bf00      	nop
 800aad0:	20005588 	.word	0x20005588

0800aad4 <_get_semihosting_exts>:
 800aad4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aad8:	4606      	mov	r6, r0
 800aada:	460f      	mov	r7, r1
 800aadc:	4829      	ldr	r0, [pc, #164]	@ (800ab84 <_get_semihosting_exts+0xb0>)
 800aade:	2100      	movs	r1, #0
 800aae0:	4615      	mov	r5, r2
 800aae2:	f7ff ff9d 	bl	800aa20 <_swiopen>
 800aae6:	462a      	mov	r2, r5
 800aae8:	4604      	mov	r4, r0
 800aaea:	2100      	movs	r1, #0
 800aaec:	4630      	mov	r0, r6
 800aaee:	f7fd ff97 	bl	8008a20 <memset>
 800aaf2:	1c63      	adds	r3, r4, #1
 800aaf4:	d014      	beq.n	800ab20 <_get_semihosting_exts+0x4c>
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f7ff fe4c 	bl	800a794 <findslot>
 800aafc:	f04f 080c 	mov.w	r8, #12
 800ab00:	4681      	mov	r9, r0
 800ab02:	4640      	mov	r0, r8
 800ab04:	4649      	mov	r1, r9
 800ab06:	beab      	bkpt	0x00ab
 800ab08:	4680      	mov	r8, r0
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	f7ff fe6a 	bl	800a7e4 <checkerror>
 800ab10:	2803      	cmp	r0, #3
 800ab12:	dd02      	ble.n	800ab1a <_get_semihosting_exts+0x46>
 800ab14:	1ec3      	subs	r3, r0, #3
 800ab16:	42ab      	cmp	r3, r5
 800ab18:	dc07      	bgt.n	800ab2a <_get_semihosting_exts+0x56>
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f7ff ff0c 	bl	800a938 <_close>
 800ab20:	f04f 30ff 	mov.w	r0, #4294967295
 800ab24:	b003      	add	sp, #12
 800ab26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab2a:	2204      	movs	r2, #4
 800ab2c:	eb0d 0102 	add.w	r1, sp, r2
 800ab30:	4620      	mov	r0, r4
 800ab32:	f7ff fe6c 	bl	800a80e <_read>
 800ab36:	2803      	cmp	r0, #3
 800ab38:	ddef      	ble.n	800ab1a <_get_semihosting_exts+0x46>
 800ab3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ab3e:	2b53      	cmp	r3, #83	@ 0x53
 800ab40:	d1eb      	bne.n	800ab1a <_get_semihosting_exts+0x46>
 800ab42:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ab46:	2b48      	cmp	r3, #72	@ 0x48
 800ab48:	d1e7      	bne.n	800ab1a <_get_semihosting_exts+0x46>
 800ab4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ab4e:	2b46      	cmp	r3, #70	@ 0x46
 800ab50:	d1e3      	bne.n	800ab1a <_get_semihosting_exts+0x46>
 800ab52:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ab56:	2b42      	cmp	r3, #66	@ 0x42
 800ab58:	d1df      	bne.n	800ab1a <_get_semihosting_exts+0x46>
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	4639      	mov	r1, r7
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f7ff fe6f 	bl	800a842 <_swilseek>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	dbd8      	blt.n	800ab1a <_get_semihosting_exts+0x46>
 800ab68:	462a      	mov	r2, r5
 800ab6a:	4631      	mov	r1, r6
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f7ff fe4e 	bl	800a80e <_read>
 800ab72:	4605      	mov	r5, r0
 800ab74:	4620      	mov	r0, r4
 800ab76:	f7ff fedf 	bl	800a938 <_close>
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	f7ff fe32 	bl	800a7e4 <checkerror>
 800ab80:	e7d0      	b.n	800ab24 <_get_semihosting_exts+0x50>
 800ab82:	bf00      	nop
 800ab84:	0800cd69 	.word	0x0800cd69

0800ab88 <initialise_semihosting_exts>:
 800ab88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab8a:	4d0a      	ldr	r5, [pc, #40]	@ (800abb4 <initialise_semihosting_exts+0x2c>)
 800ab8c:	4c0a      	ldr	r4, [pc, #40]	@ (800abb8 <initialise_semihosting_exts+0x30>)
 800ab8e:	2100      	movs	r1, #0
 800ab90:	2201      	movs	r2, #1
 800ab92:	a801      	add	r0, sp, #4
 800ab94:	6029      	str	r1, [r5, #0]
 800ab96:	6022      	str	r2, [r4, #0]
 800ab98:	f7ff ff9c 	bl	800aad4 <_get_semihosting_exts>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	dd07      	ble.n	800abb0 <initialise_semihosting_exts+0x28>
 800aba0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aba4:	f003 0201 	and.w	r2, r3, #1
 800aba8:	f003 0302 	and.w	r3, r3, #2
 800abac:	602a      	str	r2, [r5, #0]
 800abae:	6023      	str	r3, [r4, #0]
 800abb0:	b003      	add	sp, #12
 800abb2:	bd30      	pop	{r4, r5, pc}
 800abb4:	20000214 	.word	0x20000214
 800abb8:	20000210 	.word	0x20000210

0800abbc <_has_ext_exit_extended>:
 800abbc:	b510      	push	{r4, lr}
 800abbe:	4c04      	ldr	r4, [pc, #16]	@ (800abd0 <_has_ext_exit_extended+0x14>)
 800abc0:	6823      	ldr	r3, [r4, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	da01      	bge.n	800abca <_has_ext_exit_extended+0xe>
 800abc6:	f7ff ffdf 	bl	800ab88 <initialise_semihosting_exts>
 800abca:	6820      	ldr	r0, [r4, #0]
 800abcc:	bd10      	pop	{r4, pc}
 800abce:	bf00      	nop
 800abd0:	20000214 	.word	0x20000214

0800abd4 <_isatty>:
 800abd4:	b570      	push	{r4, r5, r6, lr}
 800abd6:	f7ff fddd 	bl	800a794 <findslot>
 800abda:	2409      	movs	r4, #9
 800abdc:	4605      	mov	r5, r0
 800abde:	b920      	cbnz	r0, 800abea <_isatty+0x16>
 800abe0:	f7fd ff70 	bl	8008ac4 <__errno>
 800abe4:	6004      	str	r4, [r0, #0]
 800abe6:	2000      	movs	r0, #0
 800abe8:	bd70      	pop	{r4, r5, r6, pc}
 800abea:	4620      	mov	r0, r4
 800abec:	4629      	mov	r1, r5
 800abee:	beab      	bkpt	0x00ab
 800abf0:	4604      	mov	r4, r0
 800abf2:	2c01      	cmp	r4, #1
 800abf4:	4620      	mov	r0, r4
 800abf6:	d0f7      	beq.n	800abe8 <_isatty+0x14>
 800abf8:	f7fd ff64 	bl	8008ac4 <__errno>
 800abfc:	2513      	movs	r5, #19
 800abfe:	4604      	mov	r4, r0
 800ac00:	2600      	movs	r6, #0
 800ac02:	4628      	mov	r0, r5
 800ac04:	4631      	mov	r1, r6
 800ac06:	beab      	bkpt	0x00ab
 800ac08:	4605      	mov	r5, r0
 800ac0a:	6025      	str	r5, [r4, #0]
 800ac0c:	e7eb      	b.n	800abe6 <_isatty+0x12>
	...

0800ac10 <log10f>:
 800ac10:	b508      	push	{r3, lr}
 800ac12:	ed2d 8b02 	vpush	{d8}
 800ac16:	eeb0 8a40 	vmov.f32	s16, s0
 800ac1a:	f000 f889 	bl	800ad30 <__ieee754_log10f>
 800ac1e:	eeb4 8a48 	vcmp.f32	s16, s16
 800ac22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac26:	d60f      	bvs.n	800ac48 <log10f+0x38>
 800ac28:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ac2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac30:	d80a      	bhi.n	800ac48 <log10f+0x38>
 800ac32:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ac36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac3a:	d108      	bne.n	800ac4e <log10f+0x3e>
 800ac3c:	f7fd ff42 	bl	8008ac4 <__errno>
 800ac40:	2322      	movs	r3, #34	@ 0x22
 800ac42:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800ac64 <log10f+0x54>
 800ac46:	6003      	str	r3, [r0, #0]
 800ac48:	ecbd 8b02 	vpop	{d8}
 800ac4c:	bd08      	pop	{r3, pc}
 800ac4e:	f7fd ff39 	bl	8008ac4 <__errno>
 800ac52:	ecbd 8b02 	vpop	{d8}
 800ac56:	2321      	movs	r3, #33	@ 0x21
 800ac58:	6003      	str	r3, [r0, #0]
 800ac5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ac5e:	4802      	ldr	r0, [pc, #8]	@ (800ac68 <log10f+0x58>)
 800ac60:	f000 b822 	b.w	800aca8 <nanf>
 800ac64:	ff800000 	.word	0xff800000
 800ac68:	0800cd57 	.word	0x0800cd57

0800ac6c <sqrtf>:
 800ac6c:	b508      	push	{r3, lr}
 800ac6e:	ed2d 8b02 	vpush	{d8}
 800ac72:	eeb0 8a40 	vmov.f32	s16, s0
 800ac76:	f000 f857 	bl	800ad28 <__ieee754_sqrtf>
 800ac7a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ac7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac82:	d60c      	bvs.n	800ac9e <sqrtf+0x32>
 800ac84:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800aca4 <sqrtf+0x38>
 800ac88:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ac8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac90:	d505      	bpl.n	800ac9e <sqrtf+0x32>
 800ac92:	f7fd ff17 	bl	8008ac4 <__errno>
 800ac96:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ac9a:	2321      	movs	r3, #33	@ 0x21
 800ac9c:	6003      	str	r3, [r0, #0]
 800ac9e:	ecbd 8b02 	vpop	{d8}
 800aca2:	bd08      	pop	{r3, pc}
 800aca4:	00000000 	.word	0x00000000

0800aca8 <nanf>:
 800aca8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800acb0 <nanf+0x8>
 800acac:	4770      	bx	lr
 800acae:	bf00      	nop
 800acb0:	7fc00000 	.word	0x7fc00000

0800acb4 <fminf>:
 800acb4:	b508      	push	{r3, lr}
 800acb6:	ed2d 8b02 	vpush	{d8}
 800acba:	eeb0 8a40 	vmov.f32	s16, s0
 800acbe:	eef0 8a60 	vmov.f32	s17, s1
 800acc2:	f000 f815 	bl	800acf0 <__fpclassifyf>
 800acc6:	b930      	cbnz	r0, 800acd6 <fminf+0x22>
 800acc8:	eeb0 8a68 	vmov.f32	s16, s17
 800accc:	eeb0 0a48 	vmov.f32	s0, s16
 800acd0:	ecbd 8b02 	vpop	{d8}
 800acd4:	bd08      	pop	{r3, pc}
 800acd6:	eeb0 0a68 	vmov.f32	s0, s17
 800acda:	f000 f809 	bl	800acf0 <__fpclassifyf>
 800acde:	2800      	cmp	r0, #0
 800ace0:	d0f4      	beq.n	800accc <fminf+0x18>
 800ace2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ace6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acea:	d5ed      	bpl.n	800acc8 <fminf+0x14>
 800acec:	e7ee      	b.n	800accc <fminf+0x18>
	...

0800acf0 <__fpclassifyf>:
 800acf0:	ee10 3a10 	vmov	r3, s0
 800acf4:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800acf8:	d00d      	beq.n	800ad16 <__fpclassifyf+0x26>
 800acfa:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800acfe:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800ad02:	d30a      	bcc.n	800ad1a <__fpclassifyf+0x2a>
 800ad04:	4b07      	ldr	r3, [pc, #28]	@ (800ad24 <__fpclassifyf+0x34>)
 800ad06:	1e42      	subs	r2, r0, #1
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d908      	bls.n	800ad1e <__fpclassifyf+0x2e>
 800ad0c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800ad10:	4258      	negs	r0, r3
 800ad12:	4158      	adcs	r0, r3
 800ad14:	4770      	bx	lr
 800ad16:	2002      	movs	r0, #2
 800ad18:	4770      	bx	lr
 800ad1a:	2004      	movs	r0, #4
 800ad1c:	4770      	bx	lr
 800ad1e:	2003      	movs	r0, #3
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	007ffffe 	.word	0x007ffffe

0800ad28 <__ieee754_sqrtf>:
 800ad28:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ad2c:	4770      	bx	lr
	...

0800ad30 <__ieee754_log10f>:
 800ad30:	b508      	push	{r3, lr}
 800ad32:	ee10 3a10 	vmov	r3, s0
 800ad36:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800ad3a:	ed2d 8b02 	vpush	{d8}
 800ad3e:	d108      	bne.n	800ad52 <__ieee754_log10f+0x22>
 800ad40:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800adc8 <__ieee754_log10f+0x98>
 800ad44:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800adcc <__ieee754_log10f+0x9c>
 800ad48:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ad4c:	ecbd 8b02 	vpop	{d8}
 800ad50:	bd08      	pop	{r3, pc}
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	461a      	mov	r2, r3
 800ad56:	da02      	bge.n	800ad5e <__ieee754_log10f+0x2e>
 800ad58:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ad5c:	e7f2      	b.n	800ad44 <__ieee754_log10f+0x14>
 800ad5e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ad62:	db02      	blt.n	800ad6a <__ieee754_log10f+0x3a>
 800ad64:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ad68:	e7f0      	b.n	800ad4c <__ieee754_log10f+0x1c>
 800ad6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ad6e:	bfbf      	itttt	lt
 800ad70:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 800add0 <__ieee754_log10f+0xa0>
 800ad74:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800ad78:	f06f 0118 	mvnlt.w	r1, #24
 800ad7c:	ee17 2a90 	vmovlt	r2, s15
 800ad80:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800ad84:	bfa8      	it	ge
 800ad86:	2100      	movge	r1, #0
 800ad88:	3b7f      	subs	r3, #127	@ 0x7f
 800ad8a:	440b      	add	r3, r1
 800ad8c:	0fd9      	lsrs	r1, r3, #31
 800ad8e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800ad92:	ee07 3a90 	vmov	s15, r3
 800ad96:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800ad9a:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 800ad9e:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800ada2:	ee00 3a10 	vmov	s0, r3
 800ada6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800adaa:	f000 f819 	bl	800ade0 <__ieee754_logf>
 800adae:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800add4 <__ieee754_log10f+0xa4>
 800adb2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800adb6:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800add8 <__ieee754_log10f+0xa8>
 800adba:	eea8 0a27 	vfma.f32	s0, s16, s15
 800adbe:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800addc <__ieee754_log10f+0xac>
 800adc2:	eea8 0a27 	vfma.f32	s0, s16, s15
 800adc6:	e7c1      	b.n	800ad4c <__ieee754_log10f+0x1c>
 800adc8:	cc000000 	.word	0xcc000000
 800adcc:	00000000 	.word	0x00000000
 800add0:	4c000000 	.word	0x4c000000
 800add4:	3ede5bd9 	.word	0x3ede5bd9
 800add8:	355427db 	.word	0x355427db
 800addc:	3e9a2080 	.word	0x3e9a2080

0800ade0 <__ieee754_logf>:
 800ade0:	ee10 3a10 	vmov	r3, s0
 800ade4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800ade8:	d106      	bne.n	800adf8 <__ieee754_logf+0x18>
 800adea:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800af84 <__ieee754_logf+0x1a4>
 800adee:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800af88 <__ieee754_logf+0x1a8>
 800adf2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800adf6:	4770      	bx	lr
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	461a      	mov	r2, r3
 800adfc:	da02      	bge.n	800ae04 <__ieee754_logf+0x24>
 800adfe:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ae02:	e7f4      	b.n	800adee <__ieee754_logf+0xe>
 800ae04:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ae08:	db02      	blt.n	800ae10 <__ieee754_logf+0x30>
 800ae0a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ae0e:	4770      	bx	lr
 800ae10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ae14:	bfb8      	it	lt
 800ae16:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800af8c <__ieee754_logf+0x1ac>
 800ae1a:	485d      	ldr	r0, [pc, #372]	@ (800af90 <__ieee754_logf+0x1b0>)
 800ae1c:	bfbe      	ittt	lt
 800ae1e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800ae22:	f06f 0118 	mvnlt.w	r1, #24
 800ae26:	ee17 2a90 	vmovlt	r2, s15
 800ae2a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800ae2e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800ae32:	4410      	add	r0, r2
 800ae34:	bfa8      	it	ge
 800ae36:	2100      	movge	r1, #0
 800ae38:	3b7f      	subs	r3, #127	@ 0x7f
 800ae3a:	440b      	add	r3, r1
 800ae3c:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 800ae40:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 800ae44:	4311      	orrs	r1, r2
 800ae46:	ee00 1a10 	vmov	s0, r1
 800ae4a:	4952      	ldr	r1, [pc, #328]	@ (800af94 <__ieee754_logf+0x1b4>)
 800ae4c:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800ae50:	f102 000f 	add.w	r0, r2, #15
 800ae54:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ae58:	4001      	ands	r1, r0
 800ae5a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ae5e:	bb89      	cbnz	r1, 800aec4 <__ieee754_logf+0xe4>
 800ae60:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ae64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae68:	d10f      	bne.n	800ae8a <__ieee754_logf+0xaa>
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f000 8087 	beq.w	800af7e <__ieee754_logf+0x19e>
 800ae70:	ee07 3a90 	vmov	s15, r3
 800ae74:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800af98 <__ieee754_logf+0x1b8>
 800ae78:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800af9c <__ieee754_logf+0x1bc>
 800ae7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae80:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ae84:	eea7 0a87 	vfma.f32	s0, s15, s14
 800ae88:	4770      	bx	lr
 800ae8a:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800afa0 <__ieee754_logf+0x1c0>
 800ae8e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ae92:	eee0 7a66 	vfms.f32	s15, s0, s13
 800ae96:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ae9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae9e:	b913      	cbnz	r3, 800aea6 <__ieee754_logf+0xc6>
 800aea0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800aea4:	4770      	bx	lr
 800aea6:	ee07 3a90 	vmov	s15, r3
 800aeaa:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800af98 <__ieee754_logf+0x1b8>
 800aeae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aeb2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800aeb6:	ee37 0a40 	vsub.f32	s0, s14, s0
 800aeba:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800af9c <__ieee754_logf+0x1bc>
 800aebe:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800aec2:	4770      	bx	lr
 800aec4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800aec8:	ee70 7a27 	vadd.f32	s15, s0, s15
 800aecc:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800afa4 <__ieee754_logf+0x1c4>
 800aed0:	eddf 4a35 	vldr	s9, [pc, #212]	@ 800afa8 <__ieee754_logf+0x1c8>
 800aed4:	4935      	ldr	r1, [pc, #212]	@ (800afac <__ieee754_logf+0x1cc>)
 800aed6:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800aeda:	4411      	add	r1, r2
 800aedc:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 800aee0:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800aee4:	430a      	orrs	r2, r1
 800aee6:	2a00      	cmp	r2, #0
 800aee8:	ee07 3a90 	vmov	s15, r3
 800aeec:	ee26 5a06 	vmul.f32	s10, s12, s12
 800aef0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800aef4:	ee25 7a05 	vmul.f32	s14, s10, s10
 800aef8:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800afb0 <__ieee754_logf+0x1d0>
 800aefc:	eee7 7a25 	vfma.f32	s15, s14, s11
 800af00:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800afb4 <__ieee754_logf+0x1d4>
 800af04:	eee7 5a87 	vfma.f32	s11, s15, s14
 800af08:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800afb8 <__ieee754_logf+0x1d8>
 800af0c:	eee7 7a24 	vfma.f32	s15, s14, s9
 800af10:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800afbc <__ieee754_logf+0x1dc>
 800af14:	eee7 4a87 	vfma.f32	s9, s15, s14
 800af18:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800afc0 <__ieee754_logf+0x1e0>
 800af1c:	eee4 7a87 	vfma.f32	s15, s9, s14
 800af20:	ee67 7a85 	vmul.f32	s15, s15, s10
 800af24:	eee5 7a87 	vfma.f32	s15, s11, s14
 800af28:	dd1a      	ble.n	800af60 <__ieee754_logf+0x180>
 800af2a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800af2e:	ee20 7a07 	vmul.f32	s14, s0, s14
 800af32:	ee27 7a00 	vmul.f32	s14, s14, s0
 800af36:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af3a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800af3e:	b913      	cbnz	r3, 800af46 <__ieee754_logf+0x166>
 800af40:	ee37 7a67 	vsub.f32	s14, s14, s15
 800af44:	e7ac      	b.n	800aea0 <__ieee754_logf+0xc0>
 800af46:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800af98 <__ieee754_logf+0x1b8>
 800af4a:	eee6 7a86 	vfma.f32	s15, s13, s12
 800af4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800af52:	ee37 0a40 	vsub.f32	s0, s14, s0
 800af56:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800af9c <__ieee754_logf+0x1bc>
 800af5a:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800af5e:	4770      	bx	lr
 800af60:	ee70 7a67 	vsub.f32	s15, s0, s15
 800af64:	ee67 7a86 	vmul.f32	s15, s15, s12
 800af68:	b913      	cbnz	r3, 800af70 <__ieee754_logf+0x190>
 800af6a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800af6e:	4770      	bx	lr
 800af70:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800af98 <__ieee754_logf+0x1b8>
 800af74:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800af78:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800af7c:	e7eb      	b.n	800af56 <__ieee754_logf+0x176>
 800af7e:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800af88 <__ieee754_logf+0x1a8>
 800af82:	4770      	bx	lr
 800af84:	cc000000 	.word	0xcc000000
 800af88:	00000000 	.word	0x00000000
 800af8c:	4c000000 	.word	0x4c000000
 800af90:	004afb20 	.word	0x004afb20
 800af94:	007ffff0 	.word	0x007ffff0
 800af98:	3717f7d1 	.word	0x3717f7d1
 800af9c:	3f317180 	.word	0x3f317180
 800afa0:	3eaaaaab 	.word	0x3eaaaaab
 800afa4:	3e1cd04f 	.word	0x3e1cd04f
 800afa8:	3e178897 	.word	0x3e178897
 800afac:	ffcf5c30 	.word	0xffcf5c30
 800afb0:	3e638e29 	.word	0x3e638e29
 800afb4:	3ecccccd 	.word	0x3ecccccd
 800afb8:	3e3a3325 	.word	0x3e3a3325
 800afbc:	3e924925 	.word	0x3e924925
 800afc0:	3f2aaaab 	.word	0x3f2aaaab

0800afc4 <_init>:
 800afc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc6:	bf00      	nop
 800afc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afca:	bc08      	pop	{r3}
 800afcc:	469e      	mov	lr, r3
 800afce:	4770      	bx	lr

0800afd0 <_fini>:
 800afd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd2:	bf00      	nop
 800afd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afd6:	bc08      	pop	{r3}
 800afd8:	469e      	mov	lr, r3
 800afda:	4770      	bx	lr
