
Haptic_Hearing_Aid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b49c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001595c  0800b670  0800b670  0000c670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020fcc  08020fcc  000221dc  2**0
                  CONTENTS
  4 .ARM          00000008  08020fcc  08020fcc  00021fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020fd4  08020fd4  000221dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020fd4  08020fd4  00021fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020fd8  08020fd8  00021fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08020fdc  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003400  200001dc  080211b8  000221dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200035dc  080211b8  000225dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000221dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f52  00000000  00000000  0002220c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003539  00000000  00000000  0003815e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  0003b698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da7  00000000  00000000  0003c870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267a4  00000000  00000000  0003d617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cfbf  00000000  00000000  00063dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e463e  00000000  00000000  00080d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001653b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006050  00000000  00000000  001653fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0016b44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b654 	.word	0x0800b654

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800b654 	.word	0x0800b654

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <performFFT>:
 *
 * @author		Francis Liechti (FL)
 * @date		16.12.2024	FL	Created
 * 				11.03.2025	FL	Adapted
 ****************************************************************************/
void performFFT(float *Result, int32_t *audiodata){
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b089      	sub	sp, #36	@ 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
	// 1. Fill input
	for (int i = 0; i < FFT_SIZE; i++) {
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	e021      	b.n	8000f2c <performFFT+0x54>
		// Normalize if desired: value ∈ [-131072, +131071]
		float normalized = ((float) audiodata[i]) / 131072.0f;
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	ee07 3a90 	vmov	s15, r3
 8000ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000efa:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8000fb4 <performFFT+0xdc>
 8000efe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f02:	edc7 7a03 	vstr	s15, [r7, #12]

		input[2*i] = normalized;      // Real part
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4a2b      	ldr	r2, [pc, #172]	@ (8000fb8 <performFFT+0xe0>)
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	601a      	str	r2, [r3, #0]
		input[2*i + 1] = 0.0f;        // Imaginary part (0 for real signals)
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	3301      	adds	r3, #1
 8000f1a:	4a27      	ldr	r2, [pc, #156]	@ (8000fb8 <performFFT+0xe0>)
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	f04f 0200 	mov.w	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < FFT_SIZE; i++) {
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	61fb      	str	r3, [r7, #28]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f32:	dbd9      	blt.n	8000ee8 <performFFT+0x10>
	}

	 // 2. Initialize the FFT structure
	arm_cfft_init_f32(&fft_inst, FFT_SIZE);
 8000f34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f38:	4820      	ldr	r0, [pc, #128]	@ (8000fbc <performFFT+0xe4>)
 8000f3a:	f002 fa23 	bl	8003384 <arm_cfft_init_f32>

	// 3. Perform the complex FFT in-place
	arm_cfft_f32(&fft_inst, input, 0, 1);  // Forward FFT, with bit reversal
 8000f3e:	2301      	movs	r3, #1
 8000f40:	2200      	movs	r2, #0
 8000f42:	491d      	ldr	r1, [pc, #116]	@ (8000fb8 <performFFT+0xe0>)
 8000f44:	481d      	ldr	r0, [pc, #116]	@ (8000fbc <performFFT+0xe4>)
 8000f46:	f002 f963 	bl	8003210 <arm_cfft_f32>

	// 4. Compute magnitude from real and imaginary parts
	for (int i = 0; i < FFT_SIZE; i++) {
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
 8000f4e:	e027      	b.n	8000fa0 <performFFT+0xc8>
		float real = input[2 * i];
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4a18      	ldr	r2, [pc, #96]	@ (8000fb8 <performFFT+0xe0>)
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	617b      	str	r3, [r7, #20]
		float imag = input[2 * i + 1];
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	3301      	adds	r3, #1
 8000f64:	4a14      	ldr	r2, [pc, #80]	@ (8000fb8 <performFFT+0xe0>)
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	613b      	str	r3, [r7, #16]
		Result[i] = sqrtf(real * real + imag * imag);
 8000f6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f72:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000f76:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f7a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	18d4      	adds	r4, r2, r3
 8000f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f8e:	f00a fb3f 	bl	800b610 <sqrtf>
 8000f92:	eef0 7a40 	vmov.f32	s15, s0
 8000f96:	edc4 7a00 	vstr	s15, [r4]
	for (int i = 0; i < FFT_SIZE; i++) {
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	61bb      	str	r3, [r7, #24]
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fa6:	dbd3      	blt.n	8000f50 <performFFT+0x78>
	}
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3724      	adds	r7, #36	@ 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd90      	pop	{r4, r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	48000000 	.word	0x48000000
 8000fb8:	200001f8 	.word	0x200001f8
 8000fbc:	200011f8 	.word	0x200011f8

08000fc0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	@ (8001058 <MX_ADC1_Init+0x98>)
 8000fd4:	4a21      	ldr	r2, [pc, #132]	@ (800105c <MX_ADC1_Init+0x9c>)
 8000fd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <MX_ADC1_Init+0x98>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fde:	4b1e      	ldr	r3, [pc, #120]	@ (8001058 <MX_ADC1_Init+0x98>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8001058 <MX_ADC1_Init+0x98>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fea:	4b1b      	ldr	r3, [pc, #108]	@ (8001058 <MX_ADC1_Init+0x98>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <MX_ADC1_Init+0x98>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff8:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <MX_ADC1_Init+0x98>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ffe:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <MX_ADC1_Init+0x98>)
 8001000:	4a17      	ldr	r2, [pc, #92]	@ (8001060 <MX_ADC1_Init+0xa0>)
 8001002:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001004:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <MX_ADC1_Init+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800100a:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <MX_ADC1_Init+0x98>)
 800100c:	2201      	movs	r2, #1
 800100e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001010:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <MX_ADC1_Init+0x98>)
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <MX_ADC1_Init+0x98>)
 800101a:	2201      	movs	r2, #1
 800101c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800101e:	480e      	ldr	r0, [pc, #56]	@ (8001058 <MX_ADC1_Init+0x98>)
 8001020:	f003 fb1e 	bl	8004660 <HAL_ADC_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800102a:	f000 fe3c 	bl	8001ca6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800102e:	2301      	movs	r3, #1
 8001030:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001032:	2301      	movs	r3, #1
 8001034:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	@ (8001058 <MX_ADC1_Init+0x98>)
 8001040:	f003 fb52 	bl	80046e8 <HAL_ADC_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800104a:	f000 fe2c 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20001208 	.word	0x20001208
 800105c:	40012000 	.word	0x40012000
 8001060:	0f000001 	.word	0x0f000001

08001064 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	@ 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a17      	ldr	r2, [pc, #92]	@ (80010e0 <HAL_ADC_MspInit+0x7c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d127      	bne.n	80010d6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b16      	ldr	r3, [pc, #88]	@ (80010e4 <HAL_ADC_MspInit+0x80>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108e:	4a15      	ldr	r2, [pc, #84]	@ (80010e4 <HAL_ADC_MspInit+0x80>)
 8001090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001094:	6453      	str	r3, [r2, #68]	@ 0x44
 8001096:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <HAL_ADC_MspInit+0x80>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <HAL_ADC_MspInit+0x80>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a0e      	ldr	r2, [pc, #56]	@ (80010e4 <HAL_ADC_MspInit+0x80>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <HAL_ADC_MspInit+0x80>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010be:	2302      	movs	r3, #2
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c2:	2303      	movs	r3, #3
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <HAL_ADC_MspInit+0x84>)
 80010d2:	f004 f9b9 	bl	8005448 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	@ 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40012000 	.word	0x40012000
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000

080010ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <MX_DMA_Init+0x3c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001128 <MX_DMA_Init+0x3c>)
 80010fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <MX_DMA_Init+0x3c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	2039      	movs	r0, #57	@ 0x39
 8001114:	f003 fdf1 	bl	8004cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001118:	2039      	movs	r0, #57	@ 0x39
 800111a:	f003 fe0a 	bl	8004d32 <HAL_NVIC_EnableIRQ>

}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800

0800112c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	4b35      	ldr	r3, [pc, #212]	@ (800121c <MX_GPIO_Init+0xf0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a34      	ldr	r2, [pc, #208]	@ (800121c <MX_GPIO_Init+0xf0>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b32      	ldr	r3, [pc, #200]	@ (800121c <MX_GPIO_Init+0xf0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b2e      	ldr	r3, [pc, #184]	@ (800121c <MX_GPIO_Init+0xf0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a2d      	ldr	r2, [pc, #180]	@ (800121c <MX_GPIO_Init+0xf0>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b2b      	ldr	r3, [pc, #172]	@ (800121c <MX_GPIO_Init+0xf0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	4b27      	ldr	r3, [pc, #156]	@ (800121c <MX_GPIO_Init+0xf0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a26      	ldr	r2, [pc, #152]	@ (800121c <MX_GPIO_Init+0xf0>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b24      	ldr	r3, [pc, #144]	@ (800121c <MX_GPIO_Init+0xf0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A0_2_Pin|A1_2_Pin|A2_2_Pin, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800119c:	4820      	ldr	r0, [pc, #128]	@ (8001220 <MX_GPIO_Init+0xf4>)
 800119e:	f004 fae7 	bl	8005770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_1_Pin|A1_1_Pin|A2_1_Pin|DRIVE_EN_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80011a8:	481e      	ldr	r0, [pc, #120]	@ (8001224 <MX_GPIO_Init+0xf8>)
 80011aa:	f004 fae1 	bl	8005770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|N_RES_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80011b4:	481c      	ldr	r0, [pc, #112]	@ (8001228 <MX_GPIO_Init+0xfc>)
 80011b6:	f004 fadb 	bl	8005770 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = A0_2_Pin|A1_2_Pin|A2_2_Pin;
 80011ba:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80011be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	4619      	mov	r1, r3
 80011d2:	4813      	ldr	r0, [pc, #76]	@ (8001220 <MX_GPIO_Init+0xf4>)
 80011d4:	f004 f938 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = A0_1_Pin|A1_1_Pin|A2_1_Pin|DRIVE_EN_Pin;
 80011d8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80011dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	4619      	mov	r1, r3
 80011f0:	480c      	ldr	r0, [pc, #48]	@ (8001224 <MX_GPIO_Init+0xf8>)
 80011f2:	f004 f929 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TRIG_Pin|N_RES_Pin;
 80011f6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	4619      	mov	r1, r3
 800120e:	4806      	ldr	r0, [pc, #24]	@ (8001228 <MX_GPIO_Init+0xfc>)
 8001210:	f004 f91a 	bl	8005448 <HAL_GPIO_Init>

}
 8001214:	bf00      	nop
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40023800 	.word	0x40023800
 8001220:	40020400 	.word	0x40020400
 8001224:	40020800 	.word	0x40020800
 8001228:	40020000 	.word	0x40020000

0800122c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <MX_I2C1_Init+0x54>)
 8001232:	4a14      	ldr	r2, [pc, #80]	@ (8001284 <MX_I2C1_Init+0x58>)
 8001234:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001236:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <MX_I2C1_Init+0x54>)
 8001238:	4a13      	ldr	r2, [pc, #76]	@ (8001288 <MX_I2C1_Init+0x5c>)
 800123a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 800123c:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <MX_I2C1_Init+0x54>)
 800123e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001242:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001244:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <MX_I2C1_Init+0x54>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124a:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <MX_I2C1_Init+0x54>)
 800124c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001250:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <MX_I2C1_Init+0x54>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001258:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <MX_I2C1_Init+0x54>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125e:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <MX_I2C1_Init+0x54>)
 8001260:	2200      	movs	r2, #0
 8001262:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <MX_I2C1_Init+0x54>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	@ (8001280 <MX_I2C1_Init+0x54>)
 800126c:	f004 fa9a 	bl	80057a4 <HAL_I2C_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001276:	f000 fd16 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20001250 	.word	0x20001250
 8001284:	40005400 	.word	0x40005400
 8001288:	00061a80 	.word	0x00061a80

0800128c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	@ 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a19      	ldr	r2, [pc, #100]	@ (8001310 <HAL_I2C_MspInit+0x84>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d12c      	bne.n	8001308 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b18      	ldr	r3, [pc, #96]	@ (8001314 <HAL_I2C_MspInit+0x88>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a17      	ldr	r2, [pc, #92]	@ (8001314 <HAL_I2C_MspInit+0x88>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <HAL_I2C_MspInit+0x88>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d0:	2312      	movs	r3, #18
 80012d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012dc:	2304      	movs	r3, #4
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	480c      	ldr	r0, [pc, #48]	@ (8001318 <HAL_I2C_MspInit+0x8c>)
 80012e8:	f004 f8ae 	bl	8005448 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <HAL_I2C_MspInit+0x88>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	4a07      	ldr	r2, [pc, #28]	@ (8001314 <HAL_I2C_MspInit+0x88>)
 80012f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fc:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <HAL_I2C_MspInit+0x88>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001300:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	@ 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40005400 	.word	0x40005400
 8001314:	40023800 	.word	0x40023800
 8001318:	40020400 	.word	0x40020400

0800131c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800131c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001320:	f5ad 5d04 	sub.w	sp, sp, #8448	@ 0x2100
 8001324:	b084      	sub	sp, #16
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001328:	f003 f904 	bl	8004534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132c:	f000 fbaa 	bl	8001a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001330:	f7ff fefc 	bl	800112c <MX_GPIO_Init>
  MX_DMA_Init();
 8001334:	f7ff feda 	bl	80010ec <MX_DMA_Init>
  MX_I2C1_Init();
 8001338:	f7ff ff78 	bl	800122c <MX_I2C1_Init>
  MX_TIM7_Init();
 800133c:	f000 fe64 	bl	8002008 <MX_TIM7_Init>
  MX_ADC1_Init();
 8001340:	f7ff fe3e 	bl	8000fc0 <MX_ADC1_Init>
  MX_SAI1_Init();
 8001344:	f000 fcb6 	bl	8001cb4 <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */


	// init_drivers();

	uint8_t numValues = 80;
 8001348:	2350      	movs	r3, #80	@ 0x50
 800134a:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 800134e:	f102 0233 	add.w	r2, r2, #51	@ 0x33
 8001352:	7013      	strb	r3, [r2, #0]
	double ramp[numValues];
 8001354:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001358:	f103 0333 	add.w	r3, r3, #51	@ 0x33
 800135c:	7819      	ldrb	r1, [r3, #0]
 800135e:	460b      	mov	r3, r1
 8001360:	3b01      	subs	r3, #1
 8001362:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001366:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	b2cb      	uxtb	r3, r1
 800136e:	2200      	movs	r2, #0
 8001370:	4698      	mov	r8, r3
 8001372:	4691      	mov	r9, r2
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001380:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001384:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001388:	b2cb      	uxtb	r3, r1
 800138a:	2200      	movs	r2, #0
 800138c:	461c      	mov	r4, r3
 800138e:	4615      	mov	r5, r2
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	01ab      	lsls	r3, r5, #6
 800139a:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800139e:	01a2      	lsls	r2, r4, #6
 80013a0:	460b      	mov	r3, r1
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	3307      	adds	r3, #7
 80013a6:	08db      	lsrs	r3, r3, #3
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	ebad 0d03 	sub.w	sp, sp, r3
 80013ae:	466b      	mov	r3, sp
 80013b0:	3307      	adds	r3, #7
 80013b2:	08db      	lsrs	r3, r3, #3
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 80013ba:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80013be:	6013      	str	r3, [r2, #0]
	uint8_t maxValue = 0x5B; // 2.3V RMS
 80013c0:	235b      	movs	r3, #91	@ 0x5b
 80013c2:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 80013c6:	f102 0227 	add.w	r2, r2, #39	@ 0x27
 80013ca:	7013      	strb	r3, [r2, #0]

	generate_ramp(ramp, maxValue, numValues);
 80013cc:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80013d0:	f103 0333 	add.w	r3, r3, #51	@ 0x33
 80013d4:	781a      	ldrb	r2, [r3, #0]
 80013d6:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80013da:	f103 0327 	add.w	r3, r3, #39	@ 0x27
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80013e6:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	f000 fbec 	bl	8001bc8 <generate_ramp>
	double amplitudes[NUM_ACTUATORS] = {0};
 80013f0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80013f4:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80013f8:	2280      	movs	r2, #128	@ 0x80
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f007 fe4c 	bl	800909a <memset>
	uint8_t counter = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8001408:	f102 020f 	add.w	r2, r2, #15
 800140c:	7013      	strb	r3, [r2, #0]

	float FFT_left[NUM_SAMPLES];
	float FFT_right[NUM_SAMPLES];


	uint8_t drivers = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001414:	f102 0226 	add.w	r2, r2, #38	@ 0x26
 8001418:	7013      	strb	r3, [r2, #0]
	uint8_t firstround = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001420:	f102 0225 	add.w	r2, r2, #37	@ 0x25
 8001424:	7013      	strb	r3, [r2, #0]

	uint8_t ready = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 800142c:	f102 020e 	add.w	r2, r2, #14
 8001430:	7013      	strb	r3, [r2, #0]

	for(int j=0; j<NUM_ACTUATORS; j++){
 8001432:	2300      	movs	r3, #0
 8001434:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8001438:	f102 0208 	add.w	r2, r2, #8
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e01d      	b.n	800147c <main+0x160>
		amplitudes[j] = 0;
 8001440:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8001444:	f103 0308 	add.w	r3, r3, #8
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8001450:	f103 0310 	add.w	r3, r3, #16
 8001454:	443b      	add	r3, r7
 8001456:	f1a3 01d8 	sub.w	r1, r3, #216	@ 0xd8
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	e9c1 2300 	strd	r2, r3, [r1]
	for(int j=0; j<NUM_ACTUATORS; j++){
 8001466:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 800146a:	f103 0308 	add.w	r3, r3, #8
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3301      	adds	r3, #1
 8001472:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8001476:	f102 0208 	add.w	r2, r2, #8
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8001480:	f103 0308 	add.w	r3, r3, #8
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b0f      	cmp	r3, #15
 8001488:	ddda      	ble.n	8001440 <main+0x124>
	}

	// Part for debugging
	initialise_monitor_handles();
 800148a:	f00a f82f 	bl	800b4ec <initialise_monitor_handles>

	printf("Semihosting test...\n\r");
 800148e:	48b1      	ldr	r0, [pc, #708]	@ (8001754 <main+0x438>)
 8001490:	f007 fc1c 	bl	8008ccc <iprintf>

	char s[50];
	char *p;
	FILE *fp;
	p = s;
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	3b0c      	subs	r3, #12
 800149a:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 800149e:	f102 0220 	add.w	r2, r2, #32
 80014a2:	6013      	str	r3, [r2, #0]


	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80014a4:	2037      	movs	r0, #55	@ 0x37
 80014a6:	f003 fc44 	bl	8004d32 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim7);
 80014aa:	48ab      	ldr	r0, [pc, #684]	@ (8001758 <main+0x43c>)
 80014ac:	f006 fa38 	bl	8007920 <HAL_TIM_Base_Start_IT>

	// HAL_I2S_Receive_DMA(&hi2s1, (uint16_t *) rawdata, DMA_BUFFER_SIZE);

	HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint32_t*)rawdata, DMA_BUFFER_SIZE);
 80014b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014b4:	49a9      	ldr	r1, [pc, #676]	@ (800175c <main+0x440>)
 80014b6:	48aa      	ldr	r0, [pc, #680]	@ (8001760 <main+0x444>)
 80014b8:	f005 fed6 	bl	8007268 <HAL_SAI_Receive_DMA>


	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014c2:	48a8      	ldr	r0, [pc, #672]	@ (8001764 <main+0x448>)
 80014c4:	f004 f954 	bl	8005770 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(TimCollapsed){
 80014c8:	4ba7      	ldr	r3, [pc, #668]	@ (8001768 <main+0x44c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d05b      	beq.n	8001588 <main+0x26c>
		TimCollapsed = RESET;
 80014d0:	4ba5      	ldr	r3, [pc, #660]	@ (8001768 <main+0x44c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
		counter++;
 80014d6:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 80014da:	f103 030f 	add.w	r3, r3, #15
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 80014e6:	f102 020f 	add.w	r2, r2, #15
 80014ea:	7013      	strb	r3, [r2, #0]
		int i = counter/10;
 80014ec:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 80014f0:	f103 030f 	add.w	r3, r3, #15
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	4a9d      	ldr	r2, [pc, #628]	@ (800176c <main+0x450>)
 80014f8:	fba2 2303 	umull	r2, r3, r2, r3
 80014fc:	08db      	lsrs	r3, r3, #3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001504:	f102 021c 	add.w	r2, r2, #28
 8001508:	6013      	str	r3, [r2, #0]

		if(i>=NUM_ACTUATORS){
 800150a:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 800150e:	f103 031c 	add.w	r3, r3, #28
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	dd05      	ble.n	8001524 <main+0x208>
			counter = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 800151e:	f102 020f 	add.w	r2, r2, #15
 8001522:	7013      	strb	r3, [r2, #0]
		}
		for(int j=0; j<NUM_ACTUATORS; j++){
 8001524:	2300      	movs	r3, #0
 8001526:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 800152a:	f102 0204 	add.w	r2, r2, #4
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	e01d      	b.n	800156e <main+0x252>
			amplitudes[j] = 0;
 8001532:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8001536:	f103 0304 	add.w	r3, r3, #4
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8001542:	f103 0310 	add.w	r3, r3, #16
 8001546:	443b      	add	r3, r7
 8001548:	f1a3 01d8 	sub.w	r1, r3, #216	@ 0xd8
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	e9c1 2300 	strd	r2, r3, [r1]
		for(int j=0; j<NUM_ACTUATORS; j++){
 8001558:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 800155c:	f103 0304 	add.w	r3, r3, #4
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3301      	adds	r3, #1
 8001564:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8001568:	f102 0204 	add.w	r2, r2, #4
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8001572:	f103 0304 	add.w	r3, r3, #4
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	ddda      	ble.n	8001532 <main+0x216>
		}
		// amplitudes[i] = maxValue;

		// set_amplitude(amplitudes);
		ready = 1;
 800157c:	2301      	movs	r3, #1
 800157e:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8001582:	f102 020e 	add.w	r2, r2, #14
 8001586:	7013      	strb	r3, [r2, #0]
	  }

	  if(ready){
 8001588:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 800158c:	f103 030e 	add.w	r3, r3, #14
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d026      	beq.n	80015e4 <main+0x2c8>
		  ready = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 800159c:	f102 020e 	add.w	r2, r2, #14
 80015a0:	7013      	strb	r3, [r2, #0]
		  // clear actual waveform with rising edge
		  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015a8:	486e      	ldr	r0, [pc, #440]	@ (8001764 <main+0x448>)
 80015aa:	f004 f8e1 	bl	8005770 <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 80015ae:	2001      	movs	r0, #1
 80015b0:	f003 f832 	bl	8004618 <HAL_Delay>
		  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, SET);
 80015b4:	2201      	movs	r2, #1
 80015b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015ba:	486a      	ldr	r0, [pc, #424]	@ (8001764 <main+0x448>)
 80015bc:	f004 f8d8 	bl	8005770 <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 80015c0:	2005      	movs	r0, #5
 80015c2:	f003 f829 	bl	8004618 <HAL_Delay>
		  // set new waveform with rising edge
		  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015cc:	4865      	ldr	r0, [pc, #404]	@ (8001764 <main+0x448>)
 80015ce:	f004 f8cf 	bl	8005770 <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 80015d2:	2001      	movs	r0, #1
 80015d4:	f003 f820 	bl	8004618 <HAL_Delay>
		  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015de:	4861      	ldr	r0, [pc, #388]	@ (8001764 <main+0x448>)
 80015e0:	f004 f8c6 	bl	8005770 <HAL_GPIO_WritePin>
	  }

	  if(Data_Arrived){
 80015e4:	4b62      	ldr	r3, [pc, #392]	@ (8001770 <main+0x454>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d002      	beq.n	80015f2 <main+0x2d6>
		  Data_Arrived = RESET;
 80015ec:	4b60      	ldr	r3, [pc, #384]	@ (8001770 <main+0x454>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
	  }
	  if(Data_Arrived_First_Half){
 80015f2:	4b60      	ldr	r3, [pc, #384]	@ (8001774 <main+0x458>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8118 	beq.w	800182c <main+0x510>
		  Data_Arrived_First_Half = RESET;
 80015fc:	4b5d      	ldr	r3, [pc, #372]	@ (8001774 <main+0x458>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
		  // Create lock file to have no conflicts with matlab
		  FILE* lock = fopen("C:\\...\\Data_Left.lock", "w");
 8001602:	495d      	ldr	r1, [pc, #372]	@ (8001778 <main+0x45c>)
 8001604:	485d      	ldr	r0, [pc, #372]	@ (800177c <main+0x460>)
 8001606:	f007 fafb 	bl	8008c00 <fopen>
 800160a:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 800160e:	f103 0318 	add.w	r3, r3, #24
 8001612:	6018      	str	r0, [r3, #0]
		  if (lock) fclose(lock);  // just create and close
 8001614:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001618:	f103 0318 	add.w	r3, r3, #24
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d006      	beq.n	8001630 <main+0x314>
 8001622:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001626:	f103 0318 	add.w	r3, r3, #24
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	f007 f8ea 	bl	8008804 <fclose>

		  fp=fopen("C:\\Users\\franc\\OneDrive\\Dokumente\\MATLAB\\Master_Thesis\\Data_Left.txt", "w");
 8001630:	4951      	ldr	r1, [pc, #324]	@ (8001778 <main+0x45c>)
 8001632:	4853      	ldr	r0, [pc, #332]	@ (8001780 <main+0x464>)
 8001634:	f007 fae4 	bl	8008c00 <fopen>
 8001638:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 800163c:	f103 0314 	add.w	r3, r3, #20
 8001640:	6018      	str	r0, [r3, #0]
		  for(int i=0; i<NUM_SAMPLES; i++){
 8001642:	2300      	movs	r3, #0
 8001644:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e05b      	b.n	8001704 <main+0x3e8>
			  // value is stored in four array parts (LSB left, MSB left, LSB right, MSB right)
			  // Sort it and value is 18-bit (MSB) in 2's complement
			  // audioData_left[i] = (int32_t)(rawdata[4*i+1] << 16) | rawdata[4*i];
			 // audioData_left[i] = rawdata[2*i]; // without shifting
			  audioData_left[i] = ((int32_t)(rawdata[2*i] << 0)) >> 14;
 800164c:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4a41      	ldr	r2, [pc, #260]	@ (800175c <main+0x440>)
 8001656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165a:	1399      	asrs	r1, r3, #14
 800165c:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8001660:	f103 0310 	add.w	r3, r3, #16
 8001664:	f6a3 03d8 	subw	r3, r3, #2264	@ 0x8d8
 8001668:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  audioData_right[i] = ((int32_t)(rawdata[2*i+1] << 0)) >> 14;
 8001672:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	3301      	adds	r3, #1
 800167c:	4a37      	ldr	r2, [pc, #220]	@ (800175c <main+0x440>)
 800167e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001682:	139a      	asrs	r2, r3, #14
 8001684:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 8001688:	f103 0310 	add.w	r3, r3, #16
 800168c:	4619      	mov	r1, r3
 800168e:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	440b      	add	r3, r1
 8001698:	f843 2cd8 	str.w	r2, [r3, #-216]
			  // audioData_right[i] = rawdata[2*i+1];
			  int n= sprintf (p, "%d", (int) audioData_left[i]);
 800169c:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 80016a0:	f103 0310 	add.w	r3, r3, #16
 80016a4:	f6a3 03d8 	subw	r3, r3, #2264	@ 0x8d8
 80016a8:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b2:	461a      	mov	r2, r3
 80016b4:	4933      	ldr	r1, [pc, #204]	@ (8001784 <main+0x468>)
 80016b6:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80016ba:	f103 0320 	add.w	r3, r3, #32
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	f007 fb5c 	bl	8008d7c <siprintf>
 80016c4:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80016c8:	f103 030c 	add.w	r3, r3, #12
 80016cc:	6018      	str	r0, [r3, #0]
			  fprintf(fp,p);
 80016ce:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80016d2:	f103 0320 	add.w	r3, r3, #32
 80016d6:	6819      	ldr	r1, [r3, #0]
 80016d8:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80016dc:	f103 0314 	add.w	r3, r3, #20
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	f007 fa95 	bl	8008c10 <fiprintf>
			  fprintf(fp,"\n");
 80016e6:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80016ea:	f103 0314 	add.w	r3, r3, #20
 80016ee:	6819      	ldr	r1, [r3, #0]
 80016f0:	200a      	movs	r0, #10
 80016f2:	f007 fac3 	bl	8008c7c <fputc>
		  for(int i=0; i<NUM_SAMPLES; i++){
 80016f6:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800170e:	db9d      	blt.n	800164c <main+0x330>
			 //  audioData_right[i] = (int32_t)(rawdata[4*i+3] << 16) | rawdata[4*i+2];
		  }
		  fclose(fp);
 8001710:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001714:	f103 0314 	add.w	r3, r3, #20
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	f007 f873 	bl	8008804 <fclose>
		  performFFT(FFT_left, audioData_left);
 800171e:	f507 52c1 	add.w	r2, r7, #6176	@ 0x1820
 8001722:	f102 0218 	add.w	r2, r2, #24
 8001726:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 800172a:	3b18      	subs	r3, #24
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fbd2 	bl	8000ed8 <performFFT>
		  fp = fopen("C:\\Users\\franc\\OneDrive\\Dokumente\\MATLAB\\Master_Thesis\\FFT_Left.txt", "w");
 8001734:	4910      	ldr	r1, [pc, #64]	@ (8001778 <main+0x45c>)
 8001736:	4814      	ldr	r0, [pc, #80]	@ (8001788 <main+0x46c>)
 8001738:	f007 fa62 	bl	8008c00 <fopen>
 800173c:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001740:	f103 0314 	add.w	r3, r3, #20
 8001744:	6018      	str	r0, [r3, #0]
		  for(int i=0; i<NUM_SAMPLES/2; i++){
 8001746:	2300      	movs	r3, #0
 8001748:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 800174c:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e05a      	b.n	800180a <main+0x4ee>
 8001754:	0800b670 	.word	0x0800b670
 8001758:	20003398 	.word	0x20003398
 800175c:	200012a8 	.word	0x200012a8
 8001760:	200032a8 	.word	0x200032a8
 8001764:	40020000 	.word	0x40020000
 8001768:	200012a4 	.word	0x200012a4
 800176c:	cccccccd 	.word	0xcccccccd
 8001770:	200012a7 	.word	0x200012a7
 8001774:	200012a5 	.word	0x200012a5
 8001778:	0800b688 	.word	0x0800b688
 800177c:	0800b68c 	.word	0x0800b68c
 8001780:	0800b6a4 	.word	0x0800b6a4
 8001784:	0800b6ec 	.word	0x0800b6ec
 8001788:	0800b6f0 	.word	0x0800b6f0
			  int n= sprintf (p, "%f", (float) FFT_left[i]);
 800178c:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 8001790:	f103 0310 	add.w	r3, r3, #16
 8001794:	f6a3 02d8 	subw	r2, r3, #2264	@ 0x8d8
 8001798:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 800179c:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe feed 	bl	8000588 <__aeabi_f2d>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	49ac      	ldr	r1, [pc, #688]	@ (8001a64 <main+0x748>)
 80017b4:	f507 5003 	add.w	r0, r7, #8384	@ 0x20c0
 80017b8:	f100 0020 	add.w	r0, r0, #32
 80017bc:	6800      	ldr	r0, [r0, #0]
 80017be:	f007 fadd 	bl	8008d7c <siprintf>
 80017c2:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80017c6:	f103 0310 	add.w	r3, r3, #16
 80017ca:	6018      	str	r0, [r3, #0]
			  fprintf(fp,p);
 80017cc:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80017d0:	f103 0320 	add.w	r3, r3, #32
 80017d4:	6819      	ldr	r1, [r3, #0]
 80017d6:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80017da:	f103 0314 	add.w	r3, r3, #20
 80017de:	6818      	ldr	r0, [r3, #0]
 80017e0:	f007 fa16 	bl	8008c10 <fiprintf>
			  fprintf(fp,"\n");
 80017e4:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80017e8:	f103 0314 	add.w	r3, r3, #20
 80017ec:	6819      	ldr	r1, [r3, #0]
 80017ee:	200a      	movs	r0, #10
 80017f0:	f007 fa44 	bl	8008c7c <fputc>
		  for(int i=0; i<NUM_SAMPLES/2; i++){
 80017f4:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80017f8:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001804:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 800180e:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2bff      	cmp	r3, #255	@ 0xff
 8001816:	ddb9      	ble.n	800178c <main+0x470>
		  }
		  fclose(fp);
 8001818:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 800181c:	f103 0314 	add.w	r3, r3, #20
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	f006 ffef 	bl	8008804 <fclose>


		  // Delete lock file as signal for "done writing"
		  remove("C:\\...\\Data_Left.lock");
 8001826:	4890      	ldr	r0, [pc, #576]	@ (8001a68 <main+0x74c>)
 8001828:	f007 faa0 	bl	8008d6c <remove>
	  }

	  if(Data_Arrived_Second_Half){
 800182c:	4b8f      	ldr	r3, [pc, #572]	@ (8001a6c <main+0x750>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	f43f ae49 	beq.w	80014c8 <main+0x1ac>
		  Data_Arrived_Second_Half = RESET;
 8001836:	4b8d      	ldr	r3, [pc, #564]	@ (8001a6c <main+0x750>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
		  // Create lock file to have no conflicts with matlab
		  FILE* lock = fopen("C:\\...\\Data_Left.lock", "w");
 800183c:	498c      	ldr	r1, [pc, #560]	@ (8001a70 <main+0x754>)
 800183e:	488a      	ldr	r0, [pc, #552]	@ (8001a68 <main+0x74c>)
 8001840:	f007 f9de 	bl	8008c00 <fopen>
 8001844:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001848:	f103 0308 	add.w	r3, r3, #8
 800184c:	6018      	str	r0, [r3, #0]
		  if (lock) fclose(lock);  // just create and close
 800184e:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001852:	f103 0308 	add.w	r3, r3, #8
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d006      	beq.n	800186a <main+0x54e>
 800185c:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001860:	f103 0308 	add.w	r3, r3, #8
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	f006 ffcd 	bl	8008804 <fclose>
		  int offset = DMA_BUFFER_SIZE/2;
 800186a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800186e:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001872:	f102 0204 	add.w	r2, r2, #4
 8001876:	6013      	str	r3, [r2, #0]

		  fp=fopen("C:\\Users\\franc\\OneDrive\\Dokumente\\MATLAB\\Master_Thesis\\Data_Left.txt", "w");
 8001878:	497d      	ldr	r1, [pc, #500]	@ (8001a70 <main+0x754>)
 800187a:	487e      	ldr	r0, [pc, #504]	@ (8001a74 <main+0x758>)
 800187c:	f007 f9c0 	bl	8008c00 <fopen>
 8001880:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001884:	f103 0314 	add.w	r3, r3, #20
 8001888:	6018      	str	r0, [r3, #0]
		  for(int i=0; i<NUM_SAMPLES; i++){
 800188a:	2300      	movs	r3, #0
 800188c:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001890:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e06c      	b.n	8001972 <main+0x656>
			  // value is stored in four array parts (LSB left, MSB left, LSB right, MSB right)
			  // Sort it and value is 18-bit (MSB) in 2's complement
			  // audioData_left[i] = (int32_t)(rawdata2[4*i+1 + offset] << 16) | rawdata2[4*i + offset];
			  // audioData_left[i] = rawdata[2*i + 2*NUM_SAMPLES];
			  audioData_left[i] = ((int32_t)(rawdata[2*i + 2*NUM_SAMPLES] << 0)) >> 14;
 8001898:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 800189c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4a73      	ldr	r2, [pc, #460]	@ (8001a78 <main+0x75c>)
 80018aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ae:	1399      	asrs	r1, r3, #14
 80018b0:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 80018b4:	f103 0310 	add.w	r3, r3, #16
 80018b8:	f6a3 03d8 	subw	r3, r3, #2264	@ 0x8d8
 80018bc:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 80018c0:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  audioData_right[i] = ((int32_t)(rawdata[2*i+1 + 2*NUM_SAMPLES] << 0)) >> 14;
 80018ca:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80018ce:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	f203 4301 	addw	r3, r3, #1025	@ 0x401
 80018da:	4a67      	ldr	r2, [pc, #412]	@ (8001a78 <main+0x75c>)
 80018dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e0:	139a      	asrs	r2, r3, #14
 80018e2:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 80018e6:	f103 0310 	add.w	r3, r3, #16
 80018ea:	4619      	mov	r1, r3
 80018ec:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80018f0:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	f843 2cd8 	str.w	r2, [r3, #-216]
			  int n= sprintf (p, "%d", (int) audioData_left[i]);
 80018fe:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8001902:	f103 0310 	add.w	r3, r3, #16
 8001906:	f6a3 03d8 	subw	r3, r3, #2264	@ 0x8d8
 800190a:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 800190e:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001918:	461a      	mov	r2, r3
 800191a:	4958      	ldr	r1, [pc, #352]	@ (8001a7c <main+0x760>)
 800191c:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001920:	f103 0320 	add.w	r3, r3, #32
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	f007 fa29 	bl	8008d7c <siprintf>
 800192a:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 800192e:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001932:	6018      	str	r0, [r3, #0]
			  fprintf(fp,p);
 8001934:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001938:	f103 0320 	add.w	r3, r3, #32
 800193c:	6819      	ldr	r1, [r3, #0]
 800193e:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001942:	f103 0314 	add.w	r3, r3, #20
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	f007 f962 	bl	8008c10 <fiprintf>
			  fprintf(fp,"\n");
 800194c:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001950:	f103 0314 	add.w	r3, r3, #20
 8001954:	6819      	ldr	r1, [r3, #0]
 8001956:	200a      	movs	r0, #10
 8001958:	f007 f990 	bl	8008c7c <fputc>
		  for(int i=0; i<NUM_SAMPLES; i++){
 800195c:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001960:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 800196c:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001976:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001980:	db8a      	blt.n	8001898 <main+0x57c>
			  // audioData_right[i] = (int32_t)(rawdata2[4*i+3 + offset] << 16) | rawdata2[4*i+2 + offset];
			  // audioData_right[i] = rawdata[2*i+1 + 2*NUM_SAMPLES];
		  }
		  fclose(fp);
 8001982:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001986:	f103 0314 	add.w	r3, r3, #20
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	f006 ff3a 	bl	8008804 <fclose>
		  performFFT(FFT_left, audioData_left);
 8001990:	f507 52c1 	add.w	r2, r7, #6176	@ 0x1820
 8001994:	f102 0218 	add.w	r2, r2, #24
 8001998:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 800199c:	3b18      	subs	r3, #24
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fa99 	bl	8000ed8 <performFFT>
		  fp = fopen("C:\\Users\\franc\\OneDrive\\Dokumente\\MATLAB\\Master_Thesis\\FFT_Left.txt", "w");
 80019a6:	4932      	ldr	r1, [pc, #200]	@ (8001a70 <main+0x754>)
 80019a8:	4835      	ldr	r0, [pc, #212]	@ (8001a80 <main+0x764>)
 80019aa:	f007 f929 	bl	8008c00 <fopen>
 80019ae:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80019b2:	f103 0314 	add.w	r3, r3, #20
 80019b6:	6018      	str	r0, [r3, #0]
		  for(int i=0; i<NUM_SAMPLES/2; i++){
 80019b8:	2300      	movs	r3, #0
 80019ba:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 80019be:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e03c      	b.n	8001a40 <main+0x724>
			  int n= sprintf (p, "%f", (float) FFT_left[i]);
 80019c6:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 80019ca:	f103 0310 	add.w	r3, r3, #16
 80019ce:	f6a3 02d8 	subw	r2, r3, #2264	@ 0x8d8
 80019d2:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80019d6:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fdd0 	bl	8000588 <__aeabi_f2d>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	491d      	ldr	r1, [pc, #116]	@ (8001a64 <main+0x748>)
 80019ee:	f507 5003 	add.w	r0, r7, #8384	@ 0x20c0
 80019f2:	f100 0020 	add.w	r0, r0, #32
 80019f6:	6800      	ldr	r0, [r0, #0]
 80019f8:	f007 f9c0 	bl	8008d7c <siprintf>
 80019fc:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001a00:	6018      	str	r0, [r3, #0]
			  fprintf(fp,p);
 8001a02:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001a06:	f103 0320 	add.w	r3, r3, #32
 8001a0a:	6819      	ldr	r1, [r3, #0]
 8001a0c:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001a10:	f103 0314 	add.w	r3, r3, #20
 8001a14:	6818      	ldr	r0, [r3, #0]
 8001a16:	f007 f8fb 	bl	8008c10 <fiprintf>
			  fprintf(fp,"\n");
 8001a1a:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001a1e:	f103 0314 	add.w	r3, r3, #20
 8001a22:	6819      	ldr	r1, [r3, #0]
 8001a24:	200a      	movs	r0, #10
 8001a26:	f007 f929 	bl	8008c7c <fputc>
		  for(int i=0; i<NUM_SAMPLES/2; i++){
 8001a2a:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001a2e:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001a3a:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001a44:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2bff      	cmp	r3, #255	@ 0xff
 8001a4c:	ddbb      	ble.n	80019c6 <main+0x6aa>
		  }
		  fclose(fp);
 8001a4e:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001a52:	f103 0314 	add.w	r3, r3, #20
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	f006 fed4 	bl	8008804 <fclose>


		  // Delete lock file as signal for "done writing"
		  remove("C:\\...\\Data_Left.lock");
 8001a5c:	4802      	ldr	r0, [pc, #8]	@ (8001a68 <main+0x74c>)
 8001a5e:	f007 f985 	bl	8008d6c <remove>
	  if(TimCollapsed){
 8001a62:	e531      	b.n	80014c8 <main+0x1ac>
 8001a64:	0800b734 	.word	0x0800b734
 8001a68:	0800b68c 	.word	0x0800b68c
 8001a6c:	200012a6 	.word	0x200012a6
 8001a70:	0800b688 	.word	0x0800b688
 8001a74:	0800b6a4 	.word	0x0800b6a4
 8001a78:	200012a8 	.word	0x200012a8
 8001a7c:	0800b6ec 	.word	0x0800b6ec
 8001a80:	0800b6f0 	.word	0x0800b6f0

08001a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b094      	sub	sp, #80	@ 0x50
 8001a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	2234      	movs	r2, #52	@ 0x34
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f007 fb01 	bl	800909a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	4b29      	ldr	r3, [pc, #164]	@ (8001b54 <SystemClock_Config+0xd0>)
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	4a28      	ldr	r2, [pc, #160]	@ (8001b54 <SystemClock_Config+0xd0>)
 8001ab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab8:	4b26      	ldr	r3, [pc, #152]	@ (8001b54 <SystemClock_Config+0xd0>)
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	4b23      	ldr	r3, [pc, #140]	@ (8001b58 <SystemClock_Config+0xd4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ad0:	4a21      	ldr	r2, [pc, #132]	@ (8001b58 <SystemClock_Config+0xd4>)
 8001ad2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b58 <SystemClock_Config+0xd4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aec:	2310      	movs	r3, #16
 8001aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af0:	2302      	movs	r3, #2
 8001af2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001af4:	2300      	movs	r3, #0
 8001af6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001af8:	2308      	movs	r3, #8
 8001afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001afc:	2332      	movs	r3, #50	@ 0x32
 8001afe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b00:	2302      	movs	r3, #2
 8001b02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b04:	2302      	movs	r3, #2
 8001b06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	4618      	mov	r0, r3
 8001b12:	f004 ffaf 	bl	8006a74 <HAL_RCC_OscConfig>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b1c:	f000 f8c3 	bl	8001ca6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b20:	230f      	movs	r3, #15
 8001b22:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b24:	2302      	movs	r3, #2
 8001b26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f003 ff75 	bl	8005a2c <HAL_RCC_ClockConfig>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001b48:	f000 f8ad 	bl	8001ca6 <Error_Handler>
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	3750      	adds	r7, #80	@ 0x50
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40007000 	.word	0x40007000

08001b5c <HAL_TIM_PeriodElapsedCallback>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		12.03.2025	FL	Created
 ****************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a05      	ldr	r2, [pc, #20]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d102      	bne.n	8001b74 <HAL_TIM_PeriodElapsedCallback+0x18>
		TimCollapsed = SET;
 8001b6e:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	701a      	strb	r2, [r3, #0]
	}
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	40001400 	.word	0x40001400
 8001b84:	200012a4 	.word	0x200012a4

08001b88 <HAL_SAI_RxCpltCallback>:
//
//void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
//	Data_Arrived_First_Half = SET;
//}

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	Data_Arrived_Second_Half = SET;
 8001b90:	4b04      	ldr	r3, [pc, #16]	@ (8001ba4 <HAL_SAI_RxCpltCallback+0x1c>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	200012a6 	.word	0x200012a6

08001ba8 <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	Data_Arrived_First_Half = SET;
 8001bb0:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <HAL_SAI_RxHalfCpltCallback+0x1c>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200012a5 	.word	0x200012a5

08001bc8 <generate_ramp>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		12.03.2025	FL	Created
 ****************************************************************************/
void generate_ramp(double *ramp, uint8_t maxvalue, uint8_t numValues){
 8001bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	70fb      	strb	r3, [r7, #3]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	70bb      	strb	r3, [r7, #2]
	// numValues only for whole triangle
	double difference = 2*((double) maxvalue/ (double)numValues);
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fcb2 	bl	8000544 <__aeabi_ui2d>
 8001be0:	4604      	mov	r4, r0
 8001be2:	460d      	mov	r5, r1
 8001be4:	78bb      	ldrb	r3, [r7, #2]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fcac 	bl	8000544 <__aeabi_ui2d>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	f7fe fe4a 	bl	800088c <__aeabi_ddiv>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	f7fe fb62 	bl	80002cc <__adddf3>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i=0; i<numValues; i++){
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	e03e      	b.n	8001c94 <generate_ramp+0xcc>
		if(i<=numValues/2){
 8001c16:	78bb      	ldrb	r3, [r7, #2]
 8001c18:	085b      	lsrs	r3, r3, #1
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	4293      	cmp	r3, r2
 8001c22:	dc0f      	bgt.n	8001c44 <generate_ramp+0x7c>
			ramp[i] = i*difference;
 8001c24:	6978      	ldr	r0, [r7, #20]
 8001c26:	f7fe fc9d 	bl	8000564 <__aeabi_i2d>
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	18d4      	adds	r4, r2, r3
 8001c32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c36:	f7fe fcff 	bl	8000638 <__aeabi_dmul>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	e9c4 2300 	strd	r2, r3, [r4]
 8001c42:	e024      	b.n	8001c8e <generate_ramp+0xc6>
		} else {
			ramp[i] = ((double)maxvalue-(i-numValues/2)*difference);
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc7c 	bl	8000544 <__aeabi_ui2d>
 8001c4c:	4604      	mov	r4, r0
 8001c4e:	460d      	mov	r5, r1
 8001c50:	78bb      	ldrb	r3, [r7, #2]
 8001c52:	085b      	lsrs	r3, r3, #1
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	461a      	mov	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc81 	bl	8000564 <__aeabi_i2d>
 8001c62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c66:	f7fe fce7 	bl	8000638 <__aeabi_dmul>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	18d6      	adds	r6, r2, r3
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4620      	mov	r0, r4
 8001c80:	4629      	mov	r1, r5
 8001c82:	f7fe fb21 	bl	80002c8 <__aeabi_dsub>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	e9c6 2300 	strd	r2, r3, [r6]
	for(int i=0; i<numValues; i++){
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3301      	adds	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	78bb      	ldrb	r3, [r7, #2]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	dbbc      	blt.n	8001c16 <generate_ramp+0x4e>
		}
	}
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	371c      	adds	r7, #28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ca6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001caa:	b672      	cpsid	i
}
 8001cac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cae:	bf00      	nop
 8001cb0:	e7fd      	b.n	8001cae <Error_Handler+0x8>
	...

08001cb4 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001cb8:	4b17      	ldr	r3, [pc, #92]	@ (8001d18 <MX_SAI1_Init+0x64>)
 8001cba:	4a18      	ldr	r2, [pc, #96]	@ (8001d1c <MX_SAI1_Init+0x68>)
 8001cbc:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001cbe:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <MX_SAI1_Init+0x64>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001cc4:	4b14      	ldr	r3, [pc, #80]	@ (8001d18 <MX_SAI1_Init+0x64>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001cca:	4b13      	ldr	r3, [pc, #76]	@ (8001d18 <MX_SAI1_Init+0x64>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001cd0:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <MX_SAI1_Init+0x64>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <MX_SAI1_Init+0x64>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_NA;
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <MX_SAI1_Init+0x64>)
 8001cde:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001ce2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <MX_SAI1_Init+0x64>)
 8001ce6:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001cea:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <MX_SAI1_Init+0x64>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <MX_SAI1_Init+0x64>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <MX_SAI1_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 8001cfe:	2302      	movs	r3, #2
 8001d00:	2203      	movs	r2, #3
 8001d02:	2100      	movs	r1, #0
 8001d04:	4804      	ldr	r0, [pc, #16]	@ (8001d18 <MX_SAI1_Init+0x64>)
 8001d06:	f005 f953 	bl	8006fb0 <HAL_SAI_InitProtocol>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 8001d10:	f7ff ffc9 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	200032a8 	.word	0x200032a8
 8001d1c:	40015804 	.word	0x40015804

08001d20 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b0a0      	sub	sp, #128	@ 0x80
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	225c      	movs	r2, #92	@ 0x5c
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f007 f9b2 	bl	800909a <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a51      	ldr	r2, [pc, #324]	@ (8001e80 <HAL_SAI_MspInit+0x160>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	f040 809a 	bne.w	8001e76 <HAL_SAI_MspInit+0x156>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001d42:	2304      	movs	r3, #4
 8001d44:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 256;
 8001d46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 10;
 8001d50:	230a      	movs	r3, #10
 8001d52:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 8001d54:	2303      	movs	r3, #3
 8001d56:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 5;
 8001d58:	2305      	movs	r3, #5
 8001d5a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 5;
 8001d5c:	2305      	movs	r3, #5
 8001d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8001d60:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d64:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d66:	f107 0310 	add.w	r3, r7, #16
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f003 ff64 	bl	8005c38 <HAL_RCCEx_PeriphCLKConfig>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_SAI_MspInit+0x5a>
    {
      Error_Handler();
 8001d76:	f7ff ff96 	bl	8001ca6 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001d7a:	4b42      	ldr	r3, [pc, #264]	@ (8001e84 <HAL_SAI_MspInit+0x164>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10d      	bne.n	8001d9e <HAL_SAI_MspInit+0x7e>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b40      	ldr	r3, [pc, #256]	@ (8001e88 <HAL_SAI_MspInit+0x168>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	4a3f      	ldr	r2, [pc, #252]	@ (8001e88 <HAL_SAI_MspInit+0x168>)
 8001d8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d92:	4b3d      	ldr	r3, [pc, #244]	@ (8001e88 <HAL_SAI_MspInit+0x168>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001d9e:	4b39      	ldr	r3, [pc, #228]	@ (8001e84 <HAL_SAI_MspInit+0x164>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	3301      	adds	r3, #1
 8001da4:	4a37      	ldr	r2, [pc, #220]	@ (8001e84 <HAL_SAI_MspInit+0x164>)
 8001da6:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PC1     ------> SAI1_SD_A
    PA3     ------> SAI1_FS_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001da8:	2302      	movs	r3, #2
 8001daa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001db8:	2306      	movs	r3, #6
 8001dba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dbc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4832      	ldr	r0, [pc, #200]	@ (8001e8c <HAL_SAI_MspInit+0x16c>)
 8001dc4:	f003 fb40 	bl	8005448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dc8:	2308      	movs	r3, #8
 8001dca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001dd8:	2306      	movs	r3, #6
 8001dda:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ddc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001de0:	4619      	mov	r1, r3
 8001de2:	482b      	ldr	r0, [pc, #172]	@ (8001e90 <HAL_SAI_MspInit+0x170>)
 8001de4:	f003 fb30 	bl	8005448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001de8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001dfa:	2306      	movs	r3, #6
 8001dfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e02:	4619      	mov	r1, r3
 8001e04:	4823      	ldr	r0, [pc, #140]	@ (8001e94 <HAL_SAI_MspInit+0x174>)
 8001e06:	f003 fb1f 	bl	8005448 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8001e0a:	4b23      	ldr	r3, [pc, #140]	@ (8001e98 <HAL_SAI_MspInit+0x178>)
 8001e0c:	4a23      	ldr	r2, [pc, #140]	@ (8001e9c <HAL_SAI_MspInit+0x17c>)
 8001e0e:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8001e10:	4b21      	ldr	r3, [pc, #132]	@ (8001e98 <HAL_SAI_MspInit+0x178>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e16:	4b20      	ldr	r3, [pc, #128]	@ (8001e98 <HAL_SAI_MspInit+0x178>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e98 <HAL_SAI_MspInit+0x178>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001e22:	4b1d      	ldr	r3, [pc, #116]	@ (8001e98 <HAL_SAI_MspInit+0x178>)
 8001e24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e28:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e98 <HAL_SAI_MspInit+0x178>)
 8001e2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e30:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e32:	4b19      	ldr	r3, [pc, #100]	@ (8001e98 <HAL_SAI_MspInit+0x178>)
 8001e34:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e38:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001e3a:	4b17      	ldr	r3, [pc, #92]	@ (8001e98 <HAL_SAI_MspInit+0x178>)
 8001e3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e40:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8001e42:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <HAL_SAI_MspInit+0x178>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e48:	4b13      	ldr	r3, [pc, #76]	@ (8001e98 <HAL_SAI_MspInit+0x178>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001e4e:	4812      	ldr	r0, [pc, #72]	@ (8001e98 <HAL_SAI_MspInit+0x178>)
 8001e50:	f002 ff8a 	bl	8004d68 <HAL_DMA_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_SAI_MspInit+0x13e>
    {
      Error_Handler();
 8001e5a:	f7ff ff24 	bl	8001ca6 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a0d      	ldr	r2, [pc, #52]	@ (8001e98 <HAL_SAI_MspInit+0x178>)
 8001e62:	675a      	str	r2, [r3, #116]	@ 0x74
 8001e64:	4a0c      	ldr	r2, [pc, #48]	@ (8001e98 <HAL_SAI_MspInit+0x178>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <HAL_SAI_MspInit+0x178>)
 8001e6e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e70:	4a09      	ldr	r2, [pc, #36]	@ (8001e98 <HAL_SAI_MspInit+0x178>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8001e76:	bf00      	nop
 8001e78:	3780      	adds	r7, #128	@ 0x80
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40015804 	.word	0x40015804
 8001e84:	20003390 	.word	0x20003390
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	40020400 	.word	0x40020400
 8001e98:	20003330 	.word	0x20003330
 8001e9c:	40026428 	.word	0x40026428

08001ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <HAL_MspInit+0x4c>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eae:	4a0f      	ldr	r2, [pc, #60]	@ (8001eec <HAL_MspInit+0x4c>)
 8001eb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001eec <HAL_MspInit+0x4c>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <HAL_MspInit+0x4c>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	4a08      	ldr	r2, [pc, #32]	@ (8001eec <HAL_MspInit+0x4c>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_MspInit+0x4c>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800

08001ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <NMI_Handler+0x4>

08001ef8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efc:	bf00      	nop
 8001efe:	e7fd      	b.n	8001efc <HardFault_Handler+0x4>

08001f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <MemManage_Handler+0x4>

08001f08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <BusFault_Handler+0x4>

08001f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <UsageFault_Handler+0x4>

08001f18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f46:	f002 fb47 	bl	80045d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f54:	4802      	ldr	r0, [pc, #8]	@ (8001f60 <TIM7_IRQHandler+0x10>)
 8001f56:	f005 fd53 	bl	8007a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20003398 	.word	0x20003398

08001f64 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001f68:	4802      	ldr	r0, [pc, #8]	@ (8001f74 <DMA2_Stream1_IRQHandler+0x10>)
 8001f6a:	f003 f803 	bl	8004f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20003330 	.word	0x20003330

08001f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f80:	4a14      	ldr	r2, [pc, #80]	@ (8001fd4 <_sbrk+0x5c>)
 8001f82:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <_sbrk+0x60>)
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f8c:	4b13      	ldr	r3, [pc, #76]	@ (8001fdc <_sbrk+0x64>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d102      	bne.n	8001f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f94:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <_sbrk+0x64>)
 8001f96:	4a12      	ldr	r2, [pc, #72]	@ (8001fe0 <_sbrk+0x68>)
 8001f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f9a:	4b10      	ldr	r3, [pc, #64]	@ (8001fdc <_sbrk+0x64>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d207      	bcs.n	8001fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa8:	f007 f8ec 	bl	8009184 <__errno>
 8001fac:	4603      	mov	r3, r0
 8001fae:	220c      	movs	r2, #12
 8001fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb6:	e009      	b.n	8001fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb8:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <_sbrk+0x64>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fbe:	4b07      	ldr	r3, [pc, #28]	@ (8001fdc <_sbrk+0x64>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	4a05      	ldr	r2, [pc, #20]	@ (8001fdc <_sbrk+0x64>)
 8001fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fca:	68fb      	ldr	r3, [r7, #12]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20020000 	.word	0x20020000
 8001fd8:	00000400 	.word	0x00000400
 8001fdc:	20003394 	.word	0x20003394
 8001fe0:	200035e0 	.word	0x200035e0

08001fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fe8:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <SystemInit+0x20>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fee:	4a05      	ldr	r2, [pc, #20]	@ (8002004 <SystemInit+0x20>)
 8001ff0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ff4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200e:	463b      	mov	r3, r7
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002016:	4b15      	ldr	r3, [pc, #84]	@ (800206c <MX_TIM7_Init+0x64>)
 8002018:	4a15      	ldr	r2, [pc, #84]	@ (8002070 <MX_TIM7_Init+0x68>)
 800201a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4799;
 800201c:	4b13      	ldr	r3, [pc, #76]	@ (800206c <MX_TIM7_Init+0x64>)
 800201e:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8002022:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002024:	4b11      	ldr	r3, [pc, #68]	@ (800206c <MX_TIM7_Init+0x64>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 299;
 800202a:	4b10      	ldr	r3, [pc, #64]	@ (800206c <MX_TIM7_Init+0x64>)
 800202c:	f240 122b 	movw	r2, #299	@ 0x12b
 8002030:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002032:	4b0e      	ldr	r3, [pc, #56]	@ (800206c <MX_TIM7_Init+0x64>)
 8002034:	2280      	movs	r2, #128	@ 0x80
 8002036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002038:	480c      	ldr	r0, [pc, #48]	@ (800206c <MX_TIM7_Init+0x64>)
 800203a:	f005 fc21 	bl	8007880 <HAL_TIM_Base_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002044:	f7ff fe2f 	bl	8001ca6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002048:	2320      	movs	r3, #32
 800204a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002050:	463b      	mov	r3, r7
 8002052:	4619      	mov	r1, r3
 8002054:	4805      	ldr	r0, [pc, #20]	@ (800206c <MX_TIM7_Init+0x64>)
 8002056:	f005 fe97 	bl	8007d88 <HAL_TIMEx_MasterConfigSynchronization>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002060:	f7ff fe21 	bl	8001ca6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20003398 	.word	0x20003398
 8002070:	40001400 	.word	0x40001400

08002074 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0e      	ldr	r2, [pc, #56]	@ (80020bc <HAL_TIM_Base_MspInit+0x48>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d115      	bne.n	80020b2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b0d      	ldr	r3, [pc, #52]	@ (80020c0 <HAL_TIM_Base_MspInit+0x4c>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	4a0c      	ldr	r2, [pc, #48]	@ (80020c0 <HAL_TIM_Base_MspInit+0x4c>)
 8002090:	f043 0320 	orr.w	r3, r3, #32
 8002094:	6413      	str	r3, [r2, #64]	@ 0x40
 8002096:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <HAL_TIM_Base_MspInit+0x4c>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	f003 0320 	and.w	r3, r3, #32
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2103      	movs	r1, #3
 80020a6:	2037      	movs	r0, #55	@ 0x37
 80020a8:	f002 fe27 	bl	8004cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80020ac:	2037      	movs	r0, #55	@ 0x37
 80020ae:	f002 fe40 	bl	8004d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40001400 	.word	0x40001400
 80020c0:	40023800 	.word	0x40023800

080020c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020c8:	f7ff ff8c 	bl	8001fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020cc:	480c      	ldr	r0, [pc, #48]	@ (8002100 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020ce:	490d      	ldr	r1, [pc, #52]	@ (8002104 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002108 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d4:	e002      	b.n	80020dc <LoopCopyDataInit>

080020d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020da:	3304      	adds	r3, #4

080020dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e0:	d3f9      	bcc.n	80020d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e2:	4a0a      	ldr	r2, [pc, #40]	@ (800210c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002110 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e8:	e001      	b.n	80020ee <LoopFillZerobss>

080020ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ec:	3204      	adds	r2, #4

080020ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f0:	d3fb      	bcc.n	80020ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80020f2:	f007 f84d 	bl	8009190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020f6:	f7ff f911 	bl	800131c <main>
  bx  lr    
 80020fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002104:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002108:	08020fdc 	.word	0x08020fdc
  ldr r2, =_sbss
 800210c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002110:	200035dc 	.word	0x200035dc

08002114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002114:	e7fe      	b.n	8002114 <ADC_IRQHandler>

08002116 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8002116:	b480      	push	{r7}
 8002118:	b089      	sub	sp, #36	@ 0x24
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	460b      	mov	r3, r1
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	e043      	b.n	80021b2 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	089b      	lsrs	r3, r3, #2
 8002136:	b29b      	uxth	r3, r3
 8002138:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3301      	adds	r3, #1
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	4413      	add	r3, r2
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	b29b      	uxth	r3, r3
 800214a:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	441a      	add	r2, r3
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	68f9      	ldr	r1, [r7, #12]
 8002166:	440b      	add	r3, r1
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4413      	add	r3, r2
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	3301      	adds	r3, #1
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4413      	add	r3, r2
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	441a      	add	r2, r3
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	3301      	adds	r3, #1
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	68f9      	ldr	r1, [r7, #12]
 8002198:	440b      	add	r3, r1
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	3301      	adds	r3, #1
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	601a      	str	r2, [r3, #0]

    i += 2;
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	3302      	adds	r3, #2
 80021b0:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 80021b2:	897b      	ldrh	r3, [r7, #10]
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d3b7      	bcc.n	800212a <arm_bitreversal_32+0x14>
  }
}
 80021ba:	bf00      	nop
 80021bc:	bf00      	nop
 80021be:	3724      	adds	r7, #36	@ 0x24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b0a0      	sub	sp, #128	@ 0x80
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 80021d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	677b      	str	r3, [r7, #116]	@ 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	673b      	str	r3, [r7, #112]	@ 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	667b      	str	r3, [r7, #100]	@ 0x64
  pCol2 = p2;
 80021ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021ee:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Define new length */
  L >>= 1;
 80021f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021f2:	085b      	lsrs	r3, r3, #1
 80021f4:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 80021f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	4413      	add	r3, r2
 80021fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pMid2 = p2 + L;
 8002200:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002206:	4413      	add	r3, r2
 8002208:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 800220a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002210:	e1b6      	b.n	8002580 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	63bb      	str	r3, [r7, #56]	@ 0x38
    t1[1] = p1[1];
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    t1[2] = p1[2];
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	643b      	str	r3, [r7, #64]	@ 0x40
    t1[3] = p1[3];
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	647b      	str	r3, [r7, #68]	@ 0x44

    t2[0] = p2[0];
 800222a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	62bb      	str	r3, [r7, #40]	@ 0x28
    t2[1] = p2[1];
 8002230:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t2[2] = p2[2];
 8002236:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	633b      	str	r3, [r7, #48]	@ 0x30
    t2[3] = p2[3];
 800223c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	637b      	str	r3, [r7, #52]	@ 0x34

    t3[0] = pMid1[0];
 8002242:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8002248:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 800224e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8002254:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24

    t4[0] = pMid2[0];
 800225a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8002260:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8002266:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 800226c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8002272:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002276:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	1d1a      	adds	r2, r3, #4
 800227e:	603a      	str	r2, [r7, #0]
 8002280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002284:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8002288:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800228c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	1d1a      	adds	r2, r3, #4
 8002294:	603a      	str	r2, [r7, #0]
 8002296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 800229e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80022a2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	1d1a      	adds	r2, r3, #4
 80022aa:	603a      	str	r2, [r7, #0]
 80022ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b0:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 80022b4:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80022b8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	1d1a      	adds	r2, r3, #4
 80022c0:	603a      	str	r2, [r7, #0]
 80022c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c6:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 80022ca:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80022ce:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80022d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    t2[1] = t1[1] - t2[1];
 80022da:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80022de:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80022e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[2] = t1[2] - t2[2];
 80022ea:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80022ee:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80022f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 80022fa:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80022fe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002306:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    *pMid1++ = t3[0] + t4[0];
 800230a:	ed97 7a06 	vldr	s14, [r7, #24]
 800230e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002312:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002314:	1d1a      	adds	r2, r3, #4
 8002316:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800231c:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 8002320:	ed97 7a07 	vldr	s14, [r7, #28]
 8002324:	edd7 7a03 	vldr	s15, [r7, #12]
 8002328:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800232a:	1d1a      	adds	r2, r3, #4
 800232c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800232e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002332:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8002336:	ed97 7a08 	vldr	s14, [r7, #32]
 800233a:	edd7 7a04 	vldr	s15, [r7, #16]
 800233e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002340:	1d1a      	adds	r2, r3, #4
 8002342:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002348:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 800234c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002350:	edd7 7a05 	vldr	s15, [r7, #20]
 8002354:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002356:	1d1a      	adds	r2, r3, #4
 8002358:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800235a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800235e:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8002362:	ed97 7a02 	vldr	s14, [r7, #8]
 8002366:	edd7 7a06 	vldr	s15, [r7, #24]
 800236a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800236e:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8002372:	ed97 7a03 	vldr	s14, [r7, #12]
 8002376:	edd7 7a07 	vldr	s15, [r7, #28]
 800237a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800237e:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8002382:	ed97 7a04 	vldr	s14, [r7, #16]
 8002386:	edd7 7a08 	vldr	s15, [r7, #32]
 800238a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800238e:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8002392:	ed97 7a05 	vldr	s14, [r7, #20]
 8002396:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800239a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800239e:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 80023a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023a4:	1d1a      	adds	r2, r3, #4
 80023a6:	673a      	str	r2, [r7, #112]	@ 0x70
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 80023ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023ae:	1d1a      	adds	r2, r3, #4
 80023b0:	673a      	str	r2, [r7, #112]	@ 0x70
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 80023b6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80023ba:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80023be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c2:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[1] * twI;
 80023c6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80023ca:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80023ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d2:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[1] * twR;
 80023d6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80023da:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80023de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e2:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[0] * twI;
 80023e6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80023ea:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80023ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f2:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 80023f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023f8:	1d1a      	adds	r2, r3, #4
 80023fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80023fc:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002400:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002408:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 800240c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800240e:	1d1a      	adds	r2, r3, #4
 8002410:	677a      	str	r2, [r7, #116]	@ 0x74
 8002412:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002416:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800241a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800241e:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8002422:	edd7 7a02 	vldr	s15, [r7, #8]
 8002426:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800242a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[1] * twR;
 8002432:	edd7 7a03 	vldr	s15, [r7, #12]
 8002436:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800243a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[1] * twI;
 8002442:	edd7 7a03 	vldr	s15, [r7, #12]
 8002446:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800244a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[0] * twR;
 8002452:	edd7 7a02 	vldr	s15, [r7, #8]
 8002456:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800245a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 8002462:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002464:	1d1a      	adds	r2, r3, #4
 8002466:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002468:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800246c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002470:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002474:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8002478:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800247a:	1d1a      	adds	r2, r3, #4
 800247c:	67ba      	str	r2, [r7, #120]	@ 0x78
 800247e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002482:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248a:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 800248e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002490:	1d1a      	adds	r2, r3, #4
 8002492:	673a      	str	r2, [r7, #112]	@ 0x70
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 8002498:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800249a:	1d1a      	adds	r2, r3, #4
 800249c:	673a      	str	r2, [r7, #112]	@ 0x70
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	65bb      	str	r3, [r7, #88]	@ 0x58

    m0 = t2[2] * twR;
 80024a2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80024a6:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80024aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ae:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[3] * twI;
 80024b2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80024b6:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80024ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024be:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[3] * twR;
 80024c2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80024c6:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80024ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ce:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[2] * twI;
 80024d2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80024d6:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80024da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024de:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *p2++ = m0 + m1;
 80024e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024e4:	1d1a      	adds	r2, r3, #4
 80024e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80024e8:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80024ec:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80024f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f4:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80024f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024fa:	1d1a      	adds	r2, r3, #4
 80024fc:	677a      	str	r2, [r7, #116]	@ 0x74
 80024fe:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002502:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800250a:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 800250e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002512:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[3] * twR;
 800251e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002522:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[3] * twI;
 800252e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002532:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[2] * twR;
 800253e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002542:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 800254e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002550:	1d1a      	adds	r2, r3, #4
 8002552:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002554:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002558:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800255c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002560:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8002564:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002566:	1d1a      	adds	r2, r3, #4
 8002568:	67ba      	str	r2, [r7, #120]	@ 0x78
 800256a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800256e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002576:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 800257a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800257c:	3b01      	subs	r3, #1
 800257e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002580:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002582:	2b00      	cmp	r3, #0
 8002584:	f47f ae45 	bne.w	8002212 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8002588:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800258a:	b299      	uxth	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	2302      	movs	r3, #2
 8002592:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002594:	f000 ffc8 	bl	8003528 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8002598:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800259a:	b299      	uxth	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	2302      	movs	r3, #2
 80025a2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80025a4:	f000 ffc0 	bl	8003528 <arm_radix8_butterfly_f32>
}
 80025a8:	bf00      	nop
 80025aa:	3780      	adds	r7, #128	@ 0x80
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b0ac      	sub	sp, #176	@ 0xb0
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	085b      	lsrs	r3, r3, #1
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 80025c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	4413      	add	r3, r2
 80025d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    float32_t * p3 = p2 + L;
 80025d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80025de:	4413      	add	r3, r2
 80025e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    float32_t * p4 = p3 + L;
 80025e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80025ee:	4413      	add	r3, r2
 80025f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    pCol2 = p2;
 80025f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025fc:	67bb      	str	r3, [r7, #120]	@ 0x78
    pCol3 = p3;
 80025fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002602:	677b      	str	r3, [r7, #116]	@ 0x74
    pCol4 = p4;
 8002604:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002608:	673b      	str	r3, [r7, #112]	@ 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 800260a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800260e:	3b04      	subs	r3, #4
 8002610:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    pEnd2 = p3 - 1;
 8002614:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002618:	3b04      	subs	r3, #4
 800261a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    pEnd3 = p4 - 1;
 800261e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002622:	3b04      	subs	r3, #4
 8002624:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    pEnd4 = pEnd3 + L;
 8002628:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002632:	4413      	add	r3, r2
 8002634:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002640:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002644:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002648:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800264c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    L >>= 1;
 8002650:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002654:	085b      	lsrs	r3, r3, #1
 8002656:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 800265a:	2302      	movs	r3, #2
 800265c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    twMod3 = 4;
 800265e:	2304      	movs	r3, #4
 8002660:	66bb      	str	r3, [r7, #104]	@ 0x68
    twMod4 = 6;
 8002662:	2306      	movs	r3, #6
 8002664:	667b      	str	r3, [r7, #100]	@ 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	ed93 7a00 	vldr	s14, [r3]
 800266c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002670:	edd3 7a00 	vldr	s15, [r3]
 8002674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002678:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	ed93 7a00 	vldr	s14, [r3]
 8002682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002686:	edd3 7a00 	vldr	s15, [r3]
 800268a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800268e:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	3304      	adds	r3, #4
 8002696:	ed93 7a00 	vldr	s14, [r3]
 800269a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800269e:	3304      	adds	r3, #4
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a8:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	3304      	adds	r3, #4
 80026b0:	ed93 7a00 	vldr	s14, [r3]
 80026b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026b8:	3304      	adds	r3, #4
 80026ba:	edd3 7a00 	vldr	s15, [r3]
 80026be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c2:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80026c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80026ca:	3304      	adds	r3, #4
 80026cc:	ed93 7a00 	vldr	s14, [r3]
 80026d0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80026d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026dc:	3304      	adds	r3, #4
 80026de:	edd3 7a00 	vldr	s15, [r3]
 80026e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80026ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80026ee:	edd3 7a00 	vldr	s15, [r3]
 80026f2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80026f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026fe:	edd3 7a00 	vldr	s15, [r3]
 8002702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002706:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800270a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800270e:	edd3 7a00 	vldr	s15, [r3]
 8002712:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002716:	ee37 7a67 	vsub.f32	s14, s14, s15
 800271a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800271e:	edd3 7a00 	vldr	s15, [r3]
 8002722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002726:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800272a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800272e:	3304      	adds	r3, #4
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002738:	ee37 7a67 	vsub.f32	s14, s14, s15
 800273c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002740:	3304      	adds	r3, #4
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800274a:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800274e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002752:	3304      	adds	r3, #4
 8002754:	edd3 7a00 	vldr	s15, [r3]
 8002758:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800275c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002760:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002764:	3304      	adds	r3, #4
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276e:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002772:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002776:	ed93 7a00 	vldr	s14, [r3]
 800277a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800277e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002782:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002786:	edd3 7a00 	vldr	s15, [r3]
 800278a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800278e:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002792:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002796:	ed93 7a00 	vldr	s14, [r3]
 800279a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800279e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027a6:	edd3 7a00 	vldr	s15, [r3]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	1d1a      	adds	r2, r3, #4
 80027ae:	603a      	str	r2, [r7, #0]
 80027b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b4:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80027b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027bc:	3304      	adds	r3, #4
 80027be:	ed93 7a00 	vldr	s14, [r3]
 80027c2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80027c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027ce:	3304      	adds	r3, #4
 80027d0:	edd3 7a00 	vldr	s15, [r3]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	1d1a      	adds	r2, r3, #4
 80027d8:	603a      	str	r2, [r7, #0]
 80027da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027de:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 80027e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027e6:	1d1a      	adds	r2, r3, #4
 80027e8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80027ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027ee:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 80027f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027f4:	1d1a      	adds	r2, r3, #4
 80027f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80027fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027fc:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 80027fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002802:	1d1a      	adds	r2, r3, #4
 8002804:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 800280c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002810:	1d1a      	adds	r2, r3, #4
 8002812:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002816:	6a3a      	ldr	r2, [r7, #32]
 8002818:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 800281a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800281e:	1d1a      	adds	r2, r3, #4
 8002820:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8002828:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800282c:	1d1a      	adds	r2, r3, #4
 800282e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8002836:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800283e:	4413      	add	r3, r2
 8002840:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tw3 += twMod3;
 8002844:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800284c:	4413      	add	r3, r2
 800284e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tw4 += twMod4;
 8002852:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800285a:	4413      	add	r3, r2
 800285c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8002860:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002864:	3b02      	subs	r3, #2
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800286c:	e31c      	b.n	8002ea8 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	ed93 7a00 	vldr	s14, [r3]
 8002874:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002878:	edd3 7a00 	vldr	s15, [r3]
 800287c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002880:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = p1[0] - p3[0];
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	ed93 7a00 	vldr	s14, [r3]
 800288a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800288e:	edd3 7a00 	vldr	s15, [r3]
 8002892:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002896:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      p1ap3_1 = p1[1] + p3[1];
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	3304      	adds	r3, #4
 800289e:	ed93 7a00 	vldr	s14, [r3]
 80028a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028a6:	3304      	adds	r3, #4
 80028a8:	edd3 7a00 	vldr	s15, [r3]
 80028ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b0:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = p1[1] - p3[1];
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	3304      	adds	r3, #4
 80028b8:	ed93 7a00 	vldr	s14, [r3]
 80028bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028c0:	3304      	adds	r3, #4
 80028c2:	edd3 7a00 	vldr	s15, [r3]
 80028c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ca:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 80028ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028d2:	3304      	adds	r3, #4
 80028d4:	ed93 7a00 	vldr	s14, [r3]
 80028d8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80028dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028e4:	3304      	adds	r3, #4
 80028e6:	edd3 7a00 	vldr	s15, [r3]
 80028ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ee:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 80028f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028f6:	edd3 7a00 	vldr	s15, [r3]
 80028fa:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80028fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002902:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002906:	edd3 7a00 	vldr	s15, [r3]
 800290a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800290e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002912:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002916:	edd3 7a00 	vldr	s15, [r3]
 800291a:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800291e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002922:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002926:	edd3 7a00 	vldr	s15, [r3]
 800292a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800292e:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002932:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002936:	3304      	adds	r3, #4
 8002938:	edd3 7a00 	vldr	s15, [r3]
 800293c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002940:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002944:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002948:	3304      	adds	r3, #4
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002952:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002956:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800295a:	3304      	adds	r3, #4
 800295c:	edd3 7a00 	vldr	s15, [r3]
 8002960:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002964:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002968:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800296c:	3304      	adds	r3, #4
 800296e:	edd3 7a00 	vldr	s15, [r3]
 8002972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002976:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 800297a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800297e:	ed93 7a00 	vldr	s14, [r3]
 8002982:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002996:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 800299a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800299e:	ed93 7a00 	vldr	s14, [r3]
 80029a2:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80029a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029ae:	edd3 7a00 	vldr	s15, [r3]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	1d1a      	adds	r2, r3, #4
 80029b6:	603a      	str	r2, [r7, #0]
 80029b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029bc:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 80029c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029c4:	3304      	adds	r3, #4
 80029c6:	ed93 7a00 	vldr	s14, [r3]
 80029ca:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80029ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029d6:	3304      	adds	r3, #4
 80029d8:	edd3 7a00 	vldr	s15, [r3]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	1d1a      	adds	r2, r3, #4
 80029e0:	603a      	str	r2, [r7, #0]
 80029e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e6:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80029ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029ee:	3b04      	subs	r3, #4
 80029f0:	ed93 7a00 	vldr	s14, [r3]
 80029f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029f8:	3b04      	subs	r3, #4
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a02:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8002a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a0a:	3b04      	subs	r3, #4
 8002a0c:	ed93 7a00 	vldr	s14, [r3]
 8002a10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a14:	3b04      	subs	r3, #4
 8002a16:	edd3 7a00 	vldr	s15, [r3]
 8002a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a1e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8002a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a26:	ed93 7a00 	vldr	s14, [r3]
 8002a2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a2e:	edd3 7a00 	vldr	s15, [r3]
 8002a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a36:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8002a3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a3e:	ed93 7a00 	vldr	s14, [r3]
 8002a42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a46:	edd3 7a00 	vldr	s15, [r3]
 8002a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a4e:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8002a52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a56:	ed93 7a00 	vldr	s14, [r3]
 8002a5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a5e:	edd3 7a00 	vldr	s15, [r3]
 8002a62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a66:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8002a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a76:	ed93 7a00 	vldr	s14, [r3]
 8002a7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a7e:	edd3 7a00 	vldr	s15, [r3]
 8002a82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a8a:	3b04      	subs	r3, #4
 8002a8c:	edd3 7a00 	vldr	s15, [r3]
 8002a90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a98:	3b04      	subs	r3, #4
 8002a9a:	edd3 7a00 	vldr	s15, [r3]
 8002a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8002aa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002aaa:	3b04      	subs	r3, #4
 8002aac:	edd3 7a00 	vldr	s15, [r3]
 8002ab0:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002ab4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ab8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002abc:	3b04      	subs	r3, #4
 8002abe:	edd3 7a00 	vldr	s15, [r3]
 8002ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ac6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8002aca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ace:	edd3 7a00 	vldr	s15, [r3]
 8002ad2:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002ad6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ada:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ade:	edd3 7a00 	vldr	s15, [r3]
 8002ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8002aea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002aee:	ed93 7a00 	vldr	s14, [r3]
 8002af2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002af6:	edd3 7a00 	vldr	s15, [r3]
 8002afa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002afe:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b06:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8002b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b0e:	3b04      	subs	r3, #4
 8002b10:	ed93 7a00 	vldr	s14, [r3]
 8002b14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b18:	3b04      	subs	r3, #4
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b22:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b2a:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8002b2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b32:	ed93 7a00 	vldr	s14, [r3]
 8002b36:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002b3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b42:	edd3 7a00 	vldr	s15, [r3]
 8002b46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b4a:	1f1a      	subs	r2, r3, #4
 8002b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b54:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8002b58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b5c:	3b04      	subs	r3, #4
 8002b5e:	ed93 7a00 	vldr	s14, [r3]
 8002b62:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002b66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b6e:	3b04      	subs	r3, #4
 8002b70:	edd3 7a00 	vldr	s15, [r3]
 8002b74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b78:	1f1a      	subs	r2, r3, #4
 8002b7a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b82:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8002b86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b8a:	1d1a      	adds	r2, r3, #4
 8002b8c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = *tw2++;
 8002b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b98:	1d1a      	adds	r2, r3, #4
 8002b9a:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8002ba2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002ba6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bae:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[1] * twI;
 8002bb2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002bb6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bbe:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[1] * twR;
 8002bc2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002bc6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bce:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[0] * twI;
 8002bd2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002bd6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bde:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p2++ = m0 + m1;
 8002be2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002be6:	1d1a      	adds	r2, r3, #4
 8002be8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002bec:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002bf0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf8:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8002bfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c00:	1d1a      	adds	r2, r3, #4
 8002c02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002c06:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002c0a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c12:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8002c16:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002c1a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c22:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[2] * twR;
 8002c26:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002c2a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c32:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[2] * twI;
 8002c36:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002c3a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c42:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[3] * twR;
 8002c46:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002c4a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c52:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd2-- = m0 - m1;
 8002c56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c5a:	1f1a      	subs	r2, r3, #4
 8002c5c:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c60:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002c64:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c6c:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8002c70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c74:	1f1a      	subs	r2, r3, #4
 8002c76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c7a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002c7e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c86:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8002c8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw3[1];
 8002c92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c96:	3304      	adds	r3, #4
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw3 += twMod3;
 8002c9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      /* Top */
      m0 = t3[0] * twR;
 8002caa:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cae:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t3[1] * twI;
 8002cba:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cbe:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t3[1] * twR;
 8002cca:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cce:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t3[0] * twI;
 8002cda:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cde:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p3++ = m0 + m1;
 8002cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cee:	1d1a      	adds	r2, r3, #4
 8002cf0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002cf4:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002cf8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d00:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8002d04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d08:	1d1a      	adds	r2, r3, #4
 8002d0a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d0e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002d12:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d1a:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8002d1e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002d22:	eef1 7a67 	vneg.f32	s15, s15
 8002d26:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 =  t3[2] * twI;
 8002d32:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002d36:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d3e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 =  t3[2] * twR;
 8002d42:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002d46:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 =  t3[3] * twI;
 8002d52:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002d56:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd3-- = m0 - m1;
 8002d62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d66:	1f1a      	subs	r2, r3, #4
 8002d68:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d6c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002d70:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d78:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8002d7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d80:	1f1a      	subs	r2, r3, #4
 8002d82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d86:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002d8a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002d8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d92:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8002d96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw4[1];
 8002d9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002da2:	3304      	adds	r3, #4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw4 += twMod4;
 8002da8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002db0:	4413      	add	r3, r2
 8002db2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      /* Top */
      m0 = t4[0] * twR;
 8002db6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dba:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dc2:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[1] * twI;
 8002dc6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dca:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd2:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[1] * twR;
 8002dd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dda:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[0] * twI;
 8002de6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dea:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p4++ = m0 + m1;
 8002df6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002dfa:	1d1a      	adds	r2, r3, #4
 8002dfc:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002e00:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002e04:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e0c:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8002e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e14:	1d1a      	adds	r2, r3, #4
 8002e16:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002e1a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002e1e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e26:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8002e2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e2e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e36:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[2] * twR;
 8002e3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e3e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e46:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[2] * twI;
 8002e4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e4e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e56:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[3] * twR;
 8002e5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e5e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e66:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd4-- = m0 - m1;
 8002e6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e6e:	1f1a      	subs	r2, r3, #4
 8002e70:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8002e74:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002e78:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e80:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8002e84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e88:	1f1a      	subs	r2, r3, #4
 8002e8a:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8002e8e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002e92:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9a:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8002e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f47f acde 	bne.w	800286e <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	ed93 7a00 	vldr	s14, [r3]
 8002eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ebc:	edd3 7a00 	vldr	s15, [r3]
 8002ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec4:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	ed93 7a00 	vldr	s14, [r3]
 8002ece:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ed2:	edd3 7a00 	vldr	s15, [r3]
 8002ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eda:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	ed93 7a00 	vldr	s14, [r3]
 8002ee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eea:	3304      	adds	r3, #4
 8002eec:	edd3 7a00 	vldr	s15, [r3]
 8002ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef4:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	3304      	adds	r3, #4
 8002efc:	ed93 7a00 	vldr	s14, [r3]
 8002f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f04:	3304      	adds	r3, #4
 8002f06:	edd3 7a00 	vldr	s15, [r3]
 8002f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f0e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002f12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f16:	3304      	adds	r3, #4
 8002f18:	ed93 7a00 	vldr	s14, [r3]
 8002f1c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002f20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f28:	3304      	adds	r3, #4
 8002f2a:	edd3 7a00 	vldr	s15, [r3]
 8002f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f32:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002f36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f3a:	edd3 7a00 	vldr	s15, [r3]
 8002f3e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002f42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f4a:	edd3 7a00 	vldr	s15, [r3]
 8002f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f52:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002f56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f5a:	edd3 7a00 	vldr	s15, [r3]
 8002f5e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002f62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f6a:	edd3 7a00 	vldr	s15, [r3]
 8002f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f72:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002f76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	edd3 7a00 	vldr	s15, [r3]
 8002f80:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002f84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	edd3 7a00 	vldr	s15, [r3]
 8002f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f96:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002f9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	edd3 7a00 	vldr	s15, [r3]
 8002fa4:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002fa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	edd3 7a00 	vldr	s15, [r3]
 8002fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fba:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002fbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fc2:	ed93 7a00 	vldr	s14, [r3]
 8002fc6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002fca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fd2:	edd3 7a00 	vldr	s15, [r3]
 8002fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fda:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002fde:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fe2:	ed93 7a00 	vldr	s14, [r3]
 8002fe6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002fea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ff2:	edd3 7a00 	vldr	s15, [r3]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	1d1a      	adds	r2, r3, #4
 8002ffa:	603a      	str	r2, [r7, #0]
 8002ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003000:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8003004:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003008:	3304      	adds	r3, #4
 800300a:	ed93 7a00 	vldr	s14, [r3]
 800300e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003012:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003016:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800301a:	3304      	adds	r3, #4
 800301c:	edd3 7a00 	vldr	s15, [r3]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	1d1a      	adds	r2, r3, #4
 8003024:	603a      	str	r2, [r7, #0]
 8003026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302a:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 800302e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw2[1];
 8003036:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800303a:	3304      	adds	r3, #4
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t2[0] * twR;
 8003040:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003044:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t2[1] * twI;
 8003050:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003054:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t2[1] * twR;
 8003060:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003064:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800306c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t2[0] * twI;
 8003070:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003074:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p2++ = m0 + m1;
 8003080:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003084:	1d1a      	adds	r2, r3, #4
 8003086:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800308a:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800308e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003096:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800309a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800309e:	1d1a      	adds	r2, r3, #4
 80030a0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80030a4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80030a8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80030ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030b0:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 80030b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw3[1];
 80030bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030c0:	3304      	adds	r3, #4
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t3[0] * twR;
 80030c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80030ca:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80030ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d2:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t3[1] * twI;
 80030d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80030da:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80030de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e2:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t3[1] * twR;
 80030e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80030ea:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80030ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t3[0] * twI;
 80030f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80030fa:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80030fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003102:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p3++ = m0 + m1;
 8003106:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800310a:	1d1a      	adds	r2, r3, #4
 800310c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003110:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8003114:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800311c:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8003120:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003124:	1d1a      	adds	r2, r3, #4
 8003126:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800312a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800312e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003136:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 800313a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw4[1];
 8003142:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003146:	3304      	adds	r3, #4
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t4[0] * twR;
 800314c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003150:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003158:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t4[1] * twI;
 800315c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003160:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003168:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t4[1] * twR;
 800316c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003170:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003178:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t4[0] * twI;
 800317c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003180:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003188:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p4++ = m0 + m1;
 800318c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003190:	1d1a      	adds	r2, r3, #4
 8003192:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003196:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800319a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800319e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a2:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 80031a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031aa:	1d1a      	adds	r2, r3, #4
 80031ac:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80031b0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80031b4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80031b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031bc:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 80031c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031c4:	b299      	uxth	r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	2304      	movs	r3, #4
 80031cc:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80031ce:	f000 f9ab 	bl	8003528 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 80031d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031d6:	b299      	uxth	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	2304      	movs	r3, #4
 80031de:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80031e0:	f000 f9a2 	bl	8003528 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 80031e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031e8:	b299      	uxth	r1, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	2304      	movs	r3, #4
 80031f0:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80031f2:	f000 f999 	bl	8003528 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80031f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031fa:	b299      	uxth	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	2304      	movs	r3, #4
 8003202:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003204:	f000 f990 	bl	8003528 <arm_radix8_butterfly_f32>
}
 8003208:	bf00      	nop
 800320a:	37b0      	adds	r7, #176	@ 0xb0
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	4611      	mov	r1, r2
 800321c:	461a      	mov	r2, r3
 800321e:	460b      	mov	r3, r1
 8003220:	71fb      	strb	r3, [r7, #7]
 8003222:	4613      	mov	r3, r2
 8003224:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d117      	bne.n	8003262 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	3304      	adds	r3, #4
 8003236:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8003238:	2300      	movs	r3, #0
 800323a:	61fb      	str	r3, [r7, #28]
 800323c:	e00d      	b.n	800325a <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	edd3 7a00 	vldr	s15, [r3]
 8003244:	eef1 7a67 	vneg.f32	s15, s15
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	3308      	adds	r3, #8
 8003252:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	3301      	adds	r3, #1
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	429a      	cmp	r2, r3
 8003260:	d3ed      	bcc.n	800323e <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003268:	d040      	beq.n	80032ec <arm_cfft_f32+0xdc>
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003270:	d845      	bhi.n	80032fe <arm_cfft_f32+0xee>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003278:	d033      	beq.n	80032e2 <arm_cfft_f32+0xd2>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003280:	d83d      	bhi.n	80032fe <arm_cfft_f32+0xee>
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003288:	d026      	beq.n	80032d8 <arm_cfft_f32+0xc8>
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003290:	d835      	bhi.n	80032fe <arm_cfft_f32+0xee>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003298:	d028      	beq.n	80032ec <arm_cfft_f32+0xdc>
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032a0:	d82d      	bhi.n	80032fe <arm_cfft_f32+0xee>
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032a8:	d01b      	beq.n	80032e2 <arm_cfft_f32+0xd2>
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032b0:	d825      	bhi.n	80032fe <arm_cfft_f32+0xee>
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b80      	cmp	r3, #128	@ 0x80
 80032b6:	d00f      	beq.n	80032d8 <arm_cfft_f32+0xc8>
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b80      	cmp	r3, #128	@ 0x80
 80032bc:	d81f      	bhi.n	80032fe <arm_cfft_f32+0xee>
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b40      	cmp	r3, #64	@ 0x40
 80032c2:	d013      	beq.n	80032ec <arm_cfft_f32+0xdc>
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b40      	cmp	r3, #64	@ 0x40
 80032c8:	d819      	bhi.n	80032fe <arm_cfft_f32+0xee>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b10      	cmp	r3, #16
 80032ce:	d003      	beq.n	80032d8 <arm_cfft_f32+0xc8>
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	d005      	beq.n	80032e2 <arm_cfft_f32+0xd2>
 80032d6:	e012      	b.n	80032fe <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f7fe ff74 	bl	80021c8 <arm_cfft_radix8by2_f32>
    break;
 80032e0:	e00d      	b.n	80032fe <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80032e2:	68b9      	ldr	r1, [r7, #8]
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f7ff f963 	bl	80025b0 <arm_cfft_radix8by4_f32>
    break;
 80032ea:	e008      	b.n	80032fe <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	b299      	uxth	r1, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	2301      	movs	r3, #1
 80032f6:	68b8      	ldr	r0, [r7, #8]
 80032f8:	f000 f916 	bl	8003528 <arm_radix8_butterfly_f32>
    break;
 80032fc:	bf00      	nop
  }

  if ( bitReverseFlag )
 80032fe:	79bb      	ldrb	r3, [r7, #6]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d007      	beq.n	8003314 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8999      	ldrh	r1, [r3, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	461a      	mov	r2, r3
 800330e:	68b8      	ldr	r0, [r7, #8]
 8003310:	f7fe ff01 	bl	8002116 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d130      	bne.n	800337c <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	ee07 3a90 	vmov	s15, r3
 8003320:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003324:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800332c:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8003334:	2300      	movs	r3, #0
 8003336:	61fb      	str	r3, [r7, #28]
 8003338:	e01c      	b.n	8003374 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	1d1a      	adds	r2, r3, #4
 800333e:	61ba      	str	r2, [r7, #24]
 8003340:	ed93 7a00 	vldr	s14, [r3]
 8003344:	edd7 7a04 	vldr	s15, [r7, #16]
 8003348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334c:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	edd3 7a00 	vldr	s15, [r3]
 8003356:	eeb1 7a67 	vneg.f32	s14, s15
 800335a:	edd7 7a04 	vldr	s15, [r7, #16]
 800335e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	3304      	adds	r3, #4
 800336c:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3301      	adds	r3, #1
 8003372:	61fb      	str	r3, [r7, #28]
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	429a      	cmp	r2, r3
 800337a:	d3de      	bcc.n	800333a <arm_cfft_f32+0x12a>
    }
  }
}
 800337c:	bf00      	nop
 800337e:	3720      	adds	r7, #32
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 8003390:	2300      	movs	r3, #0
 8003392:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	887a      	ldrh	r2, [r7, #2]
 8003398:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a8:	d02c      	beq.n	8003404 <arm_cfft_init_f32+0x80>
 80033aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ae:	f300 809e 	bgt.w	80034ee <arm_cfft_init_f32+0x16a>
 80033b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033b6:	d032      	beq.n	800341e <arm_cfft_init_f32+0x9a>
 80033b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033bc:	f300 8097 	bgt.w	80034ee <arm_cfft_init_f32+0x16a>
 80033c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c4:	d038      	beq.n	8003438 <arm_cfft_init_f32+0xb4>
 80033c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ca:	f300 8090 	bgt.w	80034ee <arm_cfft_init_f32+0x16a>
 80033ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033d2:	d03e      	beq.n	8003452 <arm_cfft_init_f32+0xce>
 80033d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033d8:	f300 8089 	bgt.w	80034ee <arm_cfft_init_f32+0x16a>
 80033dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033e0:	d044      	beq.n	800346c <arm_cfft_init_f32+0xe8>
 80033e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033e6:	f300 8082 	bgt.w	80034ee <arm_cfft_init_f32+0x16a>
 80033ea:	2b80      	cmp	r3, #128	@ 0x80
 80033ec:	d04b      	beq.n	8003486 <arm_cfft_init_f32+0x102>
 80033ee:	2b80      	cmp	r3, #128	@ 0x80
 80033f0:	dc7d      	bgt.n	80034ee <arm_cfft_init_f32+0x16a>
 80033f2:	2b40      	cmp	r3, #64	@ 0x40
 80033f4:	d054      	beq.n	80034a0 <arm_cfft_init_f32+0x11c>
 80033f6:	2b40      	cmp	r3, #64	@ 0x40
 80033f8:	dc79      	bgt.n	80034ee <arm_cfft_init_f32+0x16a>
 80033fa:	2b10      	cmp	r3, #16
 80033fc:	d06a      	beq.n	80034d4 <arm_cfft_init_f32+0x150>
 80033fe:	2b20      	cmp	r3, #32
 8003400:	d05b      	beq.n	80034ba <arm_cfft_init_f32+0x136>
 8003402:	e074      	b.n	80034ee <arm_cfft_init_f32+0x16a>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 8003404:	4b3f      	ldr	r3, [pc, #252]	@ (8003504 <arm_cfft_init_f32+0x180>)
 8003406:	899a      	ldrh	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	819a      	strh	r2, [r3, #12]
 800340c:	4b3d      	ldr	r3, [pc, #244]	@ (8003504 <arm_cfft_init_f32+0x180>)
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	4b3b      	ldr	r3, [pc, #236]	@ (8003504 <arm_cfft_init_f32+0x180>)
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	605a      	str	r2, [r3, #4]
            break;
 800341c:	e06a      	b.n	80034f4 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 800341e:	4b3a      	ldr	r3, [pc, #232]	@ (8003508 <arm_cfft_init_f32+0x184>)
 8003420:	899a      	ldrh	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	819a      	strh	r2, [r3, #12]
 8003426:	4b38      	ldr	r3, [pc, #224]	@ (8003508 <arm_cfft_init_f32+0x184>)
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	609a      	str	r2, [r3, #8]
 800342e:	4b36      	ldr	r3, [pc, #216]	@ (8003508 <arm_cfft_init_f32+0x184>)
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	605a      	str	r2, [r3, #4]

            break;
 8003436:	e05d      	b.n	80034f4 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 8003438:	4b34      	ldr	r3, [pc, #208]	@ (800350c <arm_cfft_init_f32+0x188>)
 800343a:	899a      	ldrh	r2, [r3, #12]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	819a      	strh	r2, [r3, #12]
 8003440:	4b32      	ldr	r3, [pc, #200]	@ (800350c <arm_cfft_init_f32+0x188>)
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	4b30      	ldr	r3, [pc, #192]	@ (800350c <arm_cfft_init_f32+0x188>)
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	605a      	str	r2, [r3, #4]

            break;
 8003450:	e050      	b.n	80034f4 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 8003452:	4b2f      	ldr	r3, [pc, #188]	@ (8003510 <arm_cfft_init_f32+0x18c>)
 8003454:	899a      	ldrh	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	819a      	strh	r2, [r3, #12]
 800345a:	4b2d      	ldr	r3, [pc, #180]	@ (8003510 <arm_cfft_init_f32+0x18c>)
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	609a      	str	r2, [r3, #8]
 8003462:	4b2b      	ldr	r3, [pc, #172]	@ (8003510 <arm_cfft_init_f32+0x18c>)
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	605a      	str	r2, [r3, #4]
            break;
 800346a:	e043      	b.n	80034f4 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 800346c:	4b29      	ldr	r3, [pc, #164]	@ (8003514 <arm_cfft_init_f32+0x190>)
 800346e:	899a      	ldrh	r2, [r3, #12]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	819a      	strh	r2, [r3, #12]
 8003474:	4b27      	ldr	r3, [pc, #156]	@ (8003514 <arm_cfft_init_f32+0x190>)
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	609a      	str	r2, [r3, #8]
 800347c:	4b25      	ldr	r3, [pc, #148]	@ (8003514 <arm_cfft_init_f32+0x190>)
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	605a      	str	r2, [r3, #4]
            break;
 8003484:	e036      	b.n	80034f4 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 8003486:	4b24      	ldr	r3, [pc, #144]	@ (8003518 <arm_cfft_init_f32+0x194>)
 8003488:	899a      	ldrh	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	819a      	strh	r2, [r3, #12]
 800348e:	4b22      	ldr	r3, [pc, #136]	@ (8003518 <arm_cfft_init_f32+0x194>)
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	609a      	str	r2, [r3, #8]
 8003496:	4b20      	ldr	r3, [pc, #128]	@ (8003518 <arm_cfft_init_f32+0x194>)
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	605a      	str	r2, [r3, #4]
            break;
 800349e:	e029      	b.n	80034f4 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 80034a0:	4b1e      	ldr	r3, [pc, #120]	@ (800351c <arm_cfft_init_f32+0x198>)
 80034a2:	899a      	ldrh	r2, [r3, #12]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	819a      	strh	r2, [r3, #12]
 80034a8:	4b1c      	ldr	r3, [pc, #112]	@ (800351c <arm_cfft_init_f32+0x198>)
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	4b1a      	ldr	r3, [pc, #104]	@ (800351c <arm_cfft_init_f32+0x198>)
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	605a      	str	r2, [r3, #4]
            break;
 80034b8:	e01c      	b.n	80034f4 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 80034ba:	4b19      	ldr	r3, [pc, #100]	@ (8003520 <arm_cfft_init_f32+0x19c>)
 80034bc:	899a      	ldrh	r2, [r3, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	819a      	strh	r2, [r3, #12]
 80034c2:	4b17      	ldr	r3, [pc, #92]	@ (8003520 <arm_cfft_init_f32+0x19c>)
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	609a      	str	r2, [r3, #8]
 80034ca:	4b15      	ldr	r3, [pc, #84]	@ (8003520 <arm_cfft_init_f32+0x19c>)
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	605a      	str	r2, [r3, #4]
            break;
 80034d2:	e00f      	b.n	80034f4 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 80034d4:	4b13      	ldr	r3, [pc, #76]	@ (8003524 <arm_cfft_init_f32+0x1a0>)
 80034d6:	899a      	ldrh	r2, [r3, #12]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	819a      	strh	r2, [r3, #12]
 80034dc:	4b11      	ldr	r3, [pc, #68]	@ (8003524 <arm_cfft_init_f32+0x1a0>)
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003524 <arm_cfft_init_f32+0x1a0>)
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	605a      	str	r2, [r3, #4]
            break;
 80034ec:	e002      	b.n	80034f4 <arm_cfft_init_f32+0x170>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 80034ee:	23ff      	movs	r3, #255	@ 0xff
 80034f0:	73fb      	strb	r3, [r7, #15]
            break;
 80034f2:	bf00      	nop
        }


        return (status);
 80034f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	08020c28 	.word	0x08020c28
 8003508:	08020c18 	.word	0x08020c18
 800350c:	08020c08 	.word	0x08020c08
 8003510:	08020bf8 	.word	0x08020bf8
 8003514:	08020be8 	.word	0x08020be8
 8003518:	08020bd8 	.word	0x08020bd8
 800351c:	08020bc8 	.word	0x08020bc8
 8003520:	08020bb8 	.word	0x08020bb8
 8003524:	08020ba8 	.word	0x08020ba8

08003528 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8003528:	b480      	push	{r7}
 800352a:	b0bd      	sub	sp, #244	@ 0xf4
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	461a      	mov	r2, r3
 8003534:	460b      	mov	r3, r1
 8003536:	817b      	strh	r3, [r7, #10]
 8003538:	4613      	mov	r3, r2
 800353a:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800353c:	4b09      	ldr	r3, [pc, #36]	@ (8003564 <arm_radix8_butterfly_f32+0x3c>)
 800353e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

   n2 = fftLen;
 8003542:	897b      	ldrh	r3, [r7, #10]
 8003544:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

   do
   {
      n1 = n2;
 8003548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800354c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      n2 = n2 >> 3;
 8003550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003554:	08db      	lsrs	r3, r3, #3
 8003556:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      i1 = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003560:	e002      	b.n	8003568 <arm_radix8_butterfly_f32+0x40>
 8003562:	bf00      	nop
 8003564:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8003568:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800356c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003570:	4413      	add	r3, r2
 8003572:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         i3 = i2 + n2;
 8003576:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800357a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800357e:	4413      	add	r3, r2
 8003580:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
         i4 = i3 + n2;
 8003584:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800358c:	4413      	add	r3, r2
 800358e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         i5 = i4 + n2;
 8003592:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800359a:	4413      	add	r3, r2
 800359c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
         i6 = i5 + n2;
 80035a0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80035a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035a8:	4413      	add	r3, r2
 80035aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         i7 = i6 + n2;
 80035ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80035b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035b6:	4413      	add	r3, r2
 80035b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
         i8 = i7 + n2;
 80035bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80035c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c4:	4413      	add	r3, r2
 80035c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80035ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4413      	add	r3, r2
 80035d4:	ed93 7a00 	vldr	s14, [r3]
 80035d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4413      	add	r3, r2
 80035e2:	edd3 7a00 	vldr	s15, [r3]
 80035e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ea:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80035ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4413      	add	r3, r2
 80035f8:	ed93 7a00 	vldr	s14, [r3]
 80035fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4413      	add	r3, r2
 8003606:	edd3 7a00 	vldr	s15, [r3]
 800360a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800360e:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8003612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4413      	add	r3, r2
 800361c:	ed93 7a00 	vldr	s14, [r3]
 8003620:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4413      	add	r3, r2
 800362a:	edd3 7a00 	vldr	s15, [r3]
 800362e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003632:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8003636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4413      	add	r3, r2
 8003640:	ed93 7a00 	vldr	s14, [r3]
 8003644:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4413      	add	r3, r2
 800364e:	edd3 7a00 	vldr	s15, [r3]
 8003652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003656:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800365a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4413      	add	r3, r2
 8003664:	ed93 7a00 	vldr	s14, [r3]
 8003668:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4413      	add	r3, r2
 8003672:	edd3 7a00 	vldr	s15, [r3]
 8003676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800367a:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800367e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	4413      	add	r3, r2
 8003688:	ed93 7a00 	vldr	s14, [r3]
 800368c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4413      	add	r3, r2
 8003696:	edd3 7a00 	vldr	s15, [r3]
 800369a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800369e:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80036a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	ed93 7a00 	vldr	s14, [r3]
 80036b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4413      	add	r3, r2
 80036ba:	edd3 7a00 	vldr	s15, [r3]
 80036be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036c2:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80036c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4413      	add	r3, r2
 80036d0:	ed93 7a00 	vldr	s14, [r3]
 80036d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4413      	add	r3, r2
 80036de:	edd3 7a00 	vldr	s15, [r3]
 80036e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e6:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         t1 = r1 - r3;
 80036ea:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80036ee:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80036f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036f6:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r1 = r1 + r3;
 80036fa:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80036fe:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003706:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r3 = r2 - r4;
 800370a:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800370e:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003716:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r2 = r2 + r4;
 800371a:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800371e:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003726:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1] = r1 + r2;
 800372a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003738:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800373c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003740:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8003744:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4413      	add	r3, r2
 800374e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003752:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800375a:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800375e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	3304      	adds	r3, #4
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4413      	add	r3, r2
 800376a:	ed93 7a00 	vldr	s14, [r3]
 800376e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	3304      	adds	r3, #4
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4413      	add	r3, r2
 800377a:	edd3 7a00 	vldr	s15, [r3]
 800377e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003782:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8003786:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	3304      	adds	r3, #4
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4413      	add	r3, r2
 8003792:	ed93 7a00 	vldr	s14, [r3]
 8003796:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	3304      	adds	r3, #4
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4413      	add	r3, r2
 80037a2:	edd3 7a00 	vldr	s15, [r3]
 80037a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037aa:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80037ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	3304      	adds	r3, #4
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4413      	add	r3, r2
 80037ba:	ed93 7a00 	vldr	s14, [r3]
 80037be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	3304      	adds	r3, #4
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4413      	add	r3, r2
 80037ca:	edd3 7a00 	vldr	s15, [r3]
 80037ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d2:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80037d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	3304      	adds	r3, #4
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4413      	add	r3, r2
 80037e2:	ed93 7a00 	vldr	s14, [r3]
 80037e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	3304      	adds	r3, #4
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4413      	add	r3, r2
 80037f2:	edd3 7a00 	vldr	s15, [r3]
 80037f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037fa:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80037fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	3304      	adds	r3, #4
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4413      	add	r3, r2
 800380a:	ed93 7a00 	vldr	s14, [r3]
 800380e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	3304      	adds	r3, #4
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4413      	add	r3, r2
 800381a:	edd3 7a00 	vldr	s15, [r3]
 800381e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003822:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8003826:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	3304      	adds	r3, #4
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4413      	add	r3, r2
 8003832:	ed93 7a00 	vldr	s14, [r3]
 8003836:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	3304      	adds	r3, #4
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4413      	add	r3, r2
 8003842:	edd3 7a00 	vldr	s15, [r3]
 8003846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800384a:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800384e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	3304      	adds	r3, #4
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4413      	add	r3, r2
 800385a:	ed93 7a00 	vldr	s14, [r3]
 800385e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	3304      	adds	r3, #4
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4413      	add	r3, r2
 800386a:	edd3 7a00 	vldr	s15, [r3]
 800386e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003872:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8003876:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	3304      	adds	r3, #4
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4413      	add	r3, r2
 8003882:	ed93 7a00 	vldr	s14, [r3]
 8003886:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	3304      	adds	r3, #4
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4413      	add	r3, r2
 8003892:	edd3 7a00 	vldr	s15, [r3]
 8003896:	ee77 7a67 	vsub.f32	s15, s14, s15
 800389a:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         t2 = r1 - s3;
 800389e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80038a2:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80038a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038aa:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         r1 = r1 + s3;
 80038ae:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80038b2:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80038b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ba:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s3 = r2 - r4;
 80038be:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80038c2:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80038c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038ca:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         r2 = r2 + r4;
 80038ce:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80038d2:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80038d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038da:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80038de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	3304      	adds	r3, #4
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4413      	add	r3, r2
 80038ea:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80038ee:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80038f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038f6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80038fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	3304      	adds	r3, #4
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4413      	add	r3, r2
 8003906:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800390a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800390e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003912:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8003916:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4413      	add	r3, r2
 8003920:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003924:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800392c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8003930:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4413      	add	r3, r2
 800393a:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800393e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003946:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800394a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	3304      	adds	r3, #4
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4413      	add	r3, r2
 8003956:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800395a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800395e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003962:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8003966:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	3304      	adds	r3, #4
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4413      	add	r3, r2
 8003972:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003976:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800397a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800397e:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8003982:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8003986:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800398a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800398e:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003996:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r6 = (r6 + r8) * C81;
 800399a:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 800399e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80039a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039a6:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80039aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ae:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r2 = (s6 - s8) * C81;
 80039b2:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80039b6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80039ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039be:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80039c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039c6:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = (s6 + s8) * C81;
 80039ca:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80039ce:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80039d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039d6:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80039da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039de:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         t1 = r5 - r1;
 80039e2:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80039e6:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80039ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ee:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r5 = r5 + r1;
 80039f2:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80039f6:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80039fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039fe:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r8 = r7 - r6;
 8003a02:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003a06:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a0e:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         r7 = r7 + r6;
 8003a12:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003a16:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a1e:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         t2 = s5 - r2;
 8003a22:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003a26:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003a2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a2e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         s5 = s5 + r2;
 8003a32:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003a36:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a3e:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         s8 = s7 - s6;
 8003a42:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003a46:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a4e:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         s7 = s7 + s6;
 8003a52:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003a56:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a5e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         pSrc[2 * i2]     = r5 + s7;
 8003a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003a70:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a78:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8003a7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4413      	add	r3, r2
 8003a86:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003a8a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a92:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8003a96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003aa4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aac:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8003ab0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4413      	add	r3, r2
 8003aba:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003abe:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ac6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8003aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003ada:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ae2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8003ae6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	3304      	adds	r3, #4
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4413      	add	r3, r2
 8003af2:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003af6:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003afa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003afe:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8003b02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	3304      	adds	r3, #4
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003b12:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b1a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8003b1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	3304      	adds	r3, #4
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4413      	add	r3, r2
 8003b2a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003b2e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b36:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8003b3a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003b3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b42:	4413      	add	r3, r2
 8003b44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      } while (i1 < fftLen);
 8003b48:	897b      	ldrh	r3, [r7, #10]
 8003b4a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	f4ff ad0a 	bcc.w	8003568 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8003b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b58:	2b07      	cmp	r3, #7
 8003b5a:	f240 84e3 	bls.w	8004524 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
      j = 1;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8003b6a:	893b      	ldrh	r3, [r7, #8]
 8003b6c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003b70:	4413      	add	r3, r2
 8003b72:	67fb      	str	r3, [r7, #124]	@ 0x7c
         ia1 = id;
 8003b74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b76:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
         ia2 = ia1 + id;
 8003b7a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003b7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b80:	4413      	add	r3, r2
 8003b82:	67bb      	str	r3, [r7, #120]	@ 0x78
         ia3 = ia2 + id;
 8003b84:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003b86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b88:	4413      	add	r3, r2
 8003b8a:	677b      	str	r3, [r7, #116]	@ 0x74
         ia4 = ia3 + id;
 8003b8c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003b8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b90:	4413      	add	r3, r2
 8003b92:	673b      	str	r3, [r7, #112]	@ 0x70
         ia5 = ia4 + id;
 8003b94:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003b96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b98:	4413      	add	r3, r2
 8003b9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
         ia6 = ia5 + id;
 8003b9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ba0:	4413      	add	r3, r2
 8003ba2:	66bb      	str	r3, [r7, #104]	@ 0x68
         ia7 = ia6 + id;
 8003ba4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003ba6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ba8:	4413      	add	r3, r2
 8003baa:	667b      	str	r3, [r7, #100]	@ 0x64

         co2 = pCoef[2 * ia1];
 8003bac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	663b      	str	r3, [r7, #96]	@ 0x60
         co3 = pCoef[2 * ia2];
 8003bba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
         co4 = pCoef[2 * ia3];
 8003bc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
         co5 = pCoef[2 * ia4];
 8003bd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	657b      	str	r3, [r7, #84]	@ 0x54
         co6 = pCoef[2 * ia5];
 8003bde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	4413      	add	r3, r2
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	653b      	str	r3, [r7, #80]	@ 0x50
         co7 = pCoef[2 * ia6];
 8003bea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
         co8 = pCoef[2 * ia7];
 8003bf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	64bb      	str	r3, [r7, #72]	@ 0x48
         si2 = pCoef[2 * ia1 + 1];
 8003c02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	3304      	adds	r3, #4
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	647b      	str	r3, [r7, #68]	@ 0x44
         si3 = pCoef[2 * ia2 + 1];
 8003c12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	3304      	adds	r3, #4
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	643b      	str	r3, [r7, #64]	@ 0x40
         si4 = pCoef[2 * ia3 + 1];
 8003c20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	3304      	adds	r3, #4
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8003c2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	3304      	adds	r3, #4
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	4413      	add	r3, r2
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
         si6 = pCoef[2 * ia5 + 1];
 8003c3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	3304      	adds	r3, #4
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	637b      	str	r3, [r7, #52]	@ 0x34
         si7 = pCoef[2 * ia6 + 1];
 8003c4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	3304      	adds	r3, #4
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4413      	add	r3, r2
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	633b      	str	r3, [r7, #48]	@ 0x30
         si8 = pCoef[2 * ia7 + 1];
 8003c58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4413      	add	r3, r2
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	62fb      	str	r3, [r7, #44]	@ 0x2c

         i1 = j;
 8003c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8003c6e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c76:	4413      	add	r3, r2
 8003c78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            i3 = i2 + n2;
 8003c7c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c84:	4413      	add	r3, r2
 8003c86:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            i4 = i3 + n2;
 8003c8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c92:	4413      	add	r3, r2
 8003c94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            i5 = i4 + n2;
 8003c98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            i6 = i5 + n2;
 8003ca6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cae:	4413      	add	r3, r2
 8003cb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            i7 = i6 + n2;
 8003cb4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            i8 = i7 + n2;
 8003cc2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cca:	4413      	add	r3, r2
 8003ccc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8003cd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4413      	add	r3, r2
 8003cda:	ed93 7a00 	vldr	s14, [r3]
 8003cde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	edd3 7a00 	vldr	s15, [r3]
 8003cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cf0:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8003cf4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	ed93 7a00 	vldr	s14, [r3]
 8003d02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	edd3 7a00 	vldr	s15, [r3]
 8003d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d14:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8003d18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4413      	add	r3, r2
 8003d22:	ed93 7a00 	vldr	s14, [r3]
 8003d26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	edd3 7a00 	vldr	s15, [r3]
 8003d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d38:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8003d3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4413      	add	r3, r2
 8003d46:	ed93 7a00 	vldr	s14, [r3]
 8003d4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	edd3 7a00 	vldr	s15, [r3]
 8003d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d5c:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8003d60:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4413      	add	r3, r2
 8003d6a:	ed93 7a00 	vldr	s14, [r3]
 8003d6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	edd3 7a00 	vldr	s15, [r3]
 8003d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d80:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8003d84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	ed93 7a00 	vldr	s14, [r3]
 8003d92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	edd3 7a00 	vldr	s15, [r3]
 8003da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003da4:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8003da8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4413      	add	r3, r2
 8003db2:	ed93 7a00 	vldr	s14, [r3]
 8003db6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	edd3 7a00 	vldr	s15, [r3]
 8003dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dc8:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8003dcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	ed93 7a00 	vldr	s14, [r3]
 8003dda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4413      	add	r3, r2
 8003de4:	edd3 7a00 	vldr	s15, [r3]
 8003de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dec:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            t1 = r1 - r3;
 8003df0:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003df4:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dfc:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r1 = r1 + r3;
 8003e00:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003e04:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e0c:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r3 = r2 - r4;
 8003e10:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8003e14:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003e18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e1c:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r2 = r2 + r4;
 8003e20:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8003e24:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e2c:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            pSrc[2 * i1] = r1 + r2;
 8003e30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4413      	add	r3, r2
 8003e3a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003e3e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e46:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8003e4a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003e4e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e56:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8003e5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	3304      	adds	r3, #4
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4413      	add	r3, r2
 8003e66:	ed93 7a00 	vldr	s14, [r3]
 8003e6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	3304      	adds	r3, #4
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4413      	add	r3, r2
 8003e76:	edd3 7a00 	vldr	s15, [r3]
 8003e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e7e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8003e82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	3304      	adds	r3, #4
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	ed93 7a00 	vldr	s14, [r3]
 8003e92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	3304      	adds	r3, #4
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	edd3 7a00 	vldr	s15, [r3]
 8003ea2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ea6:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8003eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	ed93 7a00 	vldr	s14, [r3]
 8003eba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	edd3 7a00 	vldr	s15, [r3]
 8003eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ece:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8003ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	3304      	adds	r3, #4
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4413      	add	r3, r2
 8003ede:	ed93 7a00 	vldr	s14, [r3]
 8003ee2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	3304      	adds	r3, #4
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4413      	add	r3, r2
 8003eee:	edd3 7a00 	vldr	s15, [r3]
 8003ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ef6:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8003efa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	3304      	adds	r3, #4
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4413      	add	r3, r2
 8003f06:	ed93 7a00 	vldr	s14, [r3]
 8003f0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	3304      	adds	r3, #4
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4413      	add	r3, r2
 8003f16:	edd3 7a00 	vldr	s15, [r3]
 8003f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f1e:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8003f22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	3304      	adds	r3, #4
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	ed93 7a00 	vldr	s14, [r3]
 8003f32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	3304      	adds	r3, #4
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	edd3 7a00 	vldr	s15, [r3]
 8003f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f46:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8003f4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	3304      	adds	r3, #4
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4413      	add	r3, r2
 8003f56:	ed93 7a00 	vldr	s14, [r3]
 8003f5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	3304      	adds	r3, #4
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4413      	add	r3, r2
 8003f66:	edd3 7a00 	vldr	s15, [r3]
 8003f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f6e:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8003f72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	3304      	adds	r3, #4
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	ed93 7a00 	vldr	s14, [r3]
 8003f82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	3304      	adds	r3, #4
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	edd3 7a00 	vldr	s15, [r3]
 8003f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f96:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            t2 = s1 - s3;
 8003f9a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003f9e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fa6:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s1 = s1 + s3;
 8003faa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003fae:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fb6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s3 = s2 - s4;
 8003fba:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003fbe:	edd7 7a08 	vldr	s15, [r7, #32]
 8003fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fc6:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s2 = s2 + s4;
 8003fca:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003fce:	edd7 7a08 	vldr	s15, [r7, #32]
 8003fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fd6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            r1 = t1 + s3;
 8003fda:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003fde:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fe6:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            t1 = t1 - s3;
 8003fea:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003fee:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ff6:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8003ffa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	3304      	adds	r3, #4
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4413      	add	r3, r2
 8004006:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800400a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800400e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004012:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8004016:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800401a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800401e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004022:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s1 = t2 - r3;
 8004026:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800402a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800402e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004032:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            t2 = t2 + r3;
 8004036:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800403a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800403e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004042:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co5 * r2;
 8004046:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800404a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800404e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004052:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8004056:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800405a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800405e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004062:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8004066:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800406a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800406e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004072:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8004076:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800407a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800407e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004082:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8004086:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	ed97 7a07 	vldr	s14, [r7, #28]
 8004094:	edd7 7a06 	vldr	s15, [r7, #24]
 8004098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800409c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 80040a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	3304      	adds	r3, #4
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4413      	add	r3, r2
 80040ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80040b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80040b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040b8:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 80040bc:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80040c0:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80040c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 80040cc:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80040d0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80040d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 80040dc:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80040e0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80040e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 80040ec:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80040f0:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80040f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 80040fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	4413      	add	r3, r2
 8004106:	ed97 7a07 	vldr	s14, [r7, #28]
 800410a:	edd7 7a06 	vldr	s15, [r7, #24]
 800410e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004112:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8004116:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	3304      	adds	r3, #4
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4413      	add	r3, r2
 8004122:	ed97 7a05 	vldr	s14, [r7, #20]
 8004126:	edd7 7a04 	vldr	s15, [r7, #16]
 800412a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800412e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8004132:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8004136:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800413a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800413e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8004142:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004146:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800414a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800414e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8004152:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8004156:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800415a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8004162:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004166:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800416a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800416e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8004172:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004180:	edd7 7a06 	vldr	s15, [r7, #24]
 8004184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004188:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800418c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	3304      	adds	r3, #4
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	ed97 7a05 	vldr	s14, [r7, #20]
 800419c:	edd7 7a04 	vldr	s15, [r7, #16]
 80041a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041a4:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 80041a8:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80041ac:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80041b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041b4:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80041b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041bc:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r6 = (r6 + r8) * C81;
 80041c0:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80041c4:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80041c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041cc:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80041d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d4:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            s1 = (s6 - s8) * C81;
 80041d8:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80041dc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80041e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041e4:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80041e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ec:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s6 = (s6 + s8) * C81;
 80041f0:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80041f4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80041f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041fc:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8004200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004204:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t1 = r5 - r1;
 8004208:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800420c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8004210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004214:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r5 = r5 + r1;
 8004218:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800421c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8004220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004224:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r8 = r7 - r6;
 8004228:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800422c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8004230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004234:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            r7 = r7 + r6;
 8004238:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800423c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8004240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004244:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            t2 = s5 - s1;
 8004248:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800424c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004254:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s5 = s5 + s1;
 8004258:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800425c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004264:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s8 = s7 - s6;
 8004268:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800426c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8004270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004274:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            s7 = s7 + s6;
 8004278:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800427c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8004280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004284:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            r1 = r5 + s7;
 8004288:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800428c:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8004290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004294:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = r5 - s7;
 8004298:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800429c:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80042a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042a4:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r6 = t1 + s8;
 80042a8:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80042ac:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80042b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042b4:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            t1 = t1 - s8;
 80042b8:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80042bc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80042c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042c4:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            s1 = s5 - r7;
 80042c8:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80042cc:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80042d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042d4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = s5 + r7;
 80042d8:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80042dc:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80042e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042e4:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s6 = t2 - r8;
 80042e8:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80042ec:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80042f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042f4:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t2 = t2 + r8;
 80042f8:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80042fc:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8004300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004304:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co2 * r1;
 8004308:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800430c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8004310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004314:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8004318:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800431c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004324:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8004328:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800432c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004334:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8004338:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800433c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8004340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004344:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8004348:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4413      	add	r3, r2
 8004352:	ed97 7a07 	vldr	s14, [r7, #28]
 8004356:	edd7 7a06 	vldr	s15, [r7, #24]
 800435a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800435e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8004362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	3304      	adds	r3, #4
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4413      	add	r3, r2
 800436e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004372:	edd7 7a04 	vldr	s15, [r7, #16]
 8004376:	ee77 7a67 	vsub.f32	s15, s14, s15
 800437a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800437e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8004382:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8004386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800438e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004392:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8004396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800439e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80043a2:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80043a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043aa:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 80043ae:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80043b2:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80043b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ba:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 80043be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80043cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80043d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043d4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 80043d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	3304      	adds	r3, #4
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4413      	add	r3, r2
 80043e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80043e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80043ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043f0:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 80043f4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80043f8:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80043fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004400:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8004404:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004408:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800440c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004410:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8004414:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8004418:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800441c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004420:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8004424:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004428:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800442c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004430:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8004434:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4413      	add	r3, r2
 800443e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004442:	edd7 7a06 	vldr	s15, [r7, #24]
 8004446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800444a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800444e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	3304      	adds	r3, #4
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4413      	add	r3, r2
 800445a:	ed97 7a05 	vldr	s14, [r7, #20]
 800445e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004466:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800446a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800446e:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8004472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004476:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800447a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800447e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8004482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004486:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800448a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800448e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8004492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004496:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800449a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800449e:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80044a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 80044aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80044b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80044bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044c0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 80044c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	3304      	adds	r3, #4
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4413      	add	r3, r2
 80044d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80044d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80044d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044dc:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 80044e0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80044e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044e8:	4413      	add	r3, r2
 80044ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
         } while (i1 < fftLen);
 80044ee:	897b      	ldrh	r3, [r7, #10]
 80044f0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80044f4:	429a      	cmp	r2, r3
 80044f6:	f4ff abba 	bcc.w	8003c6e <arm_radix8_butterfly_f32+0x746>

         j++;
 80044fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044fe:	3301      	adds	r3, #1
 8004500:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      } while (j < n2);
 8004504:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800450c:	429a      	cmp	r2, r3
 800450e:	f4ff ab2c 	bcc.w	8003b6a <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8004512:	893b      	ldrh	r3, [r7, #8]
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8004518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800451c:	2b07      	cmp	r3, #7
 800451e:	f63f a813 	bhi.w	8003548 <arm_radix8_butterfly_f32+0x20>
}
 8004522:	e000      	b.n	8004526 <arm_radix8_butterfly_f32+0xffe>
         break;
 8004524:	bf00      	nop
}
 8004526:	bf00      	nop
 8004528:	37f4      	adds	r7, #244	@ 0xf4
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop

08004534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004538:	4b0e      	ldr	r3, [pc, #56]	@ (8004574 <HAL_Init+0x40>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a0d      	ldr	r2, [pc, #52]	@ (8004574 <HAL_Init+0x40>)
 800453e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004542:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004544:	4b0b      	ldr	r3, [pc, #44]	@ (8004574 <HAL_Init+0x40>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a0a      	ldr	r2, [pc, #40]	@ (8004574 <HAL_Init+0x40>)
 800454a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800454e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004550:	4b08      	ldr	r3, [pc, #32]	@ (8004574 <HAL_Init+0x40>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a07      	ldr	r2, [pc, #28]	@ (8004574 <HAL_Init+0x40>)
 8004556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800455a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800455c:	2003      	movs	r0, #3
 800455e:	f000 fbc1 	bl	8004ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004562:	200f      	movs	r0, #15
 8004564:	f000 f808 	bl	8004578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004568:	f7fd fc9a 	bl	8001ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40023c00 	.word	0x40023c00

08004578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004580:	4b12      	ldr	r3, [pc, #72]	@ (80045cc <HAL_InitTick+0x54>)
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	4b12      	ldr	r3, [pc, #72]	@ (80045d0 <HAL_InitTick+0x58>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	4619      	mov	r1, r3
 800458a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800458e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004592:	fbb2 f3f3 	udiv	r3, r2, r3
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fbd9 	bl	8004d4e <HAL_SYSTICK_Config>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e00e      	b.n	80045c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b0f      	cmp	r3, #15
 80045aa:	d80a      	bhi.n	80045c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045ac:	2200      	movs	r2, #0
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	f04f 30ff 	mov.w	r0, #4294967295
 80045b4:	f000 fba1 	bl	8004cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045b8:	4a06      	ldr	r2, [pc, #24]	@ (80045d4 <HAL_InitTick+0x5c>)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	e000      	b.n	80045c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	20000000 	.word	0x20000000
 80045d0:	20000008 	.word	0x20000008
 80045d4:	20000004 	.word	0x20000004

080045d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045dc:	4b06      	ldr	r3, [pc, #24]	@ (80045f8 <HAL_IncTick+0x20>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	461a      	mov	r2, r3
 80045e2:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <HAL_IncTick+0x24>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4413      	add	r3, r2
 80045e8:	4a04      	ldr	r2, [pc, #16]	@ (80045fc <HAL_IncTick+0x24>)
 80045ea:	6013      	str	r3, [r2, #0]
}
 80045ec:	bf00      	nop
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	20000008 	.word	0x20000008
 80045fc:	200033e0 	.word	0x200033e0

08004600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  return uwTick;
 8004604:	4b03      	ldr	r3, [pc, #12]	@ (8004614 <HAL_GetTick+0x14>)
 8004606:	681b      	ldr	r3, [r3, #0]
}
 8004608:	4618      	mov	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	200033e0 	.word	0x200033e0

08004618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004620:	f7ff ffee 	bl	8004600 <HAL_GetTick>
 8004624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d005      	beq.n	800463e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004632:	4b0a      	ldr	r3, [pc, #40]	@ (800465c <HAL_Delay+0x44>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800463e:	bf00      	nop
 8004640:	f7ff ffde 	bl	8004600 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	429a      	cmp	r2, r3
 800464e:	d8f7      	bhi.n	8004640 <HAL_Delay+0x28>
  {
  }
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000008 	.word	0x20000008

08004660 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e033      	b.n	80046de <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	2b00      	cmp	r3, #0
 800467c:	d109      	bne.n	8004692 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fc fcf0 	bl	8001064 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b00      	cmp	r3, #0
 800469c:	d118      	bne.n	80046d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80046a6:	f023 0302 	bic.w	r3, r3, #2
 80046aa:	f043 0202 	orr.w	r2, r3, #2
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f94a 	bl	800494c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c2:	f023 0303 	bic.w	r3, r3, #3
 80046c6:	f043 0201 	orr.w	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80046ce:	e001      	b.n	80046d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x1c>
 8004700:	2302      	movs	r3, #2
 8004702:	e113      	b.n	800492c <HAL_ADC_ConfigChannel+0x244>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b09      	cmp	r3, #9
 8004712:	d925      	bls.n	8004760 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68d9      	ldr	r1, [r3, #12]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	b29b      	uxth	r3, r3
 8004720:	461a      	mov	r2, r3
 8004722:	4613      	mov	r3, r2
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	4413      	add	r3, r2
 8004728:	3b1e      	subs	r3, #30
 800472a:	2207      	movs	r2, #7
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	43da      	mvns	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	400a      	ands	r2, r1
 8004738:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68d9      	ldr	r1, [r3, #12]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	b29b      	uxth	r3, r3
 800474a:	4618      	mov	r0, r3
 800474c:	4603      	mov	r3, r0
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	4403      	add	r3, r0
 8004752:	3b1e      	subs	r3, #30
 8004754:	409a      	lsls	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	60da      	str	r2, [r3, #12]
 800475e:	e022      	b.n	80047a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6919      	ldr	r1, [r3, #16]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	b29b      	uxth	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	4613      	mov	r3, r2
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	4413      	add	r3, r2
 8004774:	2207      	movs	r2, #7
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43da      	mvns	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	400a      	ands	r2, r1
 8004782:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6919      	ldr	r1, [r3, #16]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	b29b      	uxth	r3, r3
 8004794:	4618      	mov	r0, r3
 8004796:	4603      	mov	r3, r0
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	4403      	add	r3, r0
 800479c:	409a      	lsls	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b06      	cmp	r3, #6
 80047ac:	d824      	bhi.n	80047f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	3b05      	subs	r3, #5
 80047c0:	221f      	movs	r2, #31
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	43da      	mvns	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	400a      	ands	r2, r1
 80047ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	4618      	mov	r0, r3
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	3b05      	subs	r3, #5
 80047ea:	fa00 f203 	lsl.w	r2, r0, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80047f6:	e04c      	b.n	8004892 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b0c      	cmp	r3, #12
 80047fe:	d824      	bhi.n	800484a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	3b23      	subs	r3, #35	@ 0x23
 8004812:	221f      	movs	r2, #31
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	43da      	mvns	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	400a      	ands	r2, r1
 8004820:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	b29b      	uxth	r3, r3
 800482e:	4618      	mov	r0, r3
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	4613      	mov	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	3b23      	subs	r3, #35	@ 0x23
 800483c:	fa00 f203 	lsl.w	r2, r0, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	631a      	str	r2, [r3, #48]	@ 0x30
 8004848:	e023      	b.n	8004892 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	3b41      	subs	r3, #65	@ 0x41
 800485c:	221f      	movs	r2, #31
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	43da      	mvns	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	400a      	ands	r2, r1
 800486a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	4618      	mov	r0, r3
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	3b41      	subs	r3, #65	@ 0x41
 8004886:	fa00 f203 	lsl.w	r2, r0, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004892:	4b29      	ldr	r3, [pc, #164]	@ (8004938 <HAL_ADC_ConfigChannel+0x250>)
 8004894:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a28      	ldr	r2, [pc, #160]	@ (800493c <HAL_ADC_ConfigChannel+0x254>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d10f      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x1d8>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b12      	cmp	r3, #18
 80048a6:	d10b      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1d      	ldr	r2, [pc, #116]	@ (800493c <HAL_ADC_ConfigChannel+0x254>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d12b      	bne.n	8004922 <HAL_ADC_ConfigChannel+0x23a>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004940 <HAL_ADC_ConfigChannel+0x258>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d003      	beq.n	80048dc <HAL_ADC_ConfigChannel+0x1f4>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b11      	cmp	r3, #17
 80048da:	d122      	bne.n	8004922 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a11      	ldr	r2, [pc, #68]	@ (8004940 <HAL_ADC_ConfigChannel+0x258>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d111      	bne.n	8004922 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048fe:	4b11      	ldr	r3, [pc, #68]	@ (8004944 <HAL_ADC_ConfigChannel+0x25c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a11      	ldr	r2, [pc, #68]	@ (8004948 <HAL_ADC_ConfigChannel+0x260>)
 8004904:	fba2 2303 	umull	r2, r3, r2, r3
 8004908:	0c9a      	lsrs	r2, r3, #18
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004914:	e002      	b.n	800491c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	3b01      	subs	r3, #1
 800491a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f9      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	40012300 	.word	0x40012300
 800493c:	40012000 	.word	0x40012000
 8004940:	10000012 	.word	0x10000012
 8004944:	20000000 	.word	0x20000000
 8004948:	431bde83 	.word	0x431bde83

0800494c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004954:	4b79      	ldr	r3, [pc, #484]	@ (8004b3c <ADC_Init+0x1f0>)
 8004956:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	431a      	orrs	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004980:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6859      	ldr	r1, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	021a      	lsls	r2, r3, #8
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80049a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6859      	ldr	r1, [r3, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6899      	ldr	r1, [r3, #8]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049de:	4a58      	ldr	r2, [pc, #352]	@ (8004b40 <ADC_Init+0x1f4>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d022      	beq.n	8004a2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80049f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6899      	ldr	r1, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004a14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6899      	ldr	r1, [r3, #8]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	609a      	str	r2, [r3, #8]
 8004a28:	e00f      	b.n	8004a4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004a48:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0202 	bic.w	r2, r2, #2
 8004a58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6899      	ldr	r1, [r3, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	7e1b      	ldrb	r3, [r3, #24]
 8004a64:	005a      	lsls	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01b      	beq.n	8004ab0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a86:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004a96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6859      	ldr	r1, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	035a      	lsls	r2, r3, #13
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
 8004aae:	e007      	b.n	8004ac0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004abe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004ace:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	051a      	lsls	r2, r3, #20
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004af4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6899      	ldr	r1, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b02:	025a      	lsls	r2, r3, #9
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6899      	ldr	r1, [r3, #8]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	029a      	lsls	r2, r3, #10
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	609a      	str	r2, [r3, #8]
}
 8004b30:	bf00      	nop
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	40012300 	.word	0x40012300
 8004b40:	0f000001 	.word	0x0f000001

08004b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b54:	4b0c      	ldr	r3, [pc, #48]	@ (8004b88 <__NVIC_SetPriorityGrouping+0x44>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b60:	4013      	ands	r3, r2
 8004b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b76:	4a04      	ldr	r2, [pc, #16]	@ (8004b88 <__NVIC_SetPriorityGrouping+0x44>)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	60d3      	str	r3, [r2, #12]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b90:	4b04      	ldr	r3, [pc, #16]	@ (8004ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	0a1b      	lsrs	r3, r3, #8
 8004b96:	f003 0307 	and.w	r3, r3, #7
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	e000ed00 	.word	0xe000ed00

08004ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	db0b      	blt.n	8004bd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	f003 021f 	and.w	r2, r3, #31
 8004bc0:	4907      	ldr	r1, [pc, #28]	@ (8004be0 <__NVIC_EnableIRQ+0x38>)
 8004bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	2001      	movs	r0, #1
 8004bca:	fa00 f202 	lsl.w	r2, r0, r2
 8004bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	e000e100 	.word	0xe000e100

08004be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	6039      	str	r1, [r7, #0]
 8004bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	db0a      	blt.n	8004c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	490c      	ldr	r1, [pc, #48]	@ (8004c30 <__NVIC_SetPriority+0x4c>)
 8004bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c02:	0112      	lsls	r2, r2, #4
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	440b      	add	r3, r1
 8004c08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c0c:	e00a      	b.n	8004c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	4908      	ldr	r1, [pc, #32]	@ (8004c34 <__NVIC_SetPriority+0x50>)
 8004c14:	79fb      	ldrb	r3, [r7, #7]
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	3b04      	subs	r3, #4
 8004c1c:	0112      	lsls	r2, r2, #4
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	440b      	add	r3, r1
 8004c22:	761a      	strb	r2, [r3, #24]
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	e000e100 	.word	0xe000e100
 8004c34:	e000ed00 	.word	0xe000ed00

08004c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b089      	sub	sp, #36	@ 0x24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f1c3 0307 	rsb	r3, r3, #7
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	bf28      	it	cs
 8004c56:	2304      	movcs	r3, #4
 8004c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	2b06      	cmp	r3, #6
 8004c60:	d902      	bls.n	8004c68 <NVIC_EncodePriority+0x30>
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	3b03      	subs	r3, #3
 8004c66:	e000      	b.n	8004c6a <NVIC_EncodePriority+0x32>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	43da      	mvns	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	401a      	ands	r2, r3
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c80:	f04f 31ff 	mov.w	r1, #4294967295
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8a:	43d9      	mvns	r1, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c90:	4313      	orrs	r3, r2
         );
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3724      	adds	r7, #36	@ 0x24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
	...

08004ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cb0:	d301      	bcc.n	8004cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e00f      	b.n	8004cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce0 <SysTick_Config+0x40>)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cbe:	210f      	movs	r1, #15
 8004cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc4:	f7ff ff8e 	bl	8004be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cc8:	4b05      	ldr	r3, [pc, #20]	@ (8004ce0 <SysTick_Config+0x40>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cce:	4b04      	ldr	r3, [pc, #16]	@ (8004ce0 <SysTick_Config+0x40>)
 8004cd0:	2207      	movs	r2, #7
 8004cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	e000e010 	.word	0xe000e010

08004ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff ff29 	bl	8004b44 <__NVIC_SetPriorityGrouping>
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b086      	sub	sp, #24
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	4603      	mov	r3, r0
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	607a      	str	r2, [r7, #4]
 8004d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d0c:	f7ff ff3e 	bl	8004b8c <__NVIC_GetPriorityGrouping>
 8004d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	6978      	ldr	r0, [r7, #20]
 8004d18:	f7ff ff8e 	bl	8004c38 <NVIC_EncodePriority>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d22:	4611      	mov	r1, r2
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff ff5d 	bl	8004be4 <__NVIC_SetPriority>
}
 8004d2a:	bf00      	nop
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	4603      	mov	r3, r0
 8004d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff ff31 	bl	8004ba8 <__NVIC_EnableIRQ>
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b082      	sub	sp, #8
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7ff ffa2 	bl	8004ca0 <SysTick_Config>
 8004d5c:	4603      	mov	r3, r0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d74:	f7ff fc44 	bl	8004600 <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e099      	b.n	8004eb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0201 	bic.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004da4:	e00f      	b.n	8004dc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004da6:	f7ff fc2b 	bl	8004600 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b05      	cmp	r3, #5
 8004db2:	d908      	bls.n	8004dc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e078      	b.n	8004eb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e8      	bne.n	8004da6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4b38      	ldr	r3, [pc, #224]	@ (8004ec0 <HAL_DMA_Init+0x158>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d107      	bne.n	8004e30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f023 0307 	bic.w	r3, r3, #7
 8004e46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d117      	bne.n	8004e8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00e      	beq.n	8004e8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fa6f 	bl	8005350 <DMA_CheckFifoParam>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d008      	beq.n	8004e8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2240      	movs	r2, #64	@ 0x40
 8004e7c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004e86:	2301      	movs	r3, #1
 8004e88:	e016      	b.n	8004eb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fa26 	bl	80052e4 <DMA_CalcBaseAndBitshift>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea0:	223f      	movs	r2, #63	@ 0x3f
 8004ea2:	409a      	lsls	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	f010803f 	.word	0xf010803f

08004ec4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_DMA_Start_IT+0x26>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e040      	b.n	8004f6c <HAL_DMA_Start_IT+0xa8>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d12f      	bne.n	8004f5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2202      	movs	r2, #2
 8004f02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f9b8 	bl	8005288 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f1c:	223f      	movs	r2, #63	@ 0x3f
 8004f1e:	409a      	lsls	r2, r3
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0216 	orr.w	r2, r2, #22
 8004f32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d007      	beq.n	8004f4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0208 	orr.w	r2, r2, #8
 8004f4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0201 	orr.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	e005      	b.n	8004f6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f66:	2302      	movs	r3, #2
 8004f68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f80:	4b8e      	ldr	r3, [pc, #568]	@ (80051bc <HAL_DMA_IRQHandler+0x248>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a8e      	ldr	r2, [pc, #568]	@ (80051c0 <HAL_DMA_IRQHandler+0x24c>)
 8004f86:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8a:	0a9b      	lsrs	r3, r3, #10
 8004f8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f9e:	2208      	movs	r2, #8
 8004fa0:	409a      	lsls	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01a      	beq.n	8004fe0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d013      	beq.n	8004fe0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0204 	bic.w	r2, r2, #4
 8004fc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fcc:	2208      	movs	r2, #8
 8004fce:	409a      	lsls	r2, r3
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd8:	f043 0201 	orr.w	r2, r3, #1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	409a      	lsls	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4013      	ands	r3, r2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d012      	beq.n	8005016 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00b      	beq.n	8005016 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005002:	2201      	movs	r2, #1
 8005004:	409a      	lsls	r2, r3
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500e:	f043 0202 	orr.w	r2, r3, #2
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501a:	2204      	movs	r2, #4
 800501c:	409a      	lsls	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4013      	ands	r3, r2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d012      	beq.n	800504c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00b      	beq.n	800504c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005038:	2204      	movs	r2, #4
 800503a:	409a      	lsls	r2, r3
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005044:	f043 0204 	orr.w	r2, r3, #4
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005050:	2210      	movs	r2, #16
 8005052:	409a      	lsls	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4013      	ands	r3, r2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d043      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d03c      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506e:	2210      	movs	r2, #16
 8005070:	409a      	lsls	r2, r3
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d018      	beq.n	80050b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d108      	bne.n	80050a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d024      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	4798      	blx	r3
 80050a2:	e01f      	b.n	80050e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d01b      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	4798      	blx	r3
 80050b4:	e016      	b.n	80050e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d107      	bne.n	80050d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0208 	bic.w	r2, r2, #8
 80050d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e8:	2220      	movs	r2, #32
 80050ea:	409a      	lsls	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4013      	ands	r3, r2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 808f 	beq.w	8005214 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0310 	and.w	r3, r3, #16
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 8087 	beq.w	8005214 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800510a:	2220      	movs	r2, #32
 800510c:	409a      	lsls	r2, r3
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b05      	cmp	r3, #5
 800511c:	d136      	bne.n	800518c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0216 	bic.w	r2, r2, #22
 800512c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	695a      	ldr	r2, [r3, #20]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800513c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005142:	2b00      	cmp	r3, #0
 8005144:	d103      	bne.n	800514e <HAL_DMA_IRQHandler+0x1da>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800514a:	2b00      	cmp	r3, #0
 800514c:	d007      	beq.n	800515e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0208 	bic.w	r2, r2, #8
 800515c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005162:	223f      	movs	r2, #63	@ 0x3f
 8005164:	409a      	lsls	r2, r3
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800517e:	2b00      	cmp	r3, #0
 8005180:	d07e      	beq.n	8005280 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	4798      	blx	r3
        }
        return;
 800518a:	e079      	b.n	8005280 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d01d      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10d      	bne.n	80051c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d031      	beq.n	8005214 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	4798      	blx	r3
 80051b8:	e02c      	b.n	8005214 <HAL_DMA_IRQHandler+0x2a0>
 80051ba:	bf00      	nop
 80051bc:	20000000 	.word	0x20000000
 80051c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d023      	beq.n	8005214 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	4798      	blx	r3
 80051d4:	e01e      	b.n	8005214 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10f      	bne.n	8005204 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0210 	bic.w	r2, r2, #16
 80051f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005218:	2b00      	cmp	r3, #0
 800521a:	d032      	beq.n	8005282 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d022      	beq.n	800526e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2205      	movs	r2, #5
 800522c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0201 	bic.w	r2, r2, #1
 800523e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	3301      	adds	r3, #1
 8005244:	60bb      	str	r3, [r7, #8]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	429a      	cmp	r2, r3
 800524a:	d307      	bcc.n	800525c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f2      	bne.n	8005240 <HAL_DMA_IRQHandler+0x2cc>
 800525a:	e000      	b.n	800525e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800525c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	4798      	blx	r3
 800527e:	e000      	b.n	8005282 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005280:	bf00      	nop
    }
  }
}
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80052a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2b40      	cmp	r3, #64	@ 0x40
 80052b4:	d108      	bne.n	80052c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052c6:	e007      	b.n	80052d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	60da      	str	r2, [r3, #12]
}
 80052d8:	bf00      	nop
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	3b10      	subs	r3, #16
 80052f4:	4a14      	ldr	r2, [pc, #80]	@ (8005348 <DMA_CalcBaseAndBitshift+0x64>)
 80052f6:	fba2 2303 	umull	r2, r3, r2, r3
 80052fa:	091b      	lsrs	r3, r3, #4
 80052fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80052fe:	4a13      	ldr	r2, [pc, #76]	@ (800534c <DMA_CalcBaseAndBitshift+0x68>)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b03      	cmp	r3, #3
 8005310:	d909      	bls.n	8005326 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800531a:	f023 0303 	bic.w	r3, r3, #3
 800531e:	1d1a      	adds	r2, r3, #4
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	659a      	str	r2, [r3, #88]	@ 0x58
 8005324:	e007      	b.n	8005336 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800532e:	f023 0303 	bic.w	r3, r3, #3
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	aaaaaaab 	.word	0xaaaaaaab
 800534c:	08020c38 	.word	0x08020c38

08005350 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005358:	2300      	movs	r3, #0
 800535a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005360:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d11f      	bne.n	80053aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2b03      	cmp	r3, #3
 800536e:	d856      	bhi.n	800541e <DMA_CheckFifoParam+0xce>
 8005370:	a201      	add	r2, pc, #4	@ (adr r2, 8005378 <DMA_CheckFifoParam+0x28>)
 8005372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005376:	bf00      	nop
 8005378:	08005389 	.word	0x08005389
 800537c:	0800539b 	.word	0x0800539b
 8005380:	08005389 	.word	0x08005389
 8005384:	0800541f 	.word	0x0800541f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d046      	beq.n	8005422 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005398:	e043      	b.n	8005422 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80053a2:	d140      	bne.n	8005426 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053a8:	e03d      	b.n	8005426 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053b2:	d121      	bne.n	80053f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d837      	bhi.n	800542a <DMA_CheckFifoParam+0xda>
 80053ba:	a201      	add	r2, pc, #4	@ (adr r2, 80053c0 <DMA_CheckFifoParam+0x70>)
 80053bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c0:	080053d1 	.word	0x080053d1
 80053c4:	080053d7 	.word	0x080053d7
 80053c8:	080053d1 	.word	0x080053d1
 80053cc:	080053e9 	.word	0x080053e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	73fb      	strb	r3, [r7, #15]
      break;
 80053d4:	e030      	b.n	8005438 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d025      	beq.n	800542e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053e6:	e022      	b.n	800542e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80053f0:	d11f      	bne.n	8005432 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80053f6:	e01c      	b.n	8005432 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d903      	bls.n	8005406 <DMA_CheckFifoParam+0xb6>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b03      	cmp	r3, #3
 8005402:	d003      	beq.n	800540c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005404:	e018      	b.n	8005438 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	73fb      	strb	r3, [r7, #15]
      break;
 800540a:	e015      	b.n	8005438 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005410:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00e      	beq.n	8005436 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	73fb      	strb	r3, [r7, #15]
      break;
 800541c:	e00b      	b.n	8005436 <DMA_CheckFifoParam+0xe6>
      break;
 800541e:	bf00      	nop
 8005420:	e00a      	b.n	8005438 <DMA_CheckFifoParam+0xe8>
      break;
 8005422:	bf00      	nop
 8005424:	e008      	b.n	8005438 <DMA_CheckFifoParam+0xe8>
      break;
 8005426:	bf00      	nop
 8005428:	e006      	b.n	8005438 <DMA_CheckFifoParam+0xe8>
      break;
 800542a:	bf00      	nop
 800542c:	e004      	b.n	8005438 <DMA_CheckFifoParam+0xe8>
      break;
 800542e:	bf00      	nop
 8005430:	e002      	b.n	8005438 <DMA_CheckFifoParam+0xe8>
      break;   
 8005432:	bf00      	nop
 8005434:	e000      	b.n	8005438 <DMA_CheckFifoParam+0xe8>
      break;
 8005436:	bf00      	nop
    }
  } 
  
  return status; 
 8005438:	7bfb      	ldrb	r3, [r7, #15]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop

08005448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005448:	b480      	push	{r7}
 800544a:	b089      	sub	sp, #36	@ 0x24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005452:	2300      	movs	r3, #0
 8005454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005456:	2300      	movs	r3, #0
 8005458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800545a:	2300      	movs	r3, #0
 800545c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800545e:	2300      	movs	r3, #0
 8005460:	61fb      	str	r3, [r7, #28]
 8005462:	e165      	b.n	8005730 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005464:	2201      	movs	r2, #1
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	fa02 f303 	lsl.w	r3, r2, r3
 800546c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4013      	ands	r3, r2
 8005476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	429a      	cmp	r2, r3
 800547e:	f040 8154 	bne.w	800572a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	2b01      	cmp	r3, #1
 800548c:	d005      	beq.n	800549a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005496:	2b02      	cmp	r3, #2
 8005498:	d130      	bne.n	80054fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	2203      	movs	r2, #3
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	43db      	mvns	r3, r3
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	4013      	ands	r3, r2
 80054b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054d0:	2201      	movs	r2, #1
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	43db      	mvns	r3, r3
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	4013      	ands	r3, r2
 80054de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	091b      	lsrs	r3, r3, #4
 80054e6:	f003 0201 	and.w	r2, r3, #1
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f003 0303 	and.w	r3, r3, #3
 8005504:	2b03      	cmp	r3, #3
 8005506:	d017      	beq.n	8005538 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	2203      	movs	r2, #3
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	43db      	mvns	r3, r3
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	4013      	ands	r3, r2
 800551e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	4313      	orrs	r3, r2
 8005530:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f003 0303 	and.w	r3, r3, #3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d123      	bne.n	800558c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	08da      	lsrs	r2, r3, #3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3208      	adds	r2, #8
 800554c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	220f      	movs	r2, #15
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	43db      	mvns	r3, r3
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	4013      	ands	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4313      	orrs	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	08da      	lsrs	r2, r3, #3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	3208      	adds	r2, #8
 8005586:	69b9      	ldr	r1, [r7, #24]
 8005588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	2203      	movs	r2, #3
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	43db      	mvns	r3, r3
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	4013      	ands	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f003 0203 	and.w	r2, r3, #3
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 80ae 	beq.w	800572a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005748 <HAL_GPIO_Init+0x300>)
 80055d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d6:	4a5c      	ldr	r2, [pc, #368]	@ (8005748 <HAL_GPIO_Init+0x300>)
 80055d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80055dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80055de:	4b5a      	ldr	r3, [pc, #360]	@ (8005748 <HAL_GPIO_Init+0x300>)
 80055e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055ea:	4a58      	ldr	r2, [pc, #352]	@ (800574c <HAL_GPIO_Init+0x304>)
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	089b      	lsrs	r3, r3, #2
 80055f0:	3302      	adds	r3, #2
 80055f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	220f      	movs	r2, #15
 8005602:	fa02 f303 	lsl.w	r3, r2, r3
 8005606:	43db      	mvns	r3, r3
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	4013      	ands	r3, r2
 800560c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a4f      	ldr	r2, [pc, #316]	@ (8005750 <HAL_GPIO_Init+0x308>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d025      	beq.n	8005662 <HAL_GPIO_Init+0x21a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a4e      	ldr	r2, [pc, #312]	@ (8005754 <HAL_GPIO_Init+0x30c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d01f      	beq.n	800565e <HAL_GPIO_Init+0x216>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a4d      	ldr	r2, [pc, #308]	@ (8005758 <HAL_GPIO_Init+0x310>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d019      	beq.n	800565a <HAL_GPIO_Init+0x212>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a4c      	ldr	r2, [pc, #304]	@ (800575c <HAL_GPIO_Init+0x314>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d013      	beq.n	8005656 <HAL_GPIO_Init+0x20e>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a4b      	ldr	r2, [pc, #300]	@ (8005760 <HAL_GPIO_Init+0x318>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00d      	beq.n	8005652 <HAL_GPIO_Init+0x20a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a4a      	ldr	r2, [pc, #296]	@ (8005764 <HAL_GPIO_Init+0x31c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d007      	beq.n	800564e <HAL_GPIO_Init+0x206>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a49      	ldr	r2, [pc, #292]	@ (8005768 <HAL_GPIO_Init+0x320>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d101      	bne.n	800564a <HAL_GPIO_Init+0x202>
 8005646:	2306      	movs	r3, #6
 8005648:	e00c      	b.n	8005664 <HAL_GPIO_Init+0x21c>
 800564a:	2307      	movs	r3, #7
 800564c:	e00a      	b.n	8005664 <HAL_GPIO_Init+0x21c>
 800564e:	2305      	movs	r3, #5
 8005650:	e008      	b.n	8005664 <HAL_GPIO_Init+0x21c>
 8005652:	2304      	movs	r3, #4
 8005654:	e006      	b.n	8005664 <HAL_GPIO_Init+0x21c>
 8005656:	2303      	movs	r3, #3
 8005658:	e004      	b.n	8005664 <HAL_GPIO_Init+0x21c>
 800565a:	2302      	movs	r3, #2
 800565c:	e002      	b.n	8005664 <HAL_GPIO_Init+0x21c>
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <HAL_GPIO_Init+0x21c>
 8005662:	2300      	movs	r3, #0
 8005664:	69fa      	ldr	r2, [r7, #28]
 8005666:	f002 0203 	and.w	r2, r2, #3
 800566a:	0092      	lsls	r2, r2, #2
 800566c:	4093      	lsls	r3, r2
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	4313      	orrs	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005674:	4935      	ldr	r1, [pc, #212]	@ (800574c <HAL_GPIO_Init+0x304>)
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	089b      	lsrs	r3, r3, #2
 800567a:	3302      	adds	r3, #2
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005682:	4b3a      	ldr	r3, [pc, #232]	@ (800576c <HAL_GPIO_Init+0x324>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	43db      	mvns	r3, r3
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	4013      	ands	r3, r2
 8005690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056a6:	4a31      	ldr	r2, [pc, #196]	@ (800576c <HAL_GPIO_Init+0x324>)
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056ac:	4b2f      	ldr	r3, [pc, #188]	@ (800576c <HAL_GPIO_Init+0x324>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	43db      	mvns	r3, r3
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	4013      	ands	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056d0:	4a26      	ldr	r2, [pc, #152]	@ (800576c <HAL_GPIO_Init+0x324>)
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056d6:	4b25      	ldr	r3, [pc, #148]	@ (800576c <HAL_GPIO_Init+0x324>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	43db      	mvns	r3, r3
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	4013      	ands	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056fa:	4a1c      	ldr	r2, [pc, #112]	@ (800576c <HAL_GPIO_Init+0x324>)
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005700:	4b1a      	ldr	r3, [pc, #104]	@ (800576c <HAL_GPIO_Init+0x324>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	43db      	mvns	r3, r3
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	4013      	ands	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005724:	4a11      	ldr	r2, [pc, #68]	@ (800576c <HAL_GPIO_Init+0x324>)
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	3301      	adds	r3, #1
 800572e:	61fb      	str	r3, [r7, #28]
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	2b0f      	cmp	r3, #15
 8005734:	f67f ae96 	bls.w	8005464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005738:	bf00      	nop
 800573a:	bf00      	nop
 800573c:	3724      	adds	r7, #36	@ 0x24
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40023800 	.word	0x40023800
 800574c:	40013800 	.word	0x40013800
 8005750:	40020000 	.word	0x40020000
 8005754:	40020400 	.word	0x40020400
 8005758:	40020800 	.word	0x40020800
 800575c:	40020c00 	.word	0x40020c00
 8005760:	40021000 	.word	0x40021000
 8005764:	40021400 	.word	0x40021400
 8005768:	40021800 	.word	0x40021800
 800576c:	40013c00 	.word	0x40013c00

08005770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	807b      	strh	r3, [r7, #2]
 800577c:	4613      	mov	r3, r2
 800577e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005780:	787b      	ldrb	r3, [r7, #1]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005786:	887a      	ldrh	r2, [r7, #2]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800578c:	e003      	b.n	8005796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800578e:	887b      	ldrh	r3, [r7, #2]
 8005790:	041a      	lsls	r2, r3, #16
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	619a      	str	r2, [r3, #24]
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
	...

080057a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e12b      	b.n	8005a0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7fb fd5e 	bl	800128c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2224      	movs	r2, #36	@ 0x24
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0201 	bic.w	r2, r2, #1
 80057e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005806:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005808:	f000 fa02 	bl	8005c10 <HAL_RCC_GetPCLK1Freq>
 800580c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	4a81      	ldr	r2, [pc, #516]	@ (8005a18 <HAL_I2C_Init+0x274>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d807      	bhi.n	8005828 <HAL_I2C_Init+0x84>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4a80      	ldr	r2, [pc, #512]	@ (8005a1c <HAL_I2C_Init+0x278>)
 800581c:	4293      	cmp	r3, r2
 800581e:	bf94      	ite	ls
 8005820:	2301      	movls	r3, #1
 8005822:	2300      	movhi	r3, #0
 8005824:	b2db      	uxtb	r3, r3
 8005826:	e006      	b.n	8005836 <HAL_I2C_Init+0x92>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4a7d      	ldr	r2, [pc, #500]	@ (8005a20 <HAL_I2C_Init+0x27c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	bf94      	ite	ls
 8005830:	2301      	movls	r3, #1
 8005832:	2300      	movhi	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e0e7      	b.n	8005a0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4a78      	ldr	r2, [pc, #480]	@ (8005a24 <HAL_I2C_Init+0x280>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	0c9b      	lsrs	r3, r3, #18
 8005848:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	4a6a      	ldr	r2, [pc, #424]	@ (8005a18 <HAL_I2C_Init+0x274>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d802      	bhi.n	8005878 <HAL_I2C_Init+0xd4>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	3301      	adds	r3, #1
 8005876:	e009      	b.n	800588c <HAL_I2C_Init+0xe8>
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800587e:	fb02 f303 	mul.w	r3, r2, r3
 8005882:	4a69      	ldr	r2, [pc, #420]	@ (8005a28 <HAL_I2C_Init+0x284>)
 8005884:	fba2 2303 	umull	r2, r3, r2, r3
 8005888:	099b      	lsrs	r3, r3, #6
 800588a:	3301      	adds	r3, #1
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6812      	ldr	r2, [r2, #0]
 8005890:	430b      	orrs	r3, r1
 8005892:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800589e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	495c      	ldr	r1, [pc, #368]	@ (8005a18 <HAL_I2C_Init+0x274>)
 80058a8:	428b      	cmp	r3, r1
 80058aa:	d819      	bhi.n	80058e0 <HAL_I2C_Init+0x13c>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	1e59      	subs	r1, r3, #1
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80058ba:	1c59      	adds	r1, r3, #1
 80058bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80058c0:	400b      	ands	r3, r1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <HAL_I2C_Init+0x138>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	1e59      	subs	r1, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80058d4:	3301      	adds	r3, #1
 80058d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058da:	e051      	b.n	8005980 <HAL_I2C_Init+0x1dc>
 80058dc:	2304      	movs	r3, #4
 80058de:	e04f      	b.n	8005980 <HAL_I2C_Init+0x1dc>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d111      	bne.n	800590c <HAL_I2C_Init+0x168>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	1e58      	subs	r0, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6859      	ldr	r1, [r3, #4]
 80058f0:	460b      	mov	r3, r1
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	440b      	add	r3, r1
 80058f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80058fa:	3301      	adds	r3, #1
 80058fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf0c      	ite	eq
 8005904:	2301      	moveq	r3, #1
 8005906:	2300      	movne	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	e012      	b.n	8005932 <HAL_I2C_Init+0x18e>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	1e58      	subs	r0, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6859      	ldr	r1, [r3, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	0099      	lsls	r1, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005922:	3301      	adds	r3, #1
 8005924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005928:	2b00      	cmp	r3, #0
 800592a:	bf0c      	ite	eq
 800592c:	2301      	moveq	r3, #1
 800592e:	2300      	movne	r3, #0
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <HAL_I2C_Init+0x196>
 8005936:	2301      	movs	r3, #1
 8005938:	e022      	b.n	8005980 <HAL_I2C_Init+0x1dc>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10e      	bne.n	8005960 <HAL_I2C_Init+0x1bc>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	1e58      	subs	r0, r3, #1
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6859      	ldr	r1, [r3, #4]
 800594a:	460b      	mov	r3, r1
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	440b      	add	r3, r1
 8005950:	fbb0 f3f3 	udiv	r3, r0, r3
 8005954:	3301      	adds	r3, #1
 8005956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800595a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800595e:	e00f      	b.n	8005980 <HAL_I2C_Init+0x1dc>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	1e58      	subs	r0, r3, #1
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6859      	ldr	r1, [r3, #4]
 8005968:	460b      	mov	r3, r1
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	0099      	lsls	r1, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	fbb0 f3f3 	udiv	r3, r0, r3
 8005976:	3301      	adds	r3, #1
 8005978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800597c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	6809      	ldr	r1, [r1, #0]
 8005984:	4313      	orrs	r3, r2
 8005986:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69da      	ldr	r2, [r3, #28]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80059ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6911      	ldr	r1, [r2, #16]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	68d2      	ldr	r2, [r2, #12]
 80059ba:	4311      	orrs	r1, r2
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6812      	ldr	r2, [r2, #0]
 80059c0:	430b      	orrs	r3, r1
 80059c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	695a      	ldr	r2, [r3, #20]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0201 	orr.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	000186a0 	.word	0x000186a0
 8005a1c:	001e847f 	.word	0x001e847f
 8005a20:	003d08ff 	.word	0x003d08ff
 8005a24:	431bde83 	.word	0x431bde83
 8005a28:	10624dd3 	.word	0x10624dd3

08005a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e0cc      	b.n	8005bda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a40:	4b68      	ldr	r3, [pc, #416]	@ (8005be4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 030f 	and.w	r3, r3, #15
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d90c      	bls.n	8005a68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a4e:	4b65      	ldr	r3, [pc, #404]	@ (8005be4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a56:	4b63      	ldr	r3, [pc, #396]	@ (8005be4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d001      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e0b8      	b.n	8005bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d020      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a80:	4b59      	ldr	r3, [pc, #356]	@ (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	4a58      	ldr	r2, [pc, #352]	@ (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005a8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a98:	4b53      	ldr	r3, [pc, #332]	@ (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	4a52      	ldr	r2, [pc, #328]	@ (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005aa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aa4:	4b50      	ldr	r3, [pc, #320]	@ (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	494d      	ldr	r1, [pc, #308]	@ (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d044      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d107      	bne.n	8005ada <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aca:	4b47      	ldr	r3, [pc, #284]	@ (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d119      	bne.n	8005b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e07f      	b.n	8005bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d003      	beq.n	8005aea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d107      	bne.n	8005afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aea:	4b3f      	ldr	r3, [pc, #252]	@ (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d109      	bne.n	8005b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e06f      	b.n	8005bda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005afa:	4b3b      	ldr	r3, [pc, #236]	@ (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e067      	b.n	8005bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b0a:	4b37      	ldr	r3, [pc, #220]	@ (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f023 0203 	bic.w	r2, r3, #3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	4934      	ldr	r1, [pc, #208]	@ (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b1c:	f7fe fd70 	bl	8004600 <HAL_GetTick>
 8005b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b22:	e00a      	b.n	8005b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b24:	f7fe fd6c 	bl	8004600 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e04f      	b.n	8005bda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 020c 	and.w	r2, r3, #12
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d1eb      	bne.n	8005b24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b4c:	4b25      	ldr	r3, [pc, #148]	@ (8005be4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 030f 	and.w	r3, r3, #15
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d20c      	bcs.n	8005b74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b5a:	4b22      	ldr	r3, [pc, #136]	@ (8005be4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b62:	4b20      	ldr	r3, [pc, #128]	@ (8005be4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d001      	beq.n	8005b74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e032      	b.n	8005bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d008      	beq.n	8005b92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b80:	4b19      	ldr	r3, [pc, #100]	@ (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	4916      	ldr	r1, [pc, #88]	@ (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d009      	beq.n	8005bb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b9e:	4b12      	ldr	r3, [pc, #72]	@ (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	490e      	ldr	r1, [pc, #56]	@ (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bb2:	f000 fdb5 	bl	8006720 <HAL_RCC_GetSysClockFreq>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005be8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	091b      	lsrs	r3, r3, #4
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	490a      	ldr	r1, [pc, #40]	@ (8005bec <HAL_RCC_ClockConfig+0x1c0>)
 8005bc4:	5ccb      	ldrb	r3, [r1, r3]
 8005bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bca:	4a09      	ldr	r2, [pc, #36]	@ (8005bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005bce:	4b09      	ldr	r3, [pc, #36]	@ (8005bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fe fcd0 	bl	8004578 <HAL_InitTick>

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	40023c00 	.word	0x40023c00
 8005be8:	40023800 	.word	0x40023800
 8005bec:	0800b738 	.word	0x0800b738
 8005bf0:	20000000 	.word	0x20000000
 8005bf4:	20000004 	.word	0x20000004

08005bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bfc:	4b03      	ldr	r3, [pc, #12]	@ (8005c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	20000000 	.word	0x20000000

08005c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c14:	f7ff fff0 	bl	8005bf8 <HAL_RCC_GetHCLKFreq>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	4b05      	ldr	r3, [pc, #20]	@ (8005c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	0a9b      	lsrs	r3, r3, #10
 8005c20:	f003 0307 	and.w	r3, r3, #7
 8005c24:	4903      	ldr	r1, [pc, #12]	@ (8005c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c26:	5ccb      	ldrb	r3, [r1, r3]
 8005c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40023800 	.word	0x40023800
 8005c34:	0800b748 	.word	0x0800b748

08005c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08c      	sub	sp, #48	@ 0x30
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d010      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005c70:	4b6f      	ldr	r3, [pc, #444]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c76:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7e:	496c      	ldr	r1, [pc, #432]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d010      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005c9e:	4b64      	ldr	r3, [pc, #400]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ca4:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cac:	4960      	ldr	r1, [pc, #384]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d017      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ccc:	4b58      	ldr	r3, [pc, #352]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cda:	4955      	ldr	r1, [pc, #340]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cea:	d101      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005cec:	2301      	movs	r3, #1
 8005cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0308 	and.w	r3, r3, #8
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d017      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d08:	4b49      	ldr	r3, [pc, #292]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d16:	4946      	ldr	r1, [pc, #280]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d26:	d101      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005d34:	2301      	movs	r3, #1
 8005d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0320 	and.w	r3, r3, #32
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 808a 	beq.w	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d46:	2300      	movs	r3, #0
 8005d48:	60bb      	str	r3, [r7, #8]
 8005d4a:	4b39      	ldr	r3, [pc, #228]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4e:	4a38      	ldr	r2, [pc, #224]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d56:	4b36      	ldr	r3, [pc, #216]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d5e:	60bb      	str	r3, [r7, #8]
 8005d60:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d62:	4b34      	ldr	r3, [pc, #208]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a33      	ldr	r2, [pc, #204]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d6e:	f7fe fc47 	bl	8004600 <HAL_GetTick>
 8005d72:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d74:	e008      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d76:	f7fe fc43 	bl	8004600 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e278      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d88:	4b2a      	ldr	r3, [pc, #168]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0f0      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d94:	4b26      	ldr	r3, [pc, #152]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d9c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d02f      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dac:	6a3a      	ldr	r2, [r7, #32]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d028      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005db2:	4b1f      	ldr	r3, [pc, #124]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dba:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005dc8:	4a19      	ldr	r2, [pc, #100]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005dce:	4b18      	ldr	r3, [pc, #96]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d114      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005dda:	f7fe fc11 	bl	8004600 <HAL_GetTick>
 8005dde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de0:	e00a      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005de2:	f7fe fc0d 	bl	8004600 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e240      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df8:	4b0d      	ldr	r3, [pc, #52]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0ee      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e10:	d114      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005e12:	4b07      	ldr	r3, [pc, #28]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e26:	4902      	ldr	r1, [pc, #8]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	608b      	str	r3, [r1, #8]
 8005e2c:	e00c      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005e2e:	bf00      	nop
 8005e30:	40023800 	.word	0x40023800
 8005e34:	40007000 	.word	0x40007000
 8005e38:	42470e40 	.word	0x42470e40
 8005e3c:	4b4a      	ldr	r3, [pc, #296]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	4a49      	ldr	r2, [pc, #292]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e42:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e46:	6093      	str	r3, [r2, #8]
 8005e48:	4b47      	ldr	r3, [pc, #284]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e54:	4944      	ldr	r1, [pc, #272]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0310 	and.w	r3, r3, #16
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d004      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005e6e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00a      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005e7c:	4b3a      	ldr	r3, [pc, #232]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e8a:	4937      	ldr	r1, [pc, #220]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00a      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e9e:	4b32      	ldr	r3, [pc, #200]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ea4:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eac:	492e      	ldr	r1, [pc, #184]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d011      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005ec0:	4b29      	ldr	r3, [pc, #164]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ec6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ece:	4926      	ldr	r1, [pc, #152]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ede:	d101      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ef6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005efe:	491a      	ldr	r1, [pc, #104]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d011      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005f12:	4b15      	ldr	r3, [pc, #84]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f18:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f20:	4911      	ldr	r1, [pc, #68]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f30:	d101      	bne.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005f32:	2301      	movs	r3, #1
 8005f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d005      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f44:	f040 80ff 	bne.w	8006146 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f48:	4b09      	ldr	r3, [pc, #36]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f4e:	f7fe fb57 	bl	8004600 <HAL_GetTick>
 8005f52:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f54:	e00e      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f56:	f7fe fb53 	bl	8004600 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d907      	bls.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e188      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005f68:	40023800 	.word	0x40023800
 8005f6c:	424711e0 	.word	0x424711e0
 8005f70:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f74:	4b7e      	ldr	r3, [pc, #504]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1ea      	bne.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d009      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d028      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d124      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005fa8:	4b71      	ldr	r3, [pc, #452]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fae:	0c1b      	lsrs	r3, r3, #16
 8005fb0:	f003 0303 	and.w	r3, r3, #3
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005fba:	4b6d      	ldr	r3, [pc, #436]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fc0:	0e1b      	lsrs	r3, r3, #24
 8005fc2:	f003 030f 	and.w	r3, r3, #15
 8005fc6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	019b      	lsls	r3, r3, #6
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	085b      	lsrs	r3, r3, #1
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	041b      	lsls	r3, r3, #16
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	061b      	lsls	r3, r3, #24
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	071b      	lsls	r3, r3, #28
 8005fea:	4961      	ldr	r1, [pc, #388]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d004      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006006:	d00a      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006010:	2b00      	cmp	r3, #0
 8006012:	d035      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006018:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800601c:	d130      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800601e:	4b54      	ldr	r3, [pc, #336]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006024:	0c1b      	lsrs	r3, r3, #16
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	3301      	adds	r3, #1
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006030:	4b4f      	ldr	r3, [pc, #316]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006032:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006036:	0f1b      	lsrs	r3, r3, #28
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	019b      	lsls	r3, r3, #6
 8006048:	431a      	orrs	r2, r3
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	085b      	lsrs	r3, r3, #1
 800604e:	3b01      	subs	r3, #1
 8006050:	041b      	lsls	r3, r3, #16
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	061b      	lsls	r3, r3, #24
 800605a:	431a      	orrs	r2, r3
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	071b      	lsls	r3, r3, #28
 8006060:	4943      	ldr	r1, [pc, #268]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006068:	4b41      	ldr	r3, [pc, #260]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800606a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800606e:	f023 021f 	bic.w	r2, r3, #31
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006076:	3b01      	subs	r3, #1
 8006078:	493d      	ldr	r1, [pc, #244]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800607a:	4313      	orrs	r3, r2
 800607c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006088:	2b00      	cmp	r3, #0
 800608a:	d029      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006090:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006094:	d124      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006096:	4b36      	ldr	r3, [pc, #216]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800609c:	0c1b      	lsrs	r3, r3, #16
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	3301      	adds	r3, #1
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80060a8:	4b31      	ldr	r3, [pc, #196]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80060aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060ae:	0f1b      	lsrs	r3, r3, #28
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	019b      	lsls	r3, r3, #6
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	085b      	lsrs	r3, r3, #1
 80060c8:	3b01      	subs	r3, #1
 80060ca:	041b      	lsls	r3, r3, #16
 80060cc:	431a      	orrs	r2, r3
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	061b      	lsls	r3, r3, #24
 80060d2:	431a      	orrs	r2, r3
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	071b      	lsls	r3, r3, #28
 80060d8:	4925      	ldr	r1, [pc, #148]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d016      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	019b      	lsls	r3, r3, #6
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	085b      	lsrs	r3, r3, #1
 80060fe:	3b01      	subs	r3, #1
 8006100:	041b      	lsls	r3, r3, #16
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	061b      	lsls	r3, r3, #24
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	071b      	lsls	r3, r3, #28
 8006112:	4917      	ldr	r1, [pc, #92]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006114:	4313      	orrs	r3, r2
 8006116:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800611a:	4b16      	ldr	r3, [pc, #88]	@ (8006174 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800611c:	2201      	movs	r2, #1
 800611e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006120:	f7fe fa6e 	bl	8004600 <HAL_GetTick>
 8006124:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006126:	e008      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006128:	f7fe fa6a 	bl	8004600 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e09f      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800613a:	4b0d      	ldr	r3, [pc, #52]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0f0      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8006146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006148:	2b01      	cmp	r3, #1
 800614a:	f040 8095 	bne.w	8006278 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800614e:	4b0a      	ldr	r3, [pc, #40]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006154:	f7fe fa54 	bl	8004600 <HAL_GetTick>
 8006158:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800615a:	e00f      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800615c:	f7fe fa50 	bl	8004600 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d908      	bls.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e085      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800616e:	bf00      	nop
 8006170:	40023800 	.word	0x40023800
 8006174:	42470068 	.word	0x42470068
 8006178:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800617c:	4b41      	ldr	r3, [pc, #260]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006184:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006188:	d0e8      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800619a:	2b00      	cmp	r3, #0
 800619c:	d009      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d02b      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d127      	bne.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80061b2:	4b34      	ldr	r3, [pc, #208]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80061b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061b8:	0c1b      	lsrs	r3, r3, #16
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	3301      	adds	r3, #1
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	699a      	ldr	r2, [r3, #24]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	019b      	lsls	r3, r3, #6
 80061ce:	431a      	orrs	r2, r3
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	085b      	lsrs	r3, r3, #1
 80061d4:	3b01      	subs	r3, #1
 80061d6:	041b      	lsls	r3, r3, #16
 80061d8:	431a      	orrs	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061de:	061b      	lsls	r3, r3, #24
 80061e0:	4928      	ldr	r1, [pc, #160]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80061e8:	4b26      	ldr	r3, [pc, #152]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80061ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061ee:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f6:	3b01      	subs	r3, #1
 80061f8:	021b      	lsls	r3, r3, #8
 80061fa:	4922      	ldr	r1, [pc, #136]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800620a:	2b00      	cmp	r3, #0
 800620c:	d01d      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006212:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006216:	d118      	bne.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006218:	4b1a      	ldr	r3, [pc, #104]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621e:	0e1b      	lsrs	r3, r3, #24
 8006220:	f003 030f 	and.w	r3, r3, #15
 8006224:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	019b      	lsls	r3, r3, #6
 8006230:	431a      	orrs	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	085b      	lsrs	r3, r3, #1
 8006238:	3b01      	subs	r3, #1
 800623a:	041b      	lsls	r3, r3, #16
 800623c:	431a      	orrs	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	061b      	lsls	r3, r3, #24
 8006242:	4910      	ldr	r1, [pc, #64]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006244:	4313      	orrs	r3, r2
 8006246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800624a:	4b0f      	ldr	r3, [pc, #60]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800624c:	2201      	movs	r2, #1
 800624e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006250:	f7fe f9d6 	bl	8004600 <HAL_GetTick>
 8006254:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006256:	e008      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006258:	f7fe f9d2 	bl	8004600 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d901      	bls.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e007      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800626a:	4b06      	ldr	r3, [pc, #24]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006272:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006276:	d1ef      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3730      	adds	r7, #48	@ 0x30
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	40023800 	.word	0x40023800
 8006288:	42470070 	.word	0x42470070

0800628c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800628c:	b480      	push	{r7}
 800628e:	b089      	sub	sp, #36	@ 0x24
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006298:	2300      	movs	r3, #0
 800629a:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	2b07      	cmp	r3, #7
 80062b2:	f200 8224 	bhi.w	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80062b6:	a201      	add	r2, pc, #4	@ (adr r2, 80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80062b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062bc:	080064bf 	.word	0x080064bf
 80062c0:	080065e9 	.word	0x080065e9
 80062c4:	080066ff 	.word	0x080066ff
 80062c8:	080062dd 	.word	0x080062dd
 80062cc:	080066ff 	.word	0x080066ff
 80062d0:	080066ff 	.word	0x080066ff
 80062d4:	080066ff 	.word	0x080066ff
 80062d8:	080062dd 	.word	0x080062dd
  {
    case RCC_PERIPHCLK_SAI1:
    case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80062dc:	4ba8      	ldr	r3, [pc, #672]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80062de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062e2:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 80062ea:	613b      	str	r3, [r7, #16]
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80062f2:	f000 80d6 	beq.w	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80062fc:	f200 80dd 	bhi.w	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006306:	f000 809f 	beq.w	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006310:	f200 80d3 	bhi.w	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800631a:	d05b      	beq.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006322:	f200 80ca 	bhi.w	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800632c:	f000 80b6 	beq.w	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006336:	f200 80c0 	bhi.w	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006340:	f000 8082 	beq.w	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800634a:	f200 80b6 	bhi.w	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d004      	beq.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800635a:	d03b      	beq.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
        default :
        {
          break;
 800635c:	e0ad      	b.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800635e:	4b88      	ldr	r3, [pc, #544]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d109      	bne.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800636a:	4b85      	ldr	r3, [pc, #532]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800636c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006370:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006374:	4a83      	ldr	r2, [pc, #524]	@ (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006376:	fbb2 f3f3 	udiv	r3, r2, r3
 800637a:	61bb      	str	r3, [r7, #24]
 800637c:	e008      	b.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800637e:	4b80      	ldr	r3, [pc, #512]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006388:	4a7f      	ldr	r2, [pc, #508]	@ (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800638a:	fbb2 f3f3 	udiv	r3, r2, r3
 800638e:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8006390:	4b7b      	ldr	r3, [pc, #492]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006396:	0e1b      	lsrs	r3, r3, #24
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg1);
 800639e:	4b78      	ldr	r3, [pc, #480]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80063a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a4:	099b      	lsrs	r3, r3, #6
 80063a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	fb03 f202 	mul.w	r2, r3, r2
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b6:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80063b8:	4b71      	ldr	r3, [pc, #452]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80063ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063be:	0a1b      	lsrs	r3, r3, #8
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	3301      	adds	r3, #1
 80063c6:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 80063c8:	69fa      	ldr	r2, [r7, #28]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d0:	61fb      	str	r3, [r7, #28]
          break;
 80063d2:	e073      	b.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80063d4:	4b6a      	ldr	r3, [pc, #424]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d109      	bne.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80063e0:	4b67      	ldr	r3, [pc, #412]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80063e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063ea:	4a66      	ldr	r2, [pc, #408]	@ (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80063ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f0:	61bb      	str	r3, [r7, #24]
 80063f2:	e008      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80063f4:	4b62      	ldr	r3, [pc, #392]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80063f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063fe:	4a62      	ldr	r2, [pc, #392]	@ (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006400:	fbb2 f3f3 	udiv	r3, r2, r3
 8006404:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8006406:	4b5e      	ldr	r3, [pc, #376]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006408:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800640c:	0e1b      	lsrs	r3, r3, #24
 800640e:	f003 030f 	and.w	r3, r3, #15
 8006412:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg1);
 8006414:	4b5a      	ldr	r3, [pc, #360]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800641a:	099b      	lsrs	r3, r3, #6
 800641c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	fb03 f202 	mul.w	r2, r3, r2
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	fbb2 f3f3 	udiv	r3, r2, r3
 800642c:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800642e:	4b54      	ldr	r3, [pc, #336]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006434:	f003 031f 	and.w	r3, r3, #31
 8006438:	3301      	adds	r3, #1
 800643a:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 800643c:	69fa      	ldr	r2, [r7, #28]
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	fbb2 f3f3 	udiv	r3, r2, r3
 8006444:	61fb      	str	r3, [r7, #28]
          break;
 8006446:	e039      	b.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006448:	4b4d      	ldr	r3, [pc, #308]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d108      	bne.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006454:	4b4a      	ldr	r3, [pc, #296]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800645c:	4a49      	ldr	r2, [pc, #292]	@ (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800645e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006462:	61bb      	str	r3, [r7, #24]
 8006464:	e007      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006466:	4b46      	ldr	r3, [pc, #280]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800646e:	4a46      	ldr	r2, [pc, #280]	@ (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006470:	fbb2 f3f3 	udiv	r3, r2, r3
 8006474:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8006476:	4b42      	ldr	r3, [pc, #264]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	0f1b      	lsrs	r3, r3, #28
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U)) / (tmpreg1);
 8006482:	4b3f      	ldr	r3, [pc, #252]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	099b      	lsrs	r3, r3, #6
 8006488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	fb03 f202 	mul.w	r2, r3, r2
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	fbb2 f3f3 	udiv	r3, r2, r3
 8006498:	61fb      	str	r3, [r7, #28]
          break;
 800649a:	e00f      	b.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 800649c:	4b3b      	ldr	r3, [pc, #236]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800649e:	61fb      	str	r3, [r7, #28]
          break;
 80064a0:	e00c      	b.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80064a2:	4b37      	ldr	r3, [pc, #220]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d102      	bne.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 80064ae:	4b35      	ldr	r3, [pc, #212]	@ (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80064b0:	61fb      	str	r3, [r7, #28]
          break;
 80064b2:	e003      	b.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 80064b4:	4b34      	ldr	r3, [pc, #208]	@ (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80064b6:	61fb      	str	r3, [r7, #28]
          break;
 80064b8:	e000      	b.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 80064ba:	bf00      	nop
        }
      }
      break;
 80064bc:	e120      	b.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80064be:	4b30      	ldr	r3, [pc, #192]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80064c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064c4:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 80064d0:	d079      	beq.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 80064d8:	f200 8082 	bhi.w	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064e2:	d03c      	beq.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064ea:	d879      	bhi.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d006      	beq.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064f8:	d172      	bne.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80064fa:	4b24      	ldr	r3, [pc, #144]	@ (800658c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80064fc:	61fb      	str	r3, [r7, #28]
          break;
 80064fe:	e072      	b.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006500:	4b1f      	ldr	r3, [pc, #124]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006508:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800650c:	d109      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800650e:	4b1c      	ldr	r3, [pc, #112]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006510:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006514:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006518:	4a1b      	ldr	r2, [pc, #108]	@ (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800651a:	fbb2 f3f3 	udiv	r3, r2, r3
 800651e:	61bb      	str	r3, [r7, #24]
 8006520:	e008      	b.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006522:	4b17      	ldr	r3, [pc, #92]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006524:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006528:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800652c:	4a15      	ldr	r2, [pc, #84]	@ (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800652e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006532:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006534:	4b12      	ldr	r3, [pc, #72]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006536:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800653a:	099b      	lsrs	r3, r3, #6
 800653c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	fb02 f303 	mul.w	r3, r2, r3
 8006546:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006548:	4b0d      	ldr	r3, [pc, #52]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800654a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800654e:	0f1b      	lsrs	r3, r3, #28
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	fbb2 f3f3 	udiv	r3, r2, r3
 800655a:	61fb      	str	r3, [r7, #28]
          break;
 800655c:	e043      	b.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800655e:	4b08      	ldr	r3, [pc, #32]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006566:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800656a:	d111      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800656c:	4b04      	ldr	r3, [pc, #16]	@ (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006574:	4a04      	ldr	r2, [pc, #16]	@ (8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006576:	fbb2 f3f3 	udiv	r3, r2, r3
 800657a:	61bb      	str	r3, [r7, #24]
 800657c:	e010      	b.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800657e:	bf00      	nop
 8006580:	40023800 	.word	0x40023800
 8006584:	00f42400 	.word	0x00f42400
 8006588:	017d7840 	.word	0x017d7840
 800658c:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006590:	4b5f      	ldr	r3, [pc, #380]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006598:	4a5e      	ldr	r2, [pc, #376]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800659a:	fbb2 f3f3 	udiv	r3, r2, r3
 800659e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80065a0:	4b5b      	ldr	r3, [pc, #364]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	099b      	lsrs	r3, r3, #6
 80065a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	fb02 f303 	mul.w	r3, r2, r3
 80065b0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80065b2:	4b57      	ldr	r3, [pc, #348]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	0f1b      	lsrs	r3, r3, #28
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c2:	61fb      	str	r3, [r7, #28]
          break;
 80065c4:	e00f      	b.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80065c6:	4b52      	ldr	r3, [pc, #328]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065d2:	d102      	bne.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 80065d4:	4b50      	ldr	r3, [pc, #320]	@ (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80065d6:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80065d8:	e005      	b.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 80065da:	4b4e      	ldr	r3, [pc, #312]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80065dc:	61fb      	str	r3, [r7, #28]
          break;
 80065de:	e002      	b.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	61fb      	str	r3, [r7, #28]
          break;
 80065e4:	bf00      	nop
        }
      }
      break;
 80065e6:	e08b      	b.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80065e8:	4b49      	ldr	r3, [pc, #292]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80065ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065ee:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80065fa:	d06f      	beq.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006602:	d878      	bhi.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800660a:	d03c      	beq.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006612:	d870      	bhi.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d006      	beq.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006620:	d169      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006622:	4b3e      	ldr	r3, [pc, #248]	@ (800671c <HAL_RCCEx_GetPeriphCLKFreq+0x490>)
 8006624:	61fb      	str	r3, [r7, #28]
          break;
 8006626:	e069      	b.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006628:	4b39      	ldr	r3, [pc, #228]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006630:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006634:	d109      	bne.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006636:	4b36      	ldr	r3, [pc, #216]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006638:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800663c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006640:	4a35      	ldr	r2, [pc, #212]	@ (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8006642:	fbb2 f3f3 	udiv	r3, r2, r3
 8006646:	61bb      	str	r3, [r7, #24]
 8006648:	e008      	b.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800664a:	4b31      	ldr	r3, [pc, #196]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800664c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006650:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006654:	4a2f      	ldr	r2, [pc, #188]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8006656:	fbb2 f3f3 	udiv	r3, r2, r3
 800665a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800665c:	4b2c      	ldr	r3, [pc, #176]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800665e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006662:	099b      	lsrs	r3, r3, #6
 8006664:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	fb02 f303 	mul.w	r3, r2, r3
 800666e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006670:	4b27      	ldr	r3, [pc, #156]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006672:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006676:	0f1b      	lsrs	r3, r3, #28
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006682:	61fb      	str	r3, [r7, #28]
          break;
 8006684:	e03a      	b.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006686:	4b22      	ldr	r3, [pc, #136]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800668e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006692:	d108      	bne.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006694:	4b1e      	ldr	r3, [pc, #120]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800669c:	4a1e      	ldr	r2, [pc, #120]	@ (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800669e:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a2:	61bb      	str	r3, [r7, #24]
 80066a4:	e007      	b.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80066a6:	4b1a      	ldr	r3, [pc, #104]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066ae:	4a19      	ldr	r2, [pc, #100]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80066b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b4:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80066b6:	4b16      	ldr	r3, [pc, #88]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	099b      	lsrs	r3, r3, #6
 80066bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	fb02 f303 	mul.w	r3, r2, r3
 80066c6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80066c8:	4b11      	ldr	r3, [pc, #68]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	0f1b      	lsrs	r3, r3, #28
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d8:	61fb      	str	r3, [r7, #28]
          break;
 80066da:	e00f      	b.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80066dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066e8:	d102      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 80066ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80066ec:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80066ee:	e005      	b.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 80066f0:	4b08      	ldr	r3, [pc, #32]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80066f2:	61fb      	str	r3, [r7, #28]
          break;
 80066f4:	e002      	b.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	61fb      	str	r3, [r7, #28]
          break;
 80066fa:	bf00      	nop
        }
      }
      break;
 80066fc:	e000      	b.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    default:
    {
      break;
 80066fe:	bf00      	nop
    }
  }
  return frequency;
 8006700:	69fb      	ldr	r3, [r7, #28]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3724      	adds	r7, #36	@ 0x24
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40023800 	.word	0x40023800
 8006714:	00f42400 	.word	0x00f42400
 8006718:	017d7840 	.word	0x017d7840
 800671c:	00bb8000 	.word	0x00bb8000

08006720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006724:	b0a6      	sub	sp, #152	@ 0x98
 8006726:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006746:	4bc8      	ldr	r3, [pc, #800]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x348>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f003 030c 	and.w	r3, r3, #12
 800674e:	2b0c      	cmp	r3, #12
 8006750:	f200 817e 	bhi.w	8006a50 <HAL_RCC_GetSysClockFreq+0x330>
 8006754:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	08006791 	.word	0x08006791
 8006760:	08006a51 	.word	0x08006a51
 8006764:	08006a51 	.word	0x08006a51
 8006768:	08006a51 	.word	0x08006a51
 800676c:	08006799 	.word	0x08006799
 8006770:	08006a51 	.word	0x08006a51
 8006774:	08006a51 	.word	0x08006a51
 8006778:	08006a51 	.word	0x08006a51
 800677c:	080067a1 	.word	0x080067a1
 8006780:	08006a51 	.word	0x08006a51
 8006784:	08006a51 	.word	0x08006a51
 8006788:	08006a51 	.word	0x08006a51
 800678c:	0800690b 	.word	0x0800690b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006790:	4bb6      	ldr	r3, [pc, #728]	@ (8006a6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8006792:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006796:	e15f      	b.n	8006a58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006798:	4bb5      	ldr	r3, [pc, #724]	@ (8006a70 <HAL_RCC_GetSysClockFreq+0x350>)
 800679a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800679e:	e15b      	b.n	8006a58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067a0:	4bb1      	ldr	r3, [pc, #708]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x348>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067ac:	4bae      	ldr	r3, [pc, #696]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x348>)
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d031      	beq.n	800681c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067b8:	4bab      	ldr	r3, [pc, #684]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x348>)
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	099b      	lsrs	r3, r3, #6
 80067be:	2200      	movs	r2, #0
 80067c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80067c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80067cc:	2300      	movs	r3, #0
 80067ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80067d0:	4ba7      	ldr	r3, [pc, #668]	@ (8006a70 <HAL_RCC_GetSysClockFreq+0x350>)
 80067d2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80067d6:	462a      	mov	r2, r5
 80067d8:	fb03 f202 	mul.w	r2, r3, r2
 80067dc:	2300      	movs	r3, #0
 80067de:	4621      	mov	r1, r4
 80067e0:	fb01 f303 	mul.w	r3, r1, r3
 80067e4:	4413      	add	r3, r2
 80067e6:	4aa2      	ldr	r2, [pc, #648]	@ (8006a70 <HAL_RCC_GetSysClockFreq+0x350>)
 80067e8:	4621      	mov	r1, r4
 80067ea:	fba1 1202 	umull	r1, r2, r1, r2
 80067ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80067f0:	460a      	mov	r2, r1
 80067f2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80067f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80067f6:	4413      	add	r3, r2
 80067f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80067fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067fe:	2200      	movs	r2, #0
 8006800:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006802:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006804:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006808:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800680c:	f7fa f9ec 	bl	8000be8 <__aeabi_uldivmod>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4613      	mov	r3, r2
 8006816:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800681a:	e064      	b.n	80068e6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800681c:	4b92      	ldr	r3, [pc, #584]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x348>)
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	099b      	lsrs	r3, r3, #6
 8006822:	2200      	movs	r2, #0
 8006824:	653b      	str	r3, [r7, #80]	@ 0x50
 8006826:	657a      	str	r2, [r7, #84]	@ 0x54
 8006828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800682a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800682e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006830:	2300      	movs	r3, #0
 8006832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006834:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8006838:	4622      	mov	r2, r4
 800683a:	462b      	mov	r3, r5
 800683c:	f04f 0000 	mov.w	r0, #0
 8006840:	f04f 0100 	mov.w	r1, #0
 8006844:	0159      	lsls	r1, r3, #5
 8006846:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800684a:	0150      	lsls	r0, r2, #5
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	4621      	mov	r1, r4
 8006852:	1a51      	subs	r1, r2, r1
 8006854:	6139      	str	r1, [r7, #16]
 8006856:	4629      	mov	r1, r5
 8006858:	eb63 0301 	sbc.w	r3, r3, r1
 800685c:	617b      	str	r3, [r7, #20]
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	f04f 0300 	mov.w	r3, #0
 8006866:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800686a:	4659      	mov	r1, fp
 800686c:	018b      	lsls	r3, r1, #6
 800686e:	4651      	mov	r1, sl
 8006870:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006874:	4651      	mov	r1, sl
 8006876:	018a      	lsls	r2, r1, #6
 8006878:	4651      	mov	r1, sl
 800687a:	ebb2 0801 	subs.w	r8, r2, r1
 800687e:	4659      	mov	r1, fp
 8006880:	eb63 0901 	sbc.w	r9, r3, r1
 8006884:	f04f 0200 	mov.w	r2, #0
 8006888:	f04f 0300 	mov.w	r3, #0
 800688c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006890:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006894:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006898:	4690      	mov	r8, r2
 800689a:	4699      	mov	r9, r3
 800689c:	4623      	mov	r3, r4
 800689e:	eb18 0303 	adds.w	r3, r8, r3
 80068a2:	60bb      	str	r3, [r7, #8]
 80068a4:	462b      	mov	r3, r5
 80068a6:	eb49 0303 	adc.w	r3, r9, r3
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	f04f 0200 	mov.w	r2, #0
 80068b0:	f04f 0300 	mov.w	r3, #0
 80068b4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80068b8:	4629      	mov	r1, r5
 80068ba:	028b      	lsls	r3, r1, #10
 80068bc:	4621      	mov	r1, r4
 80068be:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068c2:	4621      	mov	r1, r4
 80068c4:	028a      	lsls	r2, r1, #10
 80068c6:	4610      	mov	r0, r2
 80068c8:	4619      	mov	r1, r3
 80068ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068ce:	2200      	movs	r2, #0
 80068d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80068d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80068d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80068d8:	f7fa f986 	bl	8000be8 <__aeabi_uldivmod>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4613      	mov	r3, r2
 80068e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80068e6:	4b60      	ldr	r3, [pc, #384]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x348>)
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	0c1b      	lsrs	r3, r3, #16
 80068ec:	f003 0303 	and.w	r3, r3, #3
 80068f0:	3301      	adds	r3, #1
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80068f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80068fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006900:	fbb2 f3f3 	udiv	r3, r2, r3
 8006904:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006908:	e0a6      	b.n	8006a58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800690a:	4b57      	ldr	r3, [pc, #348]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x348>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006912:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006916:	4b54      	ldr	r3, [pc, #336]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x348>)
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d02a      	beq.n	8006978 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006922:	4b51      	ldr	r3, [pc, #324]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x348>)
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	099b      	lsrs	r3, r3, #6
 8006928:	2200      	movs	r2, #0
 800692a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800692c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800692e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006930:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006934:	2100      	movs	r1, #0
 8006936:	4b4e      	ldr	r3, [pc, #312]	@ (8006a70 <HAL_RCC_GetSysClockFreq+0x350>)
 8006938:	fb03 f201 	mul.w	r2, r3, r1
 800693c:	2300      	movs	r3, #0
 800693e:	fb00 f303 	mul.w	r3, r0, r3
 8006942:	4413      	add	r3, r2
 8006944:	4a4a      	ldr	r2, [pc, #296]	@ (8006a70 <HAL_RCC_GetSysClockFreq+0x350>)
 8006946:	fba0 1202 	umull	r1, r2, r0, r2
 800694a:	677a      	str	r2, [r7, #116]	@ 0x74
 800694c:	460a      	mov	r2, r1
 800694e:	673a      	str	r2, [r7, #112]	@ 0x70
 8006950:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006952:	4413      	add	r3, r2
 8006954:	677b      	str	r3, [r7, #116]	@ 0x74
 8006956:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800695a:	2200      	movs	r2, #0
 800695c:	633b      	str	r3, [r7, #48]	@ 0x30
 800695e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006960:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006964:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8006968:	f7fa f93e 	bl	8000be8 <__aeabi_uldivmod>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4613      	mov	r3, r2
 8006972:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006976:	e05b      	b.n	8006a30 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006978:	4b3b      	ldr	r3, [pc, #236]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x348>)
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	099b      	lsrs	r3, r3, #6
 800697e:	2200      	movs	r2, #0
 8006980:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006982:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800698a:	623b      	str	r3, [r7, #32]
 800698c:	2300      	movs	r3, #0
 800698e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006990:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006994:	4642      	mov	r2, r8
 8006996:	464b      	mov	r3, r9
 8006998:	f04f 0000 	mov.w	r0, #0
 800699c:	f04f 0100 	mov.w	r1, #0
 80069a0:	0159      	lsls	r1, r3, #5
 80069a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069a6:	0150      	lsls	r0, r2, #5
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4641      	mov	r1, r8
 80069ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80069b2:	4649      	mov	r1, r9
 80069b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80069b8:	f04f 0200 	mov.w	r2, #0
 80069bc:	f04f 0300 	mov.w	r3, #0
 80069c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80069c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80069c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80069cc:	ebb2 040a 	subs.w	r4, r2, sl
 80069d0:	eb63 050b 	sbc.w	r5, r3, fp
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	00eb      	lsls	r3, r5, #3
 80069de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069e2:	00e2      	lsls	r2, r4, #3
 80069e4:	4614      	mov	r4, r2
 80069e6:	461d      	mov	r5, r3
 80069e8:	4643      	mov	r3, r8
 80069ea:	18e3      	adds	r3, r4, r3
 80069ec:	603b      	str	r3, [r7, #0]
 80069ee:	464b      	mov	r3, r9
 80069f0:	eb45 0303 	adc.w	r3, r5, r3
 80069f4:	607b      	str	r3, [r7, #4]
 80069f6:	f04f 0200 	mov.w	r2, #0
 80069fa:	f04f 0300 	mov.w	r3, #0
 80069fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a02:	4629      	mov	r1, r5
 8006a04:	028b      	lsls	r3, r1, #10
 8006a06:	4621      	mov	r1, r4
 8006a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	028a      	lsls	r2, r1, #10
 8006a10:	4610      	mov	r0, r2
 8006a12:	4619      	mov	r1, r3
 8006a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a18:	2200      	movs	r2, #0
 8006a1a:	61bb      	str	r3, [r7, #24]
 8006a1c:	61fa      	str	r2, [r7, #28]
 8006a1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a22:	f7fa f8e1 	bl	8000be8 <__aeabi_uldivmod>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006a30:	4b0d      	ldr	r3, [pc, #52]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x348>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	0f1b      	lsrs	r3, r3, #28
 8006a36:	f003 0307 	and.w	r3, r3, #7
 8006a3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8006a3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006a4e:	e003      	b.n	8006a58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a50:	4b06      	ldr	r3, [pc, #24]	@ (8006a6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8006a52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006a56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3798      	adds	r7, #152	@ 0x98
 8006a60:	46bd      	mov	sp, r7
 8006a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a66:	bf00      	nop
 8006a68:	40023800 	.word	0x40023800
 8006a6c:	00f42400 	.word	0x00f42400
 8006a70:	017d7840 	.word	0x017d7840

08006a74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e28d      	b.n	8006fa2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 8083 	beq.w	8006b9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006a94:	4b94      	ldr	r3, [pc, #592]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f003 030c 	and.w	r3, r3, #12
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d019      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006aa0:	4b91      	ldr	r3, [pc, #580]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 030c 	and.w	r3, r3, #12
        || \
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d106      	bne.n	8006aba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006aac:	4b8e      	ldr	r3, [pc, #568]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ab4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ab8:	d00c      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aba:	4b8b      	ldr	r3, [pc, #556]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006ac2:	2b0c      	cmp	r3, #12
 8006ac4:	d112      	bne.n	8006aec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ac6:	4b88      	ldr	r3, [pc, #544]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ace:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ad2:	d10b      	bne.n	8006aec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ad4:	4b84      	ldr	r3, [pc, #528]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d05b      	beq.n	8006b98 <HAL_RCC_OscConfig+0x124>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d157      	bne.n	8006b98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e25a      	b.n	8006fa2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006af4:	d106      	bne.n	8006b04 <HAL_RCC_OscConfig+0x90>
 8006af6:	4b7c      	ldr	r3, [pc, #496]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a7b      	ldr	r2, [pc, #492]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	e01d      	b.n	8006b40 <HAL_RCC_OscConfig+0xcc>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b0c:	d10c      	bne.n	8006b28 <HAL_RCC_OscConfig+0xb4>
 8006b0e:	4b76      	ldr	r3, [pc, #472]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a75      	ldr	r2, [pc, #468]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006b14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	4b73      	ldr	r3, [pc, #460]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a72      	ldr	r2, [pc, #456]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	e00b      	b.n	8006b40 <HAL_RCC_OscConfig+0xcc>
 8006b28:	4b6f      	ldr	r3, [pc, #444]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a6e      	ldr	r2, [pc, #440]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006b2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	4b6c      	ldr	r3, [pc, #432]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a6b      	ldr	r2, [pc, #428]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006b3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d013      	beq.n	8006b70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b48:	f7fd fd5a 	bl	8004600 <HAL_GetTick>
 8006b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b4e:	e008      	b.n	8006b62 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b50:	f7fd fd56 	bl	8004600 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b64      	cmp	r3, #100	@ 0x64
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e21f      	b.n	8006fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b62:	4b61      	ldr	r3, [pc, #388]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0f0      	beq.n	8006b50 <HAL_RCC_OscConfig+0xdc>
 8006b6e:	e014      	b.n	8006b9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b70:	f7fd fd46 	bl	8004600 <HAL_GetTick>
 8006b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b76:	e008      	b.n	8006b8a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b78:	f7fd fd42 	bl	8004600 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b64      	cmp	r3, #100	@ 0x64
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e20b      	b.n	8006fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b8a:	4b57      	ldr	r3, [pc, #348]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1f0      	bne.n	8006b78 <HAL_RCC_OscConfig+0x104>
 8006b96:	e000      	b.n	8006b9a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d06f      	beq.n	8006c86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006ba6:	4b50      	ldr	r3, [pc, #320]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f003 030c 	and.w	r3, r3, #12
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d017      	beq.n	8006be2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006bb2:	4b4d      	ldr	r3, [pc, #308]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 030c 	and.w	r3, r3, #12
        || \
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d105      	bne.n	8006bca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006bbe:	4b4a      	ldr	r3, [pc, #296]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00b      	beq.n	8006be2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bca:	4b47      	ldr	r3, [pc, #284]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006bd2:	2b0c      	cmp	r3, #12
 8006bd4:	d11c      	bne.n	8006c10 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bd6:	4b44      	ldr	r3, [pc, #272]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d116      	bne.n	8006c10 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006be2:	4b41      	ldr	r3, [pc, #260]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d005      	beq.n	8006bfa <HAL_RCC_OscConfig+0x186>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d001      	beq.n	8006bfa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e1d3      	b.n	8006fa2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	00db      	lsls	r3, r3, #3
 8006c08:	4937      	ldr	r1, [pc, #220]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c0e:	e03a      	b.n	8006c86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d020      	beq.n	8006c5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c18:	4b34      	ldr	r3, [pc, #208]	@ (8006cec <HAL_RCC_OscConfig+0x278>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c1e:	f7fd fcef 	bl	8004600 <HAL_GetTick>
 8006c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c24:	e008      	b.n	8006c38 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c26:	f7fd fceb 	bl	8004600 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d901      	bls.n	8006c38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e1b4      	b.n	8006fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c38:	4b2b      	ldr	r3, [pc, #172]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0f0      	beq.n	8006c26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c44:	4b28      	ldr	r3, [pc, #160]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	00db      	lsls	r3, r3, #3
 8006c52:	4925      	ldr	r1, [pc, #148]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	600b      	str	r3, [r1, #0]
 8006c58:	e015      	b.n	8006c86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c5a:	4b24      	ldr	r3, [pc, #144]	@ (8006cec <HAL_RCC_OscConfig+0x278>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c60:	f7fd fcce 	bl	8004600 <HAL_GetTick>
 8006c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c68:	f7fd fcca 	bl	8004600 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e193      	b.n	8006fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1f0      	bne.n	8006c68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d036      	beq.n	8006d00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d016      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c9a:	4b15      	ldr	r3, [pc, #84]	@ (8006cf0 <HAL_RCC_OscConfig+0x27c>)
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca0:	f7fd fcae 	bl	8004600 <HAL_GetTick>
 8006ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ca6:	e008      	b.n	8006cba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ca8:	f7fd fcaa 	bl	8004600 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e173      	b.n	8006fa2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cba:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce8 <HAL_RCC_OscConfig+0x274>)
 8006cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0f0      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x234>
 8006cc6:	e01b      	b.n	8006d00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cc8:	4b09      	ldr	r3, [pc, #36]	@ (8006cf0 <HAL_RCC_OscConfig+0x27c>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cce:	f7fd fc97 	bl	8004600 <HAL_GetTick>
 8006cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cd4:	e00e      	b.n	8006cf4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cd6:	f7fd fc93 	bl	8004600 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d907      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e15c      	b.n	8006fa2 <HAL_RCC_OscConfig+0x52e>
 8006ce8:	40023800 	.word	0x40023800
 8006cec:	42470000 	.word	0x42470000
 8006cf0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cf4:	4b8a      	ldr	r3, [pc, #552]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006cf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1ea      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 8097 	beq.w	8006e3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d12:	4b83      	ldr	r3, [pc, #524]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10f      	bne.n	8006d3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60bb      	str	r3, [r7, #8]
 8006d22:	4b7f      	ldr	r3, [pc, #508]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d26:	4a7e      	ldr	r2, [pc, #504]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d2e:	4b7c      	ldr	r3, [pc, #496]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d36:	60bb      	str	r3, [r7, #8]
 8006d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d3e:	4b79      	ldr	r3, [pc, #484]	@ (8006f24 <HAL_RCC_OscConfig+0x4b0>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d118      	bne.n	8006d7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d4a:	4b76      	ldr	r3, [pc, #472]	@ (8006f24 <HAL_RCC_OscConfig+0x4b0>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a75      	ldr	r2, [pc, #468]	@ (8006f24 <HAL_RCC_OscConfig+0x4b0>)
 8006d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d56:	f7fd fc53 	bl	8004600 <HAL_GetTick>
 8006d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d5c:	e008      	b.n	8006d70 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d5e:	f7fd fc4f 	bl	8004600 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d901      	bls.n	8006d70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e118      	b.n	8006fa2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d70:	4b6c      	ldr	r3, [pc, #432]	@ (8006f24 <HAL_RCC_OscConfig+0x4b0>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0f0      	beq.n	8006d5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d106      	bne.n	8006d92 <HAL_RCC_OscConfig+0x31e>
 8006d84:	4b66      	ldr	r3, [pc, #408]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d88:	4a65      	ldr	r2, [pc, #404]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006d8a:	f043 0301 	orr.w	r3, r3, #1
 8006d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d90:	e01c      	b.n	8006dcc <HAL_RCC_OscConfig+0x358>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	2b05      	cmp	r3, #5
 8006d98:	d10c      	bne.n	8006db4 <HAL_RCC_OscConfig+0x340>
 8006d9a:	4b61      	ldr	r3, [pc, #388]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d9e:	4a60      	ldr	r2, [pc, #384]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006da0:	f043 0304 	orr.w	r3, r3, #4
 8006da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006da6:	4b5e      	ldr	r3, [pc, #376]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006daa:	4a5d      	ldr	r2, [pc, #372]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006dac:	f043 0301 	orr.w	r3, r3, #1
 8006db0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006db2:	e00b      	b.n	8006dcc <HAL_RCC_OscConfig+0x358>
 8006db4:	4b5a      	ldr	r3, [pc, #360]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006db8:	4a59      	ldr	r2, [pc, #356]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006dba:	f023 0301 	bic.w	r3, r3, #1
 8006dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dc0:	4b57      	ldr	r3, [pc, #348]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dc4:	4a56      	ldr	r2, [pc, #344]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006dc6:	f023 0304 	bic.w	r3, r3, #4
 8006dca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d015      	beq.n	8006e00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dd4:	f7fd fc14 	bl	8004600 <HAL_GetTick>
 8006dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dda:	e00a      	b.n	8006df2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ddc:	f7fd fc10 	bl	8004600 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e0d7      	b.n	8006fa2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df2:	4b4b      	ldr	r3, [pc, #300]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0ee      	beq.n	8006ddc <HAL_RCC_OscConfig+0x368>
 8006dfe:	e014      	b.n	8006e2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e00:	f7fd fbfe 	bl	8004600 <HAL_GetTick>
 8006e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e06:	e00a      	b.n	8006e1e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e08:	f7fd fbfa 	bl	8004600 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d901      	bls.n	8006e1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e0c1      	b.n	8006fa2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e1e:	4b40      	ldr	r3, [pc, #256]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1ee      	bne.n	8006e08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e2a:	7dfb      	ldrb	r3, [r7, #23]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d105      	bne.n	8006e3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e30:	4b3b      	ldr	r3, [pc, #236]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e34:	4a3a      	ldr	r2, [pc, #232]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 80ad 	beq.w	8006fa0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e46:	4b36      	ldr	r3, [pc, #216]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f003 030c 	and.w	r3, r3, #12
 8006e4e:	2b08      	cmp	r3, #8
 8006e50:	d060      	beq.n	8006f14 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d145      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e5a:	4b33      	ldr	r3, [pc, #204]	@ (8006f28 <HAL_RCC_OscConfig+0x4b4>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e60:	f7fd fbce 	bl	8004600 <HAL_GetTick>
 8006e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e66:	e008      	b.n	8006e7a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e68:	f7fd fbca 	bl	8004600 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e093      	b.n	8006fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e7a:	4b29      	ldr	r3, [pc, #164]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1f0      	bne.n	8006e68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69da      	ldr	r2, [r3, #28]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e94:	019b      	lsls	r3, r3, #6
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9c:	085b      	lsrs	r3, r3, #1
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	041b      	lsls	r3, r3, #16
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea8:	061b      	lsls	r3, r3, #24
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb0:	071b      	lsls	r3, r3, #28
 8006eb2:	491b      	ldr	r1, [pc, #108]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f28 <HAL_RCC_OscConfig+0x4b4>)
 8006eba:	2201      	movs	r2, #1
 8006ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ebe:	f7fd fb9f 	bl	8004600 <HAL_GetTick>
 8006ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ec4:	e008      	b.n	8006ed8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ec6:	f7fd fb9b 	bl	8004600 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e064      	b.n	8006fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ed8:	4b11      	ldr	r3, [pc, #68]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0f0      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x452>
 8006ee4:	e05c      	b.n	8006fa0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ee6:	4b10      	ldr	r3, [pc, #64]	@ (8006f28 <HAL_RCC_OscConfig+0x4b4>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eec:	f7fd fb88 	bl	8004600 <HAL_GetTick>
 8006ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ef2:	e008      	b.n	8006f06 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ef4:	f7fd fb84 	bl	8004600 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e04d      	b.n	8006fa2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f06:	4b06      	ldr	r3, [pc, #24]	@ (8006f20 <HAL_RCC_OscConfig+0x4ac>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f0      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x480>
 8006f12:	e045      	b.n	8006fa0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d107      	bne.n	8006f2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e040      	b.n	8006fa2 <HAL_RCC_OscConfig+0x52e>
 8006f20:	40023800 	.word	0x40023800
 8006f24:	40007000 	.word	0x40007000
 8006f28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8006fac <HAL_RCC_OscConfig+0x538>)
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d030      	beq.n	8006f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d129      	bne.n	8006f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d122      	bne.n	8006f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d119      	bne.n	8006f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f72:	085b      	lsrs	r3, r3, #1
 8006f74:	3b01      	subs	r3, #1
 8006f76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d10f      	bne.n	8006f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d107      	bne.n	8006f9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d001      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e000      	b.n	8006fa2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	40023800 	.word	0x40023800

08006fb0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
 8006fbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d904      	bls.n	8006fd2 <HAL_SAI_InitProtocol+0x22>
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	3b03      	subs	r3, #3
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d812      	bhi.n	8006ff6 <HAL_SAI_InitProtocol+0x46>
 8006fd0:	e008      	b.n	8006fe4 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	68b9      	ldr	r1, [r7, #8]
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 f9dd 	bl	8007398 <SAI_InitI2S>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	75fb      	strb	r3, [r7, #23]
      break;
 8006fe2:	e00b      	b.n	8006ffc <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	68b9      	ldr	r1, [r7, #8]
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 fa82 	bl	80074f4 <SAI_InitPCM>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff4:	e002      	b.n	8006ffc <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8006ffa:	bf00      	nop
  }

  if (status == HAL_OK)
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d104      	bne.n	800700c <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 f808 	bl	8007018 <HAL_SAI_Init>
 8007008:	4603      	mov	r3, r0
 800700a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800700c:	7dfb      	ldrb	r3, [r7, #23]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8007020:	2300      	movs	r3, #0
 8007022:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e10c      	b.n	8007254 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7fa fe66 	bl	8001d20 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2202      	movs	r2, #2
 8007058:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 faff 	bl	8007660 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fba6 	bl	80077b4 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d030      	beq.n	80070d2 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fbe3 	bl	800783c <SAI_GetInputClock>
 8007076:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	461a      	mov	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	025b      	lsls	r3, r3, #9
 800708a:	fbb2 f3f3 	udiv	r3, r2, r3
 800708e:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4a72      	ldr	r2, [pc, #456]	@ (800725c <HAL_SAI_Init+0x244>)
 8007094:	fba2 2303 	umull	r2, r3, r2, r3
 8007098:	08da      	lsrs	r2, r3, #3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 800709e:	68f9      	ldr	r1, [r7, #12]
 80070a0:	4b6e      	ldr	r3, [pc, #440]	@ (800725c <HAL_SAI_Init+0x244>)
 80070a2:	fba3 2301 	umull	r2, r3, r3, r1
 80070a6:	08da      	lsrs	r2, r3, #3
 80070a8:	4613      	mov	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	1aca      	subs	r2, r1, r3
 80070b2:	2a08      	cmp	r2, #8
 80070b4:	d904      	bls.n	80070c0 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	d104      	bne.n	80070d2 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070cc:	085a      	lsrs	r2, r3, #1
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d003      	beq.n	80070e2 <HAL_SAI_Init+0xca>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d109      	bne.n	80070f6 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d101      	bne.n	80070ee <HAL_SAI_Init+0xd6>
 80070ea:	2300      	movs	r3, #0
 80070ec:	e001      	b.n	80070f2 <HAL_SAI_Init+0xda>
 80070ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070f2:	617b      	str	r3, [r7, #20]
 80070f4:	e008      	b.n	8007108 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d102      	bne.n	8007104 <HAL_SAI_Init+0xec>
 80070fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007102:	e000      	b.n	8007106 <HAL_SAI_Init+0xee>
 8007104:	2300      	movs	r3, #0
 8007106:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	2b03      	cmp	r3, #3
 800710e:	d811      	bhi.n	8007134 <HAL_SAI_Init+0x11c>
 8007110:	2b02      	cmp	r3, #2
 8007112:	d20b      	bcs.n	800712c <HAL_SAI_Init+0x114>
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <HAL_SAI_Init+0x106>
 8007118:	2b01      	cmp	r3, #1
 800711a:	d003      	beq.n	8007124 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 800711c:	e00a      	b.n	8007134 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	613b      	str	r3, [r7, #16]
    break;
 8007122:	e008      	b.n	8007136 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007124:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007128:	613b      	str	r3, [r7, #16]
    break;
 800712a:	e004      	b.n	8007136 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800712c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007130:	613b      	str	r3, [r7, #16]
    break;
 8007132:	e000      	b.n	8007136 <HAL_SAI_Init+0x11e>
      break;
 8007134:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6819      	ldr	r1, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	4b47      	ldr	r3, [pc, #284]	@ (8007260 <HAL_SAI_Init+0x248>)
 8007142:	400b      	ands	r3, r1
 8007144:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6819      	ldr	r1, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007154:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800715a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007160:	431a      	orrs	r2, r3
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 800716e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800717a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007180:	051b      	lsls	r3, r3, #20
 8007182:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	6812      	ldr	r2, [r2, #0]
 8007196:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800719a:	f023 030f 	bic.w	r3, r3, #15
 800719e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6859      	ldr	r1, [r3, #4]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699a      	ldr	r2, [r3, #24]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ae:	431a      	orrs	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b4:	431a      	orrs	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6899      	ldr	r1, [r3, #8]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	4b26      	ldr	r3, [pc, #152]	@ (8007264 <HAL_SAI_Init+0x24c>)
 80071ca:	400b      	ands	r3, r1
 80071cc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6899      	ldr	r1, [r3, #8]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071d8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80071de:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 80071e4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 80071ea:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071f0:	3b01      	subs	r3, #1
 80071f2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80071f4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68d9      	ldr	r1, [r3, #12]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800720c:	400b      	ands	r3, r1
 800720e:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68d9      	ldr	r1, [r3, #12]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800721e:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007224:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007226:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800722c:	3b01      	subs	r3, #1
 800722e:	021b      	lsls	r3, r3, #8
 8007230:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3718      	adds	r7, #24
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	cccccccd 	.word	0xcccccccd
 8007260:	ff05c010 	.word	0xff05c010
 8007264:	fff88000 	.word	0xfff88000

08007268 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	4613      	mov	r3, r2
 8007274:	80fb      	strh	r3, [r7, #6]
  if ((pData == NULL) || (Size == 0))
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <HAL_SAI_Receive_DMA+0x1a>
 800727c:	88fb      	ldrh	r3, [r7, #6]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e074      	b.n	8007370 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b01      	cmp	r3, #1
 8007290:	d16d      	bne.n	800736e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007298:	2b01      	cmp	r3, #1
 800729a:	d101      	bne.n	80072a0 <HAL_SAI_Receive_DMA+0x38>
 800729c:	2302      	movs	r3, #2
 800729e:	e067      	b.n	8007370 <HAL_SAI_Receive_DMA+0x108>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    hsai->pBuffPtr = pData;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	669a      	str	r2, [r3, #104]	@ 0x68
    hsai->XferSize = Size;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	88fa      	ldrh	r2, [r7, #6]
 80072b2:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
    hsai->XferCount = Size;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	88fa      	ldrh	r2, [r7, #6]
 80072ba:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2222      	movs	r2, #34	@ 0x22
 80072ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072d2:	4a29      	ldr	r2, [pc, #164]	@ (8007378 <HAL_SAI_Receive_DMA+0x110>)
 80072d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072da:	4a28      	ldr	r2, [pc, #160]	@ (800737c <HAL_SAI_Receive_DMA+0x114>)
 80072dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072e2:	4a27      	ldr	r2, [pc, #156]	@ (8007380 <HAL_SAI_Receive_DMA+0x118>)
 80072e4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ea:	2200      	movs	r2, #0
 80072ec:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	331c      	adds	r3, #28
 80072f8:	4619      	mov	r1, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072fe:	461a      	mov	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8007306:	f7fd fddd 	bl	8004ec4 <HAL_DMA_Start_IT>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d005      	beq.n	800731c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      return  HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e029      	b.n	8007370 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800731c:	2100      	movs	r1, #0
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 f968 	bl	80075f4 <SAI_InterruptFlag>
 8007324:	4601      	mov	r1, r0
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	691a      	ldr	r2, [r3, #16]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007342:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d107      	bne.n	8007362 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007360:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	e000      	b.n	8007370 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800736e:	2302      	movs	r3, #2
  }
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	08007731 	.word	0x08007731
 800737c:	080076d1 	.word	0x080076d1
 8007380:	0800774d 	.word	0x0800774d

08007384 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <SAI_InitI2S+0x2a>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d103      	bne.n	80073ca <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80073c8:	e002      	b.n	80073d0 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2201      	movs	r2, #1
 80073ce:	641a      	str	r2, [r3, #64]	@ 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80073d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80073de:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e076      	b.n	80074e8 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d107      	bne.n	8007410 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	651a      	str	r2, [r3, #80]	@ 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800740c:	655a      	str	r2, [r3, #84]	@ 0x54
 800740e:	e006      	b.n	800741e <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007416:	651a      	str	r2, [r3, #80]	@ 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Frame definition */
  switch (datasize)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b03      	cmp	r3, #3
 8007422:	d84f      	bhi.n	80074c4 <SAI_InitI2S+0x12c>
 8007424:	a201      	add	r2, pc, #4	@ (adr r2, 800742c <SAI_InitI2S+0x94>)
 8007426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742a:	bf00      	nop
 800742c:	0800743d 	.word	0x0800743d
 8007430:	0800745f 	.word	0x0800745f
 8007434:	08007481 	.word	0x08007481
 8007438:	080074a3 	.word	0x080074a3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2280      	movs	r2, #128	@ 0x80
 8007440:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	085b      	lsrs	r3, r3, #1
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	085b      	lsrs	r3, r3, #1
 8007450:	011a      	lsls	r2, r3, #4
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2240      	movs	r2, #64	@ 0x40
 800745a:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 800745c:	e034      	b.n	80074c8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2280      	movs	r2, #128	@ 0x80
 8007462:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	085b      	lsrs	r3, r3, #1
 8007468:	019a      	lsls	r2, r3, #6
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	085b      	lsrs	r3, r3, #1
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2280      	movs	r2, #128	@ 0x80
 800747c:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 800747e:	e023      	b.n	80074c8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	22c0      	movs	r2, #192	@ 0xc0
 8007484:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	085b      	lsrs	r3, r3, #1
 800748a:	019a      	lsls	r2, r3, #6
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	085b      	lsrs	r3, r3, #1
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2280      	movs	r2, #128	@ 0x80
 800749e:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 80074a0:	e012      	b.n	80074c8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	22e0      	movs	r2, #224	@ 0xe0
 80074a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	085b      	lsrs	r3, r3, #1
 80074ac:	019a      	lsls	r2, r3, #6
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	085b      	lsrs	r3, r3, #1
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2280      	movs	r2, #128	@ 0x80
 80074c0:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 80074c2:	e001      	b.n	80074c8 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e00f      	b.n	80074e8 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d10b      	bne.n	80074e6 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d102      	bne.n	80074da <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2210      	movs	r2, #16
 80074d8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d102      	bne.n	80074e6 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2208      	movs	r2, #8
 80074e4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <SAI_InitPCM+0x2a>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	2b02      	cmp	r3, #2
 800751c:	d103      	bne.n	8007526 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2201      	movs	r2, #1
 8007522:	641a      	str	r2, [r3, #64]	@ 0x40
 8007524:	e002      	b.n	800752c <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	641a      	str	r2, [r3, #64]	@ 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007538:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007540:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007554:	665a      	str	r2, [r3, #100]	@ 0x64

  if (protocol == SAI_PCM_SHORT)
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2b04      	cmp	r3, #4
 800755a:	d103      	bne.n	8007564 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2201      	movs	r2, #1
 8007560:	649a      	str	r2, [r3, #72]	@ 0x48
 8007562:	e002      	b.n	800756a <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	220d      	movs	r2, #13
 8007568:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  switch (datasize)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b03      	cmp	r3, #3
 800756e:	d837      	bhi.n	80075e0 <SAI_InitPCM+0xec>
 8007570:	a201      	add	r2, pc, #4	@ (adr r2, 8007578 <SAI_InitPCM+0x84>)
 8007572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007576:	bf00      	nop
 8007578:	08007589 	.word	0x08007589
 800757c:	0800759f 	.word	0x0800759f
 8007580:	080075b5 	.word	0x080075b5
 8007584:	080075cb 	.word	0x080075cb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2280      	movs	r2, #128	@ 0x80
 800758c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	011a      	lsls	r2, r3, #4
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2240      	movs	r2, #64	@ 0x40
 800759a:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 800759c:	e022      	b.n	80075e4 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2280      	movs	r2, #128	@ 0x80
 80075a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2280      	movs	r2, #128	@ 0x80
 80075b0:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 80075b2:	e017      	b.n	80075e4 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	22c0      	movs	r2, #192	@ 0xc0
 80075b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2280      	movs	r2, #128	@ 0x80
 80075c6:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 80075c8:	e00c      	b.n	80075e4 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	22e0      	movs	r2, #224	@ 0xe0
 80075ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2280      	movs	r2, #128	@ 0x80
 80075dc:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 80075de:	e001      	b.n	80075e4 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e000      	b.n	80075e6 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop

080075f4 <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80075fe:	2301      	movs	r3, #1
 8007600:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d103      	bne.n	8007610 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f043 0308 	orr.w	r3, r3, #8
 800760e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007614:	2b08      	cmp	r3, #8
 8007616:	d10b      	bne.n	8007630 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800761c:	2b03      	cmp	r3, #3
 800761e:	d003      	beq.n	8007628 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d103      	bne.n	8007630 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f043 0310 	orr.w	r3, r3, #16
 800762e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	2b03      	cmp	r3, #3
 8007636:	d003      	beq.n	8007640 <SAI_InterruptFlag+0x4c>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	2b02      	cmp	r3, #2
 800763e:	d104      	bne.n	800764a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007646:	60fb      	str	r3, [r7, #12]
 8007648:	e003      	b.n	8007652 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f043 0304 	orr.w	r3, r3, #4
 8007650:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8007652:	68fb      	ldr	r3, [r7, #12]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007668:	4b17      	ldr	r3, [pc, #92]	@ (80076c8 <SAI_Disable+0x68>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a17      	ldr	r2, [pc, #92]	@ (80076cc <SAI_Disable+0x6c>)
 800766e:	fba2 2303 	umull	r2, r3, r2, r3
 8007672:	0b1b      	lsrs	r3, r3, #12
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800768a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	1e5a      	subs	r2, r3, #1
 8007690:	60fa      	str	r2, [r7, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10a      	bne.n	80076ac <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800769c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	72fb      	strb	r3, [r7, #11]
      break;
 80076aa:	e006      	b.n	80076ba <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e8      	bne.n	800768c <SAI_Disable+0x2c>

  return status;
 80076ba:	7afb      	ldrb	r3, [r7, #11]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	20000000 	.word	0x20000000
 80076cc:	95cbec1b 	.word	0x95cbec1b

080076d0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076dc:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076e6:	d01c      	beq.n	8007722 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80076f6:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0U;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007700:	2100      	movs	r1, #0
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f7ff ff76 	bl	80075f4 <SAI_InterruptFlag>
 8007708:	4603      	mov	r3, r0
 800770a:	43d9      	mvns	r1, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	691a      	ldr	r2, [r3, #16]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	400a      	ands	r2, r1
 8007718:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f7fa fa30 	bl	8001b88 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007728:	bf00      	nop
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f7fa fa32 	bl	8001ba8 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007744:	bf00      	nop
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007758:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007760:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800776e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007770:	2b01      	cmp	r3, #1
 8007772:	d004      	beq.n	800777e <SAI_DMAError+0x32>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800777a:	2b01      	cmp	r3, #1
 800777c:	d112      	bne.n	80077a4 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800778c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f7ff ff66 	bl	8007660 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f7ff fded 	bl	8007384 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80077aa:	bf00      	nop
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d00c      	beq.n	80077de <SAI_BlockSynchroConfig+0x2a>
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d80d      	bhi.n	80077e4 <SAI_BlockSynchroConfig+0x30>
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <SAI_BlockSynchroConfig+0x1e>
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d003      	beq.n	80077d8 <SAI_BlockSynchroConfig+0x24>
 80077d0:	e008      	b.n	80077e4 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60fb      	str	r3, [r7, #12]
      break;
 80077d6:	e008      	b.n	80077ea <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80077d8:	2310      	movs	r3, #16
 80077da:	60fb      	str	r3, [r7, #12]
      break;
 80077dc:	e005      	b.n	80077ea <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80077de:	2320      	movs	r3, #32
 80077e0:	60fb      	str	r3, [r7, #12]
      break;
 80077e2:	e002      	b.n	80077ea <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	60fb      	str	r3, [r7, #12]
      break;
 80077e8:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	d103      	bne.n	80077fa <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f043 0301 	orr.w	r3, r3, #1
 80077f8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a0b      	ldr	r2, [pc, #44]	@ (800782c <SAI_BlockSynchroConfig+0x78>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d004      	beq.n	800780e <SAI_BlockSynchroConfig+0x5a>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a09      	ldr	r2, [pc, #36]	@ (8007830 <SAI_BlockSynchroConfig+0x7c>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d103      	bne.n	8007816 <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 800780e:	4a09      	ldr	r2, [pc, #36]	@ (8007834 <SAI_BlockSynchroConfig+0x80>)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6013      	str	r3, [r2, #0]
 8007814:	e003      	b.n	800781e <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007816:	4a08      	ldr	r2, [pc, #32]	@ (8007838 <SAI_BlockSynchroConfig+0x84>)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	40015804 	.word	0x40015804
 8007830:	40015824 	.word	0x40015824
 8007834:	40015800 	.word	0x40015800
 8007838:	40015c00 	.word	0x40015c00

0800783c <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a0a      	ldr	r2, [pc, #40]	@ (8007878 <SAI_GetInputClock+0x3c>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d004      	beq.n	800785c <SAI_GetInputClock+0x20>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a09      	ldr	r2, [pc, #36]	@ (800787c <SAI_GetInputClock+0x40>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d104      	bne.n	8007866 <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800785c:	2004      	movs	r0, #4
 800785e:	f7fe fd15 	bl	800628c <HAL_RCCEx_GetPeriphCLKFreq>
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	e003      	b.n	800786e <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007866:	2008      	movs	r0, #8
 8007868:	f7fe fd10 	bl	800628c <HAL_RCCEx_GetPeriphCLKFreq>
 800786c:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 800786e:	68fb      	ldr	r3, [r7, #12]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	40015804 	.word	0x40015804
 800787c:	40015824 	.word	0x40015824

08007880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e041      	b.n	8007916 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d106      	bne.n	80078ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7fa fbe4 	bl	8002074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2202      	movs	r2, #2
 80078b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3304      	adds	r3, #4
 80078bc:	4619      	mov	r1, r3
 80078be:	4610      	mov	r0, r2
 80078c0:	f000 f9b6 	bl	8007c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b01      	cmp	r3, #1
 8007932:	d001      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e04e      	b.n	80079d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f042 0201 	orr.w	r2, r2, #1
 800794e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a23      	ldr	r2, [pc, #140]	@ (80079e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d022      	beq.n	80079a0 <HAL_TIM_Base_Start_IT+0x80>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007962:	d01d      	beq.n	80079a0 <HAL_TIM_Base_Start_IT+0x80>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a1f      	ldr	r2, [pc, #124]	@ (80079e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d018      	beq.n	80079a0 <HAL_TIM_Base_Start_IT+0x80>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a1e      	ldr	r2, [pc, #120]	@ (80079ec <HAL_TIM_Base_Start_IT+0xcc>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d013      	beq.n	80079a0 <HAL_TIM_Base_Start_IT+0x80>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a1c      	ldr	r2, [pc, #112]	@ (80079f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d00e      	beq.n	80079a0 <HAL_TIM_Base_Start_IT+0x80>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a1b      	ldr	r2, [pc, #108]	@ (80079f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d009      	beq.n	80079a0 <HAL_TIM_Base_Start_IT+0x80>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a19      	ldr	r2, [pc, #100]	@ (80079f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d004      	beq.n	80079a0 <HAL_TIM_Base_Start_IT+0x80>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a18      	ldr	r2, [pc, #96]	@ (80079fc <HAL_TIM_Base_Start_IT+0xdc>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d111      	bne.n	80079c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f003 0307 	and.w	r3, r3, #7
 80079aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2b06      	cmp	r3, #6
 80079b0:	d010      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f042 0201 	orr.w	r2, r2, #1
 80079c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079c2:	e007      	b.n	80079d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f042 0201 	orr.w	r2, r2, #1
 80079d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	40010000 	.word	0x40010000
 80079e8:	40000400 	.word	0x40000400
 80079ec:	40000800 	.word	0x40000800
 80079f0:	40000c00 	.word	0x40000c00
 80079f4:	40010400 	.word	0x40010400
 80079f8:	40014000 	.word	0x40014000
 80079fc:	40001800 	.word	0x40001800

08007a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d020      	beq.n	8007a64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f003 0302 	and.w	r3, r3, #2
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d01b      	beq.n	8007a64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f06f 0202 	mvn.w	r2, #2
 8007a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	f003 0303 	and.w	r3, r3, #3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d003      	beq.n	8007a52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f8d2 	bl	8007bf4 <HAL_TIM_IC_CaptureCallback>
 8007a50:	e005      	b.n	8007a5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f8c4 	bl	8007be0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f8d5 	bl	8007c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f003 0304 	and.w	r3, r3, #4
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d020      	beq.n	8007ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f003 0304 	and.w	r3, r3, #4
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d01b      	beq.n	8007ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f06f 0204 	mvn.w	r2, #4
 8007a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2202      	movs	r2, #2
 8007a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f8ac 	bl	8007bf4 <HAL_TIM_IC_CaptureCallback>
 8007a9c:	e005      	b.n	8007aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f89e 	bl	8007be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f8af 	bl	8007c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	f003 0308 	and.w	r3, r3, #8
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d020      	beq.n	8007afc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f003 0308 	and.w	r3, r3, #8
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d01b      	beq.n	8007afc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f06f 0208 	mvn.w	r2, #8
 8007acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2204      	movs	r2, #4
 8007ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	f003 0303 	and.w	r3, r3, #3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d003      	beq.n	8007aea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f886 	bl	8007bf4 <HAL_TIM_IC_CaptureCallback>
 8007ae8:	e005      	b.n	8007af6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f878 	bl	8007be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f889 	bl	8007c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	f003 0310 	and.w	r3, r3, #16
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d020      	beq.n	8007b48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f003 0310 	and.w	r3, r3, #16
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d01b      	beq.n	8007b48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f06f 0210 	mvn.w	r2, #16
 8007b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2208      	movs	r2, #8
 8007b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f860 	bl	8007bf4 <HAL_TIM_IC_CaptureCallback>
 8007b34:	e005      	b.n	8007b42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f852 	bl	8007be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f863 	bl	8007c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00c      	beq.n	8007b6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f003 0301 	and.w	r3, r3, #1
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d007      	beq.n	8007b6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f06f 0201 	mvn.w	r2, #1
 8007b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7f9 fff8 	bl	8001b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00c      	beq.n	8007b90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d007      	beq.n	8007b90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f982 	bl	8007e94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00c      	beq.n	8007bb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d007      	beq.n	8007bb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f834 	bl	8007c1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f003 0320 	and.w	r3, r3, #32
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00c      	beq.n	8007bd8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f003 0320 	and.w	r3, r3, #32
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d007      	beq.n	8007bd8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f06f 0220 	mvn.w	r2, #32
 8007bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f954 	bl	8007e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bd8:	bf00      	nop
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a46      	ldr	r2, [pc, #280]	@ (8007d5c <TIM_Base_SetConfig+0x12c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d013      	beq.n	8007c70 <TIM_Base_SetConfig+0x40>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c4e:	d00f      	beq.n	8007c70 <TIM_Base_SetConfig+0x40>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a43      	ldr	r2, [pc, #268]	@ (8007d60 <TIM_Base_SetConfig+0x130>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d00b      	beq.n	8007c70 <TIM_Base_SetConfig+0x40>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a42      	ldr	r2, [pc, #264]	@ (8007d64 <TIM_Base_SetConfig+0x134>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d007      	beq.n	8007c70 <TIM_Base_SetConfig+0x40>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a41      	ldr	r2, [pc, #260]	@ (8007d68 <TIM_Base_SetConfig+0x138>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d003      	beq.n	8007c70 <TIM_Base_SetConfig+0x40>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a40      	ldr	r2, [pc, #256]	@ (8007d6c <TIM_Base_SetConfig+0x13c>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d108      	bne.n	8007c82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a35      	ldr	r2, [pc, #212]	@ (8007d5c <TIM_Base_SetConfig+0x12c>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d02b      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c90:	d027      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a32      	ldr	r2, [pc, #200]	@ (8007d60 <TIM_Base_SetConfig+0x130>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d023      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a31      	ldr	r2, [pc, #196]	@ (8007d64 <TIM_Base_SetConfig+0x134>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d01f      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a30      	ldr	r2, [pc, #192]	@ (8007d68 <TIM_Base_SetConfig+0x138>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d01b      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a2f      	ldr	r2, [pc, #188]	@ (8007d6c <TIM_Base_SetConfig+0x13c>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d017      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a2e      	ldr	r2, [pc, #184]	@ (8007d70 <TIM_Base_SetConfig+0x140>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d013      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a2d      	ldr	r2, [pc, #180]	@ (8007d74 <TIM_Base_SetConfig+0x144>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d00f      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8007d78 <TIM_Base_SetConfig+0x148>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d00b      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8007d7c <TIM_Base_SetConfig+0x14c>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d007      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8007d80 <TIM_Base_SetConfig+0x150>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d003      	beq.n	8007ce2 <TIM_Base_SetConfig+0xb2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a29      	ldr	r2, [pc, #164]	@ (8007d84 <TIM_Base_SetConfig+0x154>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d108      	bne.n	8007cf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	689a      	ldr	r2, [r3, #8]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a10      	ldr	r2, [pc, #64]	@ (8007d5c <TIM_Base_SetConfig+0x12c>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d003      	beq.n	8007d28 <TIM_Base_SetConfig+0xf8>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a12      	ldr	r2, [pc, #72]	@ (8007d6c <TIM_Base_SetConfig+0x13c>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d103      	bne.n	8007d30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	691a      	ldr	r2, [r3, #16]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d105      	bne.n	8007d4e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	f023 0201 	bic.w	r2, r3, #1
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	611a      	str	r2, [r3, #16]
  }
}
 8007d4e:	bf00      	nop
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	40010000 	.word	0x40010000
 8007d60:	40000400 	.word	0x40000400
 8007d64:	40000800 	.word	0x40000800
 8007d68:	40000c00 	.word	0x40000c00
 8007d6c:	40010400 	.word	0x40010400
 8007d70:	40014000 	.word	0x40014000
 8007d74:	40014400 	.word	0x40014400
 8007d78:	40014800 	.word	0x40014800
 8007d7c:	40001800 	.word	0x40001800
 8007d80:	40001c00 	.word	0x40001c00
 8007d84:	40002000 	.word	0x40002000

08007d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d101      	bne.n	8007da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	e05a      	b.n	8007e56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2202      	movs	r2, #2
 8007dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a21      	ldr	r2, [pc, #132]	@ (8007e64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d022      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dec:	d01d      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a1d      	ldr	r2, [pc, #116]	@ (8007e68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d018      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8007e6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d013      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a1a      	ldr	r2, [pc, #104]	@ (8007e70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d00e      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a18      	ldr	r2, [pc, #96]	@ (8007e74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d009      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a17      	ldr	r2, [pc, #92]	@ (8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d004      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a15      	ldr	r2, [pc, #84]	@ (8007e7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d10c      	bne.n	8007e44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	40010000 	.word	0x40010000
 8007e68:	40000400 	.word	0x40000400
 8007e6c:	40000800 	.word	0x40000800
 8007e70:	40000c00 	.word	0x40000c00
 8007e74:	40010400 	.word	0x40010400
 8007e78:	40014000 	.word	0x40014000
 8007e7c:	40001800 	.word	0x40001800

08007e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <__cvt>:
 8007ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007eac:	ec57 6b10 	vmov	r6, r7, d0
 8007eb0:	2f00      	cmp	r7, #0
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	463b      	mov	r3, r7
 8007eb8:	bfbb      	ittet	lt
 8007eba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007ebe:	461f      	movlt	r7, r3
 8007ec0:	2300      	movge	r3, #0
 8007ec2:	232d      	movlt	r3, #45	@ 0x2d
 8007ec4:	700b      	strb	r3, [r1, #0]
 8007ec6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ec8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007ecc:	4691      	mov	r9, r2
 8007ece:	f023 0820 	bic.w	r8, r3, #32
 8007ed2:	bfbc      	itt	lt
 8007ed4:	4632      	movlt	r2, r6
 8007ed6:	4616      	movlt	r6, r2
 8007ed8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007edc:	d005      	beq.n	8007eea <__cvt+0x42>
 8007ede:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007ee2:	d100      	bne.n	8007ee6 <__cvt+0x3e>
 8007ee4:	3401      	adds	r4, #1
 8007ee6:	2102      	movs	r1, #2
 8007ee8:	e000      	b.n	8007eec <__cvt+0x44>
 8007eea:	2103      	movs	r1, #3
 8007eec:	ab03      	add	r3, sp, #12
 8007eee:	9301      	str	r3, [sp, #4]
 8007ef0:	ab02      	add	r3, sp, #8
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	ec47 6b10 	vmov	d0, r6, r7
 8007ef8:	4653      	mov	r3, sl
 8007efa:	4622      	mov	r2, r4
 8007efc:	f001 f9f8 	bl	80092f0 <_dtoa_r>
 8007f00:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007f04:	4605      	mov	r5, r0
 8007f06:	d119      	bne.n	8007f3c <__cvt+0x94>
 8007f08:	f019 0f01 	tst.w	r9, #1
 8007f0c:	d00e      	beq.n	8007f2c <__cvt+0x84>
 8007f0e:	eb00 0904 	add.w	r9, r0, r4
 8007f12:	2200      	movs	r2, #0
 8007f14:	2300      	movs	r3, #0
 8007f16:	4630      	mov	r0, r6
 8007f18:	4639      	mov	r1, r7
 8007f1a:	f7f8 fdf5 	bl	8000b08 <__aeabi_dcmpeq>
 8007f1e:	b108      	cbz	r0, 8007f24 <__cvt+0x7c>
 8007f20:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f24:	2230      	movs	r2, #48	@ 0x30
 8007f26:	9b03      	ldr	r3, [sp, #12]
 8007f28:	454b      	cmp	r3, r9
 8007f2a:	d31e      	bcc.n	8007f6a <__cvt+0xc2>
 8007f2c:	9b03      	ldr	r3, [sp, #12]
 8007f2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f30:	1b5b      	subs	r3, r3, r5
 8007f32:	4628      	mov	r0, r5
 8007f34:	6013      	str	r3, [r2, #0]
 8007f36:	b004      	add	sp, #16
 8007f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007f40:	eb00 0904 	add.w	r9, r0, r4
 8007f44:	d1e5      	bne.n	8007f12 <__cvt+0x6a>
 8007f46:	7803      	ldrb	r3, [r0, #0]
 8007f48:	2b30      	cmp	r3, #48	@ 0x30
 8007f4a:	d10a      	bne.n	8007f62 <__cvt+0xba>
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2300      	movs	r3, #0
 8007f50:	4630      	mov	r0, r6
 8007f52:	4639      	mov	r1, r7
 8007f54:	f7f8 fdd8 	bl	8000b08 <__aeabi_dcmpeq>
 8007f58:	b918      	cbnz	r0, 8007f62 <__cvt+0xba>
 8007f5a:	f1c4 0401 	rsb	r4, r4, #1
 8007f5e:	f8ca 4000 	str.w	r4, [sl]
 8007f62:	f8da 3000 	ldr.w	r3, [sl]
 8007f66:	4499      	add	r9, r3
 8007f68:	e7d3      	b.n	8007f12 <__cvt+0x6a>
 8007f6a:	1c59      	adds	r1, r3, #1
 8007f6c:	9103      	str	r1, [sp, #12]
 8007f6e:	701a      	strb	r2, [r3, #0]
 8007f70:	e7d9      	b.n	8007f26 <__cvt+0x7e>

08007f72 <__exponent>:
 8007f72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f74:	2900      	cmp	r1, #0
 8007f76:	bfba      	itte	lt
 8007f78:	4249      	neglt	r1, r1
 8007f7a:	232d      	movlt	r3, #45	@ 0x2d
 8007f7c:	232b      	movge	r3, #43	@ 0x2b
 8007f7e:	2909      	cmp	r1, #9
 8007f80:	7002      	strb	r2, [r0, #0]
 8007f82:	7043      	strb	r3, [r0, #1]
 8007f84:	dd29      	ble.n	8007fda <__exponent+0x68>
 8007f86:	f10d 0307 	add.w	r3, sp, #7
 8007f8a:	461d      	mov	r5, r3
 8007f8c:	270a      	movs	r7, #10
 8007f8e:	461a      	mov	r2, r3
 8007f90:	fbb1 f6f7 	udiv	r6, r1, r7
 8007f94:	fb07 1416 	mls	r4, r7, r6, r1
 8007f98:	3430      	adds	r4, #48	@ 0x30
 8007f9a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	2c63      	cmp	r4, #99	@ 0x63
 8007fa2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007fa6:	4631      	mov	r1, r6
 8007fa8:	dcf1      	bgt.n	8007f8e <__exponent+0x1c>
 8007faa:	3130      	adds	r1, #48	@ 0x30
 8007fac:	1e94      	subs	r4, r2, #2
 8007fae:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007fb2:	1c41      	adds	r1, r0, #1
 8007fb4:	4623      	mov	r3, r4
 8007fb6:	42ab      	cmp	r3, r5
 8007fb8:	d30a      	bcc.n	8007fd0 <__exponent+0x5e>
 8007fba:	f10d 0309 	add.w	r3, sp, #9
 8007fbe:	1a9b      	subs	r3, r3, r2
 8007fc0:	42ac      	cmp	r4, r5
 8007fc2:	bf88      	it	hi
 8007fc4:	2300      	movhi	r3, #0
 8007fc6:	3302      	adds	r3, #2
 8007fc8:	4403      	add	r3, r0
 8007fca:	1a18      	subs	r0, r3, r0
 8007fcc:	b003      	add	sp, #12
 8007fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fd0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007fd4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007fd8:	e7ed      	b.n	8007fb6 <__exponent+0x44>
 8007fda:	2330      	movs	r3, #48	@ 0x30
 8007fdc:	3130      	adds	r1, #48	@ 0x30
 8007fde:	7083      	strb	r3, [r0, #2]
 8007fe0:	70c1      	strb	r1, [r0, #3]
 8007fe2:	1d03      	adds	r3, r0, #4
 8007fe4:	e7f1      	b.n	8007fca <__exponent+0x58>
	...

08007fe8 <_printf_float>:
 8007fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fec:	b08d      	sub	sp, #52	@ 0x34
 8007fee:	460c      	mov	r4, r1
 8007ff0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007ff4:	4616      	mov	r6, r2
 8007ff6:	461f      	mov	r7, r3
 8007ff8:	4605      	mov	r5, r0
 8007ffa:	f001 f857 	bl	80090ac <_localeconv_r>
 8007ffe:	6803      	ldr	r3, [r0, #0]
 8008000:	9304      	str	r3, [sp, #16]
 8008002:	4618      	mov	r0, r3
 8008004:	f7f8 f954 	bl	80002b0 <strlen>
 8008008:	2300      	movs	r3, #0
 800800a:	930a      	str	r3, [sp, #40]	@ 0x28
 800800c:	f8d8 3000 	ldr.w	r3, [r8]
 8008010:	9005      	str	r0, [sp, #20]
 8008012:	3307      	adds	r3, #7
 8008014:	f023 0307 	bic.w	r3, r3, #7
 8008018:	f103 0208 	add.w	r2, r3, #8
 800801c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008020:	f8d4 b000 	ldr.w	fp, [r4]
 8008024:	f8c8 2000 	str.w	r2, [r8]
 8008028:	e9d3 8900 	ldrd	r8, r9, [r3]
 800802c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008030:	9307      	str	r3, [sp, #28]
 8008032:	f8cd 8018 	str.w	r8, [sp, #24]
 8008036:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800803a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800803e:	4b9c      	ldr	r3, [pc, #624]	@ (80082b0 <_printf_float+0x2c8>)
 8008040:	f04f 32ff 	mov.w	r2, #4294967295
 8008044:	f7f8 fd92 	bl	8000b6c <__aeabi_dcmpun>
 8008048:	bb70      	cbnz	r0, 80080a8 <_printf_float+0xc0>
 800804a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800804e:	4b98      	ldr	r3, [pc, #608]	@ (80082b0 <_printf_float+0x2c8>)
 8008050:	f04f 32ff 	mov.w	r2, #4294967295
 8008054:	f7f8 fd6c 	bl	8000b30 <__aeabi_dcmple>
 8008058:	bb30      	cbnz	r0, 80080a8 <_printf_float+0xc0>
 800805a:	2200      	movs	r2, #0
 800805c:	2300      	movs	r3, #0
 800805e:	4640      	mov	r0, r8
 8008060:	4649      	mov	r1, r9
 8008062:	f7f8 fd5b 	bl	8000b1c <__aeabi_dcmplt>
 8008066:	b110      	cbz	r0, 800806e <_printf_float+0x86>
 8008068:	232d      	movs	r3, #45	@ 0x2d
 800806a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800806e:	4a91      	ldr	r2, [pc, #580]	@ (80082b4 <_printf_float+0x2cc>)
 8008070:	4b91      	ldr	r3, [pc, #580]	@ (80082b8 <_printf_float+0x2d0>)
 8008072:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008076:	bf94      	ite	ls
 8008078:	4690      	movls	r8, r2
 800807a:	4698      	movhi	r8, r3
 800807c:	2303      	movs	r3, #3
 800807e:	6123      	str	r3, [r4, #16]
 8008080:	f02b 0304 	bic.w	r3, fp, #4
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	f04f 0900 	mov.w	r9, #0
 800808a:	9700      	str	r7, [sp, #0]
 800808c:	4633      	mov	r3, r6
 800808e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008090:	4621      	mov	r1, r4
 8008092:	4628      	mov	r0, r5
 8008094:	f000 f9d2 	bl	800843c <_printf_common>
 8008098:	3001      	adds	r0, #1
 800809a:	f040 808d 	bne.w	80081b8 <_printf_float+0x1d0>
 800809e:	f04f 30ff 	mov.w	r0, #4294967295
 80080a2:	b00d      	add	sp, #52	@ 0x34
 80080a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a8:	4642      	mov	r2, r8
 80080aa:	464b      	mov	r3, r9
 80080ac:	4640      	mov	r0, r8
 80080ae:	4649      	mov	r1, r9
 80080b0:	f7f8 fd5c 	bl	8000b6c <__aeabi_dcmpun>
 80080b4:	b140      	cbz	r0, 80080c8 <_printf_float+0xe0>
 80080b6:	464b      	mov	r3, r9
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	bfbc      	itt	lt
 80080bc:	232d      	movlt	r3, #45	@ 0x2d
 80080be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80080c2:	4a7e      	ldr	r2, [pc, #504]	@ (80082bc <_printf_float+0x2d4>)
 80080c4:	4b7e      	ldr	r3, [pc, #504]	@ (80082c0 <_printf_float+0x2d8>)
 80080c6:	e7d4      	b.n	8008072 <_printf_float+0x8a>
 80080c8:	6863      	ldr	r3, [r4, #4]
 80080ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80080ce:	9206      	str	r2, [sp, #24]
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	d13b      	bne.n	800814c <_printf_float+0x164>
 80080d4:	2306      	movs	r3, #6
 80080d6:	6063      	str	r3, [r4, #4]
 80080d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80080dc:	2300      	movs	r3, #0
 80080de:	6022      	str	r2, [r4, #0]
 80080e0:	9303      	str	r3, [sp, #12]
 80080e2:	ab0a      	add	r3, sp, #40	@ 0x28
 80080e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80080e8:	ab09      	add	r3, sp, #36	@ 0x24
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	6861      	ldr	r1, [r4, #4]
 80080ee:	ec49 8b10 	vmov	d0, r8, r9
 80080f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80080f6:	4628      	mov	r0, r5
 80080f8:	f7ff fed6 	bl	8007ea8 <__cvt>
 80080fc:	9b06      	ldr	r3, [sp, #24]
 80080fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008100:	2b47      	cmp	r3, #71	@ 0x47
 8008102:	4680      	mov	r8, r0
 8008104:	d129      	bne.n	800815a <_printf_float+0x172>
 8008106:	1cc8      	adds	r0, r1, #3
 8008108:	db02      	blt.n	8008110 <_printf_float+0x128>
 800810a:	6863      	ldr	r3, [r4, #4]
 800810c:	4299      	cmp	r1, r3
 800810e:	dd41      	ble.n	8008194 <_printf_float+0x1ac>
 8008110:	f1aa 0a02 	sub.w	sl, sl, #2
 8008114:	fa5f fa8a 	uxtb.w	sl, sl
 8008118:	3901      	subs	r1, #1
 800811a:	4652      	mov	r2, sl
 800811c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008120:	9109      	str	r1, [sp, #36]	@ 0x24
 8008122:	f7ff ff26 	bl	8007f72 <__exponent>
 8008126:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008128:	1813      	adds	r3, r2, r0
 800812a:	2a01      	cmp	r2, #1
 800812c:	4681      	mov	r9, r0
 800812e:	6123      	str	r3, [r4, #16]
 8008130:	dc02      	bgt.n	8008138 <_printf_float+0x150>
 8008132:	6822      	ldr	r2, [r4, #0]
 8008134:	07d2      	lsls	r2, r2, #31
 8008136:	d501      	bpl.n	800813c <_printf_float+0x154>
 8008138:	3301      	adds	r3, #1
 800813a:	6123      	str	r3, [r4, #16]
 800813c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008140:	2b00      	cmp	r3, #0
 8008142:	d0a2      	beq.n	800808a <_printf_float+0xa2>
 8008144:	232d      	movs	r3, #45	@ 0x2d
 8008146:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800814a:	e79e      	b.n	800808a <_printf_float+0xa2>
 800814c:	9a06      	ldr	r2, [sp, #24]
 800814e:	2a47      	cmp	r2, #71	@ 0x47
 8008150:	d1c2      	bne.n	80080d8 <_printf_float+0xf0>
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1c0      	bne.n	80080d8 <_printf_float+0xf0>
 8008156:	2301      	movs	r3, #1
 8008158:	e7bd      	b.n	80080d6 <_printf_float+0xee>
 800815a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800815e:	d9db      	bls.n	8008118 <_printf_float+0x130>
 8008160:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008164:	d118      	bne.n	8008198 <_printf_float+0x1b0>
 8008166:	2900      	cmp	r1, #0
 8008168:	6863      	ldr	r3, [r4, #4]
 800816a:	dd0b      	ble.n	8008184 <_printf_float+0x19c>
 800816c:	6121      	str	r1, [r4, #16]
 800816e:	b913      	cbnz	r3, 8008176 <_printf_float+0x18e>
 8008170:	6822      	ldr	r2, [r4, #0]
 8008172:	07d0      	lsls	r0, r2, #31
 8008174:	d502      	bpl.n	800817c <_printf_float+0x194>
 8008176:	3301      	adds	r3, #1
 8008178:	440b      	add	r3, r1
 800817a:	6123      	str	r3, [r4, #16]
 800817c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800817e:	f04f 0900 	mov.w	r9, #0
 8008182:	e7db      	b.n	800813c <_printf_float+0x154>
 8008184:	b913      	cbnz	r3, 800818c <_printf_float+0x1a4>
 8008186:	6822      	ldr	r2, [r4, #0]
 8008188:	07d2      	lsls	r2, r2, #31
 800818a:	d501      	bpl.n	8008190 <_printf_float+0x1a8>
 800818c:	3302      	adds	r3, #2
 800818e:	e7f4      	b.n	800817a <_printf_float+0x192>
 8008190:	2301      	movs	r3, #1
 8008192:	e7f2      	b.n	800817a <_printf_float+0x192>
 8008194:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800819a:	4299      	cmp	r1, r3
 800819c:	db05      	blt.n	80081aa <_printf_float+0x1c2>
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	6121      	str	r1, [r4, #16]
 80081a2:	07d8      	lsls	r0, r3, #31
 80081a4:	d5ea      	bpl.n	800817c <_printf_float+0x194>
 80081a6:	1c4b      	adds	r3, r1, #1
 80081a8:	e7e7      	b.n	800817a <_printf_float+0x192>
 80081aa:	2900      	cmp	r1, #0
 80081ac:	bfd4      	ite	le
 80081ae:	f1c1 0202 	rsble	r2, r1, #2
 80081b2:	2201      	movgt	r2, #1
 80081b4:	4413      	add	r3, r2
 80081b6:	e7e0      	b.n	800817a <_printf_float+0x192>
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	055a      	lsls	r2, r3, #21
 80081bc:	d407      	bmi.n	80081ce <_printf_float+0x1e6>
 80081be:	6923      	ldr	r3, [r4, #16]
 80081c0:	4642      	mov	r2, r8
 80081c2:	4631      	mov	r1, r6
 80081c4:	4628      	mov	r0, r5
 80081c6:	47b8      	blx	r7
 80081c8:	3001      	adds	r0, #1
 80081ca:	d12b      	bne.n	8008224 <_printf_float+0x23c>
 80081cc:	e767      	b.n	800809e <_printf_float+0xb6>
 80081ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80081d2:	f240 80dd 	bls.w	8008390 <_printf_float+0x3a8>
 80081d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80081da:	2200      	movs	r2, #0
 80081dc:	2300      	movs	r3, #0
 80081de:	f7f8 fc93 	bl	8000b08 <__aeabi_dcmpeq>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d033      	beq.n	800824e <_printf_float+0x266>
 80081e6:	4a37      	ldr	r2, [pc, #220]	@ (80082c4 <_printf_float+0x2dc>)
 80081e8:	2301      	movs	r3, #1
 80081ea:	4631      	mov	r1, r6
 80081ec:	4628      	mov	r0, r5
 80081ee:	47b8      	blx	r7
 80081f0:	3001      	adds	r0, #1
 80081f2:	f43f af54 	beq.w	800809e <_printf_float+0xb6>
 80081f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80081fa:	4543      	cmp	r3, r8
 80081fc:	db02      	blt.n	8008204 <_printf_float+0x21c>
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	07d8      	lsls	r0, r3, #31
 8008202:	d50f      	bpl.n	8008224 <_printf_float+0x23c>
 8008204:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008208:	4631      	mov	r1, r6
 800820a:	4628      	mov	r0, r5
 800820c:	47b8      	blx	r7
 800820e:	3001      	adds	r0, #1
 8008210:	f43f af45 	beq.w	800809e <_printf_float+0xb6>
 8008214:	f04f 0900 	mov.w	r9, #0
 8008218:	f108 38ff 	add.w	r8, r8, #4294967295
 800821c:	f104 0a1a 	add.w	sl, r4, #26
 8008220:	45c8      	cmp	r8, r9
 8008222:	dc09      	bgt.n	8008238 <_printf_float+0x250>
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	079b      	lsls	r3, r3, #30
 8008228:	f100 8103 	bmi.w	8008432 <_printf_float+0x44a>
 800822c:	68e0      	ldr	r0, [r4, #12]
 800822e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008230:	4298      	cmp	r0, r3
 8008232:	bfb8      	it	lt
 8008234:	4618      	movlt	r0, r3
 8008236:	e734      	b.n	80080a2 <_printf_float+0xba>
 8008238:	2301      	movs	r3, #1
 800823a:	4652      	mov	r2, sl
 800823c:	4631      	mov	r1, r6
 800823e:	4628      	mov	r0, r5
 8008240:	47b8      	blx	r7
 8008242:	3001      	adds	r0, #1
 8008244:	f43f af2b 	beq.w	800809e <_printf_float+0xb6>
 8008248:	f109 0901 	add.w	r9, r9, #1
 800824c:	e7e8      	b.n	8008220 <_printf_float+0x238>
 800824e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008250:	2b00      	cmp	r3, #0
 8008252:	dc39      	bgt.n	80082c8 <_printf_float+0x2e0>
 8008254:	4a1b      	ldr	r2, [pc, #108]	@ (80082c4 <_printf_float+0x2dc>)
 8008256:	2301      	movs	r3, #1
 8008258:	4631      	mov	r1, r6
 800825a:	4628      	mov	r0, r5
 800825c:	47b8      	blx	r7
 800825e:	3001      	adds	r0, #1
 8008260:	f43f af1d 	beq.w	800809e <_printf_float+0xb6>
 8008264:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008268:	ea59 0303 	orrs.w	r3, r9, r3
 800826c:	d102      	bne.n	8008274 <_printf_float+0x28c>
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	07d9      	lsls	r1, r3, #31
 8008272:	d5d7      	bpl.n	8008224 <_printf_float+0x23c>
 8008274:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008278:	4631      	mov	r1, r6
 800827a:	4628      	mov	r0, r5
 800827c:	47b8      	blx	r7
 800827e:	3001      	adds	r0, #1
 8008280:	f43f af0d 	beq.w	800809e <_printf_float+0xb6>
 8008284:	f04f 0a00 	mov.w	sl, #0
 8008288:	f104 0b1a 	add.w	fp, r4, #26
 800828c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800828e:	425b      	negs	r3, r3
 8008290:	4553      	cmp	r3, sl
 8008292:	dc01      	bgt.n	8008298 <_printf_float+0x2b0>
 8008294:	464b      	mov	r3, r9
 8008296:	e793      	b.n	80081c0 <_printf_float+0x1d8>
 8008298:	2301      	movs	r3, #1
 800829a:	465a      	mov	r2, fp
 800829c:	4631      	mov	r1, r6
 800829e:	4628      	mov	r0, r5
 80082a0:	47b8      	blx	r7
 80082a2:	3001      	adds	r0, #1
 80082a4:	f43f aefb 	beq.w	800809e <_printf_float+0xb6>
 80082a8:	f10a 0a01 	add.w	sl, sl, #1
 80082ac:	e7ee      	b.n	800828c <_printf_float+0x2a4>
 80082ae:	bf00      	nop
 80082b0:	7fefffff 	.word	0x7fefffff
 80082b4:	08020c40 	.word	0x08020c40
 80082b8:	08020c44 	.word	0x08020c44
 80082bc:	08020c48 	.word	0x08020c48
 80082c0:	08020c4c 	.word	0x08020c4c
 80082c4:	08020c50 	.word	0x08020c50
 80082c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80082ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80082ce:	4553      	cmp	r3, sl
 80082d0:	bfa8      	it	ge
 80082d2:	4653      	movge	r3, sl
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	4699      	mov	r9, r3
 80082d8:	dc36      	bgt.n	8008348 <_printf_float+0x360>
 80082da:	f04f 0b00 	mov.w	fp, #0
 80082de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082e2:	f104 021a 	add.w	r2, r4, #26
 80082e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80082e8:	9306      	str	r3, [sp, #24]
 80082ea:	eba3 0309 	sub.w	r3, r3, r9
 80082ee:	455b      	cmp	r3, fp
 80082f0:	dc31      	bgt.n	8008356 <_printf_float+0x36e>
 80082f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082f4:	459a      	cmp	sl, r3
 80082f6:	dc3a      	bgt.n	800836e <_printf_float+0x386>
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	07da      	lsls	r2, r3, #31
 80082fc:	d437      	bmi.n	800836e <_printf_float+0x386>
 80082fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008300:	ebaa 0903 	sub.w	r9, sl, r3
 8008304:	9b06      	ldr	r3, [sp, #24]
 8008306:	ebaa 0303 	sub.w	r3, sl, r3
 800830a:	4599      	cmp	r9, r3
 800830c:	bfa8      	it	ge
 800830e:	4699      	movge	r9, r3
 8008310:	f1b9 0f00 	cmp.w	r9, #0
 8008314:	dc33      	bgt.n	800837e <_printf_float+0x396>
 8008316:	f04f 0800 	mov.w	r8, #0
 800831a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800831e:	f104 0b1a 	add.w	fp, r4, #26
 8008322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008324:	ebaa 0303 	sub.w	r3, sl, r3
 8008328:	eba3 0309 	sub.w	r3, r3, r9
 800832c:	4543      	cmp	r3, r8
 800832e:	f77f af79 	ble.w	8008224 <_printf_float+0x23c>
 8008332:	2301      	movs	r3, #1
 8008334:	465a      	mov	r2, fp
 8008336:	4631      	mov	r1, r6
 8008338:	4628      	mov	r0, r5
 800833a:	47b8      	blx	r7
 800833c:	3001      	adds	r0, #1
 800833e:	f43f aeae 	beq.w	800809e <_printf_float+0xb6>
 8008342:	f108 0801 	add.w	r8, r8, #1
 8008346:	e7ec      	b.n	8008322 <_printf_float+0x33a>
 8008348:	4642      	mov	r2, r8
 800834a:	4631      	mov	r1, r6
 800834c:	4628      	mov	r0, r5
 800834e:	47b8      	blx	r7
 8008350:	3001      	adds	r0, #1
 8008352:	d1c2      	bne.n	80082da <_printf_float+0x2f2>
 8008354:	e6a3      	b.n	800809e <_printf_float+0xb6>
 8008356:	2301      	movs	r3, #1
 8008358:	4631      	mov	r1, r6
 800835a:	4628      	mov	r0, r5
 800835c:	9206      	str	r2, [sp, #24]
 800835e:	47b8      	blx	r7
 8008360:	3001      	adds	r0, #1
 8008362:	f43f ae9c 	beq.w	800809e <_printf_float+0xb6>
 8008366:	9a06      	ldr	r2, [sp, #24]
 8008368:	f10b 0b01 	add.w	fp, fp, #1
 800836c:	e7bb      	b.n	80082e6 <_printf_float+0x2fe>
 800836e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008372:	4631      	mov	r1, r6
 8008374:	4628      	mov	r0, r5
 8008376:	47b8      	blx	r7
 8008378:	3001      	adds	r0, #1
 800837a:	d1c0      	bne.n	80082fe <_printf_float+0x316>
 800837c:	e68f      	b.n	800809e <_printf_float+0xb6>
 800837e:	9a06      	ldr	r2, [sp, #24]
 8008380:	464b      	mov	r3, r9
 8008382:	4442      	add	r2, r8
 8008384:	4631      	mov	r1, r6
 8008386:	4628      	mov	r0, r5
 8008388:	47b8      	blx	r7
 800838a:	3001      	adds	r0, #1
 800838c:	d1c3      	bne.n	8008316 <_printf_float+0x32e>
 800838e:	e686      	b.n	800809e <_printf_float+0xb6>
 8008390:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008394:	f1ba 0f01 	cmp.w	sl, #1
 8008398:	dc01      	bgt.n	800839e <_printf_float+0x3b6>
 800839a:	07db      	lsls	r3, r3, #31
 800839c:	d536      	bpl.n	800840c <_printf_float+0x424>
 800839e:	2301      	movs	r3, #1
 80083a0:	4642      	mov	r2, r8
 80083a2:	4631      	mov	r1, r6
 80083a4:	4628      	mov	r0, r5
 80083a6:	47b8      	blx	r7
 80083a8:	3001      	adds	r0, #1
 80083aa:	f43f ae78 	beq.w	800809e <_printf_float+0xb6>
 80083ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083b2:	4631      	mov	r1, r6
 80083b4:	4628      	mov	r0, r5
 80083b6:	47b8      	blx	r7
 80083b8:	3001      	adds	r0, #1
 80083ba:	f43f ae70 	beq.w	800809e <_printf_float+0xb6>
 80083be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80083c2:	2200      	movs	r2, #0
 80083c4:	2300      	movs	r3, #0
 80083c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083ca:	f7f8 fb9d 	bl	8000b08 <__aeabi_dcmpeq>
 80083ce:	b9c0      	cbnz	r0, 8008402 <_printf_float+0x41a>
 80083d0:	4653      	mov	r3, sl
 80083d2:	f108 0201 	add.w	r2, r8, #1
 80083d6:	4631      	mov	r1, r6
 80083d8:	4628      	mov	r0, r5
 80083da:	47b8      	blx	r7
 80083dc:	3001      	adds	r0, #1
 80083de:	d10c      	bne.n	80083fa <_printf_float+0x412>
 80083e0:	e65d      	b.n	800809e <_printf_float+0xb6>
 80083e2:	2301      	movs	r3, #1
 80083e4:	465a      	mov	r2, fp
 80083e6:	4631      	mov	r1, r6
 80083e8:	4628      	mov	r0, r5
 80083ea:	47b8      	blx	r7
 80083ec:	3001      	adds	r0, #1
 80083ee:	f43f ae56 	beq.w	800809e <_printf_float+0xb6>
 80083f2:	f108 0801 	add.w	r8, r8, #1
 80083f6:	45d0      	cmp	r8, sl
 80083f8:	dbf3      	blt.n	80083e2 <_printf_float+0x3fa>
 80083fa:	464b      	mov	r3, r9
 80083fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008400:	e6df      	b.n	80081c2 <_printf_float+0x1da>
 8008402:	f04f 0800 	mov.w	r8, #0
 8008406:	f104 0b1a 	add.w	fp, r4, #26
 800840a:	e7f4      	b.n	80083f6 <_printf_float+0x40e>
 800840c:	2301      	movs	r3, #1
 800840e:	4642      	mov	r2, r8
 8008410:	e7e1      	b.n	80083d6 <_printf_float+0x3ee>
 8008412:	2301      	movs	r3, #1
 8008414:	464a      	mov	r2, r9
 8008416:	4631      	mov	r1, r6
 8008418:	4628      	mov	r0, r5
 800841a:	47b8      	blx	r7
 800841c:	3001      	adds	r0, #1
 800841e:	f43f ae3e 	beq.w	800809e <_printf_float+0xb6>
 8008422:	f108 0801 	add.w	r8, r8, #1
 8008426:	68e3      	ldr	r3, [r4, #12]
 8008428:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800842a:	1a5b      	subs	r3, r3, r1
 800842c:	4543      	cmp	r3, r8
 800842e:	dcf0      	bgt.n	8008412 <_printf_float+0x42a>
 8008430:	e6fc      	b.n	800822c <_printf_float+0x244>
 8008432:	f04f 0800 	mov.w	r8, #0
 8008436:	f104 0919 	add.w	r9, r4, #25
 800843a:	e7f4      	b.n	8008426 <_printf_float+0x43e>

0800843c <_printf_common>:
 800843c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008440:	4616      	mov	r6, r2
 8008442:	4698      	mov	r8, r3
 8008444:	688a      	ldr	r2, [r1, #8]
 8008446:	690b      	ldr	r3, [r1, #16]
 8008448:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800844c:	4293      	cmp	r3, r2
 800844e:	bfb8      	it	lt
 8008450:	4613      	movlt	r3, r2
 8008452:	6033      	str	r3, [r6, #0]
 8008454:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008458:	4607      	mov	r7, r0
 800845a:	460c      	mov	r4, r1
 800845c:	b10a      	cbz	r2, 8008462 <_printf_common+0x26>
 800845e:	3301      	adds	r3, #1
 8008460:	6033      	str	r3, [r6, #0]
 8008462:	6823      	ldr	r3, [r4, #0]
 8008464:	0699      	lsls	r1, r3, #26
 8008466:	bf42      	ittt	mi
 8008468:	6833      	ldrmi	r3, [r6, #0]
 800846a:	3302      	addmi	r3, #2
 800846c:	6033      	strmi	r3, [r6, #0]
 800846e:	6825      	ldr	r5, [r4, #0]
 8008470:	f015 0506 	ands.w	r5, r5, #6
 8008474:	d106      	bne.n	8008484 <_printf_common+0x48>
 8008476:	f104 0a19 	add.w	sl, r4, #25
 800847a:	68e3      	ldr	r3, [r4, #12]
 800847c:	6832      	ldr	r2, [r6, #0]
 800847e:	1a9b      	subs	r3, r3, r2
 8008480:	42ab      	cmp	r3, r5
 8008482:	dc26      	bgt.n	80084d2 <_printf_common+0x96>
 8008484:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008488:	6822      	ldr	r2, [r4, #0]
 800848a:	3b00      	subs	r3, #0
 800848c:	bf18      	it	ne
 800848e:	2301      	movne	r3, #1
 8008490:	0692      	lsls	r2, r2, #26
 8008492:	d42b      	bmi.n	80084ec <_printf_common+0xb0>
 8008494:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008498:	4641      	mov	r1, r8
 800849a:	4638      	mov	r0, r7
 800849c:	47c8      	blx	r9
 800849e:	3001      	adds	r0, #1
 80084a0:	d01e      	beq.n	80084e0 <_printf_common+0xa4>
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	6922      	ldr	r2, [r4, #16]
 80084a6:	f003 0306 	and.w	r3, r3, #6
 80084aa:	2b04      	cmp	r3, #4
 80084ac:	bf02      	ittt	eq
 80084ae:	68e5      	ldreq	r5, [r4, #12]
 80084b0:	6833      	ldreq	r3, [r6, #0]
 80084b2:	1aed      	subeq	r5, r5, r3
 80084b4:	68a3      	ldr	r3, [r4, #8]
 80084b6:	bf0c      	ite	eq
 80084b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084bc:	2500      	movne	r5, #0
 80084be:	4293      	cmp	r3, r2
 80084c0:	bfc4      	itt	gt
 80084c2:	1a9b      	subgt	r3, r3, r2
 80084c4:	18ed      	addgt	r5, r5, r3
 80084c6:	2600      	movs	r6, #0
 80084c8:	341a      	adds	r4, #26
 80084ca:	42b5      	cmp	r5, r6
 80084cc:	d11a      	bne.n	8008504 <_printf_common+0xc8>
 80084ce:	2000      	movs	r0, #0
 80084d0:	e008      	b.n	80084e4 <_printf_common+0xa8>
 80084d2:	2301      	movs	r3, #1
 80084d4:	4652      	mov	r2, sl
 80084d6:	4641      	mov	r1, r8
 80084d8:	4638      	mov	r0, r7
 80084da:	47c8      	blx	r9
 80084dc:	3001      	adds	r0, #1
 80084de:	d103      	bne.n	80084e8 <_printf_common+0xac>
 80084e0:	f04f 30ff 	mov.w	r0, #4294967295
 80084e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e8:	3501      	adds	r5, #1
 80084ea:	e7c6      	b.n	800847a <_printf_common+0x3e>
 80084ec:	18e1      	adds	r1, r4, r3
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	2030      	movs	r0, #48	@ 0x30
 80084f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084f6:	4422      	add	r2, r4
 80084f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008500:	3302      	adds	r3, #2
 8008502:	e7c7      	b.n	8008494 <_printf_common+0x58>
 8008504:	2301      	movs	r3, #1
 8008506:	4622      	mov	r2, r4
 8008508:	4641      	mov	r1, r8
 800850a:	4638      	mov	r0, r7
 800850c:	47c8      	blx	r9
 800850e:	3001      	adds	r0, #1
 8008510:	d0e6      	beq.n	80084e0 <_printf_common+0xa4>
 8008512:	3601      	adds	r6, #1
 8008514:	e7d9      	b.n	80084ca <_printf_common+0x8e>
	...

08008518 <_printf_i>:
 8008518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800851c:	7e0f      	ldrb	r7, [r1, #24]
 800851e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008520:	2f78      	cmp	r7, #120	@ 0x78
 8008522:	4691      	mov	r9, r2
 8008524:	4680      	mov	r8, r0
 8008526:	460c      	mov	r4, r1
 8008528:	469a      	mov	sl, r3
 800852a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800852e:	d807      	bhi.n	8008540 <_printf_i+0x28>
 8008530:	2f62      	cmp	r7, #98	@ 0x62
 8008532:	d80a      	bhi.n	800854a <_printf_i+0x32>
 8008534:	2f00      	cmp	r7, #0
 8008536:	f000 80d2 	beq.w	80086de <_printf_i+0x1c6>
 800853a:	2f58      	cmp	r7, #88	@ 0x58
 800853c:	f000 80b9 	beq.w	80086b2 <_printf_i+0x19a>
 8008540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008544:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008548:	e03a      	b.n	80085c0 <_printf_i+0xa8>
 800854a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800854e:	2b15      	cmp	r3, #21
 8008550:	d8f6      	bhi.n	8008540 <_printf_i+0x28>
 8008552:	a101      	add	r1, pc, #4	@ (adr r1, 8008558 <_printf_i+0x40>)
 8008554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008558:	080085b1 	.word	0x080085b1
 800855c:	080085c5 	.word	0x080085c5
 8008560:	08008541 	.word	0x08008541
 8008564:	08008541 	.word	0x08008541
 8008568:	08008541 	.word	0x08008541
 800856c:	08008541 	.word	0x08008541
 8008570:	080085c5 	.word	0x080085c5
 8008574:	08008541 	.word	0x08008541
 8008578:	08008541 	.word	0x08008541
 800857c:	08008541 	.word	0x08008541
 8008580:	08008541 	.word	0x08008541
 8008584:	080086c5 	.word	0x080086c5
 8008588:	080085ef 	.word	0x080085ef
 800858c:	0800867f 	.word	0x0800867f
 8008590:	08008541 	.word	0x08008541
 8008594:	08008541 	.word	0x08008541
 8008598:	080086e7 	.word	0x080086e7
 800859c:	08008541 	.word	0x08008541
 80085a0:	080085ef 	.word	0x080085ef
 80085a4:	08008541 	.word	0x08008541
 80085a8:	08008541 	.word	0x08008541
 80085ac:	08008687 	.word	0x08008687
 80085b0:	6833      	ldr	r3, [r6, #0]
 80085b2:	1d1a      	adds	r2, r3, #4
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6032      	str	r2, [r6, #0]
 80085b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80085c0:	2301      	movs	r3, #1
 80085c2:	e09d      	b.n	8008700 <_printf_i+0x1e8>
 80085c4:	6833      	ldr	r3, [r6, #0]
 80085c6:	6820      	ldr	r0, [r4, #0]
 80085c8:	1d19      	adds	r1, r3, #4
 80085ca:	6031      	str	r1, [r6, #0]
 80085cc:	0606      	lsls	r6, r0, #24
 80085ce:	d501      	bpl.n	80085d4 <_printf_i+0xbc>
 80085d0:	681d      	ldr	r5, [r3, #0]
 80085d2:	e003      	b.n	80085dc <_printf_i+0xc4>
 80085d4:	0645      	lsls	r5, r0, #25
 80085d6:	d5fb      	bpl.n	80085d0 <_printf_i+0xb8>
 80085d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80085dc:	2d00      	cmp	r5, #0
 80085de:	da03      	bge.n	80085e8 <_printf_i+0xd0>
 80085e0:	232d      	movs	r3, #45	@ 0x2d
 80085e2:	426d      	negs	r5, r5
 80085e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085e8:	4859      	ldr	r0, [pc, #356]	@ (8008750 <_printf_i+0x238>)
 80085ea:	230a      	movs	r3, #10
 80085ec:	e011      	b.n	8008612 <_printf_i+0xfa>
 80085ee:	6821      	ldr	r1, [r4, #0]
 80085f0:	6833      	ldr	r3, [r6, #0]
 80085f2:	0608      	lsls	r0, r1, #24
 80085f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80085f8:	d402      	bmi.n	8008600 <_printf_i+0xe8>
 80085fa:	0649      	lsls	r1, r1, #25
 80085fc:	bf48      	it	mi
 80085fe:	b2ad      	uxthmi	r5, r5
 8008600:	2f6f      	cmp	r7, #111	@ 0x6f
 8008602:	4853      	ldr	r0, [pc, #332]	@ (8008750 <_printf_i+0x238>)
 8008604:	6033      	str	r3, [r6, #0]
 8008606:	bf14      	ite	ne
 8008608:	230a      	movne	r3, #10
 800860a:	2308      	moveq	r3, #8
 800860c:	2100      	movs	r1, #0
 800860e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008612:	6866      	ldr	r6, [r4, #4]
 8008614:	60a6      	str	r6, [r4, #8]
 8008616:	2e00      	cmp	r6, #0
 8008618:	bfa2      	ittt	ge
 800861a:	6821      	ldrge	r1, [r4, #0]
 800861c:	f021 0104 	bicge.w	r1, r1, #4
 8008620:	6021      	strge	r1, [r4, #0]
 8008622:	b90d      	cbnz	r5, 8008628 <_printf_i+0x110>
 8008624:	2e00      	cmp	r6, #0
 8008626:	d04b      	beq.n	80086c0 <_printf_i+0x1a8>
 8008628:	4616      	mov	r6, r2
 800862a:	fbb5 f1f3 	udiv	r1, r5, r3
 800862e:	fb03 5711 	mls	r7, r3, r1, r5
 8008632:	5dc7      	ldrb	r7, [r0, r7]
 8008634:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008638:	462f      	mov	r7, r5
 800863a:	42bb      	cmp	r3, r7
 800863c:	460d      	mov	r5, r1
 800863e:	d9f4      	bls.n	800862a <_printf_i+0x112>
 8008640:	2b08      	cmp	r3, #8
 8008642:	d10b      	bne.n	800865c <_printf_i+0x144>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	07df      	lsls	r7, r3, #31
 8008648:	d508      	bpl.n	800865c <_printf_i+0x144>
 800864a:	6923      	ldr	r3, [r4, #16]
 800864c:	6861      	ldr	r1, [r4, #4]
 800864e:	4299      	cmp	r1, r3
 8008650:	bfde      	ittt	le
 8008652:	2330      	movle	r3, #48	@ 0x30
 8008654:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008658:	f106 36ff 	addle.w	r6, r6, #4294967295
 800865c:	1b92      	subs	r2, r2, r6
 800865e:	6122      	str	r2, [r4, #16]
 8008660:	f8cd a000 	str.w	sl, [sp]
 8008664:	464b      	mov	r3, r9
 8008666:	aa03      	add	r2, sp, #12
 8008668:	4621      	mov	r1, r4
 800866a:	4640      	mov	r0, r8
 800866c:	f7ff fee6 	bl	800843c <_printf_common>
 8008670:	3001      	adds	r0, #1
 8008672:	d14a      	bne.n	800870a <_printf_i+0x1f2>
 8008674:	f04f 30ff 	mov.w	r0, #4294967295
 8008678:	b004      	add	sp, #16
 800867a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	f043 0320 	orr.w	r3, r3, #32
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	4833      	ldr	r0, [pc, #204]	@ (8008754 <_printf_i+0x23c>)
 8008688:	2778      	movs	r7, #120	@ 0x78
 800868a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	6831      	ldr	r1, [r6, #0]
 8008692:	061f      	lsls	r7, r3, #24
 8008694:	f851 5b04 	ldr.w	r5, [r1], #4
 8008698:	d402      	bmi.n	80086a0 <_printf_i+0x188>
 800869a:	065f      	lsls	r7, r3, #25
 800869c:	bf48      	it	mi
 800869e:	b2ad      	uxthmi	r5, r5
 80086a0:	6031      	str	r1, [r6, #0]
 80086a2:	07d9      	lsls	r1, r3, #31
 80086a4:	bf44      	itt	mi
 80086a6:	f043 0320 	orrmi.w	r3, r3, #32
 80086aa:	6023      	strmi	r3, [r4, #0]
 80086ac:	b11d      	cbz	r5, 80086b6 <_printf_i+0x19e>
 80086ae:	2310      	movs	r3, #16
 80086b0:	e7ac      	b.n	800860c <_printf_i+0xf4>
 80086b2:	4827      	ldr	r0, [pc, #156]	@ (8008750 <_printf_i+0x238>)
 80086b4:	e7e9      	b.n	800868a <_printf_i+0x172>
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	f023 0320 	bic.w	r3, r3, #32
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	e7f6      	b.n	80086ae <_printf_i+0x196>
 80086c0:	4616      	mov	r6, r2
 80086c2:	e7bd      	b.n	8008640 <_printf_i+0x128>
 80086c4:	6833      	ldr	r3, [r6, #0]
 80086c6:	6825      	ldr	r5, [r4, #0]
 80086c8:	6961      	ldr	r1, [r4, #20]
 80086ca:	1d18      	adds	r0, r3, #4
 80086cc:	6030      	str	r0, [r6, #0]
 80086ce:	062e      	lsls	r6, r5, #24
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	d501      	bpl.n	80086d8 <_printf_i+0x1c0>
 80086d4:	6019      	str	r1, [r3, #0]
 80086d6:	e002      	b.n	80086de <_printf_i+0x1c6>
 80086d8:	0668      	lsls	r0, r5, #25
 80086da:	d5fb      	bpl.n	80086d4 <_printf_i+0x1bc>
 80086dc:	8019      	strh	r1, [r3, #0]
 80086de:	2300      	movs	r3, #0
 80086e0:	6123      	str	r3, [r4, #16]
 80086e2:	4616      	mov	r6, r2
 80086e4:	e7bc      	b.n	8008660 <_printf_i+0x148>
 80086e6:	6833      	ldr	r3, [r6, #0]
 80086e8:	1d1a      	adds	r2, r3, #4
 80086ea:	6032      	str	r2, [r6, #0]
 80086ec:	681e      	ldr	r6, [r3, #0]
 80086ee:	6862      	ldr	r2, [r4, #4]
 80086f0:	2100      	movs	r1, #0
 80086f2:	4630      	mov	r0, r6
 80086f4:	f7f7 fd8c 	bl	8000210 <memchr>
 80086f8:	b108      	cbz	r0, 80086fe <_printf_i+0x1e6>
 80086fa:	1b80      	subs	r0, r0, r6
 80086fc:	6060      	str	r0, [r4, #4]
 80086fe:	6863      	ldr	r3, [r4, #4]
 8008700:	6123      	str	r3, [r4, #16]
 8008702:	2300      	movs	r3, #0
 8008704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008708:	e7aa      	b.n	8008660 <_printf_i+0x148>
 800870a:	6923      	ldr	r3, [r4, #16]
 800870c:	4632      	mov	r2, r6
 800870e:	4649      	mov	r1, r9
 8008710:	4640      	mov	r0, r8
 8008712:	47d0      	blx	sl
 8008714:	3001      	adds	r0, #1
 8008716:	d0ad      	beq.n	8008674 <_printf_i+0x15c>
 8008718:	6823      	ldr	r3, [r4, #0]
 800871a:	079b      	lsls	r3, r3, #30
 800871c:	d413      	bmi.n	8008746 <_printf_i+0x22e>
 800871e:	68e0      	ldr	r0, [r4, #12]
 8008720:	9b03      	ldr	r3, [sp, #12]
 8008722:	4298      	cmp	r0, r3
 8008724:	bfb8      	it	lt
 8008726:	4618      	movlt	r0, r3
 8008728:	e7a6      	b.n	8008678 <_printf_i+0x160>
 800872a:	2301      	movs	r3, #1
 800872c:	4632      	mov	r2, r6
 800872e:	4649      	mov	r1, r9
 8008730:	4640      	mov	r0, r8
 8008732:	47d0      	blx	sl
 8008734:	3001      	adds	r0, #1
 8008736:	d09d      	beq.n	8008674 <_printf_i+0x15c>
 8008738:	3501      	adds	r5, #1
 800873a:	68e3      	ldr	r3, [r4, #12]
 800873c:	9903      	ldr	r1, [sp, #12]
 800873e:	1a5b      	subs	r3, r3, r1
 8008740:	42ab      	cmp	r3, r5
 8008742:	dcf2      	bgt.n	800872a <_printf_i+0x212>
 8008744:	e7eb      	b.n	800871e <_printf_i+0x206>
 8008746:	2500      	movs	r5, #0
 8008748:	f104 0619 	add.w	r6, r4, #25
 800874c:	e7f5      	b.n	800873a <_printf_i+0x222>
 800874e:	bf00      	nop
 8008750:	08020c52 	.word	0x08020c52
 8008754:	08020c63 	.word	0x08020c63

08008758 <_fclose_r>:
 8008758:	b570      	push	{r4, r5, r6, lr}
 800875a:	4605      	mov	r5, r0
 800875c:	460c      	mov	r4, r1
 800875e:	b1b1      	cbz	r1, 800878e <_fclose_r+0x36>
 8008760:	b118      	cbz	r0, 800876a <_fclose_r+0x12>
 8008762:	6a03      	ldr	r3, [r0, #32]
 8008764:	b90b      	cbnz	r3, 800876a <_fclose_r+0x12>
 8008766:	f000 f9df 	bl	8008b28 <__sinit>
 800876a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800876c:	07de      	lsls	r6, r3, #31
 800876e:	d405      	bmi.n	800877c <_fclose_r+0x24>
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	0598      	lsls	r0, r3, #22
 8008774:	d402      	bmi.n	800877c <_fclose_r+0x24>
 8008776:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008778:	f000 fd30 	bl	80091dc <__retarget_lock_acquire_recursive>
 800877c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008780:	b943      	cbnz	r3, 8008794 <_fclose_r+0x3c>
 8008782:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008784:	07d9      	lsls	r1, r3, #31
 8008786:	d402      	bmi.n	800878e <_fclose_r+0x36>
 8008788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800878a:	f000 fd28 	bl	80091de <__retarget_lock_release_recursive>
 800878e:	2600      	movs	r6, #0
 8008790:	4630      	mov	r0, r6
 8008792:	bd70      	pop	{r4, r5, r6, pc}
 8008794:	4621      	mov	r1, r4
 8008796:	4628      	mov	r0, r5
 8008798:	f000 f83c 	bl	8008814 <__sflush_r>
 800879c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800879e:	4606      	mov	r6, r0
 80087a0:	b133      	cbz	r3, 80087b0 <_fclose_r+0x58>
 80087a2:	6a21      	ldr	r1, [r4, #32]
 80087a4:	4628      	mov	r0, r5
 80087a6:	4798      	blx	r3
 80087a8:	2800      	cmp	r0, #0
 80087aa:	bfb8      	it	lt
 80087ac:	f04f 36ff 	movlt.w	r6, #4294967295
 80087b0:	89a3      	ldrh	r3, [r4, #12]
 80087b2:	061a      	lsls	r2, r3, #24
 80087b4:	d503      	bpl.n	80087be <_fclose_r+0x66>
 80087b6:	6921      	ldr	r1, [r4, #16]
 80087b8:	4628      	mov	r0, r5
 80087ba:	f001 fb5d 	bl	8009e78 <_free_r>
 80087be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087c0:	b141      	cbz	r1, 80087d4 <_fclose_r+0x7c>
 80087c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087c6:	4299      	cmp	r1, r3
 80087c8:	d002      	beq.n	80087d0 <_fclose_r+0x78>
 80087ca:	4628      	mov	r0, r5
 80087cc:	f001 fb54 	bl	8009e78 <_free_r>
 80087d0:	2300      	movs	r3, #0
 80087d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80087d4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80087d6:	b121      	cbz	r1, 80087e2 <_fclose_r+0x8a>
 80087d8:	4628      	mov	r0, r5
 80087da:	f001 fb4d 	bl	8009e78 <_free_r>
 80087de:	2300      	movs	r3, #0
 80087e0:	64a3      	str	r3, [r4, #72]	@ 0x48
 80087e2:	f000 f943 	bl	8008a6c <__sfp_lock_acquire>
 80087e6:	2300      	movs	r3, #0
 80087e8:	81a3      	strh	r3, [r4, #12]
 80087ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087ec:	07db      	lsls	r3, r3, #31
 80087ee:	d402      	bmi.n	80087f6 <_fclose_r+0x9e>
 80087f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087f2:	f000 fcf4 	bl	80091de <__retarget_lock_release_recursive>
 80087f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087f8:	f000 fcef 	bl	80091da <__retarget_lock_close_recursive>
 80087fc:	f000 f93c 	bl	8008a78 <__sfp_lock_release>
 8008800:	e7c6      	b.n	8008790 <_fclose_r+0x38>
	...

08008804 <fclose>:
 8008804:	4b02      	ldr	r3, [pc, #8]	@ (8008810 <fclose+0xc>)
 8008806:	4601      	mov	r1, r0
 8008808:	6818      	ldr	r0, [r3, #0]
 800880a:	f7ff bfa5 	b.w	8008758 <_fclose_r>
 800880e:	bf00      	nop
 8008810:	20000018 	.word	0x20000018

08008814 <__sflush_r>:
 8008814:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800881c:	0716      	lsls	r6, r2, #28
 800881e:	4605      	mov	r5, r0
 8008820:	460c      	mov	r4, r1
 8008822:	d454      	bmi.n	80088ce <__sflush_r+0xba>
 8008824:	684b      	ldr	r3, [r1, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	dc02      	bgt.n	8008830 <__sflush_r+0x1c>
 800882a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800882c:	2b00      	cmp	r3, #0
 800882e:	dd48      	ble.n	80088c2 <__sflush_r+0xae>
 8008830:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008832:	2e00      	cmp	r6, #0
 8008834:	d045      	beq.n	80088c2 <__sflush_r+0xae>
 8008836:	2300      	movs	r3, #0
 8008838:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800883c:	682f      	ldr	r7, [r5, #0]
 800883e:	6a21      	ldr	r1, [r4, #32]
 8008840:	602b      	str	r3, [r5, #0]
 8008842:	d030      	beq.n	80088a6 <__sflush_r+0x92>
 8008844:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008846:	89a3      	ldrh	r3, [r4, #12]
 8008848:	0759      	lsls	r1, r3, #29
 800884a:	d505      	bpl.n	8008858 <__sflush_r+0x44>
 800884c:	6863      	ldr	r3, [r4, #4]
 800884e:	1ad2      	subs	r2, r2, r3
 8008850:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008852:	b10b      	cbz	r3, 8008858 <__sflush_r+0x44>
 8008854:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008856:	1ad2      	subs	r2, r2, r3
 8008858:	2300      	movs	r3, #0
 800885a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800885c:	6a21      	ldr	r1, [r4, #32]
 800885e:	4628      	mov	r0, r5
 8008860:	47b0      	blx	r6
 8008862:	1c43      	adds	r3, r0, #1
 8008864:	89a3      	ldrh	r3, [r4, #12]
 8008866:	d106      	bne.n	8008876 <__sflush_r+0x62>
 8008868:	6829      	ldr	r1, [r5, #0]
 800886a:	291d      	cmp	r1, #29
 800886c:	d82b      	bhi.n	80088c6 <__sflush_r+0xb2>
 800886e:	4a2a      	ldr	r2, [pc, #168]	@ (8008918 <__sflush_r+0x104>)
 8008870:	410a      	asrs	r2, r1
 8008872:	07d6      	lsls	r6, r2, #31
 8008874:	d427      	bmi.n	80088c6 <__sflush_r+0xb2>
 8008876:	2200      	movs	r2, #0
 8008878:	6062      	str	r2, [r4, #4]
 800887a:	04d9      	lsls	r1, r3, #19
 800887c:	6922      	ldr	r2, [r4, #16]
 800887e:	6022      	str	r2, [r4, #0]
 8008880:	d504      	bpl.n	800888c <__sflush_r+0x78>
 8008882:	1c42      	adds	r2, r0, #1
 8008884:	d101      	bne.n	800888a <__sflush_r+0x76>
 8008886:	682b      	ldr	r3, [r5, #0]
 8008888:	b903      	cbnz	r3, 800888c <__sflush_r+0x78>
 800888a:	6560      	str	r0, [r4, #84]	@ 0x54
 800888c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800888e:	602f      	str	r7, [r5, #0]
 8008890:	b1b9      	cbz	r1, 80088c2 <__sflush_r+0xae>
 8008892:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008896:	4299      	cmp	r1, r3
 8008898:	d002      	beq.n	80088a0 <__sflush_r+0x8c>
 800889a:	4628      	mov	r0, r5
 800889c:	f001 faec 	bl	8009e78 <_free_r>
 80088a0:	2300      	movs	r3, #0
 80088a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80088a4:	e00d      	b.n	80088c2 <__sflush_r+0xae>
 80088a6:	2301      	movs	r3, #1
 80088a8:	4628      	mov	r0, r5
 80088aa:	47b0      	blx	r6
 80088ac:	4602      	mov	r2, r0
 80088ae:	1c50      	adds	r0, r2, #1
 80088b0:	d1c9      	bne.n	8008846 <__sflush_r+0x32>
 80088b2:	682b      	ldr	r3, [r5, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d0c6      	beq.n	8008846 <__sflush_r+0x32>
 80088b8:	2b1d      	cmp	r3, #29
 80088ba:	d001      	beq.n	80088c0 <__sflush_r+0xac>
 80088bc:	2b16      	cmp	r3, #22
 80088be:	d11e      	bne.n	80088fe <__sflush_r+0xea>
 80088c0:	602f      	str	r7, [r5, #0]
 80088c2:	2000      	movs	r0, #0
 80088c4:	e022      	b.n	800890c <__sflush_r+0xf8>
 80088c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088ca:	b21b      	sxth	r3, r3
 80088cc:	e01b      	b.n	8008906 <__sflush_r+0xf2>
 80088ce:	690f      	ldr	r7, [r1, #16]
 80088d0:	2f00      	cmp	r7, #0
 80088d2:	d0f6      	beq.n	80088c2 <__sflush_r+0xae>
 80088d4:	0793      	lsls	r3, r2, #30
 80088d6:	680e      	ldr	r6, [r1, #0]
 80088d8:	bf08      	it	eq
 80088da:	694b      	ldreq	r3, [r1, #20]
 80088dc:	600f      	str	r7, [r1, #0]
 80088de:	bf18      	it	ne
 80088e0:	2300      	movne	r3, #0
 80088e2:	eba6 0807 	sub.w	r8, r6, r7
 80088e6:	608b      	str	r3, [r1, #8]
 80088e8:	f1b8 0f00 	cmp.w	r8, #0
 80088ec:	dde9      	ble.n	80088c2 <__sflush_r+0xae>
 80088ee:	6a21      	ldr	r1, [r4, #32]
 80088f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088f2:	4643      	mov	r3, r8
 80088f4:	463a      	mov	r2, r7
 80088f6:	4628      	mov	r0, r5
 80088f8:	47b0      	blx	r6
 80088fa:	2800      	cmp	r0, #0
 80088fc:	dc08      	bgt.n	8008910 <__sflush_r+0xfc>
 80088fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008906:	81a3      	strh	r3, [r4, #12]
 8008908:	f04f 30ff 	mov.w	r0, #4294967295
 800890c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008910:	4407      	add	r7, r0
 8008912:	eba8 0800 	sub.w	r8, r8, r0
 8008916:	e7e7      	b.n	80088e8 <__sflush_r+0xd4>
 8008918:	dfbffffe 	.word	0xdfbffffe

0800891c <_fflush_r>:
 800891c:	b538      	push	{r3, r4, r5, lr}
 800891e:	690b      	ldr	r3, [r1, #16]
 8008920:	4605      	mov	r5, r0
 8008922:	460c      	mov	r4, r1
 8008924:	b913      	cbnz	r3, 800892c <_fflush_r+0x10>
 8008926:	2500      	movs	r5, #0
 8008928:	4628      	mov	r0, r5
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	b118      	cbz	r0, 8008936 <_fflush_r+0x1a>
 800892e:	6a03      	ldr	r3, [r0, #32]
 8008930:	b90b      	cbnz	r3, 8008936 <_fflush_r+0x1a>
 8008932:	f000 f8f9 	bl	8008b28 <__sinit>
 8008936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d0f3      	beq.n	8008926 <_fflush_r+0xa>
 800893e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008940:	07d0      	lsls	r0, r2, #31
 8008942:	d404      	bmi.n	800894e <_fflush_r+0x32>
 8008944:	0599      	lsls	r1, r3, #22
 8008946:	d402      	bmi.n	800894e <_fflush_r+0x32>
 8008948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800894a:	f000 fc47 	bl	80091dc <__retarget_lock_acquire_recursive>
 800894e:	4628      	mov	r0, r5
 8008950:	4621      	mov	r1, r4
 8008952:	f7ff ff5f 	bl	8008814 <__sflush_r>
 8008956:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008958:	07da      	lsls	r2, r3, #31
 800895a:	4605      	mov	r5, r0
 800895c:	d4e4      	bmi.n	8008928 <_fflush_r+0xc>
 800895e:	89a3      	ldrh	r3, [r4, #12]
 8008960:	059b      	lsls	r3, r3, #22
 8008962:	d4e1      	bmi.n	8008928 <_fflush_r+0xc>
 8008964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008966:	f000 fc3a 	bl	80091de <__retarget_lock_release_recursive>
 800896a:	e7dd      	b.n	8008928 <_fflush_r+0xc>

0800896c <std>:
 800896c:	2300      	movs	r3, #0
 800896e:	b510      	push	{r4, lr}
 8008970:	4604      	mov	r4, r0
 8008972:	e9c0 3300 	strd	r3, r3, [r0]
 8008976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800897a:	6083      	str	r3, [r0, #8]
 800897c:	8181      	strh	r1, [r0, #12]
 800897e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008980:	81c2      	strh	r2, [r0, #14]
 8008982:	6183      	str	r3, [r0, #24]
 8008984:	4619      	mov	r1, r3
 8008986:	2208      	movs	r2, #8
 8008988:	305c      	adds	r0, #92	@ 0x5c
 800898a:	f000 fb86 	bl	800909a <memset>
 800898e:	4b0d      	ldr	r3, [pc, #52]	@ (80089c4 <std+0x58>)
 8008990:	6263      	str	r3, [r4, #36]	@ 0x24
 8008992:	4b0d      	ldr	r3, [pc, #52]	@ (80089c8 <std+0x5c>)
 8008994:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008996:	4b0d      	ldr	r3, [pc, #52]	@ (80089cc <std+0x60>)
 8008998:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800899a:	4b0d      	ldr	r3, [pc, #52]	@ (80089d0 <std+0x64>)
 800899c:	6323      	str	r3, [r4, #48]	@ 0x30
 800899e:	4b0d      	ldr	r3, [pc, #52]	@ (80089d4 <std+0x68>)
 80089a0:	6224      	str	r4, [r4, #32]
 80089a2:	429c      	cmp	r4, r3
 80089a4:	d006      	beq.n	80089b4 <std+0x48>
 80089a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80089aa:	4294      	cmp	r4, r2
 80089ac:	d002      	beq.n	80089b4 <std+0x48>
 80089ae:	33d0      	adds	r3, #208	@ 0xd0
 80089b0:	429c      	cmp	r4, r3
 80089b2:	d105      	bne.n	80089c0 <std+0x54>
 80089b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80089b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089bc:	f000 bc0c 	b.w	80091d8 <__retarget_lock_init_recursive>
 80089c0:	bd10      	pop	{r4, pc}
 80089c2:	bf00      	nop
 80089c4:	08008dbd 	.word	0x08008dbd
 80089c8:	08008ddf 	.word	0x08008ddf
 80089cc:	08008e17 	.word	0x08008e17
 80089d0:	08008e3b 	.word	0x08008e3b
 80089d4:	200033e4 	.word	0x200033e4

080089d8 <stdio_exit_handler>:
 80089d8:	4a02      	ldr	r2, [pc, #8]	@ (80089e4 <stdio_exit_handler+0xc>)
 80089da:	4903      	ldr	r1, [pc, #12]	@ (80089e8 <stdio_exit_handler+0x10>)
 80089dc:	4803      	ldr	r0, [pc, #12]	@ (80089ec <stdio_exit_handler+0x14>)
 80089de:	f000 b957 	b.w	8008c90 <_fwalk_sglue>
 80089e2:	bf00      	nop
 80089e4:	2000000c 	.word	0x2000000c
 80089e8:	0800891d 	.word	0x0800891d
 80089ec:	2000001c 	.word	0x2000001c

080089f0 <cleanup_stdio>:
 80089f0:	6841      	ldr	r1, [r0, #4]
 80089f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008a24 <cleanup_stdio+0x34>)
 80089f4:	4299      	cmp	r1, r3
 80089f6:	b510      	push	{r4, lr}
 80089f8:	4604      	mov	r4, r0
 80089fa:	d001      	beq.n	8008a00 <cleanup_stdio+0x10>
 80089fc:	f7ff ff8e 	bl	800891c <_fflush_r>
 8008a00:	68a1      	ldr	r1, [r4, #8]
 8008a02:	4b09      	ldr	r3, [pc, #36]	@ (8008a28 <cleanup_stdio+0x38>)
 8008a04:	4299      	cmp	r1, r3
 8008a06:	d002      	beq.n	8008a0e <cleanup_stdio+0x1e>
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f7ff ff87 	bl	800891c <_fflush_r>
 8008a0e:	68e1      	ldr	r1, [r4, #12]
 8008a10:	4b06      	ldr	r3, [pc, #24]	@ (8008a2c <cleanup_stdio+0x3c>)
 8008a12:	4299      	cmp	r1, r3
 8008a14:	d004      	beq.n	8008a20 <cleanup_stdio+0x30>
 8008a16:	4620      	mov	r0, r4
 8008a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a1c:	f7ff bf7e 	b.w	800891c <_fflush_r>
 8008a20:	bd10      	pop	{r4, pc}
 8008a22:	bf00      	nop
 8008a24:	200033e4 	.word	0x200033e4
 8008a28:	2000344c 	.word	0x2000344c
 8008a2c:	200034b4 	.word	0x200034b4

08008a30 <global_stdio_init.part.0>:
 8008a30:	b510      	push	{r4, lr}
 8008a32:	4b0b      	ldr	r3, [pc, #44]	@ (8008a60 <global_stdio_init.part.0+0x30>)
 8008a34:	4c0b      	ldr	r4, [pc, #44]	@ (8008a64 <global_stdio_init.part.0+0x34>)
 8008a36:	4a0c      	ldr	r2, [pc, #48]	@ (8008a68 <global_stdio_init.part.0+0x38>)
 8008a38:	601a      	str	r2, [r3, #0]
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2104      	movs	r1, #4
 8008a40:	f7ff ff94 	bl	800896c <std>
 8008a44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008a48:	2201      	movs	r2, #1
 8008a4a:	2109      	movs	r1, #9
 8008a4c:	f7ff ff8e 	bl	800896c <std>
 8008a50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008a54:	2202      	movs	r2, #2
 8008a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a5a:	2112      	movs	r1, #18
 8008a5c:	f7ff bf86 	b.w	800896c <std>
 8008a60:	2000351c 	.word	0x2000351c
 8008a64:	200033e4 	.word	0x200033e4
 8008a68:	080089d9 	.word	0x080089d9

08008a6c <__sfp_lock_acquire>:
 8008a6c:	4801      	ldr	r0, [pc, #4]	@ (8008a74 <__sfp_lock_acquire+0x8>)
 8008a6e:	f000 bbb5 	b.w	80091dc <__retarget_lock_acquire_recursive>
 8008a72:	bf00      	nop
 8008a74:	20003525 	.word	0x20003525

08008a78 <__sfp_lock_release>:
 8008a78:	4801      	ldr	r0, [pc, #4]	@ (8008a80 <__sfp_lock_release+0x8>)
 8008a7a:	f000 bbb0 	b.w	80091de <__retarget_lock_release_recursive>
 8008a7e:	bf00      	nop
 8008a80:	20003525 	.word	0x20003525

08008a84 <__sfp>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	4607      	mov	r7, r0
 8008a88:	f7ff fff0 	bl	8008a6c <__sfp_lock_acquire>
 8008a8c:	4b23      	ldr	r3, [pc, #140]	@ (8008b1c <__sfp+0x98>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	b90b      	cbnz	r3, 8008a96 <__sfp+0x12>
 8008a92:	f7ff ffcd 	bl	8008a30 <global_stdio_init.part.0>
 8008a96:	4e22      	ldr	r6, [pc, #136]	@ (8008b20 <__sfp+0x9c>)
 8008a98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	d50f      	bpl.n	8008ac0 <__sfp+0x3c>
 8008aa0:	6835      	ldr	r5, [r6, #0]
 8008aa2:	2d00      	cmp	r5, #0
 8008aa4:	d137      	bne.n	8008b16 <__sfp+0x92>
 8008aa6:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8008aaa:	4638      	mov	r0, r7
 8008aac:	f001 fa58 	bl	8009f60 <_malloc_r>
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	bb28      	cbnz	r0, 8008b00 <__sfp+0x7c>
 8008ab4:	6030      	str	r0, [r6, #0]
 8008ab6:	f7ff ffdf 	bl	8008a78 <__sfp_lock_release>
 8008aba:	230c      	movs	r3, #12
 8008abc:	603b      	str	r3, [r7, #0]
 8008abe:	e01b      	b.n	8008af8 <__sfp+0x74>
 8008ac0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ac4:	b9d5      	cbnz	r5, 8008afc <__sfp+0x78>
 8008ac6:	4b17      	ldr	r3, [pc, #92]	@ (8008b24 <__sfp+0xa0>)
 8008ac8:	60e3      	str	r3, [r4, #12]
 8008aca:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ace:	6665      	str	r5, [r4, #100]	@ 0x64
 8008ad0:	f000 fb82 	bl	80091d8 <__retarget_lock_init_recursive>
 8008ad4:	f7ff ffd0 	bl	8008a78 <__sfp_lock_release>
 8008ad8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008adc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ae0:	6025      	str	r5, [r4, #0]
 8008ae2:	61a5      	str	r5, [r4, #24]
 8008ae4:	2208      	movs	r2, #8
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8008aec:	f000 fad5 	bl	800909a <memset>
 8008af0:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8008af4:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8008af8:	4620      	mov	r0, r4
 8008afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008afc:	3468      	adds	r4, #104	@ 0x68
 8008afe:	e7cd      	b.n	8008a9c <__sfp+0x18>
 8008b00:	2304      	movs	r3, #4
 8008b02:	6005      	str	r5, [r0, #0]
 8008b04:	6043      	str	r3, [r0, #4]
 8008b06:	300c      	adds	r0, #12
 8008b08:	60a0      	str	r0, [r4, #8]
 8008b0a:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8008b0e:	4629      	mov	r1, r5
 8008b10:	f000 fac3 	bl	800909a <memset>
 8008b14:	6034      	str	r4, [r6, #0]
 8008b16:	6836      	ldr	r6, [r6, #0]
 8008b18:	e7be      	b.n	8008a98 <__sfp+0x14>
 8008b1a:	bf00      	nop
 8008b1c:	2000351c 	.word	0x2000351c
 8008b20:	2000000c 	.word	0x2000000c
 8008b24:	ffff0001 	.word	0xffff0001

08008b28 <__sinit>:
 8008b28:	b510      	push	{r4, lr}
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	f7ff ff9e 	bl	8008a6c <__sfp_lock_acquire>
 8008b30:	6a23      	ldr	r3, [r4, #32]
 8008b32:	b11b      	cbz	r3, 8008b3c <__sinit+0x14>
 8008b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b38:	f7ff bf9e 	b.w	8008a78 <__sfp_lock_release>
 8008b3c:	4b04      	ldr	r3, [pc, #16]	@ (8008b50 <__sinit+0x28>)
 8008b3e:	6223      	str	r3, [r4, #32]
 8008b40:	4b04      	ldr	r3, [pc, #16]	@ (8008b54 <__sinit+0x2c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1f5      	bne.n	8008b34 <__sinit+0xc>
 8008b48:	f7ff ff72 	bl	8008a30 <global_stdio_init.part.0>
 8008b4c:	e7f2      	b.n	8008b34 <__sinit+0xc>
 8008b4e:	bf00      	nop
 8008b50:	080089f1 	.word	0x080089f1
 8008b54:	2000351c 	.word	0x2000351c

08008b58 <_fopen_r>:
 8008b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b5a:	460f      	mov	r7, r1
 8008b5c:	4611      	mov	r1, r2
 8008b5e:	aa01      	add	r2, sp, #4
 8008b60:	4606      	mov	r6, r0
 8008b62:	f002 f8a5 	bl	800acb0 <__sflags>
 8008b66:	4605      	mov	r5, r0
 8008b68:	b1b0      	cbz	r0, 8008b98 <_fopen_r+0x40>
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	f7ff ff8a 	bl	8008a84 <__sfp>
 8008b70:	4604      	mov	r4, r0
 8008b72:	b188      	cbz	r0, 8008b98 <_fopen_r+0x40>
 8008b74:	4639      	mov	r1, r7
 8008b76:	9a01      	ldr	r2, [sp, #4]
 8008b78:	f44f 73db 	mov.w	r3, #438	@ 0x1b6
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	f000 fabb 	bl	80090f8 <_open_r>
 8008b82:	1e07      	subs	r7, r0, #0
 8008b84:	da0c      	bge.n	8008ba0 <_fopen_r+0x48>
 8008b86:	f7ff ff71 	bl	8008a6c <__sfp_lock_acquire>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b8e:	81a3      	strh	r3, [r4, #12]
 8008b90:	f000 fb23 	bl	80091da <__retarget_lock_close_recursive>
 8008b94:	f7ff ff70 	bl	8008a78 <__sfp_lock_release>
 8008b98:	2400      	movs	r4, #0
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	b003      	add	sp, #12
 8008b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ba0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ba2:	07db      	lsls	r3, r3, #31
 8008ba4:	d405      	bmi.n	8008bb2 <_fopen_r+0x5a>
 8008ba6:	89a3      	ldrh	r3, [r4, #12]
 8008ba8:	0598      	lsls	r0, r3, #22
 8008baa:	d402      	bmi.n	8008bb2 <_fopen_r+0x5a>
 8008bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bae:	f000 fb15 	bl	80091dc <__retarget_lock_acquire_recursive>
 8008bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8008bf0 <_fopen_r+0x98>)
 8008bb4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8008bf4 <_fopen_r+0x9c>)
 8008bb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008bba:	b22d      	sxth	r5, r5
 8008bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8008bf8 <_fopen_r+0xa0>)
 8008bbe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008bc0:	05e9      	lsls	r1, r5, #23
 8008bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8008bfc <_fopen_r+0xa4>)
 8008bc4:	81e7      	strh	r7, [r4, #14]
 8008bc6:	81a5      	strh	r5, [r4, #12]
 8008bc8:	6224      	str	r4, [r4, #32]
 8008bca:	6323      	str	r3, [r4, #48]	@ 0x30
 8008bcc:	d505      	bpl.n	8008bda <_fopen_r+0x82>
 8008bce:	2302      	movs	r3, #2
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	4621      	mov	r1, r4
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	f000 f859 	bl	8008c8c <_fseek_r>
 8008bda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bdc:	07da      	lsls	r2, r3, #31
 8008bde:	d4dc      	bmi.n	8008b9a <_fopen_r+0x42>
 8008be0:	89a3      	ldrh	r3, [r4, #12]
 8008be2:	059b      	lsls	r3, r3, #22
 8008be4:	d4d9      	bmi.n	8008b9a <_fopen_r+0x42>
 8008be6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008be8:	f000 faf9 	bl	80091de <__retarget_lock_release_recursive>
 8008bec:	e7d5      	b.n	8008b9a <_fopen_r+0x42>
 8008bee:	bf00      	nop
 8008bf0:	08008dbd 	.word	0x08008dbd
 8008bf4:	08008ddf 	.word	0x08008ddf
 8008bf8:	08008e17 	.word	0x08008e17
 8008bfc:	08008e3b 	.word	0x08008e3b

08008c00 <fopen>:
 8008c00:	4b02      	ldr	r3, [pc, #8]	@ (8008c0c <fopen+0xc>)
 8008c02:	460a      	mov	r2, r1
 8008c04:	4601      	mov	r1, r0
 8008c06:	6818      	ldr	r0, [r3, #0]
 8008c08:	f7ff bfa6 	b.w	8008b58 <_fopen_r>
 8008c0c:	20000018 	.word	0x20000018

08008c10 <fiprintf>:
 8008c10:	b40e      	push	{r1, r2, r3}
 8008c12:	b503      	push	{r0, r1, lr}
 8008c14:	4601      	mov	r1, r0
 8008c16:	ab03      	add	r3, sp, #12
 8008c18:	4805      	ldr	r0, [pc, #20]	@ (8008c30 <fiprintf+0x20>)
 8008c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c1e:	6800      	ldr	r0, [r0, #0]
 8008c20:	9301      	str	r3, [sp, #4]
 8008c22:	f001 ff2d 	bl	800aa80 <_vfiprintf_r>
 8008c26:	b002      	add	sp, #8
 8008c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c2c:	b003      	add	sp, #12
 8008c2e:	4770      	bx	lr
 8008c30:	20000018 	.word	0x20000018

08008c34 <_fputc_r>:
 8008c34:	b570      	push	{r4, r5, r6, lr}
 8008c36:	460e      	mov	r6, r1
 8008c38:	4614      	mov	r4, r2
 8008c3a:	4605      	mov	r5, r0
 8008c3c:	b118      	cbz	r0, 8008c46 <_fputc_r+0x12>
 8008c3e:	6a03      	ldr	r3, [r0, #32]
 8008c40:	b90b      	cbnz	r3, 8008c46 <_fputc_r+0x12>
 8008c42:	f7ff ff71 	bl	8008b28 <__sinit>
 8008c46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c48:	07d8      	lsls	r0, r3, #31
 8008c4a:	d405      	bmi.n	8008c58 <_fputc_r+0x24>
 8008c4c:	89a3      	ldrh	r3, [r4, #12]
 8008c4e:	0599      	lsls	r1, r3, #22
 8008c50:	d402      	bmi.n	8008c58 <_fputc_r+0x24>
 8008c52:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c54:	f000 fac2 	bl	80091dc <__retarget_lock_acquire_recursive>
 8008c58:	4622      	mov	r2, r4
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	4631      	mov	r1, r6
 8008c5e:	f000 f847 	bl	8008cf0 <_putc_r>
 8008c62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c64:	07da      	lsls	r2, r3, #31
 8008c66:	4605      	mov	r5, r0
 8008c68:	d405      	bmi.n	8008c76 <_fputc_r+0x42>
 8008c6a:	89a3      	ldrh	r3, [r4, #12]
 8008c6c:	059b      	lsls	r3, r3, #22
 8008c6e:	d402      	bmi.n	8008c76 <_fputc_r+0x42>
 8008c70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c72:	f000 fab4 	bl	80091de <__retarget_lock_release_recursive>
 8008c76:	4628      	mov	r0, r5
 8008c78:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c7c <fputc>:
 8008c7c:	4b02      	ldr	r3, [pc, #8]	@ (8008c88 <fputc+0xc>)
 8008c7e:	460a      	mov	r2, r1
 8008c80:	4601      	mov	r1, r0
 8008c82:	6818      	ldr	r0, [r3, #0]
 8008c84:	f7ff bfd6 	b.w	8008c34 <_fputc_r>
 8008c88:	20000018 	.word	0x20000018

08008c8c <_fseek_r>:
 8008c8c:	f000 b96e 	b.w	8008f6c <_fseeko_r>

08008c90 <_fwalk_sglue>:
 8008c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c94:	4607      	mov	r7, r0
 8008c96:	4688      	mov	r8, r1
 8008c98:	4614      	mov	r4, r2
 8008c9a:	2600      	movs	r6, #0
 8008c9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ca0:	f1b9 0901 	subs.w	r9, r9, #1
 8008ca4:	d505      	bpl.n	8008cb2 <_fwalk_sglue+0x22>
 8008ca6:	6824      	ldr	r4, [r4, #0]
 8008ca8:	2c00      	cmp	r4, #0
 8008caa:	d1f7      	bne.n	8008c9c <_fwalk_sglue+0xc>
 8008cac:	4630      	mov	r0, r6
 8008cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cb2:	89ab      	ldrh	r3, [r5, #12]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d907      	bls.n	8008cc8 <_fwalk_sglue+0x38>
 8008cb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	d003      	beq.n	8008cc8 <_fwalk_sglue+0x38>
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	4638      	mov	r0, r7
 8008cc4:	47c0      	blx	r8
 8008cc6:	4306      	orrs	r6, r0
 8008cc8:	3568      	adds	r5, #104	@ 0x68
 8008cca:	e7e9      	b.n	8008ca0 <_fwalk_sglue+0x10>

08008ccc <iprintf>:
 8008ccc:	b40f      	push	{r0, r1, r2, r3}
 8008cce:	b507      	push	{r0, r1, r2, lr}
 8008cd0:	4906      	ldr	r1, [pc, #24]	@ (8008cec <iprintf+0x20>)
 8008cd2:	ab04      	add	r3, sp, #16
 8008cd4:	6808      	ldr	r0, [r1, #0]
 8008cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cda:	6881      	ldr	r1, [r0, #8]
 8008cdc:	9301      	str	r3, [sp, #4]
 8008cde:	f001 fecf 	bl	800aa80 <_vfiprintf_r>
 8008ce2:	b003      	add	sp, #12
 8008ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ce8:	b004      	add	sp, #16
 8008cea:	4770      	bx	lr
 8008cec:	20000018 	.word	0x20000018

08008cf0 <_putc_r>:
 8008cf0:	b570      	push	{r4, r5, r6, lr}
 8008cf2:	460d      	mov	r5, r1
 8008cf4:	4614      	mov	r4, r2
 8008cf6:	4606      	mov	r6, r0
 8008cf8:	b118      	cbz	r0, 8008d02 <_putc_r+0x12>
 8008cfa:	6a03      	ldr	r3, [r0, #32]
 8008cfc:	b90b      	cbnz	r3, 8008d02 <_putc_r+0x12>
 8008cfe:	f7ff ff13 	bl	8008b28 <__sinit>
 8008d02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d04:	07d8      	lsls	r0, r3, #31
 8008d06:	d405      	bmi.n	8008d14 <_putc_r+0x24>
 8008d08:	89a3      	ldrh	r3, [r4, #12]
 8008d0a:	0599      	lsls	r1, r3, #22
 8008d0c:	d402      	bmi.n	8008d14 <_putc_r+0x24>
 8008d0e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d10:	f000 fa64 	bl	80091dc <__retarget_lock_acquire_recursive>
 8008d14:	68a3      	ldr	r3, [r4, #8]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	60a3      	str	r3, [r4, #8]
 8008d1c:	da05      	bge.n	8008d2a <_putc_r+0x3a>
 8008d1e:	69a2      	ldr	r2, [r4, #24]
 8008d20:	4293      	cmp	r3, r2
 8008d22:	db12      	blt.n	8008d4a <_putc_r+0x5a>
 8008d24:	b2eb      	uxtb	r3, r5
 8008d26:	2b0a      	cmp	r3, #10
 8008d28:	d00f      	beq.n	8008d4a <_putc_r+0x5a>
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	1c5a      	adds	r2, r3, #1
 8008d2e:	6022      	str	r2, [r4, #0]
 8008d30:	701d      	strb	r5, [r3, #0]
 8008d32:	b2ed      	uxtb	r5, r5
 8008d34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d36:	07da      	lsls	r2, r3, #31
 8008d38:	d405      	bmi.n	8008d46 <_putc_r+0x56>
 8008d3a:	89a3      	ldrh	r3, [r4, #12]
 8008d3c:	059b      	lsls	r3, r3, #22
 8008d3e:	d402      	bmi.n	8008d46 <_putc_r+0x56>
 8008d40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d42:	f000 fa4c 	bl	80091de <__retarget_lock_release_recursive>
 8008d46:	4628      	mov	r0, r5
 8008d48:	bd70      	pop	{r4, r5, r6, pc}
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	4622      	mov	r2, r4
 8008d4e:	4630      	mov	r0, r6
 8008d50:	f000 f877 	bl	8008e42 <__swbuf_r>
 8008d54:	4605      	mov	r5, r0
 8008d56:	e7ed      	b.n	8008d34 <_putc_r+0x44>

08008d58 <_remove_r>:
 8008d58:	b508      	push	{r3, lr}
 8008d5a:	f000 f9f1 	bl	8009140 <_unlink_r>
 8008d5e:	3001      	adds	r0, #1
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295
 8008d64:	bf18      	it	ne
 8008d66:	2000      	movne	r0, #0
 8008d68:	bd08      	pop	{r3, pc}
	...

08008d6c <remove>:
 8008d6c:	4b02      	ldr	r3, [pc, #8]	@ (8008d78 <remove+0xc>)
 8008d6e:	4601      	mov	r1, r0
 8008d70:	6818      	ldr	r0, [r3, #0]
 8008d72:	f7ff bff1 	b.w	8008d58 <_remove_r>
 8008d76:	bf00      	nop
 8008d78:	20000018 	.word	0x20000018

08008d7c <siprintf>:
 8008d7c:	b40e      	push	{r1, r2, r3}
 8008d7e:	b500      	push	{lr}
 8008d80:	b09c      	sub	sp, #112	@ 0x70
 8008d82:	ab1d      	add	r3, sp, #116	@ 0x74
 8008d84:	9002      	str	r0, [sp, #8]
 8008d86:	9006      	str	r0, [sp, #24]
 8008d88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008d8c:	4809      	ldr	r0, [pc, #36]	@ (8008db4 <siprintf+0x38>)
 8008d8e:	9107      	str	r1, [sp, #28]
 8008d90:	9104      	str	r1, [sp, #16]
 8008d92:	4909      	ldr	r1, [pc, #36]	@ (8008db8 <siprintf+0x3c>)
 8008d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d98:	9105      	str	r1, [sp, #20]
 8008d9a:	6800      	ldr	r0, [r0, #0]
 8008d9c:	9301      	str	r3, [sp, #4]
 8008d9e:	a902      	add	r1, sp, #8
 8008da0:	f001 fd48 	bl	800a834 <_svfiprintf_r>
 8008da4:	9b02      	ldr	r3, [sp, #8]
 8008da6:	2200      	movs	r2, #0
 8008da8:	701a      	strb	r2, [r3, #0]
 8008daa:	b01c      	add	sp, #112	@ 0x70
 8008dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8008db0:	b003      	add	sp, #12
 8008db2:	4770      	bx	lr
 8008db4:	20000018 	.word	0x20000018
 8008db8:	ffff0208 	.word	0xffff0208

08008dbc <__sread>:
 8008dbc:	b510      	push	{r4, lr}
 8008dbe:	460c      	mov	r4, r1
 8008dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc4:	f000 f9aa 	bl	800911c <_read_r>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	bfab      	itete	ge
 8008dcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008dce:	89a3      	ldrhlt	r3, [r4, #12]
 8008dd0:	181b      	addge	r3, r3, r0
 8008dd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008dd6:	bfac      	ite	ge
 8008dd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008dda:	81a3      	strhlt	r3, [r4, #12]
 8008ddc:	bd10      	pop	{r4, pc}

08008dde <__swrite>:
 8008dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de2:	461f      	mov	r7, r3
 8008de4:	898b      	ldrh	r3, [r1, #12]
 8008de6:	05db      	lsls	r3, r3, #23
 8008de8:	4605      	mov	r5, r0
 8008dea:	460c      	mov	r4, r1
 8008dec:	4616      	mov	r6, r2
 8008dee:	d505      	bpl.n	8008dfc <__swrite+0x1e>
 8008df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008df4:	2302      	movs	r3, #2
 8008df6:	2200      	movs	r2, #0
 8008df8:	f000 f96c 	bl	80090d4 <_lseek_r>
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e06:	81a3      	strh	r3, [r4, #12]
 8008e08:	4632      	mov	r2, r6
 8008e0a:	463b      	mov	r3, r7
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e12:	f000 b9a5 	b.w	8009160 <_write_r>

08008e16 <__sseek>:
 8008e16:	b510      	push	{r4, lr}
 8008e18:	460c      	mov	r4, r1
 8008e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e1e:	f000 f959 	bl	80090d4 <_lseek_r>
 8008e22:	1c43      	adds	r3, r0, #1
 8008e24:	89a3      	ldrh	r3, [r4, #12]
 8008e26:	bf15      	itete	ne
 8008e28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e32:	81a3      	strheq	r3, [r4, #12]
 8008e34:	bf18      	it	ne
 8008e36:	81a3      	strhne	r3, [r4, #12]
 8008e38:	bd10      	pop	{r4, pc}

08008e3a <__sclose>:
 8008e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e3e:	f000 b939 	b.w	80090b4 <_close_r>

08008e42 <__swbuf_r>:
 8008e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e44:	460e      	mov	r6, r1
 8008e46:	4614      	mov	r4, r2
 8008e48:	4605      	mov	r5, r0
 8008e4a:	b118      	cbz	r0, 8008e54 <__swbuf_r+0x12>
 8008e4c:	6a03      	ldr	r3, [r0, #32]
 8008e4e:	b90b      	cbnz	r3, 8008e54 <__swbuf_r+0x12>
 8008e50:	f7ff fe6a 	bl	8008b28 <__sinit>
 8008e54:	69a3      	ldr	r3, [r4, #24]
 8008e56:	60a3      	str	r3, [r4, #8]
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	071a      	lsls	r2, r3, #28
 8008e5c:	d501      	bpl.n	8008e62 <__swbuf_r+0x20>
 8008e5e:	6923      	ldr	r3, [r4, #16]
 8008e60:	b943      	cbnz	r3, 8008e74 <__swbuf_r+0x32>
 8008e62:	4621      	mov	r1, r4
 8008e64:	4628      	mov	r0, r5
 8008e66:	f000 f82b 	bl	8008ec0 <__swsetup_r>
 8008e6a:	b118      	cbz	r0, 8008e74 <__swbuf_r+0x32>
 8008e6c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e70:	4638      	mov	r0, r7
 8008e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e74:	6823      	ldr	r3, [r4, #0]
 8008e76:	6922      	ldr	r2, [r4, #16]
 8008e78:	1a98      	subs	r0, r3, r2
 8008e7a:	6963      	ldr	r3, [r4, #20]
 8008e7c:	b2f6      	uxtb	r6, r6
 8008e7e:	4283      	cmp	r3, r0
 8008e80:	4637      	mov	r7, r6
 8008e82:	dc05      	bgt.n	8008e90 <__swbuf_r+0x4e>
 8008e84:	4621      	mov	r1, r4
 8008e86:	4628      	mov	r0, r5
 8008e88:	f7ff fd48 	bl	800891c <_fflush_r>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d1ed      	bne.n	8008e6c <__swbuf_r+0x2a>
 8008e90:	68a3      	ldr	r3, [r4, #8]
 8008e92:	3b01      	subs	r3, #1
 8008e94:	60a3      	str	r3, [r4, #8]
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	1c5a      	adds	r2, r3, #1
 8008e9a:	6022      	str	r2, [r4, #0]
 8008e9c:	701e      	strb	r6, [r3, #0]
 8008e9e:	6962      	ldr	r2, [r4, #20]
 8008ea0:	1c43      	adds	r3, r0, #1
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d004      	beq.n	8008eb0 <__swbuf_r+0x6e>
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	07db      	lsls	r3, r3, #31
 8008eaa:	d5e1      	bpl.n	8008e70 <__swbuf_r+0x2e>
 8008eac:	2e0a      	cmp	r6, #10
 8008eae:	d1df      	bne.n	8008e70 <__swbuf_r+0x2e>
 8008eb0:	4621      	mov	r1, r4
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	f7ff fd32 	bl	800891c <_fflush_r>
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d0d9      	beq.n	8008e70 <__swbuf_r+0x2e>
 8008ebc:	e7d6      	b.n	8008e6c <__swbuf_r+0x2a>
	...

08008ec0 <__swsetup_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4b29      	ldr	r3, [pc, #164]	@ (8008f68 <__swsetup_r+0xa8>)
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	6818      	ldr	r0, [r3, #0]
 8008ec8:	460c      	mov	r4, r1
 8008eca:	b118      	cbz	r0, 8008ed4 <__swsetup_r+0x14>
 8008ecc:	6a03      	ldr	r3, [r0, #32]
 8008ece:	b90b      	cbnz	r3, 8008ed4 <__swsetup_r+0x14>
 8008ed0:	f7ff fe2a 	bl	8008b28 <__sinit>
 8008ed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ed8:	0719      	lsls	r1, r3, #28
 8008eda:	d422      	bmi.n	8008f22 <__swsetup_r+0x62>
 8008edc:	06da      	lsls	r2, r3, #27
 8008ede:	d407      	bmi.n	8008ef0 <__swsetup_r+0x30>
 8008ee0:	2209      	movs	r2, #9
 8008ee2:	602a      	str	r2, [r5, #0]
 8008ee4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ee8:	81a3      	strh	r3, [r4, #12]
 8008eea:	f04f 30ff 	mov.w	r0, #4294967295
 8008eee:	e033      	b.n	8008f58 <__swsetup_r+0x98>
 8008ef0:	0758      	lsls	r0, r3, #29
 8008ef2:	d512      	bpl.n	8008f1a <__swsetup_r+0x5a>
 8008ef4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ef6:	b141      	cbz	r1, 8008f0a <__swsetup_r+0x4a>
 8008ef8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008efc:	4299      	cmp	r1, r3
 8008efe:	d002      	beq.n	8008f06 <__swsetup_r+0x46>
 8008f00:	4628      	mov	r0, r5
 8008f02:	f000 ffb9 	bl	8009e78 <_free_r>
 8008f06:	2300      	movs	r3, #0
 8008f08:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f10:	81a3      	strh	r3, [r4, #12]
 8008f12:	2300      	movs	r3, #0
 8008f14:	6063      	str	r3, [r4, #4]
 8008f16:	6923      	ldr	r3, [r4, #16]
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	89a3      	ldrh	r3, [r4, #12]
 8008f1c:	f043 0308 	orr.w	r3, r3, #8
 8008f20:	81a3      	strh	r3, [r4, #12]
 8008f22:	6923      	ldr	r3, [r4, #16]
 8008f24:	b94b      	cbnz	r3, 8008f3a <__swsetup_r+0x7a>
 8008f26:	89a3      	ldrh	r3, [r4, #12]
 8008f28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f30:	d003      	beq.n	8008f3a <__swsetup_r+0x7a>
 8008f32:	4621      	mov	r1, r4
 8008f34:	4628      	mov	r0, r5
 8008f36:	f001 ff17 	bl	800ad68 <__smakebuf_r>
 8008f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f3e:	f013 0201 	ands.w	r2, r3, #1
 8008f42:	d00a      	beq.n	8008f5a <__swsetup_r+0x9a>
 8008f44:	2200      	movs	r2, #0
 8008f46:	60a2      	str	r2, [r4, #8]
 8008f48:	6962      	ldr	r2, [r4, #20]
 8008f4a:	4252      	negs	r2, r2
 8008f4c:	61a2      	str	r2, [r4, #24]
 8008f4e:	6922      	ldr	r2, [r4, #16]
 8008f50:	b942      	cbnz	r2, 8008f64 <__swsetup_r+0xa4>
 8008f52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f56:	d1c5      	bne.n	8008ee4 <__swsetup_r+0x24>
 8008f58:	bd38      	pop	{r3, r4, r5, pc}
 8008f5a:	0799      	lsls	r1, r3, #30
 8008f5c:	bf58      	it	pl
 8008f5e:	6962      	ldrpl	r2, [r4, #20]
 8008f60:	60a2      	str	r2, [r4, #8]
 8008f62:	e7f4      	b.n	8008f4e <__swsetup_r+0x8e>
 8008f64:	2000      	movs	r0, #0
 8008f66:	e7f7      	b.n	8008f58 <__swsetup_r+0x98>
 8008f68:	20000018 	.word	0x20000018

08008f6c <_fseeko_r>:
 8008f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f70:	460c      	mov	r4, r1
 8008f72:	4690      	mov	r8, r2
 8008f74:	461e      	mov	r6, r3
 8008f76:	4605      	mov	r5, r0
 8008f78:	b118      	cbz	r0, 8008f82 <_fseeko_r+0x16>
 8008f7a:	6a03      	ldr	r3, [r0, #32]
 8008f7c:	b90b      	cbnz	r3, 8008f82 <_fseeko_r+0x16>
 8008f7e:	f7ff fdd3 	bl	8008b28 <__sinit>
 8008f82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f84:	07d9      	lsls	r1, r3, #31
 8008f86:	d405      	bmi.n	8008f94 <_fseeko_r+0x28>
 8008f88:	89a3      	ldrh	r3, [r4, #12]
 8008f8a:	059a      	lsls	r2, r3, #22
 8008f8c:	d402      	bmi.n	8008f94 <_fseeko_r+0x28>
 8008f8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f90:	f000 f924 	bl	80091dc <__retarget_lock_acquire_recursive>
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	f403 7384 	and.w	r3, r3, #264	@ 0x108
 8008f9a:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8008f9e:	d103      	bne.n	8008fa8 <_fseeko_r+0x3c>
 8008fa0:	4621      	mov	r1, r4
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f7ff fcba 	bl	800891c <_fflush_r>
 8008fa8:	f8d4 902c 	ldr.w	r9, [r4, #44]	@ 0x2c
 8008fac:	f1b9 0f00 	cmp.w	r9, #0
 8008fb0:	d102      	bne.n	8008fb8 <_fseeko_r+0x4c>
 8008fb2:	231d      	movs	r3, #29
 8008fb4:	602b      	str	r3, [r5, #0]
 8008fb6:	e058      	b.n	800906a <_fseeko_r+0xfe>
 8008fb8:	2e01      	cmp	r6, #1
 8008fba:	d03a      	beq.n	8009032 <_fseeko_r+0xc6>
 8008fbc:	f036 0302 	bics.w	r3, r6, #2
 8008fc0:	d162      	bne.n	8009088 <_fseeko_r+0x11c>
 8008fc2:	6923      	ldr	r3, [r4, #16]
 8008fc4:	b91b      	cbnz	r3, 8008fce <_fseeko_r+0x62>
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4628      	mov	r0, r5
 8008fca:	f001 fecd 	bl	800ad68 <__smakebuf_r>
 8008fce:	4621      	mov	r1, r4
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f7ff fca3 	bl	800891c <_fflush_r>
 8008fd6:	4607      	mov	r7, r0
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d146      	bne.n	800906a <_fseeko_r+0xfe>
 8008fdc:	6a21      	ldr	r1, [r4, #32]
 8008fde:	4633      	mov	r3, r6
 8008fe0:	4642      	mov	r2, r8
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	47c8      	blx	r9
 8008fe6:	3001      	adds	r0, #1
 8008fe8:	d03f      	beq.n	800906a <_fseeko_r+0xfe>
 8008fea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fec:	b141      	cbz	r1, 8009000 <_fseeko_r+0x94>
 8008fee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ff2:	4299      	cmp	r1, r3
 8008ff4:	d002      	beq.n	8008ffc <_fseeko_r+0x90>
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f000 ff3e 	bl	8009e78 <_free_r>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	6363      	str	r3, [r4, #52]	@ 0x34
 8009000:	6923      	ldr	r3, [r4, #16]
 8009002:	6023      	str	r3, [r4, #0]
 8009004:	89a3      	ldrh	r3, [r4, #12]
 8009006:	2100      	movs	r1, #0
 8009008:	f423 6302 	bic.w	r3, r3, #2080	@ 0x820
 800900c:	81a3      	strh	r3, [r4, #12]
 800900e:	2208      	movs	r2, #8
 8009010:	6061      	str	r1, [r4, #4]
 8009012:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8009016:	f000 f840 	bl	800909a <memset>
 800901a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800901c:	07da      	lsls	r2, r3, #31
 800901e:	d405      	bmi.n	800902c <_fseeko_r+0xc0>
 8009020:	89a3      	ldrh	r3, [r4, #12]
 8009022:	059b      	lsls	r3, r3, #22
 8009024:	d402      	bmi.n	800902c <_fseeko_r+0xc0>
 8009026:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009028:	f000 f8d9 	bl	80091de <__retarget_lock_release_recursive>
 800902c:	4638      	mov	r0, r7
 800902e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009032:	4621      	mov	r1, r4
 8009034:	4628      	mov	r0, r5
 8009036:	f7ff fc71 	bl	800891c <_fflush_r>
 800903a:	89a2      	ldrh	r2, [r4, #12]
 800903c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009040:	d00d      	beq.n	800905e <_fseeko_r+0xf2>
 8009042:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8009044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009048:	075f      	lsls	r7, r3, #29
 800904a:	d514      	bpl.n	8009076 <_fseeko_r+0x10a>
 800904c:	6863      	ldr	r3, [r4, #4]
 800904e:	1ac0      	subs	r0, r0, r3
 8009050:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009052:	b10b      	cbz	r3, 8009058 <_fseeko_r+0xec>
 8009054:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009056:	1ac0      	subs	r0, r0, r3
 8009058:	4480      	add	r8, r0
 800905a:	2600      	movs	r6, #0
 800905c:	e7b1      	b.n	8008fc2 <_fseeko_r+0x56>
 800905e:	4633      	mov	r3, r6
 8009060:	6a21      	ldr	r1, [r4, #32]
 8009062:	4628      	mov	r0, r5
 8009064:	47c8      	blx	r9
 8009066:	1c43      	adds	r3, r0, #1
 8009068:	d1ec      	bne.n	8009044 <_fseeko_r+0xd8>
 800906a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800906c:	07d8      	lsls	r0, r3, #31
 800906e:	d50d      	bpl.n	800908c <_fseeko_r+0x120>
 8009070:	f04f 37ff 	mov.w	r7, #4294967295
 8009074:	e7da      	b.n	800902c <_fseeko_r+0xc0>
 8009076:	071e      	lsls	r6, r3, #28
 8009078:	d5ee      	bpl.n	8009058 <_fseeko_r+0xec>
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d0eb      	beq.n	8009058 <_fseeko_r+0xec>
 8009080:	6922      	ldr	r2, [r4, #16]
 8009082:	1a9b      	subs	r3, r3, r2
 8009084:	4418      	add	r0, r3
 8009086:	e7e7      	b.n	8009058 <_fseeko_r+0xec>
 8009088:	2316      	movs	r3, #22
 800908a:	e793      	b.n	8008fb4 <_fseeko_r+0x48>
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	0599      	lsls	r1, r3, #22
 8009090:	d4ee      	bmi.n	8009070 <_fseeko_r+0x104>
 8009092:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009094:	f000 f8a3 	bl	80091de <__retarget_lock_release_recursive>
 8009098:	e7ea      	b.n	8009070 <_fseeko_r+0x104>

0800909a <memset>:
 800909a:	4402      	add	r2, r0
 800909c:	4603      	mov	r3, r0
 800909e:	4293      	cmp	r3, r2
 80090a0:	d100      	bne.n	80090a4 <memset+0xa>
 80090a2:	4770      	bx	lr
 80090a4:	f803 1b01 	strb.w	r1, [r3], #1
 80090a8:	e7f9      	b.n	800909e <memset+0x4>
	...

080090ac <_localeconv_r>:
 80090ac:	4800      	ldr	r0, [pc, #0]	@ (80090b0 <_localeconv_r+0x4>)
 80090ae:	4770      	bx	lr
 80090b0:	20000158 	.word	0x20000158

080090b4 <_close_r>:
 80090b4:	b538      	push	{r3, r4, r5, lr}
 80090b6:	4d06      	ldr	r5, [pc, #24]	@ (80090d0 <_close_r+0x1c>)
 80090b8:	2300      	movs	r3, #0
 80090ba:	4604      	mov	r4, r0
 80090bc:	4608      	mov	r0, r1
 80090be:	602b      	str	r3, [r5, #0]
 80090c0:	f002 f8b6 	bl	800b230 <_close>
 80090c4:	1c43      	adds	r3, r0, #1
 80090c6:	d102      	bne.n	80090ce <_close_r+0x1a>
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	b103      	cbz	r3, 80090ce <_close_r+0x1a>
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	bd38      	pop	{r3, r4, r5, pc}
 80090d0:	20003520 	.word	0x20003520

080090d4 <_lseek_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	4d07      	ldr	r5, [pc, #28]	@ (80090f4 <_lseek_r+0x20>)
 80090d8:	4604      	mov	r4, r0
 80090da:	4608      	mov	r0, r1
 80090dc:	4611      	mov	r1, r2
 80090de:	2200      	movs	r2, #0
 80090e0:	602a      	str	r2, [r5, #0]
 80090e2:	461a      	mov	r2, r3
 80090e4:	f002 f865 	bl	800b1b2 <_lseek>
 80090e8:	1c43      	adds	r3, r0, #1
 80090ea:	d102      	bne.n	80090f2 <_lseek_r+0x1e>
 80090ec:	682b      	ldr	r3, [r5, #0]
 80090ee:	b103      	cbz	r3, 80090f2 <_lseek_r+0x1e>
 80090f0:	6023      	str	r3, [r4, #0]
 80090f2:	bd38      	pop	{r3, r4, r5, pc}
 80090f4:	20003520 	.word	0x20003520

080090f8 <_open_r>:
 80090f8:	b538      	push	{r3, r4, r5, lr}
 80090fa:	4d07      	ldr	r5, [pc, #28]	@ (8009118 <_open_r+0x20>)
 80090fc:	4604      	mov	r4, r0
 80090fe:	4608      	mov	r0, r1
 8009100:	4611      	mov	r1, r2
 8009102:	2200      	movs	r2, #0
 8009104:	602a      	str	r2, [r5, #0]
 8009106:	461a      	mov	r2, r3
 8009108:	f002 f95a 	bl	800b3c0 <_open>
 800910c:	1c43      	adds	r3, r0, #1
 800910e:	d102      	bne.n	8009116 <_open_r+0x1e>
 8009110:	682b      	ldr	r3, [r5, #0]
 8009112:	b103      	cbz	r3, 8009116 <_open_r+0x1e>
 8009114:	6023      	str	r3, [r4, #0]
 8009116:	bd38      	pop	{r3, r4, r5, pc}
 8009118:	20003520 	.word	0x20003520

0800911c <_read_r>:
 800911c:	b538      	push	{r3, r4, r5, lr}
 800911e:	4d07      	ldr	r5, [pc, #28]	@ (800913c <_read_r+0x20>)
 8009120:	4604      	mov	r4, r0
 8009122:	4608      	mov	r0, r1
 8009124:	4611      	mov	r1, r2
 8009126:	2200      	movs	r2, #0
 8009128:	602a      	str	r2, [r5, #0]
 800912a:	461a      	mov	r2, r3
 800912c:	f001 ffeb 	bl	800b106 <_read>
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	d102      	bne.n	800913a <_read_r+0x1e>
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	b103      	cbz	r3, 800913a <_read_r+0x1e>
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	bd38      	pop	{r3, r4, r5, pc}
 800913c:	20003520 	.word	0x20003520

08009140 <_unlink_r>:
 8009140:	b538      	push	{r3, r4, r5, lr}
 8009142:	4d06      	ldr	r5, [pc, #24]	@ (800915c <_unlink_r+0x1c>)
 8009144:	2300      	movs	r3, #0
 8009146:	4604      	mov	r4, r0
 8009148:	4608      	mov	r0, r1
 800914a:	602b      	str	r3, [r5, #0]
 800914c:	f002 fa2e 	bl	800b5ac <_unlink>
 8009150:	1c43      	adds	r3, r0, #1
 8009152:	d102      	bne.n	800915a <_unlink_r+0x1a>
 8009154:	682b      	ldr	r3, [r5, #0]
 8009156:	b103      	cbz	r3, 800915a <_unlink_r+0x1a>
 8009158:	6023      	str	r3, [r4, #0]
 800915a:	bd38      	pop	{r3, r4, r5, pc}
 800915c:	20003520 	.word	0x20003520

08009160 <_write_r>:
 8009160:	b538      	push	{r3, r4, r5, lr}
 8009162:	4d07      	ldr	r5, [pc, #28]	@ (8009180 <_write_r+0x20>)
 8009164:	4604      	mov	r4, r0
 8009166:	4608      	mov	r0, r1
 8009168:	4611      	mov	r1, r2
 800916a:	2200      	movs	r2, #0
 800916c:	602a      	str	r2, [r5, #0]
 800916e:	461a      	mov	r2, r3
 8009170:	f002 f831 	bl	800b1d6 <_write>
 8009174:	1c43      	adds	r3, r0, #1
 8009176:	d102      	bne.n	800917e <_write_r+0x1e>
 8009178:	682b      	ldr	r3, [r5, #0]
 800917a:	b103      	cbz	r3, 800917e <_write_r+0x1e>
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	bd38      	pop	{r3, r4, r5, pc}
 8009180:	20003520 	.word	0x20003520

08009184 <__errno>:
 8009184:	4b01      	ldr	r3, [pc, #4]	@ (800918c <__errno+0x8>)
 8009186:	6818      	ldr	r0, [r3, #0]
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	20000018 	.word	0x20000018

08009190 <__libc_init_array>:
 8009190:	b570      	push	{r4, r5, r6, lr}
 8009192:	4d0d      	ldr	r5, [pc, #52]	@ (80091c8 <__libc_init_array+0x38>)
 8009194:	4c0d      	ldr	r4, [pc, #52]	@ (80091cc <__libc_init_array+0x3c>)
 8009196:	1b64      	subs	r4, r4, r5
 8009198:	10a4      	asrs	r4, r4, #2
 800919a:	2600      	movs	r6, #0
 800919c:	42a6      	cmp	r6, r4
 800919e:	d109      	bne.n	80091b4 <__libc_init_array+0x24>
 80091a0:	4d0b      	ldr	r5, [pc, #44]	@ (80091d0 <__libc_init_array+0x40>)
 80091a2:	4c0c      	ldr	r4, [pc, #48]	@ (80091d4 <__libc_init_array+0x44>)
 80091a4:	f002 fa56 	bl	800b654 <_init>
 80091a8:	1b64      	subs	r4, r4, r5
 80091aa:	10a4      	asrs	r4, r4, #2
 80091ac:	2600      	movs	r6, #0
 80091ae:	42a6      	cmp	r6, r4
 80091b0:	d105      	bne.n	80091be <__libc_init_array+0x2e>
 80091b2:	bd70      	pop	{r4, r5, r6, pc}
 80091b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091b8:	4798      	blx	r3
 80091ba:	3601      	adds	r6, #1
 80091bc:	e7ee      	b.n	800919c <__libc_init_array+0xc>
 80091be:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c2:	4798      	blx	r3
 80091c4:	3601      	adds	r6, #1
 80091c6:	e7f2      	b.n	80091ae <__libc_init_array+0x1e>
 80091c8:	08020fd4 	.word	0x08020fd4
 80091cc:	08020fd4 	.word	0x08020fd4
 80091d0:	08020fd4 	.word	0x08020fd4
 80091d4:	08020fd8 	.word	0x08020fd8

080091d8 <__retarget_lock_init_recursive>:
 80091d8:	4770      	bx	lr

080091da <__retarget_lock_close_recursive>:
 80091da:	4770      	bx	lr

080091dc <__retarget_lock_acquire_recursive>:
 80091dc:	4770      	bx	lr

080091de <__retarget_lock_release_recursive>:
 80091de:	4770      	bx	lr

080091e0 <quorem>:
 80091e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e4:	6903      	ldr	r3, [r0, #16]
 80091e6:	690c      	ldr	r4, [r1, #16]
 80091e8:	42a3      	cmp	r3, r4
 80091ea:	4607      	mov	r7, r0
 80091ec:	db7e      	blt.n	80092ec <quorem+0x10c>
 80091ee:	3c01      	subs	r4, #1
 80091f0:	f101 0814 	add.w	r8, r1, #20
 80091f4:	00a3      	lsls	r3, r4, #2
 80091f6:	f100 0514 	add.w	r5, r0, #20
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009200:	9301      	str	r3, [sp, #4]
 8009202:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009206:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800920a:	3301      	adds	r3, #1
 800920c:	429a      	cmp	r2, r3
 800920e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009212:	fbb2 f6f3 	udiv	r6, r2, r3
 8009216:	d32e      	bcc.n	8009276 <quorem+0x96>
 8009218:	f04f 0a00 	mov.w	sl, #0
 800921c:	46c4      	mov	ip, r8
 800921e:	46ae      	mov	lr, r5
 8009220:	46d3      	mov	fp, sl
 8009222:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009226:	b298      	uxth	r0, r3
 8009228:	fb06 a000 	mla	r0, r6, r0, sl
 800922c:	0c02      	lsrs	r2, r0, #16
 800922e:	0c1b      	lsrs	r3, r3, #16
 8009230:	fb06 2303 	mla	r3, r6, r3, r2
 8009234:	f8de 2000 	ldr.w	r2, [lr]
 8009238:	b280      	uxth	r0, r0
 800923a:	b292      	uxth	r2, r2
 800923c:	1a12      	subs	r2, r2, r0
 800923e:	445a      	add	r2, fp
 8009240:	f8de 0000 	ldr.w	r0, [lr]
 8009244:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009248:	b29b      	uxth	r3, r3
 800924a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800924e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009252:	b292      	uxth	r2, r2
 8009254:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009258:	45e1      	cmp	r9, ip
 800925a:	f84e 2b04 	str.w	r2, [lr], #4
 800925e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009262:	d2de      	bcs.n	8009222 <quorem+0x42>
 8009264:	9b00      	ldr	r3, [sp, #0]
 8009266:	58eb      	ldr	r3, [r5, r3]
 8009268:	b92b      	cbnz	r3, 8009276 <quorem+0x96>
 800926a:	9b01      	ldr	r3, [sp, #4]
 800926c:	3b04      	subs	r3, #4
 800926e:	429d      	cmp	r5, r3
 8009270:	461a      	mov	r2, r3
 8009272:	d32f      	bcc.n	80092d4 <quorem+0xf4>
 8009274:	613c      	str	r4, [r7, #16]
 8009276:	4638      	mov	r0, r7
 8009278:	f001 f978 	bl	800a56c <__mcmp>
 800927c:	2800      	cmp	r0, #0
 800927e:	db25      	blt.n	80092cc <quorem+0xec>
 8009280:	4629      	mov	r1, r5
 8009282:	2000      	movs	r0, #0
 8009284:	f858 2b04 	ldr.w	r2, [r8], #4
 8009288:	f8d1 c000 	ldr.w	ip, [r1]
 800928c:	fa1f fe82 	uxth.w	lr, r2
 8009290:	fa1f f38c 	uxth.w	r3, ip
 8009294:	eba3 030e 	sub.w	r3, r3, lr
 8009298:	4403      	add	r3, r0
 800929a:	0c12      	lsrs	r2, r2, #16
 800929c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80092a0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092aa:	45c1      	cmp	r9, r8
 80092ac:	f841 3b04 	str.w	r3, [r1], #4
 80092b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80092b4:	d2e6      	bcs.n	8009284 <quorem+0xa4>
 80092b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092be:	b922      	cbnz	r2, 80092ca <quorem+0xea>
 80092c0:	3b04      	subs	r3, #4
 80092c2:	429d      	cmp	r5, r3
 80092c4:	461a      	mov	r2, r3
 80092c6:	d30b      	bcc.n	80092e0 <quorem+0x100>
 80092c8:	613c      	str	r4, [r7, #16]
 80092ca:	3601      	adds	r6, #1
 80092cc:	4630      	mov	r0, r6
 80092ce:	b003      	add	sp, #12
 80092d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d4:	6812      	ldr	r2, [r2, #0]
 80092d6:	3b04      	subs	r3, #4
 80092d8:	2a00      	cmp	r2, #0
 80092da:	d1cb      	bne.n	8009274 <quorem+0x94>
 80092dc:	3c01      	subs	r4, #1
 80092de:	e7c6      	b.n	800926e <quorem+0x8e>
 80092e0:	6812      	ldr	r2, [r2, #0]
 80092e2:	3b04      	subs	r3, #4
 80092e4:	2a00      	cmp	r2, #0
 80092e6:	d1ef      	bne.n	80092c8 <quorem+0xe8>
 80092e8:	3c01      	subs	r4, #1
 80092ea:	e7ea      	b.n	80092c2 <quorem+0xe2>
 80092ec:	2000      	movs	r0, #0
 80092ee:	e7ee      	b.n	80092ce <quorem+0xee>

080092f0 <_dtoa_r>:
 80092f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f4:	69c7      	ldr	r7, [r0, #28]
 80092f6:	b099      	sub	sp, #100	@ 0x64
 80092f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80092fc:	ec55 4b10 	vmov	r4, r5, d0
 8009300:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009302:	9109      	str	r1, [sp, #36]	@ 0x24
 8009304:	4683      	mov	fp, r0
 8009306:	920e      	str	r2, [sp, #56]	@ 0x38
 8009308:	9313      	str	r3, [sp, #76]	@ 0x4c
 800930a:	b97f      	cbnz	r7, 800932c <_dtoa_r+0x3c>
 800930c:	2010      	movs	r0, #16
 800930e:	f000 fdfd 	bl	8009f0c <malloc>
 8009312:	4602      	mov	r2, r0
 8009314:	f8cb 001c 	str.w	r0, [fp, #28]
 8009318:	b920      	cbnz	r0, 8009324 <_dtoa_r+0x34>
 800931a:	4ba7      	ldr	r3, [pc, #668]	@ (80095b8 <_dtoa_r+0x2c8>)
 800931c:	21ef      	movs	r1, #239	@ 0xef
 800931e:	48a7      	ldr	r0, [pc, #668]	@ (80095bc <_dtoa_r+0x2cc>)
 8009320:	f001 fdb8 	bl	800ae94 <__assert_func>
 8009324:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009328:	6007      	str	r7, [r0, #0]
 800932a:	60c7      	str	r7, [r0, #12]
 800932c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009330:	6819      	ldr	r1, [r3, #0]
 8009332:	b159      	cbz	r1, 800934c <_dtoa_r+0x5c>
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	604a      	str	r2, [r1, #4]
 8009338:	2301      	movs	r3, #1
 800933a:	4093      	lsls	r3, r2
 800933c:	608b      	str	r3, [r1, #8]
 800933e:	4658      	mov	r0, fp
 8009340:	f000 feda 	bl	800a0f8 <_Bfree>
 8009344:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009348:	2200      	movs	r2, #0
 800934a:	601a      	str	r2, [r3, #0]
 800934c:	1e2b      	subs	r3, r5, #0
 800934e:	bfb9      	ittee	lt
 8009350:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009354:	9303      	strlt	r3, [sp, #12]
 8009356:	2300      	movge	r3, #0
 8009358:	6033      	strge	r3, [r6, #0]
 800935a:	9f03      	ldr	r7, [sp, #12]
 800935c:	4b98      	ldr	r3, [pc, #608]	@ (80095c0 <_dtoa_r+0x2d0>)
 800935e:	bfbc      	itt	lt
 8009360:	2201      	movlt	r2, #1
 8009362:	6032      	strlt	r2, [r6, #0]
 8009364:	43bb      	bics	r3, r7
 8009366:	d112      	bne.n	800938e <_dtoa_r+0x9e>
 8009368:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800936a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800936e:	6013      	str	r3, [r2, #0]
 8009370:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009374:	4323      	orrs	r3, r4
 8009376:	f000 854d 	beq.w	8009e14 <_dtoa_r+0xb24>
 800937a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800937c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80095d4 <_dtoa_r+0x2e4>
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 854f 	beq.w	8009e24 <_dtoa_r+0xb34>
 8009386:	f10a 0303 	add.w	r3, sl, #3
 800938a:	f000 bd49 	b.w	8009e20 <_dtoa_r+0xb30>
 800938e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009392:	2200      	movs	r2, #0
 8009394:	ec51 0b17 	vmov	r0, r1, d7
 8009398:	2300      	movs	r3, #0
 800939a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800939e:	f7f7 fbb3 	bl	8000b08 <__aeabi_dcmpeq>
 80093a2:	4680      	mov	r8, r0
 80093a4:	b158      	cbz	r0, 80093be <_dtoa_r+0xce>
 80093a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80093a8:	2301      	movs	r3, #1
 80093aa:	6013      	str	r3, [r2, #0]
 80093ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80093ae:	b113      	cbz	r3, 80093b6 <_dtoa_r+0xc6>
 80093b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80093b2:	4b84      	ldr	r3, [pc, #528]	@ (80095c4 <_dtoa_r+0x2d4>)
 80093b4:	6013      	str	r3, [r2, #0]
 80093b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80095d8 <_dtoa_r+0x2e8>
 80093ba:	f000 bd33 	b.w	8009e24 <_dtoa_r+0xb34>
 80093be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80093c2:	aa16      	add	r2, sp, #88	@ 0x58
 80093c4:	a917      	add	r1, sp, #92	@ 0x5c
 80093c6:	4658      	mov	r0, fp
 80093c8:	f001 f980 	bl	800a6cc <__d2b>
 80093cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80093d0:	4681      	mov	r9, r0
 80093d2:	2e00      	cmp	r6, #0
 80093d4:	d077      	beq.n	80094c6 <_dtoa_r+0x1d6>
 80093d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80093d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80093dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80093e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80093ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80093f0:	4619      	mov	r1, r3
 80093f2:	2200      	movs	r2, #0
 80093f4:	4b74      	ldr	r3, [pc, #464]	@ (80095c8 <_dtoa_r+0x2d8>)
 80093f6:	f7f6 ff67 	bl	80002c8 <__aeabi_dsub>
 80093fa:	a369      	add	r3, pc, #420	@ (adr r3, 80095a0 <_dtoa_r+0x2b0>)
 80093fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009400:	f7f7 f91a 	bl	8000638 <__aeabi_dmul>
 8009404:	a368      	add	r3, pc, #416	@ (adr r3, 80095a8 <_dtoa_r+0x2b8>)
 8009406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940a:	f7f6 ff5f 	bl	80002cc <__adddf3>
 800940e:	4604      	mov	r4, r0
 8009410:	4630      	mov	r0, r6
 8009412:	460d      	mov	r5, r1
 8009414:	f7f7 f8a6 	bl	8000564 <__aeabi_i2d>
 8009418:	a365      	add	r3, pc, #404	@ (adr r3, 80095b0 <_dtoa_r+0x2c0>)
 800941a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941e:	f7f7 f90b 	bl	8000638 <__aeabi_dmul>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	4620      	mov	r0, r4
 8009428:	4629      	mov	r1, r5
 800942a:	f7f6 ff4f 	bl	80002cc <__adddf3>
 800942e:	4604      	mov	r4, r0
 8009430:	460d      	mov	r5, r1
 8009432:	f7f7 fbb1 	bl	8000b98 <__aeabi_d2iz>
 8009436:	2200      	movs	r2, #0
 8009438:	4607      	mov	r7, r0
 800943a:	2300      	movs	r3, #0
 800943c:	4620      	mov	r0, r4
 800943e:	4629      	mov	r1, r5
 8009440:	f7f7 fb6c 	bl	8000b1c <__aeabi_dcmplt>
 8009444:	b140      	cbz	r0, 8009458 <_dtoa_r+0x168>
 8009446:	4638      	mov	r0, r7
 8009448:	f7f7 f88c 	bl	8000564 <__aeabi_i2d>
 800944c:	4622      	mov	r2, r4
 800944e:	462b      	mov	r3, r5
 8009450:	f7f7 fb5a 	bl	8000b08 <__aeabi_dcmpeq>
 8009454:	b900      	cbnz	r0, 8009458 <_dtoa_r+0x168>
 8009456:	3f01      	subs	r7, #1
 8009458:	2f16      	cmp	r7, #22
 800945a:	d851      	bhi.n	8009500 <_dtoa_r+0x210>
 800945c:	4b5b      	ldr	r3, [pc, #364]	@ (80095cc <_dtoa_r+0x2dc>)
 800945e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009466:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800946a:	f7f7 fb57 	bl	8000b1c <__aeabi_dcmplt>
 800946e:	2800      	cmp	r0, #0
 8009470:	d048      	beq.n	8009504 <_dtoa_r+0x214>
 8009472:	3f01      	subs	r7, #1
 8009474:	2300      	movs	r3, #0
 8009476:	9312      	str	r3, [sp, #72]	@ 0x48
 8009478:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800947a:	1b9b      	subs	r3, r3, r6
 800947c:	1e5a      	subs	r2, r3, #1
 800947e:	bf44      	itt	mi
 8009480:	f1c3 0801 	rsbmi	r8, r3, #1
 8009484:	2300      	movmi	r3, #0
 8009486:	9208      	str	r2, [sp, #32]
 8009488:	bf54      	ite	pl
 800948a:	f04f 0800 	movpl.w	r8, #0
 800948e:	9308      	strmi	r3, [sp, #32]
 8009490:	2f00      	cmp	r7, #0
 8009492:	db39      	blt.n	8009508 <_dtoa_r+0x218>
 8009494:	9b08      	ldr	r3, [sp, #32]
 8009496:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009498:	443b      	add	r3, r7
 800949a:	9308      	str	r3, [sp, #32]
 800949c:	2300      	movs	r3, #0
 800949e:	930a      	str	r3, [sp, #40]	@ 0x28
 80094a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094a2:	2b09      	cmp	r3, #9
 80094a4:	d864      	bhi.n	8009570 <_dtoa_r+0x280>
 80094a6:	2b05      	cmp	r3, #5
 80094a8:	bfc4      	itt	gt
 80094aa:	3b04      	subgt	r3, #4
 80094ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80094ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094b0:	f1a3 0302 	sub.w	r3, r3, #2
 80094b4:	bfcc      	ite	gt
 80094b6:	2400      	movgt	r4, #0
 80094b8:	2401      	movle	r4, #1
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d863      	bhi.n	8009586 <_dtoa_r+0x296>
 80094be:	e8df f003 	tbb	[pc, r3]
 80094c2:	372a      	.short	0x372a
 80094c4:	5535      	.short	0x5535
 80094c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80094ca:	441e      	add	r6, r3
 80094cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80094d0:	2b20      	cmp	r3, #32
 80094d2:	bfc1      	itttt	gt
 80094d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80094d8:	409f      	lslgt	r7, r3
 80094da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80094de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80094e2:	bfd6      	itet	le
 80094e4:	f1c3 0320 	rsble	r3, r3, #32
 80094e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80094ec:	fa04 f003 	lslle.w	r0, r4, r3
 80094f0:	f7f7 f828 	bl	8000544 <__aeabi_ui2d>
 80094f4:	2201      	movs	r2, #1
 80094f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80094fa:	3e01      	subs	r6, #1
 80094fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80094fe:	e777      	b.n	80093f0 <_dtoa_r+0x100>
 8009500:	2301      	movs	r3, #1
 8009502:	e7b8      	b.n	8009476 <_dtoa_r+0x186>
 8009504:	9012      	str	r0, [sp, #72]	@ 0x48
 8009506:	e7b7      	b.n	8009478 <_dtoa_r+0x188>
 8009508:	427b      	negs	r3, r7
 800950a:	930a      	str	r3, [sp, #40]	@ 0x28
 800950c:	2300      	movs	r3, #0
 800950e:	eba8 0807 	sub.w	r8, r8, r7
 8009512:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009514:	e7c4      	b.n	80094a0 <_dtoa_r+0x1b0>
 8009516:	2300      	movs	r3, #0
 8009518:	930b      	str	r3, [sp, #44]	@ 0x2c
 800951a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800951c:	2b00      	cmp	r3, #0
 800951e:	dc35      	bgt.n	800958c <_dtoa_r+0x29c>
 8009520:	2301      	movs	r3, #1
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	9307      	str	r3, [sp, #28]
 8009526:	461a      	mov	r2, r3
 8009528:	920e      	str	r2, [sp, #56]	@ 0x38
 800952a:	e00b      	b.n	8009544 <_dtoa_r+0x254>
 800952c:	2301      	movs	r3, #1
 800952e:	e7f3      	b.n	8009518 <_dtoa_r+0x228>
 8009530:	2300      	movs	r3, #0
 8009532:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009534:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009536:	18fb      	adds	r3, r7, r3
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	3301      	adds	r3, #1
 800953c:	2b01      	cmp	r3, #1
 800953e:	9307      	str	r3, [sp, #28]
 8009540:	bfb8      	it	lt
 8009542:	2301      	movlt	r3, #1
 8009544:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009548:	2100      	movs	r1, #0
 800954a:	2204      	movs	r2, #4
 800954c:	f102 0514 	add.w	r5, r2, #20
 8009550:	429d      	cmp	r5, r3
 8009552:	d91f      	bls.n	8009594 <_dtoa_r+0x2a4>
 8009554:	6041      	str	r1, [r0, #4]
 8009556:	4658      	mov	r0, fp
 8009558:	f000 fd8e 	bl	800a078 <_Balloc>
 800955c:	4682      	mov	sl, r0
 800955e:	2800      	cmp	r0, #0
 8009560:	d13c      	bne.n	80095dc <_dtoa_r+0x2ec>
 8009562:	4b1b      	ldr	r3, [pc, #108]	@ (80095d0 <_dtoa_r+0x2e0>)
 8009564:	4602      	mov	r2, r0
 8009566:	f240 11af 	movw	r1, #431	@ 0x1af
 800956a:	e6d8      	b.n	800931e <_dtoa_r+0x2e>
 800956c:	2301      	movs	r3, #1
 800956e:	e7e0      	b.n	8009532 <_dtoa_r+0x242>
 8009570:	2401      	movs	r4, #1
 8009572:	2300      	movs	r3, #0
 8009574:	9309      	str	r3, [sp, #36]	@ 0x24
 8009576:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009578:	f04f 33ff 	mov.w	r3, #4294967295
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	9307      	str	r3, [sp, #28]
 8009580:	2200      	movs	r2, #0
 8009582:	2312      	movs	r3, #18
 8009584:	e7d0      	b.n	8009528 <_dtoa_r+0x238>
 8009586:	2301      	movs	r3, #1
 8009588:	930b      	str	r3, [sp, #44]	@ 0x2c
 800958a:	e7f5      	b.n	8009578 <_dtoa_r+0x288>
 800958c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	9307      	str	r3, [sp, #28]
 8009592:	e7d7      	b.n	8009544 <_dtoa_r+0x254>
 8009594:	3101      	adds	r1, #1
 8009596:	0052      	lsls	r2, r2, #1
 8009598:	e7d8      	b.n	800954c <_dtoa_r+0x25c>
 800959a:	bf00      	nop
 800959c:	f3af 8000 	nop.w
 80095a0:	636f4361 	.word	0x636f4361
 80095a4:	3fd287a7 	.word	0x3fd287a7
 80095a8:	8b60c8b3 	.word	0x8b60c8b3
 80095ac:	3fc68a28 	.word	0x3fc68a28
 80095b0:	509f79fb 	.word	0x509f79fb
 80095b4:	3fd34413 	.word	0x3fd34413
 80095b8:	08020c81 	.word	0x08020c81
 80095bc:	08020c98 	.word	0x08020c98
 80095c0:	7ff00000 	.word	0x7ff00000
 80095c4:	08020c51 	.word	0x08020c51
 80095c8:	3ff80000 	.word	0x3ff80000
 80095cc:	08020d90 	.word	0x08020d90
 80095d0:	08020cf0 	.word	0x08020cf0
 80095d4:	08020c7d 	.word	0x08020c7d
 80095d8:	08020c50 	.word	0x08020c50
 80095dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80095e0:	6018      	str	r0, [r3, #0]
 80095e2:	9b07      	ldr	r3, [sp, #28]
 80095e4:	2b0e      	cmp	r3, #14
 80095e6:	f200 80a4 	bhi.w	8009732 <_dtoa_r+0x442>
 80095ea:	2c00      	cmp	r4, #0
 80095ec:	f000 80a1 	beq.w	8009732 <_dtoa_r+0x442>
 80095f0:	2f00      	cmp	r7, #0
 80095f2:	dd33      	ble.n	800965c <_dtoa_r+0x36c>
 80095f4:	4bad      	ldr	r3, [pc, #692]	@ (80098ac <_dtoa_r+0x5bc>)
 80095f6:	f007 020f 	and.w	r2, r7, #15
 80095fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095fe:	ed93 7b00 	vldr	d7, [r3]
 8009602:	05f8      	lsls	r0, r7, #23
 8009604:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009608:	ea4f 1427 	mov.w	r4, r7, asr #4
 800960c:	d516      	bpl.n	800963c <_dtoa_r+0x34c>
 800960e:	4ba8      	ldr	r3, [pc, #672]	@ (80098b0 <_dtoa_r+0x5c0>)
 8009610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009614:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009618:	f7f7 f938 	bl	800088c <__aeabi_ddiv>
 800961c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009620:	f004 040f 	and.w	r4, r4, #15
 8009624:	2603      	movs	r6, #3
 8009626:	4da2      	ldr	r5, [pc, #648]	@ (80098b0 <_dtoa_r+0x5c0>)
 8009628:	b954      	cbnz	r4, 8009640 <_dtoa_r+0x350>
 800962a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800962e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009632:	f7f7 f92b 	bl	800088c <__aeabi_ddiv>
 8009636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800963a:	e028      	b.n	800968e <_dtoa_r+0x39e>
 800963c:	2602      	movs	r6, #2
 800963e:	e7f2      	b.n	8009626 <_dtoa_r+0x336>
 8009640:	07e1      	lsls	r1, r4, #31
 8009642:	d508      	bpl.n	8009656 <_dtoa_r+0x366>
 8009644:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009648:	e9d5 2300 	ldrd	r2, r3, [r5]
 800964c:	f7f6 fff4 	bl	8000638 <__aeabi_dmul>
 8009650:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009654:	3601      	adds	r6, #1
 8009656:	1064      	asrs	r4, r4, #1
 8009658:	3508      	adds	r5, #8
 800965a:	e7e5      	b.n	8009628 <_dtoa_r+0x338>
 800965c:	f000 80d2 	beq.w	8009804 <_dtoa_r+0x514>
 8009660:	427c      	negs	r4, r7
 8009662:	4b92      	ldr	r3, [pc, #584]	@ (80098ac <_dtoa_r+0x5bc>)
 8009664:	4d92      	ldr	r5, [pc, #584]	@ (80098b0 <_dtoa_r+0x5c0>)
 8009666:	f004 020f 	and.w	r2, r4, #15
 800966a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800966e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009672:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009676:	f7f6 ffdf 	bl	8000638 <__aeabi_dmul>
 800967a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800967e:	1124      	asrs	r4, r4, #4
 8009680:	2300      	movs	r3, #0
 8009682:	2602      	movs	r6, #2
 8009684:	2c00      	cmp	r4, #0
 8009686:	f040 80b2 	bne.w	80097ee <_dtoa_r+0x4fe>
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1d3      	bne.n	8009636 <_dtoa_r+0x346>
 800968e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009690:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009694:	2b00      	cmp	r3, #0
 8009696:	f000 80b7 	beq.w	8009808 <_dtoa_r+0x518>
 800969a:	4b86      	ldr	r3, [pc, #536]	@ (80098b4 <_dtoa_r+0x5c4>)
 800969c:	2200      	movs	r2, #0
 800969e:	4620      	mov	r0, r4
 80096a0:	4629      	mov	r1, r5
 80096a2:	f7f7 fa3b 	bl	8000b1c <__aeabi_dcmplt>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	f000 80ae 	beq.w	8009808 <_dtoa_r+0x518>
 80096ac:	9b07      	ldr	r3, [sp, #28]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f000 80aa 	beq.w	8009808 <_dtoa_r+0x518>
 80096b4:	9b00      	ldr	r3, [sp, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	dd37      	ble.n	800972a <_dtoa_r+0x43a>
 80096ba:	1e7b      	subs	r3, r7, #1
 80096bc:	9304      	str	r3, [sp, #16]
 80096be:	4620      	mov	r0, r4
 80096c0:	4b7d      	ldr	r3, [pc, #500]	@ (80098b8 <_dtoa_r+0x5c8>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	4629      	mov	r1, r5
 80096c6:	f7f6 ffb7 	bl	8000638 <__aeabi_dmul>
 80096ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096ce:	9c00      	ldr	r4, [sp, #0]
 80096d0:	3601      	adds	r6, #1
 80096d2:	4630      	mov	r0, r6
 80096d4:	f7f6 ff46 	bl	8000564 <__aeabi_i2d>
 80096d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096dc:	f7f6 ffac 	bl	8000638 <__aeabi_dmul>
 80096e0:	4b76      	ldr	r3, [pc, #472]	@ (80098bc <_dtoa_r+0x5cc>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	f7f6 fdf2 	bl	80002cc <__adddf3>
 80096e8:	4605      	mov	r5, r0
 80096ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80096ee:	2c00      	cmp	r4, #0
 80096f0:	f040 808d 	bne.w	800980e <_dtoa_r+0x51e>
 80096f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096f8:	4b71      	ldr	r3, [pc, #452]	@ (80098c0 <_dtoa_r+0x5d0>)
 80096fa:	2200      	movs	r2, #0
 80096fc:	f7f6 fde4 	bl	80002c8 <__aeabi_dsub>
 8009700:	4602      	mov	r2, r0
 8009702:	460b      	mov	r3, r1
 8009704:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009708:	462a      	mov	r2, r5
 800970a:	4633      	mov	r3, r6
 800970c:	f7f7 fa24 	bl	8000b58 <__aeabi_dcmpgt>
 8009710:	2800      	cmp	r0, #0
 8009712:	f040 828b 	bne.w	8009c2c <_dtoa_r+0x93c>
 8009716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800971a:	462a      	mov	r2, r5
 800971c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009720:	f7f7 f9fc 	bl	8000b1c <__aeabi_dcmplt>
 8009724:	2800      	cmp	r0, #0
 8009726:	f040 8128 	bne.w	800997a <_dtoa_r+0x68a>
 800972a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800972e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009732:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009734:	2b00      	cmp	r3, #0
 8009736:	f2c0 815a 	blt.w	80099ee <_dtoa_r+0x6fe>
 800973a:	2f0e      	cmp	r7, #14
 800973c:	f300 8157 	bgt.w	80099ee <_dtoa_r+0x6fe>
 8009740:	4b5a      	ldr	r3, [pc, #360]	@ (80098ac <_dtoa_r+0x5bc>)
 8009742:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009746:	ed93 7b00 	vldr	d7, [r3]
 800974a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800974c:	2b00      	cmp	r3, #0
 800974e:	ed8d 7b00 	vstr	d7, [sp]
 8009752:	da03      	bge.n	800975c <_dtoa_r+0x46c>
 8009754:	9b07      	ldr	r3, [sp, #28]
 8009756:	2b00      	cmp	r3, #0
 8009758:	f340 8101 	ble.w	800995e <_dtoa_r+0x66e>
 800975c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009760:	4656      	mov	r6, sl
 8009762:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009766:	4620      	mov	r0, r4
 8009768:	4629      	mov	r1, r5
 800976a:	f7f7 f88f 	bl	800088c <__aeabi_ddiv>
 800976e:	f7f7 fa13 	bl	8000b98 <__aeabi_d2iz>
 8009772:	4680      	mov	r8, r0
 8009774:	f7f6 fef6 	bl	8000564 <__aeabi_i2d>
 8009778:	e9dd 2300 	ldrd	r2, r3, [sp]
 800977c:	f7f6 ff5c 	bl	8000638 <__aeabi_dmul>
 8009780:	4602      	mov	r2, r0
 8009782:	460b      	mov	r3, r1
 8009784:	4620      	mov	r0, r4
 8009786:	4629      	mov	r1, r5
 8009788:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800978c:	f7f6 fd9c 	bl	80002c8 <__aeabi_dsub>
 8009790:	f806 4b01 	strb.w	r4, [r6], #1
 8009794:	9d07      	ldr	r5, [sp, #28]
 8009796:	eba6 040a 	sub.w	r4, r6, sl
 800979a:	42a5      	cmp	r5, r4
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	f040 8117 	bne.w	80099d2 <_dtoa_r+0x6e2>
 80097a4:	f7f6 fd92 	bl	80002cc <__adddf3>
 80097a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097ac:	4604      	mov	r4, r0
 80097ae:	460d      	mov	r5, r1
 80097b0:	f7f7 f9d2 	bl	8000b58 <__aeabi_dcmpgt>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	f040 80f9 	bne.w	80099ac <_dtoa_r+0x6bc>
 80097ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097be:	4620      	mov	r0, r4
 80097c0:	4629      	mov	r1, r5
 80097c2:	f7f7 f9a1 	bl	8000b08 <__aeabi_dcmpeq>
 80097c6:	b118      	cbz	r0, 80097d0 <_dtoa_r+0x4e0>
 80097c8:	f018 0f01 	tst.w	r8, #1
 80097cc:	f040 80ee 	bne.w	80099ac <_dtoa_r+0x6bc>
 80097d0:	4649      	mov	r1, r9
 80097d2:	4658      	mov	r0, fp
 80097d4:	f000 fc90 	bl	800a0f8 <_Bfree>
 80097d8:	2300      	movs	r3, #0
 80097da:	7033      	strb	r3, [r6, #0]
 80097dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80097de:	3701      	adds	r7, #1
 80097e0:	601f      	str	r7, [r3, #0]
 80097e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f000 831d 	beq.w	8009e24 <_dtoa_r+0xb34>
 80097ea:	601e      	str	r6, [r3, #0]
 80097ec:	e31a      	b.n	8009e24 <_dtoa_r+0xb34>
 80097ee:	07e2      	lsls	r2, r4, #31
 80097f0:	d505      	bpl.n	80097fe <_dtoa_r+0x50e>
 80097f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097f6:	f7f6 ff1f 	bl	8000638 <__aeabi_dmul>
 80097fa:	3601      	adds	r6, #1
 80097fc:	2301      	movs	r3, #1
 80097fe:	1064      	asrs	r4, r4, #1
 8009800:	3508      	adds	r5, #8
 8009802:	e73f      	b.n	8009684 <_dtoa_r+0x394>
 8009804:	2602      	movs	r6, #2
 8009806:	e742      	b.n	800968e <_dtoa_r+0x39e>
 8009808:	9c07      	ldr	r4, [sp, #28]
 800980a:	9704      	str	r7, [sp, #16]
 800980c:	e761      	b.n	80096d2 <_dtoa_r+0x3e2>
 800980e:	4b27      	ldr	r3, [pc, #156]	@ (80098ac <_dtoa_r+0x5bc>)
 8009810:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009812:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009816:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800981a:	4454      	add	r4, sl
 800981c:	2900      	cmp	r1, #0
 800981e:	d053      	beq.n	80098c8 <_dtoa_r+0x5d8>
 8009820:	4928      	ldr	r1, [pc, #160]	@ (80098c4 <_dtoa_r+0x5d4>)
 8009822:	2000      	movs	r0, #0
 8009824:	f7f7 f832 	bl	800088c <__aeabi_ddiv>
 8009828:	4633      	mov	r3, r6
 800982a:	462a      	mov	r2, r5
 800982c:	f7f6 fd4c 	bl	80002c8 <__aeabi_dsub>
 8009830:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009834:	4656      	mov	r6, sl
 8009836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800983a:	f7f7 f9ad 	bl	8000b98 <__aeabi_d2iz>
 800983e:	4605      	mov	r5, r0
 8009840:	f7f6 fe90 	bl	8000564 <__aeabi_i2d>
 8009844:	4602      	mov	r2, r0
 8009846:	460b      	mov	r3, r1
 8009848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800984c:	f7f6 fd3c 	bl	80002c8 <__aeabi_dsub>
 8009850:	3530      	adds	r5, #48	@ 0x30
 8009852:	4602      	mov	r2, r0
 8009854:	460b      	mov	r3, r1
 8009856:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800985a:	f806 5b01 	strb.w	r5, [r6], #1
 800985e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009862:	f7f7 f95b 	bl	8000b1c <__aeabi_dcmplt>
 8009866:	2800      	cmp	r0, #0
 8009868:	d171      	bne.n	800994e <_dtoa_r+0x65e>
 800986a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800986e:	4911      	ldr	r1, [pc, #68]	@ (80098b4 <_dtoa_r+0x5c4>)
 8009870:	2000      	movs	r0, #0
 8009872:	f7f6 fd29 	bl	80002c8 <__aeabi_dsub>
 8009876:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800987a:	f7f7 f94f 	bl	8000b1c <__aeabi_dcmplt>
 800987e:	2800      	cmp	r0, #0
 8009880:	f040 8095 	bne.w	80099ae <_dtoa_r+0x6be>
 8009884:	42a6      	cmp	r6, r4
 8009886:	f43f af50 	beq.w	800972a <_dtoa_r+0x43a>
 800988a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800988e:	4b0a      	ldr	r3, [pc, #40]	@ (80098b8 <_dtoa_r+0x5c8>)
 8009890:	2200      	movs	r2, #0
 8009892:	f7f6 fed1 	bl	8000638 <__aeabi_dmul>
 8009896:	4b08      	ldr	r3, [pc, #32]	@ (80098b8 <_dtoa_r+0x5c8>)
 8009898:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800989c:	2200      	movs	r2, #0
 800989e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098a2:	f7f6 fec9 	bl	8000638 <__aeabi_dmul>
 80098a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098aa:	e7c4      	b.n	8009836 <_dtoa_r+0x546>
 80098ac:	08020d90 	.word	0x08020d90
 80098b0:	08020d68 	.word	0x08020d68
 80098b4:	3ff00000 	.word	0x3ff00000
 80098b8:	40240000 	.word	0x40240000
 80098bc:	401c0000 	.word	0x401c0000
 80098c0:	40140000 	.word	0x40140000
 80098c4:	3fe00000 	.word	0x3fe00000
 80098c8:	4631      	mov	r1, r6
 80098ca:	4628      	mov	r0, r5
 80098cc:	f7f6 feb4 	bl	8000638 <__aeabi_dmul>
 80098d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80098d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80098d6:	4656      	mov	r6, sl
 80098d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098dc:	f7f7 f95c 	bl	8000b98 <__aeabi_d2iz>
 80098e0:	4605      	mov	r5, r0
 80098e2:	f7f6 fe3f 	bl	8000564 <__aeabi_i2d>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098ee:	f7f6 fceb 	bl	80002c8 <__aeabi_dsub>
 80098f2:	3530      	adds	r5, #48	@ 0x30
 80098f4:	f806 5b01 	strb.w	r5, [r6], #1
 80098f8:	4602      	mov	r2, r0
 80098fa:	460b      	mov	r3, r1
 80098fc:	42a6      	cmp	r6, r4
 80098fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009902:	f04f 0200 	mov.w	r2, #0
 8009906:	d124      	bne.n	8009952 <_dtoa_r+0x662>
 8009908:	4bac      	ldr	r3, [pc, #688]	@ (8009bbc <_dtoa_r+0x8cc>)
 800990a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800990e:	f7f6 fcdd 	bl	80002cc <__adddf3>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800991a:	f7f7 f91d 	bl	8000b58 <__aeabi_dcmpgt>
 800991e:	2800      	cmp	r0, #0
 8009920:	d145      	bne.n	80099ae <_dtoa_r+0x6be>
 8009922:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009926:	49a5      	ldr	r1, [pc, #660]	@ (8009bbc <_dtoa_r+0x8cc>)
 8009928:	2000      	movs	r0, #0
 800992a:	f7f6 fccd 	bl	80002c8 <__aeabi_dsub>
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009936:	f7f7 f8f1 	bl	8000b1c <__aeabi_dcmplt>
 800993a:	2800      	cmp	r0, #0
 800993c:	f43f aef5 	beq.w	800972a <_dtoa_r+0x43a>
 8009940:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009942:	1e73      	subs	r3, r6, #1
 8009944:	9315      	str	r3, [sp, #84]	@ 0x54
 8009946:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800994a:	2b30      	cmp	r3, #48	@ 0x30
 800994c:	d0f8      	beq.n	8009940 <_dtoa_r+0x650>
 800994e:	9f04      	ldr	r7, [sp, #16]
 8009950:	e73e      	b.n	80097d0 <_dtoa_r+0x4e0>
 8009952:	4b9b      	ldr	r3, [pc, #620]	@ (8009bc0 <_dtoa_r+0x8d0>)
 8009954:	f7f6 fe70 	bl	8000638 <__aeabi_dmul>
 8009958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800995c:	e7bc      	b.n	80098d8 <_dtoa_r+0x5e8>
 800995e:	d10c      	bne.n	800997a <_dtoa_r+0x68a>
 8009960:	4b98      	ldr	r3, [pc, #608]	@ (8009bc4 <_dtoa_r+0x8d4>)
 8009962:	2200      	movs	r2, #0
 8009964:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009968:	f7f6 fe66 	bl	8000638 <__aeabi_dmul>
 800996c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009970:	f7f7 f8e8 	bl	8000b44 <__aeabi_dcmpge>
 8009974:	2800      	cmp	r0, #0
 8009976:	f000 8157 	beq.w	8009c28 <_dtoa_r+0x938>
 800997a:	2400      	movs	r4, #0
 800997c:	4625      	mov	r5, r4
 800997e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009980:	43db      	mvns	r3, r3
 8009982:	9304      	str	r3, [sp, #16]
 8009984:	4656      	mov	r6, sl
 8009986:	2700      	movs	r7, #0
 8009988:	4621      	mov	r1, r4
 800998a:	4658      	mov	r0, fp
 800998c:	f000 fbb4 	bl	800a0f8 <_Bfree>
 8009990:	2d00      	cmp	r5, #0
 8009992:	d0dc      	beq.n	800994e <_dtoa_r+0x65e>
 8009994:	b12f      	cbz	r7, 80099a2 <_dtoa_r+0x6b2>
 8009996:	42af      	cmp	r7, r5
 8009998:	d003      	beq.n	80099a2 <_dtoa_r+0x6b2>
 800999a:	4639      	mov	r1, r7
 800999c:	4658      	mov	r0, fp
 800999e:	f000 fbab 	bl	800a0f8 <_Bfree>
 80099a2:	4629      	mov	r1, r5
 80099a4:	4658      	mov	r0, fp
 80099a6:	f000 fba7 	bl	800a0f8 <_Bfree>
 80099aa:	e7d0      	b.n	800994e <_dtoa_r+0x65e>
 80099ac:	9704      	str	r7, [sp, #16]
 80099ae:	4633      	mov	r3, r6
 80099b0:	461e      	mov	r6, r3
 80099b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099b6:	2a39      	cmp	r2, #57	@ 0x39
 80099b8:	d107      	bne.n	80099ca <_dtoa_r+0x6da>
 80099ba:	459a      	cmp	sl, r3
 80099bc:	d1f8      	bne.n	80099b0 <_dtoa_r+0x6c0>
 80099be:	9a04      	ldr	r2, [sp, #16]
 80099c0:	3201      	adds	r2, #1
 80099c2:	9204      	str	r2, [sp, #16]
 80099c4:	2230      	movs	r2, #48	@ 0x30
 80099c6:	f88a 2000 	strb.w	r2, [sl]
 80099ca:	781a      	ldrb	r2, [r3, #0]
 80099cc:	3201      	adds	r2, #1
 80099ce:	701a      	strb	r2, [r3, #0]
 80099d0:	e7bd      	b.n	800994e <_dtoa_r+0x65e>
 80099d2:	4b7b      	ldr	r3, [pc, #492]	@ (8009bc0 <_dtoa_r+0x8d0>)
 80099d4:	2200      	movs	r2, #0
 80099d6:	f7f6 fe2f 	bl	8000638 <__aeabi_dmul>
 80099da:	2200      	movs	r2, #0
 80099dc:	2300      	movs	r3, #0
 80099de:	4604      	mov	r4, r0
 80099e0:	460d      	mov	r5, r1
 80099e2:	f7f7 f891 	bl	8000b08 <__aeabi_dcmpeq>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	f43f aebb 	beq.w	8009762 <_dtoa_r+0x472>
 80099ec:	e6f0      	b.n	80097d0 <_dtoa_r+0x4e0>
 80099ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80099f0:	2a00      	cmp	r2, #0
 80099f2:	f000 80db 	beq.w	8009bac <_dtoa_r+0x8bc>
 80099f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099f8:	2a01      	cmp	r2, #1
 80099fa:	f300 80bf 	bgt.w	8009b7c <_dtoa_r+0x88c>
 80099fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009a00:	2a00      	cmp	r2, #0
 8009a02:	f000 80b7 	beq.w	8009b74 <_dtoa_r+0x884>
 8009a06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009a0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a0c:	4646      	mov	r6, r8
 8009a0e:	9a08      	ldr	r2, [sp, #32]
 8009a10:	2101      	movs	r1, #1
 8009a12:	441a      	add	r2, r3
 8009a14:	4658      	mov	r0, fp
 8009a16:	4498      	add	r8, r3
 8009a18:	9208      	str	r2, [sp, #32]
 8009a1a:	f000 fc21 	bl	800a260 <__i2b>
 8009a1e:	4605      	mov	r5, r0
 8009a20:	b15e      	cbz	r6, 8009a3a <_dtoa_r+0x74a>
 8009a22:	9b08      	ldr	r3, [sp, #32]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	dd08      	ble.n	8009a3a <_dtoa_r+0x74a>
 8009a28:	42b3      	cmp	r3, r6
 8009a2a:	9a08      	ldr	r2, [sp, #32]
 8009a2c:	bfa8      	it	ge
 8009a2e:	4633      	movge	r3, r6
 8009a30:	eba8 0803 	sub.w	r8, r8, r3
 8009a34:	1af6      	subs	r6, r6, r3
 8009a36:	1ad3      	subs	r3, r2, r3
 8009a38:	9308      	str	r3, [sp, #32]
 8009a3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a3c:	b1f3      	cbz	r3, 8009a7c <_dtoa_r+0x78c>
 8009a3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f000 80b7 	beq.w	8009bb4 <_dtoa_r+0x8c4>
 8009a46:	b18c      	cbz	r4, 8009a6c <_dtoa_r+0x77c>
 8009a48:	4629      	mov	r1, r5
 8009a4a:	4622      	mov	r2, r4
 8009a4c:	4658      	mov	r0, fp
 8009a4e:	f000 fcc7 	bl	800a3e0 <__pow5mult>
 8009a52:	464a      	mov	r2, r9
 8009a54:	4601      	mov	r1, r0
 8009a56:	4605      	mov	r5, r0
 8009a58:	4658      	mov	r0, fp
 8009a5a:	f000 fc17 	bl	800a28c <__multiply>
 8009a5e:	4649      	mov	r1, r9
 8009a60:	9004      	str	r0, [sp, #16]
 8009a62:	4658      	mov	r0, fp
 8009a64:	f000 fb48 	bl	800a0f8 <_Bfree>
 8009a68:	9b04      	ldr	r3, [sp, #16]
 8009a6a:	4699      	mov	r9, r3
 8009a6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a6e:	1b1a      	subs	r2, r3, r4
 8009a70:	d004      	beq.n	8009a7c <_dtoa_r+0x78c>
 8009a72:	4649      	mov	r1, r9
 8009a74:	4658      	mov	r0, fp
 8009a76:	f000 fcb3 	bl	800a3e0 <__pow5mult>
 8009a7a:	4681      	mov	r9, r0
 8009a7c:	2101      	movs	r1, #1
 8009a7e:	4658      	mov	r0, fp
 8009a80:	f000 fbee 	bl	800a260 <__i2b>
 8009a84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a86:	4604      	mov	r4, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 81cf 	beq.w	8009e2c <_dtoa_r+0xb3c>
 8009a8e:	461a      	mov	r2, r3
 8009a90:	4601      	mov	r1, r0
 8009a92:	4658      	mov	r0, fp
 8009a94:	f000 fca4 	bl	800a3e0 <__pow5mult>
 8009a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	f300 8095 	bgt.w	8009bcc <_dtoa_r+0x8dc>
 8009aa2:	9b02      	ldr	r3, [sp, #8]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f040 8087 	bne.w	8009bb8 <_dtoa_r+0x8c8>
 8009aaa:	9b03      	ldr	r3, [sp, #12]
 8009aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f040 8089 	bne.w	8009bc8 <_dtoa_r+0x8d8>
 8009ab6:	9b03      	ldr	r3, [sp, #12]
 8009ab8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009abc:	0d1b      	lsrs	r3, r3, #20
 8009abe:	051b      	lsls	r3, r3, #20
 8009ac0:	b12b      	cbz	r3, 8009ace <_dtoa_r+0x7de>
 8009ac2:	9b08      	ldr	r3, [sp, #32]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	9308      	str	r3, [sp, #32]
 8009ac8:	f108 0801 	add.w	r8, r8, #1
 8009acc:	2301      	movs	r3, #1
 8009ace:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f000 81b0 	beq.w	8009e38 <_dtoa_r+0xb48>
 8009ad8:	6923      	ldr	r3, [r4, #16]
 8009ada:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ade:	6918      	ldr	r0, [r3, #16]
 8009ae0:	f000 fb72 	bl	800a1c8 <__hi0bits>
 8009ae4:	f1c0 0020 	rsb	r0, r0, #32
 8009ae8:	9b08      	ldr	r3, [sp, #32]
 8009aea:	4418      	add	r0, r3
 8009aec:	f010 001f 	ands.w	r0, r0, #31
 8009af0:	d077      	beq.n	8009be2 <_dtoa_r+0x8f2>
 8009af2:	f1c0 0320 	rsb	r3, r0, #32
 8009af6:	2b04      	cmp	r3, #4
 8009af8:	dd6b      	ble.n	8009bd2 <_dtoa_r+0x8e2>
 8009afa:	9b08      	ldr	r3, [sp, #32]
 8009afc:	f1c0 001c 	rsb	r0, r0, #28
 8009b00:	4403      	add	r3, r0
 8009b02:	4480      	add	r8, r0
 8009b04:	4406      	add	r6, r0
 8009b06:	9308      	str	r3, [sp, #32]
 8009b08:	f1b8 0f00 	cmp.w	r8, #0
 8009b0c:	dd05      	ble.n	8009b1a <_dtoa_r+0x82a>
 8009b0e:	4649      	mov	r1, r9
 8009b10:	4642      	mov	r2, r8
 8009b12:	4658      	mov	r0, fp
 8009b14:	f000 fcbe 	bl	800a494 <__lshift>
 8009b18:	4681      	mov	r9, r0
 8009b1a:	9b08      	ldr	r3, [sp, #32]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	dd05      	ble.n	8009b2c <_dtoa_r+0x83c>
 8009b20:	4621      	mov	r1, r4
 8009b22:	461a      	mov	r2, r3
 8009b24:	4658      	mov	r0, fp
 8009b26:	f000 fcb5 	bl	800a494 <__lshift>
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d059      	beq.n	8009be6 <_dtoa_r+0x8f6>
 8009b32:	4621      	mov	r1, r4
 8009b34:	4648      	mov	r0, r9
 8009b36:	f000 fd19 	bl	800a56c <__mcmp>
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	da53      	bge.n	8009be6 <_dtoa_r+0x8f6>
 8009b3e:	1e7b      	subs	r3, r7, #1
 8009b40:	9304      	str	r3, [sp, #16]
 8009b42:	4649      	mov	r1, r9
 8009b44:	2300      	movs	r3, #0
 8009b46:	220a      	movs	r2, #10
 8009b48:	4658      	mov	r0, fp
 8009b4a:	f000 faf7 	bl	800a13c <__multadd>
 8009b4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b50:	4681      	mov	r9, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f000 8172 	beq.w	8009e3c <_dtoa_r+0xb4c>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	220a      	movs	r2, #10
 8009b5e:	4658      	mov	r0, fp
 8009b60:	f000 faec 	bl	800a13c <__multadd>
 8009b64:	9b00      	ldr	r3, [sp, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	4605      	mov	r5, r0
 8009b6a:	dc67      	bgt.n	8009c3c <_dtoa_r+0x94c>
 8009b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	dc41      	bgt.n	8009bf6 <_dtoa_r+0x906>
 8009b72:	e063      	b.n	8009c3c <_dtoa_r+0x94c>
 8009b74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009b7a:	e746      	b.n	8009a0a <_dtoa_r+0x71a>
 8009b7c:	9b07      	ldr	r3, [sp, #28]
 8009b7e:	1e5c      	subs	r4, r3, #1
 8009b80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b82:	42a3      	cmp	r3, r4
 8009b84:	bfbf      	itttt	lt
 8009b86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009b88:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009b8a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009b8c:	1ae3      	sublt	r3, r4, r3
 8009b8e:	bfb4      	ite	lt
 8009b90:	18d2      	addlt	r2, r2, r3
 8009b92:	1b1c      	subge	r4, r3, r4
 8009b94:	9b07      	ldr	r3, [sp, #28]
 8009b96:	bfbc      	itt	lt
 8009b98:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009b9a:	2400      	movlt	r4, #0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	bfb5      	itete	lt
 8009ba0:	eba8 0603 	sublt.w	r6, r8, r3
 8009ba4:	9b07      	ldrge	r3, [sp, #28]
 8009ba6:	2300      	movlt	r3, #0
 8009ba8:	4646      	movge	r6, r8
 8009baa:	e730      	b.n	8009a0e <_dtoa_r+0x71e>
 8009bac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009bae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009bb0:	4646      	mov	r6, r8
 8009bb2:	e735      	b.n	8009a20 <_dtoa_r+0x730>
 8009bb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009bb6:	e75c      	b.n	8009a72 <_dtoa_r+0x782>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	e788      	b.n	8009ace <_dtoa_r+0x7de>
 8009bbc:	3fe00000 	.word	0x3fe00000
 8009bc0:	40240000 	.word	0x40240000
 8009bc4:	40140000 	.word	0x40140000
 8009bc8:	9b02      	ldr	r3, [sp, #8]
 8009bca:	e780      	b.n	8009ace <_dtoa_r+0x7de>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bd0:	e782      	b.n	8009ad8 <_dtoa_r+0x7e8>
 8009bd2:	d099      	beq.n	8009b08 <_dtoa_r+0x818>
 8009bd4:	9a08      	ldr	r2, [sp, #32]
 8009bd6:	331c      	adds	r3, #28
 8009bd8:	441a      	add	r2, r3
 8009bda:	4498      	add	r8, r3
 8009bdc:	441e      	add	r6, r3
 8009bde:	9208      	str	r2, [sp, #32]
 8009be0:	e792      	b.n	8009b08 <_dtoa_r+0x818>
 8009be2:	4603      	mov	r3, r0
 8009be4:	e7f6      	b.n	8009bd4 <_dtoa_r+0x8e4>
 8009be6:	9b07      	ldr	r3, [sp, #28]
 8009be8:	9704      	str	r7, [sp, #16]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	dc20      	bgt.n	8009c30 <_dtoa_r+0x940>
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	dd1e      	ble.n	8009c34 <_dtoa_r+0x944>
 8009bf6:	9b00      	ldr	r3, [sp, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f47f aec0 	bne.w	800997e <_dtoa_r+0x68e>
 8009bfe:	4621      	mov	r1, r4
 8009c00:	2205      	movs	r2, #5
 8009c02:	4658      	mov	r0, fp
 8009c04:	f000 fa9a 	bl	800a13c <__multadd>
 8009c08:	4601      	mov	r1, r0
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	4648      	mov	r0, r9
 8009c0e:	f000 fcad 	bl	800a56c <__mcmp>
 8009c12:	2800      	cmp	r0, #0
 8009c14:	f77f aeb3 	ble.w	800997e <_dtoa_r+0x68e>
 8009c18:	4656      	mov	r6, sl
 8009c1a:	2331      	movs	r3, #49	@ 0x31
 8009c1c:	f806 3b01 	strb.w	r3, [r6], #1
 8009c20:	9b04      	ldr	r3, [sp, #16]
 8009c22:	3301      	adds	r3, #1
 8009c24:	9304      	str	r3, [sp, #16]
 8009c26:	e6ae      	b.n	8009986 <_dtoa_r+0x696>
 8009c28:	9c07      	ldr	r4, [sp, #28]
 8009c2a:	9704      	str	r7, [sp, #16]
 8009c2c:	4625      	mov	r5, r4
 8009c2e:	e7f3      	b.n	8009c18 <_dtoa_r+0x928>
 8009c30:	9b07      	ldr	r3, [sp, #28]
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f000 8104 	beq.w	8009e44 <_dtoa_r+0xb54>
 8009c3c:	2e00      	cmp	r6, #0
 8009c3e:	dd05      	ble.n	8009c4c <_dtoa_r+0x95c>
 8009c40:	4629      	mov	r1, r5
 8009c42:	4632      	mov	r2, r6
 8009c44:	4658      	mov	r0, fp
 8009c46:	f000 fc25 	bl	800a494 <__lshift>
 8009c4a:	4605      	mov	r5, r0
 8009c4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d05a      	beq.n	8009d08 <_dtoa_r+0xa18>
 8009c52:	6869      	ldr	r1, [r5, #4]
 8009c54:	4658      	mov	r0, fp
 8009c56:	f000 fa0f 	bl	800a078 <_Balloc>
 8009c5a:	4606      	mov	r6, r0
 8009c5c:	b928      	cbnz	r0, 8009c6a <_dtoa_r+0x97a>
 8009c5e:	4b84      	ldr	r3, [pc, #528]	@ (8009e70 <_dtoa_r+0xb80>)
 8009c60:	4602      	mov	r2, r0
 8009c62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009c66:	f7ff bb5a 	b.w	800931e <_dtoa_r+0x2e>
 8009c6a:	692a      	ldr	r2, [r5, #16]
 8009c6c:	3202      	adds	r2, #2
 8009c6e:	0092      	lsls	r2, r2, #2
 8009c70:	f105 010c 	add.w	r1, r5, #12
 8009c74:	300c      	adds	r0, #12
 8009c76:	f001 f8ff 	bl	800ae78 <memcpy>
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	4631      	mov	r1, r6
 8009c7e:	4658      	mov	r0, fp
 8009c80:	f000 fc08 	bl	800a494 <__lshift>
 8009c84:	f10a 0301 	add.w	r3, sl, #1
 8009c88:	9307      	str	r3, [sp, #28]
 8009c8a:	9b00      	ldr	r3, [sp, #0]
 8009c8c:	4453      	add	r3, sl
 8009c8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c90:	9b02      	ldr	r3, [sp, #8]
 8009c92:	f003 0301 	and.w	r3, r3, #1
 8009c96:	462f      	mov	r7, r5
 8009c98:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c9a:	4605      	mov	r5, r0
 8009c9c:	9b07      	ldr	r3, [sp, #28]
 8009c9e:	4621      	mov	r1, r4
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	4648      	mov	r0, r9
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	f7ff fa9b 	bl	80091e0 <quorem>
 8009caa:	4639      	mov	r1, r7
 8009cac:	9002      	str	r0, [sp, #8]
 8009cae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009cb2:	4648      	mov	r0, r9
 8009cb4:	f000 fc5a 	bl	800a56c <__mcmp>
 8009cb8:	462a      	mov	r2, r5
 8009cba:	9008      	str	r0, [sp, #32]
 8009cbc:	4621      	mov	r1, r4
 8009cbe:	4658      	mov	r0, fp
 8009cc0:	f000 fc70 	bl	800a5a4 <__mdiff>
 8009cc4:	68c2      	ldr	r2, [r0, #12]
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	bb02      	cbnz	r2, 8009d0c <_dtoa_r+0xa1c>
 8009cca:	4601      	mov	r1, r0
 8009ccc:	4648      	mov	r0, r9
 8009cce:	f000 fc4d 	bl	800a56c <__mcmp>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	4631      	mov	r1, r6
 8009cd6:	4658      	mov	r0, fp
 8009cd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009cda:	f000 fa0d 	bl	800a0f8 <_Bfree>
 8009cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ce0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ce2:	9e07      	ldr	r6, [sp, #28]
 8009ce4:	ea43 0102 	orr.w	r1, r3, r2
 8009ce8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cea:	4319      	orrs	r1, r3
 8009cec:	d110      	bne.n	8009d10 <_dtoa_r+0xa20>
 8009cee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009cf2:	d029      	beq.n	8009d48 <_dtoa_r+0xa58>
 8009cf4:	9b08      	ldr	r3, [sp, #32]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	dd02      	ble.n	8009d00 <_dtoa_r+0xa10>
 8009cfa:	9b02      	ldr	r3, [sp, #8]
 8009cfc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009d00:	9b00      	ldr	r3, [sp, #0]
 8009d02:	f883 8000 	strb.w	r8, [r3]
 8009d06:	e63f      	b.n	8009988 <_dtoa_r+0x698>
 8009d08:	4628      	mov	r0, r5
 8009d0a:	e7bb      	b.n	8009c84 <_dtoa_r+0x994>
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	e7e1      	b.n	8009cd4 <_dtoa_r+0x9e4>
 8009d10:	9b08      	ldr	r3, [sp, #32]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	db04      	blt.n	8009d20 <_dtoa_r+0xa30>
 8009d16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d18:	430b      	orrs	r3, r1
 8009d1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d1c:	430b      	orrs	r3, r1
 8009d1e:	d120      	bne.n	8009d62 <_dtoa_r+0xa72>
 8009d20:	2a00      	cmp	r2, #0
 8009d22:	dded      	ble.n	8009d00 <_dtoa_r+0xa10>
 8009d24:	4649      	mov	r1, r9
 8009d26:	2201      	movs	r2, #1
 8009d28:	4658      	mov	r0, fp
 8009d2a:	f000 fbb3 	bl	800a494 <__lshift>
 8009d2e:	4621      	mov	r1, r4
 8009d30:	4681      	mov	r9, r0
 8009d32:	f000 fc1b 	bl	800a56c <__mcmp>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	dc03      	bgt.n	8009d42 <_dtoa_r+0xa52>
 8009d3a:	d1e1      	bne.n	8009d00 <_dtoa_r+0xa10>
 8009d3c:	f018 0f01 	tst.w	r8, #1
 8009d40:	d0de      	beq.n	8009d00 <_dtoa_r+0xa10>
 8009d42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d46:	d1d8      	bne.n	8009cfa <_dtoa_r+0xa0a>
 8009d48:	9a00      	ldr	r2, [sp, #0]
 8009d4a:	2339      	movs	r3, #57	@ 0x39
 8009d4c:	7013      	strb	r3, [r2, #0]
 8009d4e:	4633      	mov	r3, r6
 8009d50:	461e      	mov	r6, r3
 8009d52:	3b01      	subs	r3, #1
 8009d54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009d58:	2a39      	cmp	r2, #57	@ 0x39
 8009d5a:	d052      	beq.n	8009e02 <_dtoa_r+0xb12>
 8009d5c:	3201      	adds	r2, #1
 8009d5e:	701a      	strb	r2, [r3, #0]
 8009d60:	e612      	b.n	8009988 <_dtoa_r+0x698>
 8009d62:	2a00      	cmp	r2, #0
 8009d64:	dd07      	ble.n	8009d76 <_dtoa_r+0xa86>
 8009d66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d6a:	d0ed      	beq.n	8009d48 <_dtoa_r+0xa58>
 8009d6c:	9a00      	ldr	r2, [sp, #0]
 8009d6e:	f108 0301 	add.w	r3, r8, #1
 8009d72:	7013      	strb	r3, [r2, #0]
 8009d74:	e608      	b.n	8009988 <_dtoa_r+0x698>
 8009d76:	9b07      	ldr	r3, [sp, #28]
 8009d78:	9a07      	ldr	r2, [sp, #28]
 8009d7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009d7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d028      	beq.n	8009dd6 <_dtoa_r+0xae6>
 8009d84:	4649      	mov	r1, r9
 8009d86:	2300      	movs	r3, #0
 8009d88:	220a      	movs	r2, #10
 8009d8a:	4658      	mov	r0, fp
 8009d8c:	f000 f9d6 	bl	800a13c <__multadd>
 8009d90:	42af      	cmp	r7, r5
 8009d92:	4681      	mov	r9, r0
 8009d94:	f04f 0300 	mov.w	r3, #0
 8009d98:	f04f 020a 	mov.w	r2, #10
 8009d9c:	4639      	mov	r1, r7
 8009d9e:	4658      	mov	r0, fp
 8009da0:	d107      	bne.n	8009db2 <_dtoa_r+0xac2>
 8009da2:	f000 f9cb 	bl	800a13c <__multadd>
 8009da6:	4607      	mov	r7, r0
 8009da8:	4605      	mov	r5, r0
 8009daa:	9b07      	ldr	r3, [sp, #28]
 8009dac:	3301      	adds	r3, #1
 8009dae:	9307      	str	r3, [sp, #28]
 8009db0:	e774      	b.n	8009c9c <_dtoa_r+0x9ac>
 8009db2:	f000 f9c3 	bl	800a13c <__multadd>
 8009db6:	4629      	mov	r1, r5
 8009db8:	4607      	mov	r7, r0
 8009dba:	2300      	movs	r3, #0
 8009dbc:	220a      	movs	r2, #10
 8009dbe:	4658      	mov	r0, fp
 8009dc0:	f000 f9bc 	bl	800a13c <__multadd>
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	e7f0      	b.n	8009daa <_dtoa_r+0xaba>
 8009dc8:	9b00      	ldr	r3, [sp, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	bfcc      	ite	gt
 8009dce:	461e      	movgt	r6, r3
 8009dd0:	2601      	movle	r6, #1
 8009dd2:	4456      	add	r6, sl
 8009dd4:	2700      	movs	r7, #0
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	2201      	movs	r2, #1
 8009dda:	4658      	mov	r0, fp
 8009ddc:	f000 fb5a 	bl	800a494 <__lshift>
 8009de0:	4621      	mov	r1, r4
 8009de2:	4681      	mov	r9, r0
 8009de4:	f000 fbc2 	bl	800a56c <__mcmp>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	dcb0      	bgt.n	8009d4e <_dtoa_r+0xa5e>
 8009dec:	d102      	bne.n	8009df4 <_dtoa_r+0xb04>
 8009dee:	f018 0f01 	tst.w	r8, #1
 8009df2:	d1ac      	bne.n	8009d4e <_dtoa_r+0xa5e>
 8009df4:	4633      	mov	r3, r6
 8009df6:	461e      	mov	r6, r3
 8009df8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dfc:	2a30      	cmp	r2, #48	@ 0x30
 8009dfe:	d0fa      	beq.n	8009df6 <_dtoa_r+0xb06>
 8009e00:	e5c2      	b.n	8009988 <_dtoa_r+0x698>
 8009e02:	459a      	cmp	sl, r3
 8009e04:	d1a4      	bne.n	8009d50 <_dtoa_r+0xa60>
 8009e06:	9b04      	ldr	r3, [sp, #16]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	9304      	str	r3, [sp, #16]
 8009e0c:	2331      	movs	r3, #49	@ 0x31
 8009e0e:	f88a 3000 	strb.w	r3, [sl]
 8009e12:	e5b9      	b.n	8009988 <_dtoa_r+0x698>
 8009e14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009e74 <_dtoa_r+0xb84>
 8009e1a:	b11b      	cbz	r3, 8009e24 <_dtoa_r+0xb34>
 8009e1c:	f10a 0308 	add.w	r3, sl, #8
 8009e20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009e22:	6013      	str	r3, [r2, #0]
 8009e24:	4650      	mov	r0, sl
 8009e26:	b019      	add	sp, #100	@ 0x64
 8009e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	f77f ae37 	ble.w	8009aa2 <_dtoa_r+0x7b2>
 8009e34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e36:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e38:	2001      	movs	r0, #1
 8009e3a:	e655      	b.n	8009ae8 <_dtoa_r+0x7f8>
 8009e3c:	9b00      	ldr	r3, [sp, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f77f aed6 	ble.w	8009bf0 <_dtoa_r+0x900>
 8009e44:	4656      	mov	r6, sl
 8009e46:	4621      	mov	r1, r4
 8009e48:	4648      	mov	r0, r9
 8009e4a:	f7ff f9c9 	bl	80091e0 <quorem>
 8009e4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009e52:	f806 8b01 	strb.w	r8, [r6], #1
 8009e56:	9b00      	ldr	r3, [sp, #0]
 8009e58:	eba6 020a 	sub.w	r2, r6, sl
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	ddb3      	ble.n	8009dc8 <_dtoa_r+0xad8>
 8009e60:	4649      	mov	r1, r9
 8009e62:	2300      	movs	r3, #0
 8009e64:	220a      	movs	r2, #10
 8009e66:	4658      	mov	r0, fp
 8009e68:	f000 f968 	bl	800a13c <__multadd>
 8009e6c:	4681      	mov	r9, r0
 8009e6e:	e7ea      	b.n	8009e46 <_dtoa_r+0xb56>
 8009e70:	08020cf0 	.word	0x08020cf0
 8009e74:	08020c74 	.word	0x08020c74

08009e78 <_free_r>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	4605      	mov	r5, r0
 8009e7c:	2900      	cmp	r1, #0
 8009e7e:	d041      	beq.n	8009f04 <_free_r+0x8c>
 8009e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e84:	1f0c      	subs	r4, r1, #4
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	bfb8      	it	lt
 8009e8a:	18e4      	addlt	r4, r4, r3
 8009e8c:	f000 f8e8 	bl	800a060 <__malloc_lock>
 8009e90:	4a1d      	ldr	r2, [pc, #116]	@ (8009f08 <_free_r+0x90>)
 8009e92:	6813      	ldr	r3, [r2, #0]
 8009e94:	b933      	cbnz	r3, 8009ea4 <_free_r+0x2c>
 8009e96:	6063      	str	r3, [r4, #4]
 8009e98:	6014      	str	r4, [r2, #0]
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ea0:	f000 b8e4 	b.w	800a06c <__malloc_unlock>
 8009ea4:	42a3      	cmp	r3, r4
 8009ea6:	d908      	bls.n	8009eba <_free_r+0x42>
 8009ea8:	6820      	ldr	r0, [r4, #0]
 8009eaa:	1821      	adds	r1, r4, r0
 8009eac:	428b      	cmp	r3, r1
 8009eae:	bf01      	itttt	eq
 8009eb0:	6819      	ldreq	r1, [r3, #0]
 8009eb2:	685b      	ldreq	r3, [r3, #4]
 8009eb4:	1809      	addeq	r1, r1, r0
 8009eb6:	6021      	streq	r1, [r4, #0]
 8009eb8:	e7ed      	b.n	8009e96 <_free_r+0x1e>
 8009eba:	461a      	mov	r2, r3
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	b10b      	cbz	r3, 8009ec4 <_free_r+0x4c>
 8009ec0:	42a3      	cmp	r3, r4
 8009ec2:	d9fa      	bls.n	8009eba <_free_r+0x42>
 8009ec4:	6811      	ldr	r1, [r2, #0]
 8009ec6:	1850      	adds	r0, r2, r1
 8009ec8:	42a0      	cmp	r0, r4
 8009eca:	d10b      	bne.n	8009ee4 <_free_r+0x6c>
 8009ecc:	6820      	ldr	r0, [r4, #0]
 8009ece:	4401      	add	r1, r0
 8009ed0:	1850      	adds	r0, r2, r1
 8009ed2:	4283      	cmp	r3, r0
 8009ed4:	6011      	str	r1, [r2, #0]
 8009ed6:	d1e0      	bne.n	8009e9a <_free_r+0x22>
 8009ed8:	6818      	ldr	r0, [r3, #0]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	6053      	str	r3, [r2, #4]
 8009ede:	4408      	add	r0, r1
 8009ee0:	6010      	str	r0, [r2, #0]
 8009ee2:	e7da      	b.n	8009e9a <_free_r+0x22>
 8009ee4:	d902      	bls.n	8009eec <_free_r+0x74>
 8009ee6:	230c      	movs	r3, #12
 8009ee8:	602b      	str	r3, [r5, #0]
 8009eea:	e7d6      	b.n	8009e9a <_free_r+0x22>
 8009eec:	6820      	ldr	r0, [r4, #0]
 8009eee:	1821      	adds	r1, r4, r0
 8009ef0:	428b      	cmp	r3, r1
 8009ef2:	bf04      	itt	eq
 8009ef4:	6819      	ldreq	r1, [r3, #0]
 8009ef6:	685b      	ldreq	r3, [r3, #4]
 8009ef8:	6063      	str	r3, [r4, #4]
 8009efa:	bf04      	itt	eq
 8009efc:	1809      	addeq	r1, r1, r0
 8009efe:	6021      	streq	r1, [r4, #0]
 8009f00:	6054      	str	r4, [r2, #4]
 8009f02:	e7ca      	b.n	8009e9a <_free_r+0x22>
 8009f04:	bd38      	pop	{r3, r4, r5, pc}
 8009f06:	bf00      	nop
 8009f08:	2000352c 	.word	0x2000352c

08009f0c <malloc>:
 8009f0c:	4b02      	ldr	r3, [pc, #8]	@ (8009f18 <malloc+0xc>)
 8009f0e:	4601      	mov	r1, r0
 8009f10:	6818      	ldr	r0, [r3, #0]
 8009f12:	f000 b825 	b.w	8009f60 <_malloc_r>
 8009f16:	bf00      	nop
 8009f18:	20000018 	.word	0x20000018

08009f1c <sbrk_aligned>:
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	4e0f      	ldr	r6, [pc, #60]	@ (8009f5c <sbrk_aligned+0x40>)
 8009f20:	460c      	mov	r4, r1
 8009f22:	6831      	ldr	r1, [r6, #0]
 8009f24:	4605      	mov	r5, r0
 8009f26:	b911      	cbnz	r1, 8009f2e <sbrk_aligned+0x12>
 8009f28:	f000 ff96 	bl	800ae58 <_sbrk_r>
 8009f2c:	6030      	str	r0, [r6, #0]
 8009f2e:	4621      	mov	r1, r4
 8009f30:	4628      	mov	r0, r5
 8009f32:	f000 ff91 	bl	800ae58 <_sbrk_r>
 8009f36:	1c43      	adds	r3, r0, #1
 8009f38:	d103      	bne.n	8009f42 <sbrk_aligned+0x26>
 8009f3a:	f04f 34ff 	mov.w	r4, #4294967295
 8009f3e:	4620      	mov	r0, r4
 8009f40:	bd70      	pop	{r4, r5, r6, pc}
 8009f42:	1cc4      	adds	r4, r0, #3
 8009f44:	f024 0403 	bic.w	r4, r4, #3
 8009f48:	42a0      	cmp	r0, r4
 8009f4a:	d0f8      	beq.n	8009f3e <sbrk_aligned+0x22>
 8009f4c:	1a21      	subs	r1, r4, r0
 8009f4e:	4628      	mov	r0, r5
 8009f50:	f000 ff82 	bl	800ae58 <_sbrk_r>
 8009f54:	3001      	adds	r0, #1
 8009f56:	d1f2      	bne.n	8009f3e <sbrk_aligned+0x22>
 8009f58:	e7ef      	b.n	8009f3a <sbrk_aligned+0x1e>
 8009f5a:	bf00      	nop
 8009f5c:	20003528 	.word	0x20003528

08009f60 <_malloc_r>:
 8009f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f64:	1ccd      	adds	r5, r1, #3
 8009f66:	f025 0503 	bic.w	r5, r5, #3
 8009f6a:	3508      	adds	r5, #8
 8009f6c:	2d0c      	cmp	r5, #12
 8009f6e:	bf38      	it	cc
 8009f70:	250c      	movcc	r5, #12
 8009f72:	2d00      	cmp	r5, #0
 8009f74:	4606      	mov	r6, r0
 8009f76:	db01      	blt.n	8009f7c <_malloc_r+0x1c>
 8009f78:	42a9      	cmp	r1, r5
 8009f7a:	d904      	bls.n	8009f86 <_malloc_r+0x26>
 8009f7c:	230c      	movs	r3, #12
 8009f7e:	6033      	str	r3, [r6, #0]
 8009f80:	2000      	movs	r0, #0
 8009f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a05c <_malloc_r+0xfc>
 8009f8a:	f000 f869 	bl	800a060 <__malloc_lock>
 8009f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8009f92:	461c      	mov	r4, r3
 8009f94:	bb44      	cbnz	r4, 8009fe8 <_malloc_r+0x88>
 8009f96:	4629      	mov	r1, r5
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f7ff ffbf 	bl	8009f1c <sbrk_aligned>
 8009f9e:	1c43      	adds	r3, r0, #1
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	d158      	bne.n	800a056 <_malloc_r+0xf6>
 8009fa4:	f8d8 4000 	ldr.w	r4, [r8]
 8009fa8:	4627      	mov	r7, r4
 8009faa:	2f00      	cmp	r7, #0
 8009fac:	d143      	bne.n	800a036 <_malloc_r+0xd6>
 8009fae:	2c00      	cmp	r4, #0
 8009fb0:	d04b      	beq.n	800a04a <_malloc_r+0xea>
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	4639      	mov	r1, r7
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	eb04 0903 	add.w	r9, r4, r3
 8009fbc:	f000 ff4c 	bl	800ae58 <_sbrk_r>
 8009fc0:	4581      	cmp	r9, r0
 8009fc2:	d142      	bne.n	800a04a <_malloc_r+0xea>
 8009fc4:	6821      	ldr	r1, [r4, #0]
 8009fc6:	1a6d      	subs	r5, r5, r1
 8009fc8:	4629      	mov	r1, r5
 8009fca:	4630      	mov	r0, r6
 8009fcc:	f7ff ffa6 	bl	8009f1c <sbrk_aligned>
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	d03a      	beq.n	800a04a <_malloc_r+0xea>
 8009fd4:	6823      	ldr	r3, [r4, #0]
 8009fd6:	442b      	add	r3, r5
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	f8d8 3000 	ldr.w	r3, [r8]
 8009fde:	685a      	ldr	r2, [r3, #4]
 8009fe0:	bb62      	cbnz	r2, 800a03c <_malloc_r+0xdc>
 8009fe2:	f8c8 7000 	str.w	r7, [r8]
 8009fe6:	e00f      	b.n	800a008 <_malloc_r+0xa8>
 8009fe8:	6822      	ldr	r2, [r4, #0]
 8009fea:	1b52      	subs	r2, r2, r5
 8009fec:	d420      	bmi.n	800a030 <_malloc_r+0xd0>
 8009fee:	2a0b      	cmp	r2, #11
 8009ff0:	d917      	bls.n	800a022 <_malloc_r+0xc2>
 8009ff2:	1961      	adds	r1, r4, r5
 8009ff4:	42a3      	cmp	r3, r4
 8009ff6:	6025      	str	r5, [r4, #0]
 8009ff8:	bf18      	it	ne
 8009ffa:	6059      	strne	r1, [r3, #4]
 8009ffc:	6863      	ldr	r3, [r4, #4]
 8009ffe:	bf08      	it	eq
 800a000:	f8c8 1000 	streq.w	r1, [r8]
 800a004:	5162      	str	r2, [r4, r5]
 800a006:	604b      	str	r3, [r1, #4]
 800a008:	4630      	mov	r0, r6
 800a00a:	f000 f82f 	bl	800a06c <__malloc_unlock>
 800a00e:	f104 000b 	add.w	r0, r4, #11
 800a012:	1d23      	adds	r3, r4, #4
 800a014:	f020 0007 	bic.w	r0, r0, #7
 800a018:	1ac2      	subs	r2, r0, r3
 800a01a:	bf1c      	itt	ne
 800a01c:	1a1b      	subne	r3, r3, r0
 800a01e:	50a3      	strne	r3, [r4, r2]
 800a020:	e7af      	b.n	8009f82 <_malloc_r+0x22>
 800a022:	6862      	ldr	r2, [r4, #4]
 800a024:	42a3      	cmp	r3, r4
 800a026:	bf0c      	ite	eq
 800a028:	f8c8 2000 	streq.w	r2, [r8]
 800a02c:	605a      	strne	r2, [r3, #4]
 800a02e:	e7eb      	b.n	800a008 <_malloc_r+0xa8>
 800a030:	4623      	mov	r3, r4
 800a032:	6864      	ldr	r4, [r4, #4]
 800a034:	e7ae      	b.n	8009f94 <_malloc_r+0x34>
 800a036:	463c      	mov	r4, r7
 800a038:	687f      	ldr	r7, [r7, #4]
 800a03a:	e7b6      	b.n	8009faa <_malloc_r+0x4a>
 800a03c:	461a      	mov	r2, r3
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	42a3      	cmp	r3, r4
 800a042:	d1fb      	bne.n	800a03c <_malloc_r+0xdc>
 800a044:	2300      	movs	r3, #0
 800a046:	6053      	str	r3, [r2, #4]
 800a048:	e7de      	b.n	800a008 <_malloc_r+0xa8>
 800a04a:	230c      	movs	r3, #12
 800a04c:	6033      	str	r3, [r6, #0]
 800a04e:	4630      	mov	r0, r6
 800a050:	f000 f80c 	bl	800a06c <__malloc_unlock>
 800a054:	e794      	b.n	8009f80 <_malloc_r+0x20>
 800a056:	6005      	str	r5, [r0, #0]
 800a058:	e7d6      	b.n	800a008 <_malloc_r+0xa8>
 800a05a:	bf00      	nop
 800a05c:	2000352c 	.word	0x2000352c

0800a060 <__malloc_lock>:
 800a060:	4801      	ldr	r0, [pc, #4]	@ (800a068 <__malloc_lock+0x8>)
 800a062:	f7ff b8bb 	b.w	80091dc <__retarget_lock_acquire_recursive>
 800a066:	bf00      	nop
 800a068:	20003524 	.word	0x20003524

0800a06c <__malloc_unlock>:
 800a06c:	4801      	ldr	r0, [pc, #4]	@ (800a074 <__malloc_unlock+0x8>)
 800a06e:	f7ff b8b6 	b.w	80091de <__retarget_lock_release_recursive>
 800a072:	bf00      	nop
 800a074:	20003524 	.word	0x20003524

0800a078 <_Balloc>:
 800a078:	b570      	push	{r4, r5, r6, lr}
 800a07a:	69c6      	ldr	r6, [r0, #28]
 800a07c:	4604      	mov	r4, r0
 800a07e:	460d      	mov	r5, r1
 800a080:	b976      	cbnz	r6, 800a0a0 <_Balloc+0x28>
 800a082:	2010      	movs	r0, #16
 800a084:	f7ff ff42 	bl	8009f0c <malloc>
 800a088:	4602      	mov	r2, r0
 800a08a:	61e0      	str	r0, [r4, #28]
 800a08c:	b920      	cbnz	r0, 800a098 <_Balloc+0x20>
 800a08e:	4b18      	ldr	r3, [pc, #96]	@ (800a0f0 <_Balloc+0x78>)
 800a090:	4818      	ldr	r0, [pc, #96]	@ (800a0f4 <_Balloc+0x7c>)
 800a092:	216b      	movs	r1, #107	@ 0x6b
 800a094:	f000 fefe 	bl	800ae94 <__assert_func>
 800a098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a09c:	6006      	str	r6, [r0, #0]
 800a09e:	60c6      	str	r6, [r0, #12]
 800a0a0:	69e6      	ldr	r6, [r4, #28]
 800a0a2:	68f3      	ldr	r3, [r6, #12]
 800a0a4:	b183      	cbz	r3, 800a0c8 <_Balloc+0x50>
 800a0a6:	69e3      	ldr	r3, [r4, #28]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0ae:	b9b8      	cbnz	r0, 800a0e0 <_Balloc+0x68>
 800a0b0:	2101      	movs	r1, #1
 800a0b2:	fa01 f605 	lsl.w	r6, r1, r5
 800a0b6:	1d72      	adds	r2, r6, #5
 800a0b8:	0092      	lsls	r2, r2, #2
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f000 ff08 	bl	800aed0 <_calloc_r>
 800a0c0:	b160      	cbz	r0, 800a0dc <_Balloc+0x64>
 800a0c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a0c6:	e00e      	b.n	800a0e6 <_Balloc+0x6e>
 800a0c8:	2221      	movs	r2, #33	@ 0x21
 800a0ca:	2104      	movs	r1, #4
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f000 feff 	bl	800aed0 <_calloc_r>
 800a0d2:	69e3      	ldr	r3, [r4, #28]
 800a0d4:	60f0      	str	r0, [r6, #12]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1e4      	bne.n	800a0a6 <_Balloc+0x2e>
 800a0dc:	2000      	movs	r0, #0
 800a0de:	bd70      	pop	{r4, r5, r6, pc}
 800a0e0:	6802      	ldr	r2, [r0, #0]
 800a0e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0ec:	e7f7      	b.n	800a0de <_Balloc+0x66>
 800a0ee:	bf00      	nop
 800a0f0:	08020c81 	.word	0x08020c81
 800a0f4:	08020d01 	.word	0x08020d01

0800a0f8 <_Bfree>:
 800a0f8:	b570      	push	{r4, r5, r6, lr}
 800a0fa:	69c6      	ldr	r6, [r0, #28]
 800a0fc:	4605      	mov	r5, r0
 800a0fe:	460c      	mov	r4, r1
 800a100:	b976      	cbnz	r6, 800a120 <_Bfree+0x28>
 800a102:	2010      	movs	r0, #16
 800a104:	f7ff ff02 	bl	8009f0c <malloc>
 800a108:	4602      	mov	r2, r0
 800a10a:	61e8      	str	r0, [r5, #28]
 800a10c:	b920      	cbnz	r0, 800a118 <_Bfree+0x20>
 800a10e:	4b09      	ldr	r3, [pc, #36]	@ (800a134 <_Bfree+0x3c>)
 800a110:	4809      	ldr	r0, [pc, #36]	@ (800a138 <_Bfree+0x40>)
 800a112:	218f      	movs	r1, #143	@ 0x8f
 800a114:	f000 febe 	bl	800ae94 <__assert_func>
 800a118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a11c:	6006      	str	r6, [r0, #0]
 800a11e:	60c6      	str	r6, [r0, #12]
 800a120:	b13c      	cbz	r4, 800a132 <_Bfree+0x3a>
 800a122:	69eb      	ldr	r3, [r5, #28]
 800a124:	6862      	ldr	r2, [r4, #4]
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a12c:	6021      	str	r1, [r4, #0]
 800a12e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a132:	bd70      	pop	{r4, r5, r6, pc}
 800a134:	08020c81 	.word	0x08020c81
 800a138:	08020d01 	.word	0x08020d01

0800a13c <__multadd>:
 800a13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a140:	690d      	ldr	r5, [r1, #16]
 800a142:	4607      	mov	r7, r0
 800a144:	460c      	mov	r4, r1
 800a146:	461e      	mov	r6, r3
 800a148:	f101 0c14 	add.w	ip, r1, #20
 800a14c:	2000      	movs	r0, #0
 800a14e:	f8dc 3000 	ldr.w	r3, [ip]
 800a152:	b299      	uxth	r1, r3
 800a154:	fb02 6101 	mla	r1, r2, r1, r6
 800a158:	0c1e      	lsrs	r6, r3, #16
 800a15a:	0c0b      	lsrs	r3, r1, #16
 800a15c:	fb02 3306 	mla	r3, r2, r6, r3
 800a160:	b289      	uxth	r1, r1
 800a162:	3001      	adds	r0, #1
 800a164:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a168:	4285      	cmp	r5, r0
 800a16a:	f84c 1b04 	str.w	r1, [ip], #4
 800a16e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a172:	dcec      	bgt.n	800a14e <__multadd+0x12>
 800a174:	b30e      	cbz	r6, 800a1ba <__multadd+0x7e>
 800a176:	68a3      	ldr	r3, [r4, #8]
 800a178:	42ab      	cmp	r3, r5
 800a17a:	dc19      	bgt.n	800a1b0 <__multadd+0x74>
 800a17c:	6861      	ldr	r1, [r4, #4]
 800a17e:	4638      	mov	r0, r7
 800a180:	3101      	adds	r1, #1
 800a182:	f7ff ff79 	bl	800a078 <_Balloc>
 800a186:	4680      	mov	r8, r0
 800a188:	b928      	cbnz	r0, 800a196 <__multadd+0x5a>
 800a18a:	4602      	mov	r2, r0
 800a18c:	4b0c      	ldr	r3, [pc, #48]	@ (800a1c0 <__multadd+0x84>)
 800a18e:	480d      	ldr	r0, [pc, #52]	@ (800a1c4 <__multadd+0x88>)
 800a190:	21ba      	movs	r1, #186	@ 0xba
 800a192:	f000 fe7f 	bl	800ae94 <__assert_func>
 800a196:	6922      	ldr	r2, [r4, #16]
 800a198:	3202      	adds	r2, #2
 800a19a:	f104 010c 	add.w	r1, r4, #12
 800a19e:	0092      	lsls	r2, r2, #2
 800a1a0:	300c      	adds	r0, #12
 800a1a2:	f000 fe69 	bl	800ae78 <memcpy>
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	4638      	mov	r0, r7
 800a1aa:	f7ff ffa5 	bl	800a0f8 <_Bfree>
 800a1ae:	4644      	mov	r4, r8
 800a1b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a1b4:	3501      	adds	r5, #1
 800a1b6:	615e      	str	r6, [r3, #20]
 800a1b8:	6125      	str	r5, [r4, #16]
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c0:	08020cf0 	.word	0x08020cf0
 800a1c4:	08020d01 	.word	0x08020d01

0800a1c8 <__hi0bits>:
 800a1c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	bf36      	itet	cc
 800a1d0:	0403      	lslcc	r3, r0, #16
 800a1d2:	2000      	movcs	r0, #0
 800a1d4:	2010      	movcc	r0, #16
 800a1d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1da:	bf3c      	itt	cc
 800a1dc:	021b      	lslcc	r3, r3, #8
 800a1de:	3008      	addcc	r0, #8
 800a1e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1e4:	bf3c      	itt	cc
 800a1e6:	011b      	lslcc	r3, r3, #4
 800a1e8:	3004      	addcc	r0, #4
 800a1ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1ee:	bf3c      	itt	cc
 800a1f0:	009b      	lslcc	r3, r3, #2
 800a1f2:	3002      	addcc	r0, #2
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	db05      	blt.n	800a204 <__hi0bits+0x3c>
 800a1f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a1fc:	f100 0001 	add.w	r0, r0, #1
 800a200:	bf08      	it	eq
 800a202:	2020      	moveq	r0, #32
 800a204:	4770      	bx	lr

0800a206 <__lo0bits>:
 800a206:	6803      	ldr	r3, [r0, #0]
 800a208:	4602      	mov	r2, r0
 800a20a:	f013 0007 	ands.w	r0, r3, #7
 800a20e:	d00b      	beq.n	800a228 <__lo0bits+0x22>
 800a210:	07d9      	lsls	r1, r3, #31
 800a212:	d421      	bmi.n	800a258 <__lo0bits+0x52>
 800a214:	0798      	lsls	r0, r3, #30
 800a216:	bf49      	itett	mi
 800a218:	085b      	lsrmi	r3, r3, #1
 800a21a:	089b      	lsrpl	r3, r3, #2
 800a21c:	2001      	movmi	r0, #1
 800a21e:	6013      	strmi	r3, [r2, #0]
 800a220:	bf5c      	itt	pl
 800a222:	6013      	strpl	r3, [r2, #0]
 800a224:	2002      	movpl	r0, #2
 800a226:	4770      	bx	lr
 800a228:	b299      	uxth	r1, r3
 800a22a:	b909      	cbnz	r1, 800a230 <__lo0bits+0x2a>
 800a22c:	0c1b      	lsrs	r3, r3, #16
 800a22e:	2010      	movs	r0, #16
 800a230:	b2d9      	uxtb	r1, r3
 800a232:	b909      	cbnz	r1, 800a238 <__lo0bits+0x32>
 800a234:	3008      	adds	r0, #8
 800a236:	0a1b      	lsrs	r3, r3, #8
 800a238:	0719      	lsls	r1, r3, #28
 800a23a:	bf04      	itt	eq
 800a23c:	091b      	lsreq	r3, r3, #4
 800a23e:	3004      	addeq	r0, #4
 800a240:	0799      	lsls	r1, r3, #30
 800a242:	bf04      	itt	eq
 800a244:	089b      	lsreq	r3, r3, #2
 800a246:	3002      	addeq	r0, #2
 800a248:	07d9      	lsls	r1, r3, #31
 800a24a:	d403      	bmi.n	800a254 <__lo0bits+0x4e>
 800a24c:	085b      	lsrs	r3, r3, #1
 800a24e:	f100 0001 	add.w	r0, r0, #1
 800a252:	d003      	beq.n	800a25c <__lo0bits+0x56>
 800a254:	6013      	str	r3, [r2, #0]
 800a256:	4770      	bx	lr
 800a258:	2000      	movs	r0, #0
 800a25a:	4770      	bx	lr
 800a25c:	2020      	movs	r0, #32
 800a25e:	4770      	bx	lr

0800a260 <__i2b>:
 800a260:	b510      	push	{r4, lr}
 800a262:	460c      	mov	r4, r1
 800a264:	2101      	movs	r1, #1
 800a266:	f7ff ff07 	bl	800a078 <_Balloc>
 800a26a:	4602      	mov	r2, r0
 800a26c:	b928      	cbnz	r0, 800a27a <__i2b+0x1a>
 800a26e:	4b05      	ldr	r3, [pc, #20]	@ (800a284 <__i2b+0x24>)
 800a270:	4805      	ldr	r0, [pc, #20]	@ (800a288 <__i2b+0x28>)
 800a272:	f240 1145 	movw	r1, #325	@ 0x145
 800a276:	f000 fe0d 	bl	800ae94 <__assert_func>
 800a27a:	2301      	movs	r3, #1
 800a27c:	6144      	str	r4, [r0, #20]
 800a27e:	6103      	str	r3, [r0, #16]
 800a280:	bd10      	pop	{r4, pc}
 800a282:	bf00      	nop
 800a284:	08020cf0 	.word	0x08020cf0
 800a288:	08020d01 	.word	0x08020d01

0800a28c <__multiply>:
 800a28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a290:	4614      	mov	r4, r2
 800a292:	690a      	ldr	r2, [r1, #16]
 800a294:	6923      	ldr	r3, [r4, #16]
 800a296:	429a      	cmp	r2, r3
 800a298:	bfa8      	it	ge
 800a29a:	4623      	movge	r3, r4
 800a29c:	460f      	mov	r7, r1
 800a29e:	bfa4      	itt	ge
 800a2a0:	460c      	movge	r4, r1
 800a2a2:	461f      	movge	r7, r3
 800a2a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a2a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a2ac:	68a3      	ldr	r3, [r4, #8]
 800a2ae:	6861      	ldr	r1, [r4, #4]
 800a2b0:	eb0a 0609 	add.w	r6, sl, r9
 800a2b4:	42b3      	cmp	r3, r6
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	bfb8      	it	lt
 800a2ba:	3101      	addlt	r1, #1
 800a2bc:	f7ff fedc 	bl	800a078 <_Balloc>
 800a2c0:	b930      	cbnz	r0, 800a2d0 <__multiply+0x44>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	4b44      	ldr	r3, [pc, #272]	@ (800a3d8 <__multiply+0x14c>)
 800a2c6:	4845      	ldr	r0, [pc, #276]	@ (800a3dc <__multiply+0x150>)
 800a2c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a2cc:	f000 fde2 	bl	800ae94 <__assert_func>
 800a2d0:	f100 0514 	add.w	r5, r0, #20
 800a2d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a2d8:	462b      	mov	r3, r5
 800a2da:	2200      	movs	r2, #0
 800a2dc:	4543      	cmp	r3, r8
 800a2de:	d321      	bcc.n	800a324 <__multiply+0x98>
 800a2e0:	f107 0114 	add.w	r1, r7, #20
 800a2e4:	f104 0214 	add.w	r2, r4, #20
 800a2e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a2ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a2f0:	9302      	str	r3, [sp, #8]
 800a2f2:	1b13      	subs	r3, r2, r4
 800a2f4:	3b15      	subs	r3, #21
 800a2f6:	f023 0303 	bic.w	r3, r3, #3
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	f104 0715 	add.w	r7, r4, #21
 800a300:	42ba      	cmp	r2, r7
 800a302:	bf38      	it	cc
 800a304:	2304      	movcc	r3, #4
 800a306:	9301      	str	r3, [sp, #4]
 800a308:	9b02      	ldr	r3, [sp, #8]
 800a30a:	9103      	str	r1, [sp, #12]
 800a30c:	428b      	cmp	r3, r1
 800a30e:	d80c      	bhi.n	800a32a <__multiply+0x9e>
 800a310:	2e00      	cmp	r6, #0
 800a312:	dd03      	ble.n	800a31c <__multiply+0x90>
 800a314:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d05b      	beq.n	800a3d4 <__multiply+0x148>
 800a31c:	6106      	str	r6, [r0, #16]
 800a31e:	b005      	add	sp, #20
 800a320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a324:	f843 2b04 	str.w	r2, [r3], #4
 800a328:	e7d8      	b.n	800a2dc <__multiply+0x50>
 800a32a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a32e:	f1ba 0f00 	cmp.w	sl, #0
 800a332:	d024      	beq.n	800a37e <__multiply+0xf2>
 800a334:	f104 0e14 	add.w	lr, r4, #20
 800a338:	46a9      	mov	r9, r5
 800a33a:	f04f 0c00 	mov.w	ip, #0
 800a33e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a342:	f8d9 3000 	ldr.w	r3, [r9]
 800a346:	fa1f fb87 	uxth.w	fp, r7
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a350:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a354:	f8d9 7000 	ldr.w	r7, [r9]
 800a358:	4463      	add	r3, ip
 800a35a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a35e:	fb0a c70b 	mla	r7, sl, fp, ip
 800a362:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a366:	b29b      	uxth	r3, r3
 800a368:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a36c:	4572      	cmp	r2, lr
 800a36e:	f849 3b04 	str.w	r3, [r9], #4
 800a372:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a376:	d8e2      	bhi.n	800a33e <__multiply+0xb2>
 800a378:	9b01      	ldr	r3, [sp, #4]
 800a37a:	f845 c003 	str.w	ip, [r5, r3]
 800a37e:	9b03      	ldr	r3, [sp, #12]
 800a380:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a384:	3104      	adds	r1, #4
 800a386:	f1b9 0f00 	cmp.w	r9, #0
 800a38a:	d021      	beq.n	800a3d0 <__multiply+0x144>
 800a38c:	682b      	ldr	r3, [r5, #0]
 800a38e:	f104 0c14 	add.w	ip, r4, #20
 800a392:	46ae      	mov	lr, r5
 800a394:	f04f 0a00 	mov.w	sl, #0
 800a398:	f8bc b000 	ldrh.w	fp, [ip]
 800a39c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a3a0:	fb09 770b 	mla	r7, r9, fp, r7
 800a3a4:	4457      	add	r7, sl
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a3ac:	f84e 3b04 	str.w	r3, [lr], #4
 800a3b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a3b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3b8:	f8be 3000 	ldrh.w	r3, [lr]
 800a3bc:	fb09 330a 	mla	r3, r9, sl, r3
 800a3c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a3c4:	4562      	cmp	r2, ip
 800a3c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3ca:	d8e5      	bhi.n	800a398 <__multiply+0x10c>
 800a3cc:	9f01      	ldr	r7, [sp, #4]
 800a3ce:	51eb      	str	r3, [r5, r7]
 800a3d0:	3504      	adds	r5, #4
 800a3d2:	e799      	b.n	800a308 <__multiply+0x7c>
 800a3d4:	3e01      	subs	r6, #1
 800a3d6:	e79b      	b.n	800a310 <__multiply+0x84>
 800a3d8:	08020cf0 	.word	0x08020cf0
 800a3dc:	08020d01 	.word	0x08020d01

0800a3e0 <__pow5mult>:
 800a3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3e4:	4615      	mov	r5, r2
 800a3e6:	f012 0203 	ands.w	r2, r2, #3
 800a3ea:	4607      	mov	r7, r0
 800a3ec:	460e      	mov	r6, r1
 800a3ee:	d007      	beq.n	800a400 <__pow5mult+0x20>
 800a3f0:	4c25      	ldr	r4, [pc, #148]	@ (800a488 <__pow5mult+0xa8>)
 800a3f2:	3a01      	subs	r2, #1
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3fa:	f7ff fe9f 	bl	800a13c <__multadd>
 800a3fe:	4606      	mov	r6, r0
 800a400:	10ad      	asrs	r5, r5, #2
 800a402:	d03d      	beq.n	800a480 <__pow5mult+0xa0>
 800a404:	69fc      	ldr	r4, [r7, #28]
 800a406:	b97c      	cbnz	r4, 800a428 <__pow5mult+0x48>
 800a408:	2010      	movs	r0, #16
 800a40a:	f7ff fd7f 	bl	8009f0c <malloc>
 800a40e:	4602      	mov	r2, r0
 800a410:	61f8      	str	r0, [r7, #28]
 800a412:	b928      	cbnz	r0, 800a420 <__pow5mult+0x40>
 800a414:	4b1d      	ldr	r3, [pc, #116]	@ (800a48c <__pow5mult+0xac>)
 800a416:	481e      	ldr	r0, [pc, #120]	@ (800a490 <__pow5mult+0xb0>)
 800a418:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a41c:	f000 fd3a 	bl	800ae94 <__assert_func>
 800a420:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a424:	6004      	str	r4, [r0, #0]
 800a426:	60c4      	str	r4, [r0, #12]
 800a428:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a42c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a430:	b94c      	cbnz	r4, 800a446 <__pow5mult+0x66>
 800a432:	f240 2171 	movw	r1, #625	@ 0x271
 800a436:	4638      	mov	r0, r7
 800a438:	f7ff ff12 	bl	800a260 <__i2b>
 800a43c:	2300      	movs	r3, #0
 800a43e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a442:	4604      	mov	r4, r0
 800a444:	6003      	str	r3, [r0, #0]
 800a446:	f04f 0900 	mov.w	r9, #0
 800a44a:	07eb      	lsls	r3, r5, #31
 800a44c:	d50a      	bpl.n	800a464 <__pow5mult+0x84>
 800a44e:	4631      	mov	r1, r6
 800a450:	4622      	mov	r2, r4
 800a452:	4638      	mov	r0, r7
 800a454:	f7ff ff1a 	bl	800a28c <__multiply>
 800a458:	4631      	mov	r1, r6
 800a45a:	4680      	mov	r8, r0
 800a45c:	4638      	mov	r0, r7
 800a45e:	f7ff fe4b 	bl	800a0f8 <_Bfree>
 800a462:	4646      	mov	r6, r8
 800a464:	106d      	asrs	r5, r5, #1
 800a466:	d00b      	beq.n	800a480 <__pow5mult+0xa0>
 800a468:	6820      	ldr	r0, [r4, #0]
 800a46a:	b938      	cbnz	r0, 800a47c <__pow5mult+0x9c>
 800a46c:	4622      	mov	r2, r4
 800a46e:	4621      	mov	r1, r4
 800a470:	4638      	mov	r0, r7
 800a472:	f7ff ff0b 	bl	800a28c <__multiply>
 800a476:	6020      	str	r0, [r4, #0]
 800a478:	f8c0 9000 	str.w	r9, [r0]
 800a47c:	4604      	mov	r4, r0
 800a47e:	e7e4      	b.n	800a44a <__pow5mult+0x6a>
 800a480:	4630      	mov	r0, r6
 800a482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a486:	bf00      	nop
 800a488:	08020d5c 	.word	0x08020d5c
 800a48c:	08020c81 	.word	0x08020c81
 800a490:	08020d01 	.word	0x08020d01

0800a494 <__lshift>:
 800a494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a498:	460c      	mov	r4, r1
 800a49a:	6849      	ldr	r1, [r1, #4]
 800a49c:	6923      	ldr	r3, [r4, #16]
 800a49e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4a2:	68a3      	ldr	r3, [r4, #8]
 800a4a4:	4607      	mov	r7, r0
 800a4a6:	4691      	mov	r9, r2
 800a4a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4ac:	f108 0601 	add.w	r6, r8, #1
 800a4b0:	42b3      	cmp	r3, r6
 800a4b2:	db0b      	blt.n	800a4cc <__lshift+0x38>
 800a4b4:	4638      	mov	r0, r7
 800a4b6:	f7ff fddf 	bl	800a078 <_Balloc>
 800a4ba:	4605      	mov	r5, r0
 800a4bc:	b948      	cbnz	r0, 800a4d2 <__lshift+0x3e>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	4b28      	ldr	r3, [pc, #160]	@ (800a564 <__lshift+0xd0>)
 800a4c2:	4829      	ldr	r0, [pc, #164]	@ (800a568 <__lshift+0xd4>)
 800a4c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a4c8:	f000 fce4 	bl	800ae94 <__assert_func>
 800a4cc:	3101      	adds	r1, #1
 800a4ce:	005b      	lsls	r3, r3, #1
 800a4d0:	e7ee      	b.n	800a4b0 <__lshift+0x1c>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f100 0114 	add.w	r1, r0, #20
 800a4d8:	f100 0210 	add.w	r2, r0, #16
 800a4dc:	4618      	mov	r0, r3
 800a4de:	4553      	cmp	r3, sl
 800a4e0:	db33      	blt.n	800a54a <__lshift+0xb6>
 800a4e2:	6920      	ldr	r0, [r4, #16]
 800a4e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4e8:	f104 0314 	add.w	r3, r4, #20
 800a4ec:	f019 091f 	ands.w	r9, r9, #31
 800a4f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4f8:	d02b      	beq.n	800a552 <__lshift+0xbe>
 800a4fa:	f1c9 0e20 	rsb	lr, r9, #32
 800a4fe:	468a      	mov	sl, r1
 800a500:	2200      	movs	r2, #0
 800a502:	6818      	ldr	r0, [r3, #0]
 800a504:	fa00 f009 	lsl.w	r0, r0, r9
 800a508:	4310      	orrs	r0, r2
 800a50a:	f84a 0b04 	str.w	r0, [sl], #4
 800a50e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a512:	459c      	cmp	ip, r3
 800a514:	fa22 f20e 	lsr.w	r2, r2, lr
 800a518:	d8f3      	bhi.n	800a502 <__lshift+0x6e>
 800a51a:	ebac 0304 	sub.w	r3, ip, r4
 800a51e:	3b15      	subs	r3, #21
 800a520:	f023 0303 	bic.w	r3, r3, #3
 800a524:	3304      	adds	r3, #4
 800a526:	f104 0015 	add.w	r0, r4, #21
 800a52a:	4584      	cmp	ip, r0
 800a52c:	bf38      	it	cc
 800a52e:	2304      	movcc	r3, #4
 800a530:	50ca      	str	r2, [r1, r3]
 800a532:	b10a      	cbz	r2, 800a538 <__lshift+0xa4>
 800a534:	f108 0602 	add.w	r6, r8, #2
 800a538:	3e01      	subs	r6, #1
 800a53a:	4638      	mov	r0, r7
 800a53c:	612e      	str	r6, [r5, #16]
 800a53e:	4621      	mov	r1, r4
 800a540:	f7ff fdda 	bl	800a0f8 <_Bfree>
 800a544:	4628      	mov	r0, r5
 800a546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a54e:	3301      	adds	r3, #1
 800a550:	e7c5      	b.n	800a4de <__lshift+0x4a>
 800a552:	3904      	subs	r1, #4
 800a554:	f853 2b04 	ldr.w	r2, [r3], #4
 800a558:	f841 2f04 	str.w	r2, [r1, #4]!
 800a55c:	459c      	cmp	ip, r3
 800a55e:	d8f9      	bhi.n	800a554 <__lshift+0xc0>
 800a560:	e7ea      	b.n	800a538 <__lshift+0xa4>
 800a562:	bf00      	nop
 800a564:	08020cf0 	.word	0x08020cf0
 800a568:	08020d01 	.word	0x08020d01

0800a56c <__mcmp>:
 800a56c:	690a      	ldr	r2, [r1, #16]
 800a56e:	4603      	mov	r3, r0
 800a570:	6900      	ldr	r0, [r0, #16]
 800a572:	1a80      	subs	r0, r0, r2
 800a574:	b530      	push	{r4, r5, lr}
 800a576:	d10e      	bne.n	800a596 <__mcmp+0x2a>
 800a578:	3314      	adds	r3, #20
 800a57a:	3114      	adds	r1, #20
 800a57c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a580:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a584:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a588:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a58c:	4295      	cmp	r5, r2
 800a58e:	d003      	beq.n	800a598 <__mcmp+0x2c>
 800a590:	d205      	bcs.n	800a59e <__mcmp+0x32>
 800a592:	f04f 30ff 	mov.w	r0, #4294967295
 800a596:	bd30      	pop	{r4, r5, pc}
 800a598:	42a3      	cmp	r3, r4
 800a59a:	d3f3      	bcc.n	800a584 <__mcmp+0x18>
 800a59c:	e7fb      	b.n	800a596 <__mcmp+0x2a>
 800a59e:	2001      	movs	r0, #1
 800a5a0:	e7f9      	b.n	800a596 <__mcmp+0x2a>
	...

0800a5a4 <__mdiff>:
 800a5a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a8:	4689      	mov	r9, r1
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	4611      	mov	r1, r2
 800a5ae:	4648      	mov	r0, r9
 800a5b0:	4614      	mov	r4, r2
 800a5b2:	f7ff ffdb 	bl	800a56c <__mcmp>
 800a5b6:	1e05      	subs	r5, r0, #0
 800a5b8:	d112      	bne.n	800a5e0 <__mdiff+0x3c>
 800a5ba:	4629      	mov	r1, r5
 800a5bc:	4630      	mov	r0, r6
 800a5be:	f7ff fd5b 	bl	800a078 <_Balloc>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	b928      	cbnz	r0, 800a5d2 <__mdiff+0x2e>
 800a5c6:	4b3f      	ldr	r3, [pc, #252]	@ (800a6c4 <__mdiff+0x120>)
 800a5c8:	f240 2137 	movw	r1, #567	@ 0x237
 800a5cc:	483e      	ldr	r0, [pc, #248]	@ (800a6c8 <__mdiff+0x124>)
 800a5ce:	f000 fc61 	bl	800ae94 <__assert_func>
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5d8:	4610      	mov	r0, r2
 800a5da:	b003      	add	sp, #12
 800a5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e0:	bfbc      	itt	lt
 800a5e2:	464b      	movlt	r3, r9
 800a5e4:	46a1      	movlt	r9, r4
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a5ec:	bfba      	itte	lt
 800a5ee:	461c      	movlt	r4, r3
 800a5f0:	2501      	movlt	r5, #1
 800a5f2:	2500      	movge	r5, #0
 800a5f4:	f7ff fd40 	bl	800a078 <_Balloc>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	b918      	cbnz	r0, 800a604 <__mdiff+0x60>
 800a5fc:	4b31      	ldr	r3, [pc, #196]	@ (800a6c4 <__mdiff+0x120>)
 800a5fe:	f240 2145 	movw	r1, #581	@ 0x245
 800a602:	e7e3      	b.n	800a5cc <__mdiff+0x28>
 800a604:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a608:	6926      	ldr	r6, [r4, #16]
 800a60a:	60c5      	str	r5, [r0, #12]
 800a60c:	f109 0310 	add.w	r3, r9, #16
 800a610:	f109 0514 	add.w	r5, r9, #20
 800a614:	f104 0e14 	add.w	lr, r4, #20
 800a618:	f100 0b14 	add.w	fp, r0, #20
 800a61c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a620:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a624:	9301      	str	r3, [sp, #4]
 800a626:	46d9      	mov	r9, fp
 800a628:	f04f 0c00 	mov.w	ip, #0
 800a62c:	9b01      	ldr	r3, [sp, #4]
 800a62e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a632:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	fa1f f38a 	uxth.w	r3, sl
 800a63c:	4619      	mov	r1, r3
 800a63e:	b283      	uxth	r3, r0
 800a640:	1acb      	subs	r3, r1, r3
 800a642:	0c00      	lsrs	r0, r0, #16
 800a644:	4463      	add	r3, ip
 800a646:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a64a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a64e:	b29b      	uxth	r3, r3
 800a650:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a654:	4576      	cmp	r6, lr
 800a656:	f849 3b04 	str.w	r3, [r9], #4
 800a65a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a65e:	d8e5      	bhi.n	800a62c <__mdiff+0x88>
 800a660:	1b33      	subs	r3, r6, r4
 800a662:	3b15      	subs	r3, #21
 800a664:	f023 0303 	bic.w	r3, r3, #3
 800a668:	3415      	adds	r4, #21
 800a66a:	3304      	adds	r3, #4
 800a66c:	42a6      	cmp	r6, r4
 800a66e:	bf38      	it	cc
 800a670:	2304      	movcc	r3, #4
 800a672:	441d      	add	r5, r3
 800a674:	445b      	add	r3, fp
 800a676:	461e      	mov	r6, r3
 800a678:	462c      	mov	r4, r5
 800a67a:	4544      	cmp	r4, r8
 800a67c:	d30e      	bcc.n	800a69c <__mdiff+0xf8>
 800a67e:	f108 0103 	add.w	r1, r8, #3
 800a682:	1b49      	subs	r1, r1, r5
 800a684:	f021 0103 	bic.w	r1, r1, #3
 800a688:	3d03      	subs	r5, #3
 800a68a:	45a8      	cmp	r8, r5
 800a68c:	bf38      	it	cc
 800a68e:	2100      	movcc	r1, #0
 800a690:	440b      	add	r3, r1
 800a692:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a696:	b191      	cbz	r1, 800a6be <__mdiff+0x11a>
 800a698:	6117      	str	r7, [r2, #16]
 800a69a:	e79d      	b.n	800a5d8 <__mdiff+0x34>
 800a69c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a6a0:	46e6      	mov	lr, ip
 800a6a2:	0c08      	lsrs	r0, r1, #16
 800a6a4:	fa1c fc81 	uxtah	ip, ip, r1
 800a6a8:	4471      	add	r1, lr
 800a6aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a6ae:	b289      	uxth	r1, r1
 800a6b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a6b4:	f846 1b04 	str.w	r1, [r6], #4
 800a6b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6bc:	e7dd      	b.n	800a67a <__mdiff+0xd6>
 800a6be:	3f01      	subs	r7, #1
 800a6c0:	e7e7      	b.n	800a692 <__mdiff+0xee>
 800a6c2:	bf00      	nop
 800a6c4:	08020cf0 	.word	0x08020cf0
 800a6c8:	08020d01 	.word	0x08020d01

0800a6cc <__d2b>:
 800a6cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6d0:	460f      	mov	r7, r1
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	ec59 8b10 	vmov	r8, r9, d0
 800a6d8:	4616      	mov	r6, r2
 800a6da:	f7ff fccd 	bl	800a078 <_Balloc>
 800a6de:	4604      	mov	r4, r0
 800a6e0:	b930      	cbnz	r0, 800a6f0 <__d2b+0x24>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	4b23      	ldr	r3, [pc, #140]	@ (800a774 <__d2b+0xa8>)
 800a6e6:	4824      	ldr	r0, [pc, #144]	@ (800a778 <__d2b+0xac>)
 800a6e8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a6ec:	f000 fbd2 	bl	800ae94 <__assert_func>
 800a6f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a6f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6f8:	b10d      	cbz	r5, 800a6fe <__d2b+0x32>
 800a6fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a6fe:	9301      	str	r3, [sp, #4]
 800a700:	f1b8 0300 	subs.w	r3, r8, #0
 800a704:	d023      	beq.n	800a74e <__d2b+0x82>
 800a706:	4668      	mov	r0, sp
 800a708:	9300      	str	r3, [sp, #0]
 800a70a:	f7ff fd7c 	bl	800a206 <__lo0bits>
 800a70e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a712:	b1d0      	cbz	r0, 800a74a <__d2b+0x7e>
 800a714:	f1c0 0320 	rsb	r3, r0, #32
 800a718:	fa02 f303 	lsl.w	r3, r2, r3
 800a71c:	430b      	orrs	r3, r1
 800a71e:	40c2      	lsrs	r2, r0
 800a720:	6163      	str	r3, [r4, #20]
 800a722:	9201      	str	r2, [sp, #4]
 800a724:	9b01      	ldr	r3, [sp, #4]
 800a726:	61a3      	str	r3, [r4, #24]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	bf0c      	ite	eq
 800a72c:	2201      	moveq	r2, #1
 800a72e:	2202      	movne	r2, #2
 800a730:	6122      	str	r2, [r4, #16]
 800a732:	b1a5      	cbz	r5, 800a75e <__d2b+0x92>
 800a734:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a738:	4405      	add	r5, r0
 800a73a:	603d      	str	r5, [r7, #0]
 800a73c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a740:	6030      	str	r0, [r6, #0]
 800a742:	4620      	mov	r0, r4
 800a744:	b003      	add	sp, #12
 800a746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a74a:	6161      	str	r1, [r4, #20]
 800a74c:	e7ea      	b.n	800a724 <__d2b+0x58>
 800a74e:	a801      	add	r0, sp, #4
 800a750:	f7ff fd59 	bl	800a206 <__lo0bits>
 800a754:	9b01      	ldr	r3, [sp, #4]
 800a756:	6163      	str	r3, [r4, #20]
 800a758:	3020      	adds	r0, #32
 800a75a:	2201      	movs	r2, #1
 800a75c:	e7e8      	b.n	800a730 <__d2b+0x64>
 800a75e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a762:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a766:	6038      	str	r0, [r7, #0]
 800a768:	6918      	ldr	r0, [r3, #16]
 800a76a:	f7ff fd2d 	bl	800a1c8 <__hi0bits>
 800a76e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a772:	e7e5      	b.n	800a740 <__d2b+0x74>
 800a774:	08020cf0 	.word	0x08020cf0
 800a778:	08020d01 	.word	0x08020d01

0800a77c <__ssputs_r>:
 800a77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a780:	688e      	ldr	r6, [r1, #8]
 800a782:	461f      	mov	r7, r3
 800a784:	42be      	cmp	r6, r7
 800a786:	680b      	ldr	r3, [r1, #0]
 800a788:	4682      	mov	sl, r0
 800a78a:	460c      	mov	r4, r1
 800a78c:	4690      	mov	r8, r2
 800a78e:	d82d      	bhi.n	800a7ec <__ssputs_r+0x70>
 800a790:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a794:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a798:	d026      	beq.n	800a7e8 <__ssputs_r+0x6c>
 800a79a:	6965      	ldr	r5, [r4, #20]
 800a79c:	6909      	ldr	r1, [r1, #16]
 800a79e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7a2:	eba3 0901 	sub.w	r9, r3, r1
 800a7a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7aa:	1c7b      	adds	r3, r7, #1
 800a7ac:	444b      	add	r3, r9
 800a7ae:	106d      	asrs	r5, r5, #1
 800a7b0:	429d      	cmp	r5, r3
 800a7b2:	bf38      	it	cc
 800a7b4:	461d      	movcc	r5, r3
 800a7b6:	0553      	lsls	r3, r2, #21
 800a7b8:	d527      	bpl.n	800a80a <__ssputs_r+0x8e>
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	f7ff fbd0 	bl	8009f60 <_malloc_r>
 800a7c0:	4606      	mov	r6, r0
 800a7c2:	b360      	cbz	r0, 800a81e <__ssputs_r+0xa2>
 800a7c4:	6921      	ldr	r1, [r4, #16]
 800a7c6:	464a      	mov	r2, r9
 800a7c8:	f000 fb56 	bl	800ae78 <memcpy>
 800a7cc:	89a3      	ldrh	r3, [r4, #12]
 800a7ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a7d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7d6:	81a3      	strh	r3, [r4, #12]
 800a7d8:	6126      	str	r6, [r4, #16]
 800a7da:	6165      	str	r5, [r4, #20]
 800a7dc:	444e      	add	r6, r9
 800a7de:	eba5 0509 	sub.w	r5, r5, r9
 800a7e2:	6026      	str	r6, [r4, #0]
 800a7e4:	60a5      	str	r5, [r4, #8]
 800a7e6:	463e      	mov	r6, r7
 800a7e8:	42be      	cmp	r6, r7
 800a7ea:	d900      	bls.n	800a7ee <__ssputs_r+0x72>
 800a7ec:	463e      	mov	r6, r7
 800a7ee:	6820      	ldr	r0, [r4, #0]
 800a7f0:	4632      	mov	r2, r6
 800a7f2:	4641      	mov	r1, r8
 800a7f4:	f000 faf4 	bl	800ade0 <memmove>
 800a7f8:	68a3      	ldr	r3, [r4, #8]
 800a7fa:	1b9b      	subs	r3, r3, r6
 800a7fc:	60a3      	str	r3, [r4, #8]
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	4433      	add	r3, r6
 800a802:	6023      	str	r3, [r4, #0]
 800a804:	2000      	movs	r0, #0
 800a806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a80a:	462a      	mov	r2, r5
 800a80c:	f000 fb86 	bl	800af1c <_realloc_r>
 800a810:	4606      	mov	r6, r0
 800a812:	2800      	cmp	r0, #0
 800a814:	d1e0      	bne.n	800a7d8 <__ssputs_r+0x5c>
 800a816:	6921      	ldr	r1, [r4, #16]
 800a818:	4650      	mov	r0, sl
 800a81a:	f7ff fb2d 	bl	8009e78 <_free_r>
 800a81e:	230c      	movs	r3, #12
 800a820:	f8ca 3000 	str.w	r3, [sl]
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a82a:	81a3      	strh	r3, [r4, #12]
 800a82c:	f04f 30ff 	mov.w	r0, #4294967295
 800a830:	e7e9      	b.n	800a806 <__ssputs_r+0x8a>
	...

0800a834 <_svfiprintf_r>:
 800a834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a838:	4698      	mov	r8, r3
 800a83a:	898b      	ldrh	r3, [r1, #12]
 800a83c:	061b      	lsls	r3, r3, #24
 800a83e:	b09d      	sub	sp, #116	@ 0x74
 800a840:	4607      	mov	r7, r0
 800a842:	460d      	mov	r5, r1
 800a844:	4614      	mov	r4, r2
 800a846:	d510      	bpl.n	800a86a <_svfiprintf_r+0x36>
 800a848:	690b      	ldr	r3, [r1, #16]
 800a84a:	b973      	cbnz	r3, 800a86a <_svfiprintf_r+0x36>
 800a84c:	2140      	movs	r1, #64	@ 0x40
 800a84e:	f7ff fb87 	bl	8009f60 <_malloc_r>
 800a852:	6028      	str	r0, [r5, #0]
 800a854:	6128      	str	r0, [r5, #16]
 800a856:	b930      	cbnz	r0, 800a866 <_svfiprintf_r+0x32>
 800a858:	230c      	movs	r3, #12
 800a85a:	603b      	str	r3, [r7, #0]
 800a85c:	f04f 30ff 	mov.w	r0, #4294967295
 800a860:	b01d      	add	sp, #116	@ 0x74
 800a862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a866:	2340      	movs	r3, #64	@ 0x40
 800a868:	616b      	str	r3, [r5, #20]
 800a86a:	2300      	movs	r3, #0
 800a86c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a86e:	2320      	movs	r3, #32
 800a870:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a874:	f8cd 800c 	str.w	r8, [sp, #12]
 800a878:	2330      	movs	r3, #48	@ 0x30
 800a87a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aa18 <_svfiprintf_r+0x1e4>
 800a87e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a882:	f04f 0901 	mov.w	r9, #1
 800a886:	4623      	mov	r3, r4
 800a888:	469a      	mov	sl, r3
 800a88a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a88e:	b10a      	cbz	r2, 800a894 <_svfiprintf_r+0x60>
 800a890:	2a25      	cmp	r2, #37	@ 0x25
 800a892:	d1f9      	bne.n	800a888 <_svfiprintf_r+0x54>
 800a894:	ebba 0b04 	subs.w	fp, sl, r4
 800a898:	d00b      	beq.n	800a8b2 <_svfiprintf_r+0x7e>
 800a89a:	465b      	mov	r3, fp
 800a89c:	4622      	mov	r2, r4
 800a89e:	4629      	mov	r1, r5
 800a8a0:	4638      	mov	r0, r7
 800a8a2:	f7ff ff6b 	bl	800a77c <__ssputs_r>
 800a8a6:	3001      	adds	r0, #1
 800a8a8:	f000 80a7 	beq.w	800a9fa <_svfiprintf_r+0x1c6>
 800a8ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8ae:	445a      	add	r2, fp
 800a8b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f000 809f 	beq.w	800a9fa <_svfiprintf_r+0x1c6>
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f04f 32ff 	mov.w	r2, #4294967295
 800a8c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8c6:	f10a 0a01 	add.w	sl, sl, #1
 800a8ca:	9304      	str	r3, [sp, #16]
 800a8cc:	9307      	str	r3, [sp, #28]
 800a8ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8d4:	4654      	mov	r4, sl
 800a8d6:	2205      	movs	r2, #5
 800a8d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8dc:	484e      	ldr	r0, [pc, #312]	@ (800aa18 <_svfiprintf_r+0x1e4>)
 800a8de:	f7f5 fc97 	bl	8000210 <memchr>
 800a8e2:	9a04      	ldr	r2, [sp, #16]
 800a8e4:	b9d8      	cbnz	r0, 800a91e <_svfiprintf_r+0xea>
 800a8e6:	06d0      	lsls	r0, r2, #27
 800a8e8:	bf44      	itt	mi
 800a8ea:	2320      	movmi	r3, #32
 800a8ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8f0:	0711      	lsls	r1, r2, #28
 800a8f2:	bf44      	itt	mi
 800a8f4:	232b      	movmi	r3, #43	@ 0x2b
 800a8f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a8fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800a900:	d015      	beq.n	800a92e <_svfiprintf_r+0xfa>
 800a902:	9a07      	ldr	r2, [sp, #28]
 800a904:	4654      	mov	r4, sl
 800a906:	2000      	movs	r0, #0
 800a908:	f04f 0c0a 	mov.w	ip, #10
 800a90c:	4621      	mov	r1, r4
 800a90e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a912:	3b30      	subs	r3, #48	@ 0x30
 800a914:	2b09      	cmp	r3, #9
 800a916:	d94b      	bls.n	800a9b0 <_svfiprintf_r+0x17c>
 800a918:	b1b0      	cbz	r0, 800a948 <_svfiprintf_r+0x114>
 800a91a:	9207      	str	r2, [sp, #28]
 800a91c:	e014      	b.n	800a948 <_svfiprintf_r+0x114>
 800a91e:	eba0 0308 	sub.w	r3, r0, r8
 800a922:	fa09 f303 	lsl.w	r3, r9, r3
 800a926:	4313      	orrs	r3, r2
 800a928:	9304      	str	r3, [sp, #16]
 800a92a:	46a2      	mov	sl, r4
 800a92c:	e7d2      	b.n	800a8d4 <_svfiprintf_r+0xa0>
 800a92e:	9b03      	ldr	r3, [sp, #12]
 800a930:	1d19      	adds	r1, r3, #4
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	9103      	str	r1, [sp, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	bfbb      	ittet	lt
 800a93a:	425b      	neglt	r3, r3
 800a93c:	f042 0202 	orrlt.w	r2, r2, #2
 800a940:	9307      	strge	r3, [sp, #28]
 800a942:	9307      	strlt	r3, [sp, #28]
 800a944:	bfb8      	it	lt
 800a946:	9204      	strlt	r2, [sp, #16]
 800a948:	7823      	ldrb	r3, [r4, #0]
 800a94a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a94c:	d10a      	bne.n	800a964 <_svfiprintf_r+0x130>
 800a94e:	7863      	ldrb	r3, [r4, #1]
 800a950:	2b2a      	cmp	r3, #42	@ 0x2a
 800a952:	d132      	bne.n	800a9ba <_svfiprintf_r+0x186>
 800a954:	9b03      	ldr	r3, [sp, #12]
 800a956:	1d1a      	adds	r2, r3, #4
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	9203      	str	r2, [sp, #12]
 800a95c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a960:	3402      	adds	r4, #2
 800a962:	9305      	str	r3, [sp, #20]
 800a964:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aa28 <_svfiprintf_r+0x1f4>
 800a968:	7821      	ldrb	r1, [r4, #0]
 800a96a:	2203      	movs	r2, #3
 800a96c:	4650      	mov	r0, sl
 800a96e:	f7f5 fc4f 	bl	8000210 <memchr>
 800a972:	b138      	cbz	r0, 800a984 <_svfiprintf_r+0x150>
 800a974:	9b04      	ldr	r3, [sp, #16]
 800a976:	eba0 000a 	sub.w	r0, r0, sl
 800a97a:	2240      	movs	r2, #64	@ 0x40
 800a97c:	4082      	lsls	r2, r0
 800a97e:	4313      	orrs	r3, r2
 800a980:	3401      	adds	r4, #1
 800a982:	9304      	str	r3, [sp, #16]
 800a984:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a988:	4824      	ldr	r0, [pc, #144]	@ (800aa1c <_svfiprintf_r+0x1e8>)
 800a98a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a98e:	2206      	movs	r2, #6
 800a990:	f7f5 fc3e 	bl	8000210 <memchr>
 800a994:	2800      	cmp	r0, #0
 800a996:	d036      	beq.n	800aa06 <_svfiprintf_r+0x1d2>
 800a998:	4b21      	ldr	r3, [pc, #132]	@ (800aa20 <_svfiprintf_r+0x1ec>)
 800a99a:	bb1b      	cbnz	r3, 800a9e4 <_svfiprintf_r+0x1b0>
 800a99c:	9b03      	ldr	r3, [sp, #12]
 800a99e:	3307      	adds	r3, #7
 800a9a0:	f023 0307 	bic.w	r3, r3, #7
 800a9a4:	3308      	adds	r3, #8
 800a9a6:	9303      	str	r3, [sp, #12]
 800a9a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9aa:	4433      	add	r3, r6
 800a9ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9ae:	e76a      	b.n	800a886 <_svfiprintf_r+0x52>
 800a9b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9b4:	460c      	mov	r4, r1
 800a9b6:	2001      	movs	r0, #1
 800a9b8:	e7a8      	b.n	800a90c <_svfiprintf_r+0xd8>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	3401      	adds	r4, #1
 800a9be:	9305      	str	r3, [sp, #20]
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	f04f 0c0a 	mov.w	ip, #10
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9cc:	3a30      	subs	r2, #48	@ 0x30
 800a9ce:	2a09      	cmp	r2, #9
 800a9d0:	d903      	bls.n	800a9da <_svfiprintf_r+0x1a6>
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d0c6      	beq.n	800a964 <_svfiprintf_r+0x130>
 800a9d6:	9105      	str	r1, [sp, #20]
 800a9d8:	e7c4      	b.n	800a964 <_svfiprintf_r+0x130>
 800a9da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9de:	4604      	mov	r4, r0
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e7f0      	b.n	800a9c6 <_svfiprintf_r+0x192>
 800a9e4:	ab03      	add	r3, sp, #12
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	462a      	mov	r2, r5
 800a9ea:	4b0e      	ldr	r3, [pc, #56]	@ (800aa24 <_svfiprintf_r+0x1f0>)
 800a9ec:	a904      	add	r1, sp, #16
 800a9ee:	4638      	mov	r0, r7
 800a9f0:	f7fd fafa 	bl	8007fe8 <_printf_float>
 800a9f4:	1c42      	adds	r2, r0, #1
 800a9f6:	4606      	mov	r6, r0
 800a9f8:	d1d6      	bne.n	800a9a8 <_svfiprintf_r+0x174>
 800a9fa:	89ab      	ldrh	r3, [r5, #12]
 800a9fc:	065b      	lsls	r3, r3, #25
 800a9fe:	f53f af2d 	bmi.w	800a85c <_svfiprintf_r+0x28>
 800aa02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa04:	e72c      	b.n	800a860 <_svfiprintf_r+0x2c>
 800aa06:	ab03      	add	r3, sp, #12
 800aa08:	9300      	str	r3, [sp, #0]
 800aa0a:	462a      	mov	r2, r5
 800aa0c:	4b05      	ldr	r3, [pc, #20]	@ (800aa24 <_svfiprintf_r+0x1f0>)
 800aa0e:	a904      	add	r1, sp, #16
 800aa10:	4638      	mov	r0, r7
 800aa12:	f7fd fd81 	bl	8008518 <_printf_i>
 800aa16:	e7ed      	b.n	800a9f4 <_svfiprintf_r+0x1c0>
 800aa18:	08020e58 	.word	0x08020e58
 800aa1c:	08020e62 	.word	0x08020e62
 800aa20:	08007fe9 	.word	0x08007fe9
 800aa24:	0800a77d 	.word	0x0800a77d
 800aa28:	08020e5e 	.word	0x08020e5e

0800aa2c <__sfputc_r>:
 800aa2c:	6893      	ldr	r3, [r2, #8]
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	b410      	push	{r4}
 800aa34:	6093      	str	r3, [r2, #8]
 800aa36:	da08      	bge.n	800aa4a <__sfputc_r+0x1e>
 800aa38:	6994      	ldr	r4, [r2, #24]
 800aa3a:	42a3      	cmp	r3, r4
 800aa3c:	db01      	blt.n	800aa42 <__sfputc_r+0x16>
 800aa3e:	290a      	cmp	r1, #10
 800aa40:	d103      	bne.n	800aa4a <__sfputc_r+0x1e>
 800aa42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa46:	f7fe b9fc 	b.w	8008e42 <__swbuf_r>
 800aa4a:	6813      	ldr	r3, [r2, #0]
 800aa4c:	1c58      	adds	r0, r3, #1
 800aa4e:	6010      	str	r0, [r2, #0]
 800aa50:	7019      	strb	r1, [r3, #0]
 800aa52:	4608      	mov	r0, r1
 800aa54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <__sfputs_r>:
 800aa5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5c:	4606      	mov	r6, r0
 800aa5e:	460f      	mov	r7, r1
 800aa60:	4614      	mov	r4, r2
 800aa62:	18d5      	adds	r5, r2, r3
 800aa64:	42ac      	cmp	r4, r5
 800aa66:	d101      	bne.n	800aa6c <__sfputs_r+0x12>
 800aa68:	2000      	movs	r0, #0
 800aa6a:	e007      	b.n	800aa7c <__sfputs_r+0x22>
 800aa6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa70:	463a      	mov	r2, r7
 800aa72:	4630      	mov	r0, r6
 800aa74:	f7ff ffda 	bl	800aa2c <__sfputc_r>
 800aa78:	1c43      	adds	r3, r0, #1
 800aa7a:	d1f3      	bne.n	800aa64 <__sfputs_r+0xa>
 800aa7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa80 <_vfiprintf_r>:
 800aa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa84:	460d      	mov	r5, r1
 800aa86:	b09d      	sub	sp, #116	@ 0x74
 800aa88:	4614      	mov	r4, r2
 800aa8a:	4698      	mov	r8, r3
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	b118      	cbz	r0, 800aa98 <_vfiprintf_r+0x18>
 800aa90:	6a03      	ldr	r3, [r0, #32]
 800aa92:	b90b      	cbnz	r3, 800aa98 <_vfiprintf_r+0x18>
 800aa94:	f7fe f848 	bl	8008b28 <__sinit>
 800aa98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa9a:	07d9      	lsls	r1, r3, #31
 800aa9c:	d405      	bmi.n	800aaaa <_vfiprintf_r+0x2a>
 800aa9e:	89ab      	ldrh	r3, [r5, #12]
 800aaa0:	059a      	lsls	r2, r3, #22
 800aaa2:	d402      	bmi.n	800aaaa <_vfiprintf_r+0x2a>
 800aaa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aaa6:	f7fe fb99 	bl	80091dc <__retarget_lock_acquire_recursive>
 800aaaa:	89ab      	ldrh	r3, [r5, #12]
 800aaac:	071b      	lsls	r3, r3, #28
 800aaae:	d501      	bpl.n	800aab4 <_vfiprintf_r+0x34>
 800aab0:	692b      	ldr	r3, [r5, #16]
 800aab2:	b99b      	cbnz	r3, 800aadc <_vfiprintf_r+0x5c>
 800aab4:	4629      	mov	r1, r5
 800aab6:	4630      	mov	r0, r6
 800aab8:	f7fe fa02 	bl	8008ec0 <__swsetup_r>
 800aabc:	b170      	cbz	r0, 800aadc <_vfiprintf_r+0x5c>
 800aabe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aac0:	07dc      	lsls	r4, r3, #31
 800aac2:	d504      	bpl.n	800aace <_vfiprintf_r+0x4e>
 800aac4:	f04f 30ff 	mov.w	r0, #4294967295
 800aac8:	b01d      	add	sp, #116	@ 0x74
 800aaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aace:	89ab      	ldrh	r3, [r5, #12]
 800aad0:	0598      	lsls	r0, r3, #22
 800aad2:	d4f7      	bmi.n	800aac4 <_vfiprintf_r+0x44>
 800aad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aad6:	f7fe fb82 	bl	80091de <__retarget_lock_release_recursive>
 800aada:	e7f3      	b.n	800aac4 <_vfiprintf_r+0x44>
 800aadc:	2300      	movs	r3, #0
 800aade:	9309      	str	r3, [sp, #36]	@ 0x24
 800aae0:	2320      	movs	r3, #32
 800aae2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aae6:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaea:	2330      	movs	r3, #48	@ 0x30
 800aaec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ac9c <_vfiprintf_r+0x21c>
 800aaf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aaf4:	f04f 0901 	mov.w	r9, #1
 800aaf8:	4623      	mov	r3, r4
 800aafa:	469a      	mov	sl, r3
 800aafc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab00:	b10a      	cbz	r2, 800ab06 <_vfiprintf_r+0x86>
 800ab02:	2a25      	cmp	r2, #37	@ 0x25
 800ab04:	d1f9      	bne.n	800aafa <_vfiprintf_r+0x7a>
 800ab06:	ebba 0b04 	subs.w	fp, sl, r4
 800ab0a:	d00b      	beq.n	800ab24 <_vfiprintf_r+0xa4>
 800ab0c:	465b      	mov	r3, fp
 800ab0e:	4622      	mov	r2, r4
 800ab10:	4629      	mov	r1, r5
 800ab12:	4630      	mov	r0, r6
 800ab14:	f7ff ffa1 	bl	800aa5a <__sfputs_r>
 800ab18:	3001      	adds	r0, #1
 800ab1a:	f000 80a7 	beq.w	800ac6c <_vfiprintf_r+0x1ec>
 800ab1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab20:	445a      	add	r2, fp
 800ab22:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab24:	f89a 3000 	ldrb.w	r3, [sl]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 809f 	beq.w	800ac6c <_vfiprintf_r+0x1ec>
 800ab2e:	2300      	movs	r3, #0
 800ab30:	f04f 32ff 	mov.w	r2, #4294967295
 800ab34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab38:	f10a 0a01 	add.w	sl, sl, #1
 800ab3c:	9304      	str	r3, [sp, #16]
 800ab3e:	9307      	str	r3, [sp, #28]
 800ab40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab44:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab46:	4654      	mov	r4, sl
 800ab48:	2205      	movs	r2, #5
 800ab4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab4e:	4853      	ldr	r0, [pc, #332]	@ (800ac9c <_vfiprintf_r+0x21c>)
 800ab50:	f7f5 fb5e 	bl	8000210 <memchr>
 800ab54:	9a04      	ldr	r2, [sp, #16]
 800ab56:	b9d8      	cbnz	r0, 800ab90 <_vfiprintf_r+0x110>
 800ab58:	06d1      	lsls	r1, r2, #27
 800ab5a:	bf44      	itt	mi
 800ab5c:	2320      	movmi	r3, #32
 800ab5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab62:	0713      	lsls	r3, r2, #28
 800ab64:	bf44      	itt	mi
 800ab66:	232b      	movmi	r3, #43	@ 0x2b
 800ab68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab70:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab72:	d015      	beq.n	800aba0 <_vfiprintf_r+0x120>
 800ab74:	9a07      	ldr	r2, [sp, #28]
 800ab76:	4654      	mov	r4, sl
 800ab78:	2000      	movs	r0, #0
 800ab7a:	f04f 0c0a 	mov.w	ip, #10
 800ab7e:	4621      	mov	r1, r4
 800ab80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab84:	3b30      	subs	r3, #48	@ 0x30
 800ab86:	2b09      	cmp	r3, #9
 800ab88:	d94b      	bls.n	800ac22 <_vfiprintf_r+0x1a2>
 800ab8a:	b1b0      	cbz	r0, 800abba <_vfiprintf_r+0x13a>
 800ab8c:	9207      	str	r2, [sp, #28]
 800ab8e:	e014      	b.n	800abba <_vfiprintf_r+0x13a>
 800ab90:	eba0 0308 	sub.w	r3, r0, r8
 800ab94:	fa09 f303 	lsl.w	r3, r9, r3
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	9304      	str	r3, [sp, #16]
 800ab9c:	46a2      	mov	sl, r4
 800ab9e:	e7d2      	b.n	800ab46 <_vfiprintf_r+0xc6>
 800aba0:	9b03      	ldr	r3, [sp, #12]
 800aba2:	1d19      	adds	r1, r3, #4
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	9103      	str	r1, [sp, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	bfbb      	ittet	lt
 800abac:	425b      	neglt	r3, r3
 800abae:	f042 0202 	orrlt.w	r2, r2, #2
 800abb2:	9307      	strge	r3, [sp, #28]
 800abb4:	9307      	strlt	r3, [sp, #28]
 800abb6:	bfb8      	it	lt
 800abb8:	9204      	strlt	r2, [sp, #16]
 800abba:	7823      	ldrb	r3, [r4, #0]
 800abbc:	2b2e      	cmp	r3, #46	@ 0x2e
 800abbe:	d10a      	bne.n	800abd6 <_vfiprintf_r+0x156>
 800abc0:	7863      	ldrb	r3, [r4, #1]
 800abc2:	2b2a      	cmp	r3, #42	@ 0x2a
 800abc4:	d132      	bne.n	800ac2c <_vfiprintf_r+0x1ac>
 800abc6:	9b03      	ldr	r3, [sp, #12]
 800abc8:	1d1a      	adds	r2, r3, #4
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	9203      	str	r2, [sp, #12]
 800abce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abd2:	3402      	adds	r4, #2
 800abd4:	9305      	str	r3, [sp, #20]
 800abd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800acac <_vfiprintf_r+0x22c>
 800abda:	7821      	ldrb	r1, [r4, #0]
 800abdc:	2203      	movs	r2, #3
 800abde:	4650      	mov	r0, sl
 800abe0:	f7f5 fb16 	bl	8000210 <memchr>
 800abe4:	b138      	cbz	r0, 800abf6 <_vfiprintf_r+0x176>
 800abe6:	9b04      	ldr	r3, [sp, #16]
 800abe8:	eba0 000a 	sub.w	r0, r0, sl
 800abec:	2240      	movs	r2, #64	@ 0x40
 800abee:	4082      	lsls	r2, r0
 800abf0:	4313      	orrs	r3, r2
 800abf2:	3401      	adds	r4, #1
 800abf4:	9304      	str	r3, [sp, #16]
 800abf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abfa:	4829      	ldr	r0, [pc, #164]	@ (800aca0 <_vfiprintf_r+0x220>)
 800abfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac00:	2206      	movs	r2, #6
 800ac02:	f7f5 fb05 	bl	8000210 <memchr>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	d03f      	beq.n	800ac8a <_vfiprintf_r+0x20a>
 800ac0a:	4b26      	ldr	r3, [pc, #152]	@ (800aca4 <_vfiprintf_r+0x224>)
 800ac0c:	bb1b      	cbnz	r3, 800ac56 <_vfiprintf_r+0x1d6>
 800ac0e:	9b03      	ldr	r3, [sp, #12]
 800ac10:	3307      	adds	r3, #7
 800ac12:	f023 0307 	bic.w	r3, r3, #7
 800ac16:	3308      	adds	r3, #8
 800ac18:	9303      	str	r3, [sp, #12]
 800ac1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac1c:	443b      	add	r3, r7
 800ac1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac20:	e76a      	b.n	800aaf8 <_vfiprintf_r+0x78>
 800ac22:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac26:	460c      	mov	r4, r1
 800ac28:	2001      	movs	r0, #1
 800ac2a:	e7a8      	b.n	800ab7e <_vfiprintf_r+0xfe>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	3401      	adds	r4, #1
 800ac30:	9305      	str	r3, [sp, #20]
 800ac32:	4619      	mov	r1, r3
 800ac34:	f04f 0c0a 	mov.w	ip, #10
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac3e:	3a30      	subs	r2, #48	@ 0x30
 800ac40:	2a09      	cmp	r2, #9
 800ac42:	d903      	bls.n	800ac4c <_vfiprintf_r+0x1cc>
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d0c6      	beq.n	800abd6 <_vfiprintf_r+0x156>
 800ac48:	9105      	str	r1, [sp, #20]
 800ac4a:	e7c4      	b.n	800abd6 <_vfiprintf_r+0x156>
 800ac4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac50:	4604      	mov	r4, r0
 800ac52:	2301      	movs	r3, #1
 800ac54:	e7f0      	b.n	800ac38 <_vfiprintf_r+0x1b8>
 800ac56:	ab03      	add	r3, sp, #12
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	462a      	mov	r2, r5
 800ac5c:	4b12      	ldr	r3, [pc, #72]	@ (800aca8 <_vfiprintf_r+0x228>)
 800ac5e:	a904      	add	r1, sp, #16
 800ac60:	4630      	mov	r0, r6
 800ac62:	f7fd f9c1 	bl	8007fe8 <_printf_float>
 800ac66:	4607      	mov	r7, r0
 800ac68:	1c78      	adds	r0, r7, #1
 800ac6a:	d1d6      	bne.n	800ac1a <_vfiprintf_r+0x19a>
 800ac6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac6e:	07d9      	lsls	r1, r3, #31
 800ac70:	d405      	bmi.n	800ac7e <_vfiprintf_r+0x1fe>
 800ac72:	89ab      	ldrh	r3, [r5, #12]
 800ac74:	059a      	lsls	r2, r3, #22
 800ac76:	d402      	bmi.n	800ac7e <_vfiprintf_r+0x1fe>
 800ac78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac7a:	f7fe fab0 	bl	80091de <__retarget_lock_release_recursive>
 800ac7e:	89ab      	ldrh	r3, [r5, #12]
 800ac80:	065b      	lsls	r3, r3, #25
 800ac82:	f53f af1f 	bmi.w	800aac4 <_vfiprintf_r+0x44>
 800ac86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac88:	e71e      	b.n	800aac8 <_vfiprintf_r+0x48>
 800ac8a:	ab03      	add	r3, sp, #12
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	462a      	mov	r2, r5
 800ac90:	4b05      	ldr	r3, [pc, #20]	@ (800aca8 <_vfiprintf_r+0x228>)
 800ac92:	a904      	add	r1, sp, #16
 800ac94:	4630      	mov	r0, r6
 800ac96:	f7fd fc3f 	bl	8008518 <_printf_i>
 800ac9a:	e7e4      	b.n	800ac66 <_vfiprintf_r+0x1e6>
 800ac9c:	08020e58 	.word	0x08020e58
 800aca0:	08020e62 	.word	0x08020e62
 800aca4:	08007fe9 	.word	0x08007fe9
 800aca8:	0800aa5b 	.word	0x0800aa5b
 800acac:	08020e5e 	.word	0x08020e5e

0800acb0 <__sflags>:
 800acb0:	780b      	ldrb	r3, [r1, #0]
 800acb2:	2b72      	cmp	r3, #114	@ 0x72
 800acb4:	b530      	push	{r4, r5, lr}
 800acb6:	d022      	beq.n	800acfe <__sflags+0x4e>
 800acb8:	2b77      	cmp	r3, #119	@ 0x77
 800acba:	d024      	beq.n	800ad06 <__sflags+0x56>
 800acbc:	2b61      	cmp	r3, #97	@ 0x61
 800acbe:	d027      	beq.n	800ad10 <__sflags+0x60>
 800acc0:	2316      	movs	r3, #22
 800acc2:	6003      	str	r3, [r0, #0]
 800acc4:	2000      	movs	r0, #0
 800acc6:	bd30      	pop	{r4, r5, pc}
 800acc8:	2d62      	cmp	r5, #98	@ 0x62
 800acca:	d012      	beq.n	800acf2 <__sflags+0x42>
 800accc:	2d78      	cmp	r5, #120	@ 0x78
 800acce:	d013      	beq.n	800acf8 <__sflags+0x48>
 800acd0:	2d2b      	cmp	r5, #43	@ 0x2b
 800acd2:	d107      	bne.n	800ace4 <__sflags+0x34>
 800acd4:	f020 001c 	bic.w	r0, r0, #28
 800acd8:	f023 0303 	bic.w	r3, r3, #3
 800acdc:	f040 0010 	orr.w	r0, r0, #16
 800ace0:	f043 0302 	orr.w	r3, r3, #2
 800ace4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800ace8:	2d00      	cmp	r5, #0
 800acea:	d1ed      	bne.n	800acc8 <__sflags+0x18>
 800acec:	4323      	orrs	r3, r4
 800acee:	6013      	str	r3, [r2, #0]
 800acf0:	e7e9      	b.n	800acc6 <__sflags+0x16>
 800acf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800acf6:	e7f5      	b.n	800ace4 <__sflags+0x34>
 800acf8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800acfc:	e7f2      	b.n	800ace4 <__sflags+0x34>
 800acfe:	2400      	movs	r4, #0
 800ad00:	4623      	mov	r3, r4
 800ad02:	2004      	movs	r0, #4
 800ad04:	e7ee      	b.n	800ace4 <__sflags+0x34>
 800ad06:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	2008      	movs	r0, #8
 800ad0e:	e7e9      	b.n	800ace4 <__sflags+0x34>
 800ad10:	f44f 7402 	mov.w	r4, #520	@ 0x208
 800ad14:	2301      	movs	r3, #1
 800ad16:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800ad1a:	e7e3      	b.n	800ace4 <__sflags+0x34>

0800ad1c <__swhatbuf_r>:
 800ad1c:	b570      	push	{r4, r5, r6, lr}
 800ad1e:	460c      	mov	r4, r1
 800ad20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad24:	2900      	cmp	r1, #0
 800ad26:	b096      	sub	sp, #88	@ 0x58
 800ad28:	4615      	mov	r5, r2
 800ad2a:	461e      	mov	r6, r3
 800ad2c:	da0d      	bge.n	800ad4a <__swhatbuf_r+0x2e>
 800ad2e:	89a3      	ldrh	r3, [r4, #12]
 800ad30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad34:	f04f 0100 	mov.w	r1, #0
 800ad38:	bf14      	ite	ne
 800ad3a:	2340      	movne	r3, #64	@ 0x40
 800ad3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad40:	2000      	movs	r0, #0
 800ad42:	6031      	str	r1, [r6, #0]
 800ad44:	602b      	str	r3, [r5, #0]
 800ad46:	b016      	add	sp, #88	@ 0x58
 800ad48:	bd70      	pop	{r4, r5, r6, pc}
 800ad4a:	466a      	mov	r2, sp
 800ad4c:	f000 f862 	bl	800ae14 <_fstat_r>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	dbec      	blt.n	800ad2e <__swhatbuf_r+0x12>
 800ad54:	9901      	ldr	r1, [sp, #4]
 800ad56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ad5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ad5e:	4259      	negs	r1, r3
 800ad60:	4159      	adcs	r1, r3
 800ad62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad66:	e7eb      	b.n	800ad40 <__swhatbuf_r+0x24>

0800ad68 <__smakebuf_r>:
 800ad68:	898b      	ldrh	r3, [r1, #12]
 800ad6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad6c:	079d      	lsls	r5, r3, #30
 800ad6e:	4606      	mov	r6, r0
 800ad70:	460c      	mov	r4, r1
 800ad72:	d507      	bpl.n	800ad84 <__smakebuf_r+0x1c>
 800ad74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	6123      	str	r3, [r4, #16]
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	6163      	str	r3, [r4, #20]
 800ad80:	b003      	add	sp, #12
 800ad82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad84:	ab01      	add	r3, sp, #4
 800ad86:	466a      	mov	r2, sp
 800ad88:	f7ff ffc8 	bl	800ad1c <__swhatbuf_r>
 800ad8c:	9f00      	ldr	r7, [sp, #0]
 800ad8e:	4605      	mov	r5, r0
 800ad90:	4639      	mov	r1, r7
 800ad92:	4630      	mov	r0, r6
 800ad94:	f7ff f8e4 	bl	8009f60 <_malloc_r>
 800ad98:	b948      	cbnz	r0, 800adae <__smakebuf_r+0x46>
 800ad9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad9e:	059a      	lsls	r2, r3, #22
 800ada0:	d4ee      	bmi.n	800ad80 <__smakebuf_r+0x18>
 800ada2:	f023 0303 	bic.w	r3, r3, #3
 800ada6:	f043 0302 	orr.w	r3, r3, #2
 800adaa:	81a3      	strh	r3, [r4, #12]
 800adac:	e7e2      	b.n	800ad74 <__smakebuf_r+0xc>
 800adae:	89a3      	ldrh	r3, [r4, #12]
 800adb0:	6020      	str	r0, [r4, #0]
 800adb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adb6:	81a3      	strh	r3, [r4, #12]
 800adb8:	9b01      	ldr	r3, [sp, #4]
 800adba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800adbe:	b15b      	cbz	r3, 800add8 <__smakebuf_r+0x70>
 800adc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adc4:	4630      	mov	r0, r6
 800adc6:	f000 f837 	bl	800ae38 <_isatty_r>
 800adca:	b128      	cbz	r0, 800add8 <__smakebuf_r+0x70>
 800adcc:	89a3      	ldrh	r3, [r4, #12]
 800adce:	f023 0303 	bic.w	r3, r3, #3
 800add2:	f043 0301 	orr.w	r3, r3, #1
 800add6:	81a3      	strh	r3, [r4, #12]
 800add8:	89a3      	ldrh	r3, [r4, #12]
 800adda:	431d      	orrs	r5, r3
 800addc:	81a5      	strh	r5, [r4, #12]
 800adde:	e7cf      	b.n	800ad80 <__smakebuf_r+0x18>

0800ade0 <memmove>:
 800ade0:	4288      	cmp	r0, r1
 800ade2:	b510      	push	{r4, lr}
 800ade4:	eb01 0402 	add.w	r4, r1, r2
 800ade8:	d902      	bls.n	800adf0 <memmove+0x10>
 800adea:	4284      	cmp	r4, r0
 800adec:	4623      	mov	r3, r4
 800adee:	d807      	bhi.n	800ae00 <memmove+0x20>
 800adf0:	1e43      	subs	r3, r0, #1
 800adf2:	42a1      	cmp	r1, r4
 800adf4:	d008      	beq.n	800ae08 <memmove+0x28>
 800adf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adfe:	e7f8      	b.n	800adf2 <memmove+0x12>
 800ae00:	4402      	add	r2, r0
 800ae02:	4601      	mov	r1, r0
 800ae04:	428a      	cmp	r2, r1
 800ae06:	d100      	bne.n	800ae0a <memmove+0x2a>
 800ae08:	bd10      	pop	{r4, pc}
 800ae0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae12:	e7f7      	b.n	800ae04 <memmove+0x24>

0800ae14 <_fstat_r>:
 800ae14:	b538      	push	{r3, r4, r5, lr}
 800ae16:	4d07      	ldr	r5, [pc, #28]	@ (800ae34 <_fstat_r+0x20>)
 800ae18:	2300      	movs	r3, #0
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	4608      	mov	r0, r1
 800ae1e:	4611      	mov	r1, r2
 800ae20:	602b      	str	r3, [r5, #0]
 800ae22:	f000 fa4a 	bl	800b2ba <_fstat>
 800ae26:	1c43      	adds	r3, r0, #1
 800ae28:	d102      	bne.n	800ae30 <_fstat_r+0x1c>
 800ae2a:	682b      	ldr	r3, [r5, #0]
 800ae2c:	b103      	cbz	r3, 800ae30 <_fstat_r+0x1c>
 800ae2e:	6023      	str	r3, [r4, #0]
 800ae30:	bd38      	pop	{r3, r4, r5, pc}
 800ae32:	bf00      	nop
 800ae34:	20003520 	.word	0x20003520

0800ae38 <_isatty_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	4d06      	ldr	r5, [pc, #24]	@ (800ae54 <_isatty_r+0x1c>)
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	4604      	mov	r4, r0
 800ae40:	4608      	mov	r0, r1
 800ae42:	602b      	str	r3, [r5, #0]
 800ae44:	f000 fbc6 	bl	800b5d4 <_isatty>
 800ae48:	1c43      	adds	r3, r0, #1
 800ae4a:	d102      	bne.n	800ae52 <_isatty_r+0x1a>
 800ae4c:	682b      	ldr	r3, [r5, #0]
 800ae4e:	b103      	cbz	r3, 800ae52 <_isatty_r+0x1a>
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	bd38      	pop	{r3, r4, r5, pc}
 800ae54:	20003520 	.word	0x20003520

0800ae58 <_sbrk_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	4d06      	ldr	r5, [pc, #24]	@ (800ae74 <_sbrk_r+0x1c>)
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	4604      	mov	r4, r0
 800ae60:	4608      	mov	r0, r1
 800ae62:	602b      	str	r3, [r5, #0]
 800ae64:	f7f7 f888 	bl	8001f78 <_sbrk>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	d102      	bne.n	800ae72 <_sbrk_r+0x1a>
 800ae6c:	682b      	ldr	r3, [r5, #0]
 800ae6e:	b103      	cbz	r3, 800ae72 <_sbrk_r+0x1a>
 800ae70:	6023      	str	r3, [r4, #0]
 800ae72:	bd38      	pop	{r3, r4, r5, pc}
 800ae74:	20003520 	.word	0x20003520

0800ae78 <memcpy>:
 800ae78:	440a      	add	r2, r1
 800ae7a:	4291      	cmp	r1, r2
 800ae7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae80:	d100      	bne.n	800ae84 <memcpy+0xc>
 800ae82:	4770      	bx	lr
 800ae84:	b510      	push	{r4, lr}
 800ae86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae8e:	4291      	cmp	r1, r2
 800ae90:	d1f9      	bne.n	800ae86 <memcpy+0xe>
 800ae92:	bd10      	pop	{r4, pc}

0800ae94 <__assert_func>:
 800ae94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae96:	4614      	mov	r4, r2
 800ae98:	461a      	mov	r2, r3
 800ae9a:	4b09      	ldr	r3, [pc, #36]	@ (800aec0 <__assert_func+0x2c>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4605      	mov	r5, r0
 800aea0:	68d8      	ldr	r0, [r3, #12]
 800aea2:	b954      	cbnz	r4, 800aeba <__assert_func+0x26>
 800aea4:	4b07      	ldr	r3, [pc, #28]	@ (800aec4 <__assert_func+0x30>)
 800aea6:	461c      	mov	r4, r3
 800aea8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aeac:	9100      	str	r1, [sp, #0]
 800aeae:	462b      	mov	r3, r5
 800aeb0:	4905      	ldr	r1, [pc, #20]	@ (800aec8 <__assert_func+0x34>)
 800aeb2:	f7fd fead 	bl	8008c10 <fiprintf>
 800aeb6:	f000 f86c 	bl	800af92 <abort>
 800aeba:	4b04      	ldr	r3, [pc, #16]	@ (800aecc <__assert_func+0x38>)
 800aebc:	e7f4      	b.n	800aea8 <__assert_func+0x14>
 800aebe:	bf00      	nop
 800aec0:	20000018 	.word	0x20000018
 800aec4:	08020eae 	.word	0x08020eae
 800aec8:	08020e80 	.word	0x08020e80
 800aecc:	08020e73 	.word	0x08020e73

0800aed0 <_calloc_r>:
 800aed0:	b570      	push	{r4, r5, r6, lr}
 800aed2:	fba1 5402 	umull	r5, r4, r1, r2
 800aed6:	b93c      	cbnz	r4, 800aee8 <_calloc_r+0x18>
 800aed8:	4629      	mov	r1, r5
 800aeda:	f7ff f841 	bl	8009f60 <_malloc_r>
 800aede:	4606      	mov	r6, r0
 800aee0:	b928      	cbnz	r0, 800aeee <_calloc_r+0x1e>
 800aee2:	2600      	movs	r6, #0
 800aee4:	4630      	mov	r0, r6
 800aee6:	bd70      	pop	{r4, r5, r6, pc}
 800aee8:	220c      	movs	r2, #12
 800aeea:	6002      	str	r2, [r0, #0]
 800aeec:	e7f9      	b.n	800aee2 <_calloc_r+0x12>
 800aeee:	462a      	mov	r2, r5
 800aef0:	4621      	mov	r1, r4
 800aef2:	f7fe f8d2 	bl	800909a <memset>
 800aef6:	e7f5      	b.n	800aee4 <_calloc_r+0x14>

0800aef8 <__ascii_mbtowc>:
 800aef8:	b082      	sub	sp, #8
 800aefa:	b901      	cbnz	r1, 800aefe <__ascii_mbtowc+0x6>
 800aefc:	a901      	add	r1, sp, #4
 800aefe:	b142      	cbz	r2, 800af12 <__ascii_mbtowc+0x1a>
 800af00:	b14b      	cbz	r3, 800af16 <__ascii_mbtowc+0x1e>
 800af02:	7813      	ldrb	r3, [r2, #0]
 800af04:	600b      	str	r3, [r1, #0]
 800af06:	7812      	ldrb	r2, [r2, #0]
 800af08:	1e10      	subs	r0, r2, #0
 800af0a:	bf18      	it	ne
 800af0c:	2001      	movne	r0, #1
 800af0e:	b002      	add	sp, #8
 800af10:	4770      	bx	lr
 800af12:	4610      	mov	r0, r2
 800af14:	e7fb      	b.n	800af0e <__ascii_mbtowc+0x16>
 800af16:	f06f 0001 	mvn.w	r0, #1
 800af1a:	e7f8      	b.n	800af0e <__ascii_mbtowc+0x16>

0800af1c <_realloc_r>:
 800af1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af20:	4680      	mov	r8, r0
 800af22:	4615      	mov	r5, r2
 800af24:	460c      	mov	r4, r1
 800af26:	b921      	cbnz	r1, 800af32 <_realloc_r+0x16>
 800af28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af2c:	4611      	mov	r1, r2
 800af2e:	f7ff b817 	b.w	8009f60 <_malloc_r>
 800af32:	b92a      	cbnz	r2, 800af40 <_realloc_r+0x24>
 800af34:	f7fe ffa0 	bl	8009e78 <_free_r>
 800af38:	2400      	movs	r4, #0
 800af3a:	4620      	mov	r0, r4
 800af3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af40:	f000 f82e 	bl	800afa0 <_malloc_usable_size_r>
 800af44:	4285      	cmp	r5, r0
 800af46:	4606      	mov	r6, r0
 800af48:	d802      	bhi.n	800af50 <_realloc_r+0x34>
 800af4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800af4e:	d8f4      	bhi.n	800af3a <_realloc_r+0x1e>
 800af50:	4629      	mov	r1, r5
 800af52:	4640      	mov	r0, r8
 800af54:	f7ff f804 	bl	8009f60 <_malloc_r>
 800af58:	4607      	mov	r7, r0
 800af5a:	2800      	cmp	r0, #0
 800af5c:	d0ec      	beq.n	800af38 <_realloc_r+0x1c>
 800af5e:	42b5      	cmp	r5, r6
 800af60:	462a      	mov	r2, r5
 800af62:	4621      	mov	r1, r4
 800af64:	bf28      	it	cs
 800af66:	4632      	movcs	r2, r6
 800af68:	f7ff ff86 	bl	800ae78 <memcpy>
 800af6c:	4621      	mov	r1, r4
 800af6e:	4640      	mov	r0, r8
 800af70:	f7fe ff82 	bl	8009e78 <_free_r>
 800af74:	463c      	mov	r4, r7
 800af76:	e7e0      	b.n	800af3a <_realloc_r+0x1e>

0800af78 <__ascii_wctomb>:
 800af78:	4603      	mov	r3, r0
 800af7a:	4608      	mov	r0, r1
 800af7c:	b141      	cbz	r1, 800af90 <__ascii_wctomb+0x18>
 800af7e:	2aff      	cmp	r2, #255	@ 0xff
 800af80:	d904      	bls.n	800af8c <__ascii_wctomb+0x14>
 800af82:	228a      	movs	r2, #138	@ 0x8a
 800af84:	601a      	str	r2, [r3, #0]
 800af86:	f04f 30ff 	mov.w	r0, #4294967295
 800af8a:	4770      	bx	lr
 800af8c:	700a      	strb	r2, [r1, #0]
 800af8e:	2001      	movs	r0, #1
 800af90:	4770      	bx	lr

0800af92 <abort>:
 800af92:	b508      	push	{r3, lr}
 800af94:	2006      	movs	r0, #6
 800af96:	f000 f833 	bl	800b000 <raise>
 800af9a:	2001      	movs	r0, #1
 800af9c:	f000 f84c 	bl	800b038 <_exit>

0800afa0 <_malloc_usable_size_r>:
 800afa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afa4:	1f18      	subs	r0, r3, #4
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	bfbc      	itt	lt
 800afaa:	580b      	ldrlt	r3, [r1, r0]
 800afac:	18c0      	addlt	r0, r0, r3
 800afae:	4770      	bx	lr

0800afb0 <_raise_r>:
 800afb0:	291f      	cmp	r1, #31
 800afb2:	b538      	push	{r3, r4, r5, lr}
 800afb4:	4605      	mov	r5, r0
 800afb6:	460c      	mov	r4, r1
 800afb8:	d904      	bls.n	800afc4 <_raise_r+0x14>
 800afba:	2316      	movs	r3, #22
 800afbc:	6003      	str	r3, [r0, #0]
 800afbe:	f04f 30ff 	mov.w	r0, #4294967295
 800afc2:	bd38      	pop	{r3, r4, r5, pc}
 800afc4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800afc6:	b112      	cbz	r2, 800afce <_raise_r+0x1e>
 800afc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afcc:	b94b      	cbnz	r3, 800afe2 <_raise_r+0x32>
 800afce:	4628      	mov	r0, r5
 800afd0:	f000 f830 	bl	800b034 <_getpid_r>
 800afd4:	4622      	mov	r2, r4
 800afd6:	4601      	mov	r1, r0
 800afd8:	4628      	mov	r0, r5
 800afda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afde:	f000 b817 	b.w	800b010 <_kill_r>
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d00a      	beq.n	800affc <_raise_r+0x4c>
 800afe6:	1c59      	adds	r1, r3, #1
 800afe8:	d103      	bne.n	800aff2 <_raise_r+0x42>
 800afea:	2316      	movs	r3, #22
 800afec:	6003      	str	r3, [r0, #0]
 800afee:	2001      	movs	r0, #1
 800aff0:	e7e7      	b.n	800afc2 <_raise_r+0x12>
 800aff2:	2100      	movs	r1, #0
 800aff4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aff8:	4620      	mov	r0, r4
 800affa:	4798      	blx	r3
 800affc:	2000      	movs	r0, #0
 800affe:	e7e0      	b.n	800afc2 <_raise_r+0x12>

0800b000 <raise>:
 800b000:	4b02      	ldr	r3, [pc, #8]	@ (800b00c <raise+0xc>)
 800b002:	4601      	mov	r1, r0
 800b004:	6818      	ldr	r0, [r3, #0]
 800b006:	f7ff bfd3 	b.w	800afb0 <_raise_r>
 800b00a:	bf00      	nop
 800b00c:	20000018 	.word	0x20000018

0800b010 <_kill_r>:
 800b010:	b538      	push	{r3, r4, r5, lr}
 800b012:	4d07      	ldr	r5, [pc, #28]	@ (800b030 <_kill_r+0x20>)
 800b014:	2300      	movs	r3, #0
 800b016:	4604      	mov	r4, r0
 800b018:	4608      	mov	r0, r1
 800b01a:	4611      	mov	r1, r2
 800b01c:	602b      	str	r3, [r5, #0]
 800b01e:	f000 f829 	bl	800b074 <_kill>
 800b022:	1c43      	adds	r3, r0, #1
 800b024:	d102      	bne.n	800b02c <_kill_r+0x1c>
 800b026:	682b      	ldr	r3, [r5, #0]
 800b028:	b103      	cbz	r3, 800b02c <_kill_r+0x1c>
 800b02a:	6023      	str	r3, [r4, #0]
 800b02c:	bd38      	pop	{r3, r4, r5, pc}
 800b02e:	bf00      	nop
 800b030:	20003520 	.word	0x20003520

0800b034 <_getpid_r>:
 800b034:	f000 b91e 	b.w	800b274 <_getpid>

0800b038 <_exit>:
 800b038:	4601      	mov	r1, r0
 800b03a:	b508      	push	{r3, lr}
 800b03c:	4a02      	ldr	r2, [pc, #8]	@ (800b048 <_exit+0x10>)
 800b03e:	f04f 30ff 	mov.w	r0, #4294967295
 800b042:	f000 f803 	bl	800b04c <_kill_shared>
 800b046:	bf00      	nop
 800b048:	00020026 	.word	0x00020026

0800b04c <_kill_shared>:
 800b04c:	b507      	push	{r0, r1, r2, lr}
 800b04e:	e9cd 2100 	strd	r2, r1, [sp]
 800b052:	f000 fa33 	bl	800b4bc <_has_ext_exit_extended>
 800b056:	2800      	cmp	r0, #0
 800b058:	bf0c      	ite	eq
 800b05a:	2418      	moveq	r4, #24
 800b05c:	2420      	movne	r4, #32
 800b05e:	f000 fa2d 	bl	800b4bc <_has_ext_exit_extended>
 800b062:	b120      	cbz	r0, 800b06e <_kill_shared+0x22>
 800b064:	466d      	mov	r5, sp
 800b066:	4620      	mov	r0, r4
 800b068:	4629      	mov	r1, r5
 800b06a:	beab      	bkpt	0x00ab
 800b06c:	4604      	mov	r4, r0
 800b06e:	9d00      	ldr	r5, [sp, #0]
 800b070:	e7f9      	b.n	800b066 <_kill_shared+0x1a>
	...

0800b074 <_kill>:
 800b074:	2906      	cmp	r1, #6
 800b076:	b508      	push	{r3, lr}
 800b078:	bf0c      	ite	eq
 800b07a:	4a02      	ldreq	r2, [pc, #8]	@ (800b084 <_kill+0x10>)
 800b07c:	4a02      	ldrne	r2, [pc, #8]	@ (800b088 <_kill+0x14>)
 800b07e:	f7ff ffe5 	bl	800b04c <_kill_shared>
 800b082:	bf00      	nop
 800b084:	00020023 	.word	0x00020023
 800b088:	00020026 	.word	0x00020026

0800b08c <findslot>:
 800b08c:	4b0a      	ldr	r3, [pc, #40]	@ (800b0b8 <findslot+0x2c>)
 800b08e:	b510      	push	{r4, lr}
 800b090:	4604      	mov	r4, r0
 800b092:	6818      	ldr	r0, [r3, #0]
 800b094:	b118      	cbz	r0, 800b09e <findslot+0x12>
 800b096:	6a03      	ldr	r3, [r0, #32]
 800b098:	b90b      	cbnz	r3, 800b09e <findslot+0x12>
 800b09a:	f7fd fd45 	bl	8008b28 <__sinit>
 800b09e:	2c13      	cmp	r4, #19
 800b0a0:	d807      	bhi.n	800b0b2 <findslot+0x26>
 800b0a2:	4806      	ldr	r0, [pc, #24]	@ (800b0bc <findslot+0x30>)
 800b0a4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800b0a8:	3201      	adds	r2, #1
 800b0aa:	d002      	beq.n	800b0b2 <findslot+0x26>
 800b0ac:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800b0b0:	bd10      	pop	{r4, pc}
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	e7fc      	b.n	800b0b0 <findslot+0x24>
 800b0b6:	bf00      	nop
 800b0b8:	20000018 	.word	0x20000018
 800b0bc:	2000353c 	.word	0x2000353c

0800b0c0 <error>:
 800b0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	f7fe f85e 	bl	8009184 <__errno>
 800b0c8:	2613      	movs	r6, #19
 800b0ca:	4605      	mov	r5, r0
 800b0cc:	2700      	movs	r7, #0
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	4639      	mov	r1, r7
 800b0d2:	beab      	bkpt	0x00ab
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	602e      	str	r6, [r5, #0]
 800b0d8:	4620      	mov	r0, r4
 800b0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b0dc <checkerror>:
 800b0dc:	1c43      	adds	r3, r0, #1
 800b0de:	d101      	bne.n	800b0e4 <checkerror+0x8>
 800b0e0:	f7ff bfee 	b.w	800b0c0 <error>
 800b0e4:	4770      	bx	lr

0800b0e6 <_swiread>:
 800b0e6:	b530      	push	{r4, r5, lr}
 800b0e8:	b085      	sub	sp, #20
 800b0ea:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800b0ee:	9203      	str	r2, [sp, #12]
 800b0f0:	2406      	movs	r4, #6
 800b0f2:	ad01      	add	r5, sp, #4
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	beab      	bkpt	0x00ab
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f7ff ffed 	bl	800b0dc <checkerror>
 800b102:	b005      	add	sp, #20
 800b104:	bd30      	pop	{r4, r5, pc}

0800b106 <_read>:
 800b106:	b570      	push	{r4, r5, r6, lr}
 800b108:	460e      	mov	r6, r1
 800b10a:	4614      	mov	r4, r2
 800b10c:	f7ff ffbe 	bl	800b08c <findslot>
 800b110:	4605      	mov	r5, r0
 800b112:	b930      	cbnz	r0, 800b122 <_read+0x1c>
 800b114:	f7fe f836 	bl	8009184 <__errno>
 800b118:	2309      	movs	r3, #9
 800b11a:	6003      	str	r3, [r0, #0]
 800b11c:	f04f 30ff 	mov.w	r0, #4294967295
 800b120:	bd70      	pop	{r4, r5, r6, pc}
 800b122:	6800      	ldr	r0, [r0, #0]
 800b124:	4622      	mov	r2, r4
 800b126:	4631      	mov	r1, r6
 800b128:	f7ff ffdd 	bl	800b0e6 <_swiread>
 800b12c:	1c43      	adds	r3, r0, #1
 800b12e:	d0f5      	beq.n	800b11c <_read+0x16>
 800b130:	686b      	ldr	r3, [r5, #4]
 800b132:	1a20      	subs	r0, r4, r0
 800b134:	4403      	add	r3, r0
 800b136:	606b      	str	r3, [r5, #4]
 800b138:	e7f2      	b.n	800b120 <_read+0x1a>

0800b13a <_swilseek>:
 800b13a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b13c:	460c      	mov	r4, r1
 800b13e:	4616      	mov	r6, r2
 800b140:	f7ff ffa4 	bl	800b08c <findslot>
 800b144:	4605      	mov	r5, r0
 800b146:	b940      	cbnz	r0, 800b15a <_swilseek+0x20>
 800b148:	f7fe f81c 	bl	8009184 <__errno>
 800b14c:	2309      	movs	r3, #9
 800b14e:	6003      	str	r3, [r0, #0]
 800b150:	f04f 34ff 	mov.w	r4, #4294967295
 800b154:	4620      	mov	r0, r4
 800b156:	b003      	add	sp, #12
 800b158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b15a:	2e02      	cmp	r6, #2
 800b15c:	d903      	bls.n	800b166 <_swilseek+0x2c>
 800b15e:	f7fe f811 	bl	8009184 <__errno>
 800b162:	2316      	movs	r3, #22
 800b164:	e7f3      	b.n	800b14e <_swilseek+0x14>
 800b166:	2e01      	cmp	r6, #1
 800b168:	d112      	bne.n	800b190 <_swilseek+0x56>
 800b16a:	6843      	ldr	r3, [r0, #4]
 800b16c:	18e4      	adds	r4, r4, r3
 800b16e:	d4f6      	bmi.n	800b15e <_swilseek+0x24>
 800b170:	682b      	ldr	r3, [r5, #0]
 800b172:	260a      	movs	r6, #10
 800b174:	e9cd 3400 	strd	r3, r4, [sp]
 800b178:	466f      	mov	r7, sp
 800b17a:	4630      	mov	r0, r6
 800b17c:	4639      	mov	r1, r7
 800b17e:	beab      	bkpt	0x00ab
 800b180:	4606      	mov	r6, r0
 800b182:	4630      	mov	r0, r6
 800b184:	f7ff ffaa 	bl	800b0dc <checkerror>
 800b188:	2800      	cmp	r0, #0
 800b18a:	dbe1      	blt.n	800b150 <_swilseek+0x16>
 800b18c:	606c      	str	r4, [r5, #4]
 800b18e:	e7e1      	b.n	800b154 <_swilseek+0x1a>
 800b190:	2e02      	cmp	r6, #2
 800b192:	6803      	ldr	r3, [r0, #0]
 800b194:	d1ec      	bne.n	800b170 <_swilseek+0x36>
 800b196:	9300      	str	r3, [sp, #0]
 800b198:	260c      	movs	r6, #12
 800b19a:	466f      	mov	r7, sp
 800b19c:	4630      	mov	r0, r6
 800b19e:	4639      	mov	r1, r7
 800b1a0:	beab      	bkpt	0x00ab
 800b1a2:	4606      	mov	r6, r0
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	f7ff ff99 	bl	800b0dc <checkerror>
 800b1aa:	1c43      	adds	r3, r0, #1
 800b1ac:	d0d0      	beq.n	800b150 <_swilseek+0x16>
 800b1ae:	4404      	add	r4, r0
 800b1b0:	e7de      	b.n	800b170 <_swilseek+0x36>

0800b1b2 <_lseek>:
 800b1b2:	f7ff bfc2 	b.w	800b13a <_swilseek>

0800b1b6 <_swiwrite>:
 800b1b6:	b530      	push	{r4, r5, lr}
 800b1b8:	b085      	sub	sp, #20
 800b1ba:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800b1be:	9203      	str	r2, [sp, #12]
 800b1c0:	2405      	movs	r4, #5
 800b1c2:	ad01      	add	r5, sp, #4
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	beab      	bkpt	0x00ab
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	f7ff ff85 	bl	800b0dc <checkerror>
 800b1d2:	b005      	add	sp, #20
 800b1d4:	bd30      	pop	{r4, r5, pc}

0800b1d6 <_write>:
 800b1d6:	b570      	push	{r4, r5, r6, lr}
 800b1d8:	460e      	mov	r6, r1
 800b1da:	4615      	mov	r5, r2
 800b1dc:	f7ff ff56 	bl	800b08c <findslot>
 800b1e0:	4604      	mov	r4, r0
 800b1e2:	b930      	cbnz	r0, 800b1f2 <_write+0x1c>
 800b1e4:	f7fd ffce 	bl	8009184 <__errno>
 800b1e8:	2309      	movs	r3, #9
 800b1ea:	6003      	str	r3, [r0, #0]
 800b1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f0:	bd70      	pop	{r4, r5, r6, pc}
 800b1f2:	6800      	ldr	r0, [r0, #0]
 800b1f4:	462a      	mov	r2, r5
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	f7ff ffdd 	bl	800b1b6 <_swiwrite>
 800b1fc:	1e03      	subs	r3, r0, #0
 800b1fe:	dbf5      	blt.n	800b1ec <_write+0x16>
 800b200:	6862      	ldr	r2, [r4, #4]
 800b202:	1ae8      	subs	r0, r5, r3
 800b204:	4402      	add	r2, r0
 800b206:	42ab      	cmp	r3, r5
 800b208:	6062      	str	r2, [r4, #4]
 800b20a:	d1f1      	bne.n	800b1f0 <_write+0x1a>
 800b20c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b210:	2000      	movs	r0, #0
 800b212:	f7ff bf55 	b.w	800b0c0 <error>

0800b216 <_swiclose>:
 800b216:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b218:	2402      	movs	r4, #2
 800b21a:	9001      	str	r0, [sp, #4]
 800b21c:	ad01      	add	r5, sp, #4
 800b21e:	4620      	mov	r0, r4
 800b220:	4629      	mov	r1, r5
 800b222:	beab      	bkpt	0x00ab
 800b224:	4604      	mov	r4, r0
 800b226:	4620      	mov	r0, r4
 800b228:	f7ff ff58 	bl	800b0dc <checkerror>
 800b22c:	b003      	add	sp, #12
 800b22e:	bd30      	pop	{r4, r5, pc}

0800b230 <_close>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	4605      	mov	r5, r0
 800b234:	f7ff ff2a 	bl	800b08c <findslot>
 800b238:	4604      	mov	r4, r0
 800b23a:	b930      	cbnz	r0, 800b24a <_close+0x1a>
 800b23c:	f7fd ffa2 	bl	8009184 <__errno>
 800b240:	2309      	movs	r3, #9
 800b242:	6003      	str	r3, [r0, #0]
 800b244:	f04f 30ff 	mov.w	r0, #4294967295
 800b248:	bd38      	pop	{r3, r4, r5, pc}
 800b24a:	3d01      	subs	r5, #1
 800b24c:	2d01      	cmp	r5, #1
 800b24e:	d809      	bhi.n	800b264 <_close+0x34>
 800b250:	4b07      	ldr	r3, [pc, #28]	@ (800b270 <_close+0x40>)
 800b252:	689a      	ldr	r2, [r3, #8]
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	429a      	cmp	r2, r3
 800b258:	d104      	bne.n	800b264 <_close+0x34>
 800b25a:	f04f 33ff 	mov.w	r3, #4294967295
 800b25e:	6023      	str	r3, [r4, #0]
 800b260:	2000      	movs	r0, #0
 800b262:	e7f1      	b.n	800b248 <_close+0x18>
 800b264:	6820      	ldr	r0, [r4, #0]
 800b266:	f7ff ffd6 	bl	800b216 <_swiclose>
 800b26a:	2800      	cmp	r0, #0
 800b26c:	d0f5      	beq.n	800b25a <_close+0x2a>
 800b26e:	e7eb      	b.n	800b248 <_close+0x18>
 800b270:	2000353c 	.word	0x2000353c

0800b274 <_getpid>:
 800b274:	2001      	movs	r0, #1
 800b276:	4770      	bx	lr

0800b278 <_swistat>:
 800b278:	b570      	push	{r4, r5, r6, lr}
 800b27a:	460c      	mov	r4, r1
 800b27c:	f7ff ff06 	bl	800b08c <findslot>
 800b280:	4605      	mov	r5, r0
 800b282:	b930      	cbnz	r0, 800b292 <_swistat+0x1a>
 800b284:	f7fd ff7e 	bl	8009184 <__errno>
 800b288:	2309      	movs	r3, #9
 800b28a:	6003      	str	r3, [r0, #0]
 800b28c:	f04f 30ff 	mov.w	r0, #4294967295
 800b290:	bd70      	pop	{r4, r5, r6, pc}
 800b292:	6863      	ldr	r3, [r4, #4]
 800b294:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b298:	6063      	str	r3, [r4, #4]
 800b29a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b29e:	64a3      	str	r3, [r4, #72]	@ 0x48
 800b2a0:	260c      	movs	r6, #12
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	4629      	mov	r1, r5
 800b2a6:	beab      	bkpt	0x00ab
 800b2a8:	4605      	mov	r5, r0
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	f7ff ff16 	bl	800b0dc <checkerror>
 800b2b0:	1c43      	adds	r3, r0, #1
 800b2b2:	d0eb      	beq.n	800b28c <_swistat+0x14>
 800b2b4:	6120      	str	r0, [r4, #16]
 800b2b6:	2000      	movs	r0, #0
 800b2b8:	e7ea      	b.n	800b290 <_swistat+0x18>

0800b2ba <_fstat>:
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	b510      	push	{r4, lr}
 800b2be:	2100      	movs	r1, #0
 800b2c0:	4604      	mov	r4, r0
 800b2c2:	2258      	movs	r2, #88	@ 0x58
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fd fee8 	bl	800909a <memset>
 800b2ca:	4601      	mov	r1, r0
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2d2:	f7ff bfd1 	b.w	800b278 <_swistat>

0800b2d6 <_stat>:
 800b2d6:	b538      	push	{r3, r4, r5, lr}
 800b2d8:	460d      	mov	r5, r1
 800b2da:	4604      	mov	r4, r0
 800b2dc:	2258      	movs	r2, #88	@ 0x58
 800b2de:	2100      	movs	r1, #0
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	f7fd feda 	bl	800909a <memset>
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	f000 f811 	bl	800b310 <_swiopen>
 800b2ee:	1c43      	adds	r3, r0, #1
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	d00b      	beq.n	800b30c <_stat+0x36>
 800b2f4:	686b      	ldr	r3, [r5, #4]
 800b2f6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b2fa:	606b      	str	r3, [r5, #4]
 800b2fc:	4629      	mov	r1, r5
 800b2fe:	f7ff ffbb 	bl	800b278 <_swistat>
 800b302:	4605      	mov	r5, r0
 800b304:	4620      	mov	r0, r4
 800b306:	f7ff ff93 	bl	800b230 <_close>
 800b30a:	462c      	mov	r4, r5
 800b30c:	4620      	mov	r0, r4
 800b30e:	bd38      	pop	{r3, r4, r5, pc}

0800b310 <_swiopen>:
 800b310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b314:	4f29      	ldr	r7, [pc, #164]	@ (800b3bc <_swiopen+0xac>)
 800b316:	b096      	sub	sp, #88	@ 0x58
 800b318:	4682      	mov	sl, r0
 800b31a:	460e      	mov	r6, r1
 800b31c:	2400      	movs	r4, #0
 800b31e:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800b322:	3301      	adds	r3, #1
 800b324:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800b328:	d00c      	beq.n	800b344 <_swiopen+0x34>
 800b32a:	3401      	adds	r4, #1
 800b32c:	2c14      	cmp	r4, #20
 800b32e:	d1f6      	bne.n	800b31e <_swiopen+0xe>
 800b330:	f7fd ff28 	bl	8009184 <__errno>
 800b334:	2318      	movs	r3, #24
 800b336:	6003      	str	r3, [r0, #0]
 800b338:	f04f 34ff 	mov.w	r4, #4294967295
 800b33c:	4620      	mov	r0, r4
 800b33e:	b016      	add	sp, #88	@ 0x58
 800b340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b344:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800b348:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b34c:	46e9      	mov	r9, sp
 800b34e:	d109      	bne.n	800b364 <_swiopen+0x54>
 800b350:	4649      	mov	r1, r9
 800b352:	4650      	mov	r0, sl
 800b354:	f7ff ffbf 	bl	800b2d6 <_stat>
 800b358:	3001      	adds	r0, #1
 800b35a:	d003      	beq.n	800b364 <_swiopen+0x54>
 800b35c:	f7fd ff12 	bl	8009184 <__errno>
 800b360:	2311      	movs	r3, #17
 800b362:	e7e8      	b.n	800b336 <_swiopen+0x26>
 800b364:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800b368:	f240 6301 	movw	r3, #1537	@ 0x601
 800b36c:	07b2      	lsls	r2, r6, #30
 800b36e:	bf48      	it	mi
 800b370:	f045 0502 	orrmi.w	r5, r5, #2
 800b374:	421e      	tst	r6, r3
 800b376:	bf18      	it	ne
 800b378:	f045 0504 	orrne.w	r5, r5, #4
 800b37c:	0733      	lsls	r3, r6, #28
 800b37e:	bf48      	it	mi
 800b380:	f025 0504 	bicmi.w	r5, r5, #4
 800b384:	4650      	mov	r0, sl
 800b386:	bf48      	it	mi
 800b388:	f045 0508 	orrmi.w	r5, r5, #8
 800b38c:	f8cd a000 	str.w	sl, [sp]
 800b390:	f7f4 ff8e 	bl	80002b0 <strlen>
 800b394:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800b398:	2501      	movs	r5, #1
 800b39a:	4628      	mov	r0, r5
 800b39c:	4649      	mov	r1, r9
 800b39e:	beab      	bkpt	0x00ab
 800b3a0:	4605      	mov	r5, r0
 800b3a2:	2d00      	cmp	r5, #0
 800b3a4:	db05      	blt.n	800b3b2 <_swiopen+0xa2>
 800b3a6:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800b3aa:	4447      	add	r7, r8
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	607b      	str	r3, [r7, #4]
 800b3b0:	e7c4      	b.n	800b33c <_swiopen+0x2c>
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	f7ff fe84 	bl	800b0c0 <error>
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	e7bf      	b.n	800b33c <_swiopen+0x2c>
 800b3bc:	2000353c 	.word	0x2000353c

0800b3c0 <_open>:
 800b3c0:	b40e      	push	{r1, r2, r3}
 800b3c2:	b500      	push	{lr}
 800b3c4:	9901      	ldr	r1, [sp, #4]
 800b3c6:	f7ff ffa3 	bl	800b310 <_swiopen>
 800b3ca:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3ce:	b003      	add	sp, #12
 800b3d0:	4770      	bx	lr
	...

0800b3d4 <_get_semihosting_exts>:
 800b3d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3d8:	4606      	mov	r6, r0
 800b3da:	460f      	mov	r7, r1
 800b3dc:	4829      	ldr	r0, [pc, #164]	@ (800b484 <_get_semihosting_exts+0xb0>)
 800b3de:	2100      	movs	r1, #0
 800b3e0:	4615      	mov	r5, r2
 800b3e2:	f7ff ff95 	bl	800b310 <_swiopen>
 800b3e6:	462a      	mov	r2, r5
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	4630      	mov	r0, r6
 800b3ee:	f7fd fe54 	bl	800909a <memset>
 800b3f2:	1c63      	adds	r3, r4, #1
 800b3f4:	d014      	beq.n	800b420 <_get_semihosting_exts+0x4c>
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f7ff fe48 	bl	800b08c <findslot>
 800b3fc:	f04f 080c 	mov.w	r8, #12
 800b400:	4681      	mov	r9, r0
 800b402:	4640      	mov	r0, r8
 800b404:	4649      	mov	r1, r9
 800b406:	beab      	bkpt	0x00ab
 800b408:	4680      	mov	r8, r0
 800b40a:	4640      	mov	r0, r8
 800b40c:	f7ff fe66 	bl	800b0dc <checkerror>
 800b410:	2803      	cmp	r0, #3
 800b412:	dd02      	ble.n	800b41a <_get_semihosting_exts+0x46>
 800b414:	1ec3      	subs	r3, r0, #3
 800b416:	42ab      	cmp	r3, r5
 800b418:	dc07      	bgt.n	800b42a <_get_semihosting_exts+0x56>
 800b41a:	4620      	mov	r0, r4
 800b41c:	f7ff ff08 	bl	800b230 <_close>
 800b420:	f04f 30ff 	mov.w	r0, #4294967295
 800b424:	b003      	add	sp, #12
 800b426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b42a:	2204      	movs	r2, #4
 800b42c:	eb0d 0102 	add.w	r1, sp, r2
 800b430:	4620      	mov	r0, r4
 800b432:	f7ff fe68 	bl	800b106 <_read>
 800b436:	2803      	cmp	r0, #3
 800b438:	ddef      	ble.n	800b41a <_get_semihosting_exts+0x46>
 800b43a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b43e:	2b53      	cmp	r3, #83	@ 0x53
 800b440:	d1eb      	bne.n	800b41a <_get_semihosting_exts+0x46>
 800b442:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b446:	2b48      	cmp	r3, #72	@ 0x48
 800b448:	d1e7      	bne.n	800b41a <_get_semihosting_exts+0x46>
 800b44a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b44e:	2b46      	cmp	r3, #70	@ 0x46
 800b450:	d1e3      	bne.n	800b41a <_get_semihosting_exts+0x46>
 800b452:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b456:	2b42      	cmp	r3, #66	@ 0x42
 800b458:	d1df      	bne.n	800b41a <_get_semihosting_exts+0x46>
 800b45a:	2201      	movs	r2, #1
 800b45c:	4639      	mov	r1, r7
 800b45e:	4620      	mov	r0, r4
 800b460:	f7ff fe6b 	bl	800b13a <_swilseek>
 800b464:	2800      	cmp	r0, #0
 800b466:	dbd8      	blt.n	800b41a <_get_semihosting_exts+0x46>
 800b468:	462a      	mov	r2, r5
 800b46a:	4631      	mov	r1, r6
 800b46c:	4620      	mov	r0, r4
 800b46e:	f7ff fe4a 	bl	800b106 <_read>
 800b472:	4605      	mov	r5, r0
 800b474:	4620      	mov	r0, r4
 800b476:	f7ff fedb 	bl	800b230 <_close>
 800b47a:	4628      	mov	r0, r5
 800b47c:	f7ff fe2e 	bl	800b0dc <checkerror>
 800b480:	e7d0      	b.n	800b424 <_get_semihosting_exts+0x50>
 800b482:	bf00      	nop
 800b484:	08020fb0 	.word	0x08020fb0

0800b488 <initialise_semihosting_exts>:
 800b488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b48a:	4d0a      	ldr	r5, [pc, #40]	@ (800b4b4 <initialise_semihosting_exts+0x2c>)
 800b48c:	4c0a      	ldr	r4, [pc, #40]	@ (800b4b8 <initialise_semihosting_exts+0x30>)
 800b48e:	2100      	movs	r1, #0
 800b490:	2201      	movs	r2, #1
 800b492:	a801      	add	r0, sp, #4
 800b494:	6029      	str	r1, [r5, #0]
 800b496:	6022      	str	r2, [r4, #0]
 800b498:	f7ff ff9c 	bl	800b3d4 <_get_semihosting_exts>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	dd07      	ble.n	800b4b0 <initialise_semihosting_exts+0x28>
 800b4a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b4a4:	f003 0201 	and.w	r2, r3, #1
 800b4a8:	f003 0302 	and.w	r3, r3, #2
 800b4ac:	602a      	str	r2, [r5, #0]
 800b4ae:	6023      	str	r3, [r4, #0]
 800b4b0:	b003      	add	sp, #12
 800b4b2:	bd30      	pop	{r4, r5, pc}
 800b4b4:	200001d8 	.word	0x200001d8
 800b4b8:	200001d4 	.word	0x200001d4

0800b4bc <_has_ext_exit_extended>:
 800b4bc:	b510      	push	{r4, lr}
 800b4be:	4c04      	ldr	r4, [pc, #16]	@ (800b4d0 <_has_ext_exit_extended+0x14>)
 800b4c0:	6823      	ldr	r3, [r4, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	da01      	bge.n	800b4ca <_has_ext_exit_extended+0xe>
 800b4c6:	f7ff ffdf 	bl	800b488 <initialise_semihosting_exts>
 800b4ca:	6820      	ldr	r0, [r4, #0]
 800b4cc:	bd10      	pop	{r4, pc}
 800b4ce:	bf00      	nop
 800b4d0:	200001d8 	.word	0x200001d8

0800b4d4 <_has_ext_stdout_stderr>:
 800b4d4:	b510      	push	{r4, lr}
 800b4d6:	4c04      	ldr	r4, [pc, #16]	@ (800b4e8 <_has_ext_stdout_stderr+0x14>)
 800b4d8:	6823      	ldr	r3, [r4, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	da01      	bge.n	800b4e2 <_has_ext_stdout_stderr+0xe>
 800b4de:	f7ff ffd3 	bl	800b488 <initialise_semihosting_exts>
 800b4e2:	6820      	ldr	r0, [r4, #0]
 800b4e4:	bd10      	pop	{r4, pc}
 800b4e6:	bf00      	nop
 800b4e8:	200001d4 	.word	0x200001d4

0800b4ec <initialise_monitor_handles>:
 800b4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f0:	b085      	sub	sp, #20
 800b4f2:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800b5a4 <initialise_monitor_handles+0xb8>
 800b4f6:	f8cd 9004 	str.w	r9, [sp, #4]
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	2400      	movs	r4, #0
 800b4fe:	9303      	str	r3, [sp, #12]
 800b500:	af01      	add	r7, sp, #4
 800b502:	9402      	str	r4, [sp, #8]
 800b504:	2501      	movs	r5, #1
 800b506:	4628      	mov	r0, r5
 800b508:	4639      	mov	r1, r7
 800b50a:	beab      	bkpt	0x00ab
 800b50c:	4605      	mov	r5, r0
 800b50e:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800b5a8 <initialise_monitor_handles+0xbc>
 800b512:	4623      	mov	r3, r4
 800b514:	4c20      	ldr	r4, [pc, #128]	@ (800b598 <initialise_monitor_handles+0xac>)
 800b516:	f8c8 5000 	str.w	r5, [r8]
 800b51a:	f04f 32ff 	mov.w	r2, #4294967295
 800b51e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800b522:	3301      	adds	r3, #1
 800b524:	2b14      	cmp	r3, #20
 800b526:	d1fa      	bne.n	800b51e <initialise_monitor_handles+0x32>
 800b528:	f7ff ffd4 	bl	800b4d4 <_has_ext_stdout_stderr>
 800b52c:	4d1b      	ldr	r5, [pc, #108]	@ (800b59c <initialise_monitor_handles+0xb0>)
 800b52e:	b1d0      	cbz	r0, 800b566 <initialise_monitor_handles+0x7a>
 800b530:	f04f 0a03 	mov.w	sl, #3
 800b534:	2304      	movs	r3, #4
 800b536:	f8cd 9004 	str.w	r9, [sp, #4]
 800b53a:	2601      	movs	r6, #1
 800b53c:	f8cd a00c 	str.w	sl, [sp, #12]
 800b540:	9302      	str	r3, [sp, #8]
 800b542:	4630      	mov	r0, r6
 800b544:	4639      	mov	r1, r7
 800b546:	beab      	bkpt	0x00ab
 800b548:	4683      	mov	fp, r0
 800b54a:	4b15      	ldr	r3, [pc, #84]	@ (800b5a0 <initialise_monitor_handles+0xb4>)
 800b54c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b550:	f8c3 b000 	str.w	fp, [r3]
 800b554:	2308      	movs	r3, #8
 800b556:	f8cd a00c 	str.w	sl, [sp, #12]
 800b55a:	9302      	str	r3, [sp, #8]
 800b55c:	4630      	mov	r0, r6
 800b55e:	4639      	mov	r1, r7
 800b560:	beab      	bkpt	0x00ab
 800b562:	4606      	mov	r6, r0
 800b564:	602e      	str	r6, [r5, #0]
 800b566:	682b      	ldr	r3, [r5, #0]
 800b568:	3301      	adds	r3, #1
 800b56a:	bf02      	ittt	eq
 800b56c:	4b0c      	ldreq	r3, [pc, #48]	@ (800b5a0 <initialise_monitor_handles+0xb4>)
 800b56e:	681b      	ldreq	r3, [r3, #0]
 800b570:	602b      	streq	r3, [r5, #0]
 800b572:	2600      	movs	r6, #0
 800b574:	f8d8 3000 	ldr.w	r3, [r8]
 800b578:	6023      	str	r3, [r4, #0]
 800b57a:	6066      	str	r6, [r4, #4]
 800b57c:	f7ff ffaa 	bl	800b4d4 <_has_ext_stdout_stderr>
 800b580:	b130      	cbz	r0, 800b590 <initialise_monitor_handles+0xa4>
 800b582:	4b07      	ldr	r3, [pc, #28]	@ (800b5a0 <initialise_monitor_handles+0xb4>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800b58a:	682b      	ldr	r3, [r5, #0]
 800b58c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800b590:	b005      	add	sp, #20
 800b592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b596:	bf00      	nop
 800b598:	2000353c 	.word	0x2000353c
 800b59c:	20003530 	.word	0x20003530
 800b5a0:	20003534 	.word	0x20003534
 800b5a4:	08020fc6 	.word	0x08020fc6
 800b5a8:	20003538 	.word	0x20003538

0800b5ac <_unlink>:
 800b5ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5ae:	9000      	str	r0, [sp, #0]
 800b5b0:	f7f4 fe7e 	bl	80002b0 <strlen>
 800b5b4:	240e      	movs	r4, #14
 800b5b6:	9001      	str	r0, [sp, #4]
 800b5b8:	466d      	mov	r5, sp
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	4629      	mov	r1, r5
 800b5be:	beab      	bkpt	0x00ab
 800b5c0:	4604      	mov	r4, r0
 800b5c2:	1c63      	adds	r3, r4, #1
 800b5c4:	d104      	bne.n	800b5d0 <_unlink+0x24>
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f7ff fd7a 	bl	800b0c0 <error>
 800b5cc:	b003      	add	sp, #12
 800b5ce:	bd30      	pop	{r4, r5, pc}
 800b5d0:	2000      	movs	r0, #0
 800b5d2:	e7fb      	b.n	800b5cc <_unlink+0x20>

0800b5d4 <_isatty>:
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	f7ff fd59 	bl	800b08c <findslot>
 800b5da:	2409      	movs	r4, #9
 800b5dc:	4605      	mov	r5, r0
 800b5de:	b920      	cbnz	r0, 800b5ea <_isatty+0x16>
 800b5e0:	f7fd fdd0 	bl	8009184 <__errno>
 800b5e4:	6004      	str	r4, [r0, #0]
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	bd70      	pop	{r4, r5, r6, pc}
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	4629      	mov	r1, r5
 800b5ee:	beab      	bkpt	0x00ab
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	2c01      	cmp	r4, #1
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	d0f7      	beq.n	800b5e8 <_isatty+0x14>
 800b5f8:	f7fd fdc4 	bl	8009184 <__errno>
 800b5fc:	2513      	movs	r5, #19
 800b5fe:	4604      	mov	r4, r0
 800b600:	2600      	movs	r6, #0
 800b602:	4628      	mov	r0, r5
 800b604:	4631      	mov	r1, r6
 800b606:	beab      	bkpt	0x00ab
 800b608:	4605      	mov	r5, r0
 800b60a:	6025      	str	r5, [r4, #0]
 800b60c:	e7eb      	b.n	800b5e6 <_isatty+0x12>
	...

0800b610 <sqrtf>:
 800b610:	b508      	push	{r3, lr}
 800b612:	ed2d 8b02 	vpush	{d8}
 800b616:	eeb0 8a40 	vmov.f32	s16, s0
 800b61a:	f000 f817 	bl	800b64c <__ieee754_sqrtf>
 800b61e:	eeb4 8a48 	vcmp.f32	s16, s16
 800b622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b626:	d60c      	bvs.n	800b642 <sqrtf+0x32>
 800b628:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b648 <sqrtf+0x38>
 800b62c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b634:	d505      	bpl.n	800b642 <sqrtf+0x32>
 800b636:	f7fd fda5 	bl	8009184 <__errno>
 800b63a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b63e:	2321      	movs	r3, #33	@ 0x21
 800b640:	6003      	str	r3, [r0, #0]
 800b642:	ecbd 8b02 	vpop	{d8}
 800b646:	bd08      	pop	{r3, pc}
 800b648:	00000000 	.word	0x00000000

0800b64c <__ieee754_sqrtf>:
 800b64c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b650:	4770      	bx	lr
	...

0800b654 <_init>:
 800b654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b656:	bf00      	nop
 800b658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b65a:	bc08      	pop	{r3}
 800b65c:	469e      	mov	lr, r3
 800b65e:	4770      	bx	lr

0800b660 <_fini>:
 800b660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b662:	bf00      	nop
 800b664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b666:	bc08      	pop	{r3}
 800b668:	469e      	mov	lr, r3
 800b66a:	4770      	bx	lr
