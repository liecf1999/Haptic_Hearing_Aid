
Haptic_Hearing_Aid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b308  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001407c  0800b4d8  0800b4d8  0000c4d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f554  0801f554  00021218  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801f554  0801f554  00020554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f55c  0801f55c  00021218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f55c  0801f55c  0002055c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f560  0801f560  00020560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0801f564  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009c28  20000218  0801f77c  00021218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009e40  0801f77c  00021e40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ae9  00000000  00000000  00021248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039dc  00000000  00000000  00037d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0003b710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9b  00000000  00000000  0003c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026333  00000000  00000000  0003d743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae7b  00000000  00000000  00063a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4d83  00000000  00000000  0007e8f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00163674  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006050  00000000  00000000  00163728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00169778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002b32  00000000  00000000  001697eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000070  00000000  00000000  0016c31d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b4c0 	.word	0x0800b4c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	0800b4c0 	.word	0x0800b4c0

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2uiz>:
 8000ca8:	004a      	lsls	r2, r1, #1
 8000caa:	d211      	bcs.n	8000cd0 <__aeabi_d2uiz+0x28>
 8000cac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000cb0:	d211      	bcs.n	8000cd6 <__aeabi_d2uiz+0x2e>
 8000cb2:	d50d      	bpl.n	8000cd0 <__aeabi_d2uiz+0x28>
 8000cb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000cb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cbc:	d40e      	bmi.n	8000cdc <__aeabi_d2uiz+0x34>
 8000cbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000cc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cca:	fa23 f002 	lsr.w	r0, r3, r2
 8000cce:	4770      	bx	lr
 8000cd0:	f04f 0000 	mov.w	r0, #0
 8000cd4:	4770      	bx	lr
 8000cd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cda:	d102      	bne.n	8000ce2 <__aeabi_d2uiz+0x3a>
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	4770      	bx	lr
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2f>:
 8000ce8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000cf0:	bf24      	itt	cs
 8000cf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000cf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000cfa:	d90d      	bls.n	8000d18 <__aeabi_d2f+0x30>
 8000cfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000d0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d10:	bf08      	it	eq
 8000d12:	f020 0001 	biceq.w	r0, r0, #1
 8000d16:	4770      	bx	lr
 8000d18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000d1c:	d121      	bne.n	8000d62 <__aeabi_d2f+0x7a>
 8000d1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000d22:	bfbc      	itt	lt
 8000d24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000d28:	4770      	bxlt	lr
 8000d2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000d2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d32:	f1c2 0218 	rsb	r2, r2, #24
 8000d36:	f1c2 0c20 	rsb	ip, r2, #32
 8000d3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d42:	bf18      	it	ne
 8000d44:	f040 0001 	orrne.w	r0, r0, #1
 8000d48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d54:	ea40 000c 	orr.w	r0, r0, ip
 8000d58:	fa23 f302 	lsr.w	r3, r3, r2
 8000d5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d60:	e7cc      	b.n	8000cfc <__aeabi_d2f+0x14>
 8000d62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d66:	d107      	bne.n	8000d78 <__aeabi_d2f+0x90>
 8000d68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d6c:	bf1e      	ittt	ne
 8000d6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d76:	4770      	bxne	lr
 8000d78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295
 8000d9c:	f000 b988 	b.w	80010b0 <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f806 	bl	8000db8 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__udivmoddi4>:
 8000db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dbc:	9d08      	ldr	r5, [sp, #32]
 8000dbe:	468e      	mov	lr, r1
 8000dc0:	4604      	mov	r4, r0
 8000dc2:	4688      	mov	r8, r1
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d14a      	bne.n	8000e5e <__udivmoddi4+0xa6>
 8000dc8:	428a      	cmp	r2, r1
 8000dca:	4617      	mov	r7, r2
 8000dcc:	d962      	bls.n	8000e94 <__udivmoddi4+0xdc>
 8000dce:	fab2 f682 	clz	r6, r2
 8000dd2:	b14e      	cbz	r6, 8000de8 <__udivmoddi4+0x30>
 8000dd4:	f1c6 0320 	rsb	r3, r6, #32
 8000dd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000ddc:	fa20 f303 	lsr.w	r3, r0, r3
 8000de0:	40b7      	lsls	r7, r6
 8000de2:	ea43 0808 	orr.w	r8, r3, r8
 8000de6:	40b4      	lsls	r4, r6
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f fc87 	uxth.w	ip, r7
 8000df0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000df4:	0c23      	lsrs	r3, r4, #16
 8000df6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d909      	bls.n	8000e1a <__udivmoddi4+0x62>
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e0c:	f080 80ea 	bcs.w	8000fe4 <__udivmoddi4+0x22c>
 8000e10:	429a      	cmp	r2, r3
 8000e12:	f240 80e7 	bls.w	8000fe4 <__udivmoddi4+0x22c>
 8000e16:	3902      	subs	r1, #2
 8000e18:	443b      	add	r3, r7
 8000e1a:	1a9a      	subs	r2, r3, r2
 8000e1c:	b2a3      	uxth	r3, r4
 8000e1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e2e:	459c      	cmp	ip, r3
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0x8e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e38:	f080 80d6 	bcs.w	8000fe8 <__udivmoddi4+0x230>
 8000e3c:	459c      	cmp	ip, r3
 8000e3e:	f240 80d3 	bls.w	8000fe8 <__udivmoddi4+0x230>
 8000e42:	443b      	add	r3, r7
 8000e44:	3802      	subs	r0, #2
 8000e46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e4a:	eba3 030c 	sub.w	r3, r3, ip
 8000e4e:	2100      	movs	r1, #0
 8000e50:	b11d      	cbz	r5, 8000e5a <__udivmoddi4+0xa2>
 8000e52:	40f3      	lsrs	r3, r6
 8000e54:	2200      	movs	r2, #0
 8000e56:	e9c5 3200 	strd	r3, r2, [r5]
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d905      	bls.n	8000e6e <__udivmoddi4+0xb6>
 8000e62:	b10d      	cbz	r5, 8000e68 <__udivmoddi4+0xb0>
 8000e64:	e9c5 0100 	strd	r0, r1, [r5]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e7f5      	b.n	8000e5a <__udivmoddi4+0xa2>
 8000e6e:	fab3 f183 	clz	r1, r3
 8000e72:	2900      	cmp	r1, #0
 8000e74:	d146      	bne.n	8000f04 <__udivmoddi4+0x14c>
 8000e76:	4573      	cmp	r3, lr
 8000e78:	d302      	bcc.n	8000e80 <__udivmoddi4+0xc8>
 8000e7a:	4282      	cmp	r2, r0
 8000e7c:	f200 8105 	bhi.w	800108a <__udivmoddi4+0x2d2>
 8000e80:	1a84      	subs	r4, r0, r2
 8000e82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e86:	2001      	movs	r0, #1
 8000e88:	4690      	mov	r8, r2
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d0e5      	beq.n	8000e5a <__udivmoddi4+0xa2>
 8000e8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000e92:	e7e2      	b.n	8000e5a <__udivmoddi4+0xa2>
 8000e94:	2a00      	cmp	r2, #0
 8000e96:	f000 8090 	beq.w	8000fba <__udivmoddi4+0x202>
 8000e9a:	fab2 f682 	clz	r6, r2
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	f040 80a4 	bne.w	8000fec <__udivmoddi4+0x234>
 8000ea4:	1a8a      	subs	r2, r1, r2
 8000ea6:	0c03      	lsrs	r3, r0, #16
 8000ea8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eac:	b280      	uxth	r0, r0
 8000eae:	b2bc      	uxth	r4, r7
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000eb6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000eba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ebe:	fb04 f20c 	mul.w	r2, r4, ip
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x11e>
 8000ec6:	18fb      	adds	r3, r7, r3
 8000ec8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ecc:	d202      	bcs.n	8000ed4 <__udivmoddi4+0x11c>
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	f200 80e0 	bhi.w	8001094 <__udivmoddi4+0x2dc>
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	1a9b      	subs	r3, r3, r2
 8000ed8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000edc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ee0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ee4:	fb02 f404 	mul.w	r4, r2, r4
 8000ee8:	429c      	cmp	r4, r3
 8000eea:	d907      	bls.n	8000efc <__udivmoddi4+0x144>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ef2:	d202      	bcs.n	8000efa <__udivmoddi4+0x142>
 8000ef4:	429c      	cmp	r4, r3
 8000ef6:	f200 80ca 	bhi.w	800108e <__udivmoddi4+0x2d6>
 8000efa:	4602      	mov	r2, r0
 8000efc:	1b1b      	subs	r3, r3, r4
 8000efe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f02:	e7a5      	b.n	8000e50 <__udivmoddi4+0x98>
 8000f04:	f1c1 0620 	rsb	r6, r1, #32
 8000f08:	408b      	lsls	r3, r1
 8000f0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	fa0e f401 	lsl.w	r4, lr, r1
 8000f14:	fa20 f306 	lsr.w	r3, r0, r6
 8000f18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f20:	4323      	orrs	r3, r4
 8000f22:	fa00 f801 	lsl.w	r8, r0, r1
 8000f26:	fa1f fc87 	uxth.w	ip, r7
 8000f2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000f2e:	0c1c      	lsrs	r4, r3, #16
 8000f30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f3c:	45a6      	cmp	lr, r4
 8000f3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f42:	d909      	bls.n	8000f58 <__udivmoddi4+0x1a0>
 8000f44:	193c      	adds	r4, r7, r4
 8000f46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f4a:	f080 809c 	bcs.w	8001086 <__udivmoddi4+0x2ce>
 8000f4e:	45a6      	cmp	lr, r4
 8000f50:	f240 8099 	bls.w	8001086 <__udivmoddi4+0x2ce>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	eba4 040e 	sub.w	r4, r4, lr
 8000f5c:	fa1f fe83 	uxth.w	lr, r3
 8000f60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f64:	fb09 4413 	mls	r4, r9, r3, r4
 8000f68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f70:	45a4      	cmp	ip, r4
 8000f72:	d908      	bls.n	8000f86 <__udivmoddi4+0x1ce>
 8000f74:	193c      	adds	r4, r7, r4
 8000f76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f7a:	f080 8082 	bcs.w	8001082 <__udivmoddi4+0x2ca>
 8000f7e:	45a4      	cmp	ip, r4
 8000f80:	d97f      	bls.n	8001082 <__udivmoddi4+0x2ca>
 8000f82:	3b02      	subs	r3, #2
 8000f84:	443c      	add	r4, r7
 8000f86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f8a:	eba4 040c 	sub.w	r4, r4, ip
 8000f8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f92:	4564      	cmp	r4, ip
 8000f94:	4673      	mov	r3, lr
 8000f96:	46e1      	mov	r9, ip
 8000f98:	d362      	bcc.n	8001060 <__udivmoddi4+0x2a8>
 8000f9a:	d05f      	beq.n	800105c <__udivmoddi4+0x2a4>
 8000f9c:	b15d      	cbz	r5, 8000fb6 <__udivmoddi4+0x1fe>
 8000f9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000fa2:	eb64 0409 	sbc.w	r4, r4, r9
 8000fa6:	fa04 f606 	lsl.w	r6, r4, r6
 8000faa:	fa22 f301 	lsr.w	r3, r2, r1
 8000fae:	431e      	orrs	r6, r3
 8000fb0:	40cc      	lsrs	r4, r1
 8000fb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	e74f      	b.n	8000e5a <__udivmoddi4+0xa2>
 8000fba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000fbe:	0c01      	lsrs	r1, r0, #16
 8000fc0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000fc4:	b280      	uxth	r0, r0
 8000fc6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4638      	mov	r0, r7
 8000fce:	463c      	mov	r4, r7
 8000fd0:	46b8      	mov	r8, r7
 8000fd2:	46be      	mov	lr, r7
 8000fd4:	2620      	movs	r6, #32
 8000fd6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fda:	eba2 0208 	sub.w	r2, r2, r8
 8000fde:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fe2:	e766      	b.n	8000eb2 <__udivmoddi4+0xfa>
 8000fe4:	4601      	mov	r1, r0
 8000fe6:	e718      	b.n	8000e1a <__udivmoddi4+0x62>
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e72c      	b.n	8000e46 <__udivmoddi4+0x8e>
 8000fec:	f1c6 0220 	rsb	r2, r6, #32
 8000ff0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ff4:	40b7      	lsls	r7, r6
 8000ff6:	40b1      	lsls	r1, r6
 8000ff8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ffc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001000:	430a      	orrs	r2, r1
 8001002:	fbb3 f8fe 	udiv	r8, r3, lr
 8001006:	b2bc      	uxth	r4, r7
 8001008:	fb0e 3318 	mls	r3, lr, r8, r3
 800100c:	0c11      	lsrs	r1, r2, #16
 800100e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001012:	fb08 f904 	mul.w	r9, r8, r4
 8001016:	40b0      	lsls	r0, r6
 8001018:	4589      	cmp	r9, r1
 800101a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800101e:	b280      	uxth	r0, r0
 8001020:	d93e      	bls.n	80010a0 <__udivmoddi4+0x2e8>
 8001022:	1879      	adds	r1, r7, r1
 8001024:	f108 3cff 	add.w	ip, r8, #4294967295
 8001028:	d201      	bcs.n	800102e <__udivmoddi4+0x276>
 800102a:	4589      	cmp	r9, r1
 800102c:	d81f      	bhi.n	800106e <__udivmoddi4+0x2b6>
 800102e:	eba1 0109 	sub.w	r1, r1, r9
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	fb0e 1119 	mls	r1, lr, r9, r1
 800103e:	b292      	uxth	r2, r2
 8001040:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001044:	4542      	cmp	r2, r8
 8001046:	d229      	bcs.n	800109c <__udivmoddi4+0x2e4>
 8001048:	18ba      	adds	r2, r7, r2
 800104a:	f109 31ff 	add.w	r1, r9, #4294967295
 800104e:	d2c4      	bcs.n	8000fda <__udivmoddi4+0x222>
 8001050:	4542      	cmp	r2, r8
 8001052:	d2c2      	bcs.n	8000fda <__udivmoddi4+0x222>
 8001054:	f1a9 0102 	sub.w	r1, r9, #2
 8001058:	443a      	add	r2, r7
 800105a:	e7be      	b.n	8000fda <__udivmoddi4+0x222>
 800105c:	45f0      	cmp	r8, lr
 800105e:	d29d      	bcs.n	8000f9c <__udivmoddi4+0x1e4>
 8001060:	ebbe 0302 	subs.w	r3, lr, r2
 8001064:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001068:	3801      	subs	r0, #1
 800106a:	46e1      	mov	r9, ip
 800106c:	e796      	b.n	8000f9c <__udivmoddi4+0x1e4>
 800106e:	eba7 0909 	sub.w	r9, r7, r9
 8001072:	4449      	add	r1, r9
 8001074:	f1a8 0c02 	sub.w	ip, r8, #2
 8001078:	fbb1 f9fe 	udiv	r9, r1, lr
 800107c:	fb09 f804 	mul.w	r8, r9, r4
 8001080:	e7db      	b.n	800103a <__udivmoddi4+0x282>
 8001082:	4673      	mov	r3, lr
 8001084:	e77f      	b.n	8000f86 <__udivmoddi4+0x1ce>
 8001086:	4650      	mov	r0, sl
 8001088:	e766      	b.n	8000f58 <__udivmoddi4+0x1a0>
 800108a:	4608      	mov	r0, r1
 800108c:	e6fd      	b.n	8000e8a <__udivmoddi4+0xd2>
 800108e:	443b      	add	r3, r7
 8001090:	3a02      	subs	r2, #2
 8001092:	e733      	b.n	8000efc <__udivmoddi4+0x144>
 8001094:	f1ac 0c02 	sub.w	ip, ip, #2
 8001098:	443b      	add	r3, r7
 800109a:	e71c      	b.n	8000ed6 <__udivmoddi4+0x11e>
 800109c:	4649      	mov	r1, r9
 800109e:	e79c      	b.n	8000fda <__udivmoddi4+0x222>
 80010a0:	eba1 0109 	sub.w	r1, r1, r9
 80010a4:	46c4      	mov	ip, r8
 80010a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80010aa:	fb09 f804 	mul.w	r8, r9, r4
 80010ae:	e7c4      	b.n	800103a <__udivmoddi4+0x282>

080010b0 <__aeabi_idiv0>:
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <performFFT>:
 *
 * @author		Francis Liechti (FL)
 * @date		27.05.2025	FL	Created
 *
 ****************************************************************************/
void performFFT(float *Result, float32_t *audiodata){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
	// 1. Fill input
	for (int i = 0; i < FFT_SIZE; i++) {
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	e016      	b.n	80010f2 <performFFT+0x3e>
//		// Normalize if desired: value ∈ [-131072, +131071]
////		float normalized = ((float) audiodata[i]) / 131072.0f;
//
		input[2*i] = audiodata[i];      // Real part
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	441a      	add	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	6812      	ldr	r2, [r2, #0]
 80010d2:	4929      	ldr	r1, [pc, #164]	@ (8001178 <performFFT+0xc4>)
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	601a      	str	r2, [r3, #0]
		input[2*i + 1] = 0.0f;        // Imaginary part (0 for real signals)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	3301      	adds	r3, #1
 80010e0:	4a25      	ldr	r2, [pc, #148]	@ (8001178 <performFFT+0xc4>)
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < FFT_SIZE; i++) {
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010f8:	dbe4      	blt.n	80010c4 <performFFT+0x10>
	}

	// 2. Perform the complex FFT in-place
	arm_cfft_f32(&arm_cfft_sR_f32_len512, input, 0, 1);  // Forward FFT, with bit reversal
 80010fa:	2301      	movs	r3, #1
 80010fc:	2200      	movs	r2, #0
 80010fe:	491e      	ldr	r1, [pc, #120]	@ (8001178 <performFFT+0xc4>)
 8001100:	481e      	ldr	r0, [pc, #120]	@ (800117c <performFFT+0xc8>)
 8001102:	f006 fd6f 	bl	8007be4 <arm_cfft_f32>

	// 3. Compute magnitude from real and imaginary parts
	for (int i = 0; i < FFT_SIZE; i++) {
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	e02b      	b.n	8001164 <performFFT+0xb0>
		float real = input[2*i];
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4a19      	ldr	r2, [pc, #100]	@ (8001178 <performFFT+0xc4>)
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	60fb      	str	r3, [r7, #12]
		float imag = input[2*i + 1];
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	3301      	adds	r3, #1
 8001120:	4a15      	ldr	r2, [pc, #84]	@ (8001178 <performFFT+0xc4>)
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60bb      	str	r3, [r7, #8]
		Result[i] = 10.0f * log10f(real * real + imag * imag); //instead of 20*log10(sqrtf) for time optimization
 800112a:	edd7 7a03 	vldr	s15, [r7, #12]
 800112e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001132:	edd7 7a02 	vldr	s15, [r7, #8]
 8001136:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800113a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800113e:	eeb0 0a67 	vmov.f32	s0, s15
 8001142:	f009 ffe3 	bl	800b10c <log10f>
 8001146:	eef0 7a40 	vmov.f32	s15, s0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001156:	ee67 7a87 	vmul.f32	s15, s15, s14
 800115a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < FFT_SIZE; i++) {
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	3301      	adds	r3, #1
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800116a:	dbcf      	blt.n	800110c <performFFT+0x58>
	}
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000254 	.word	0x20000254
 800117c:	0800b55c 	.word	0x0800b55c

08001180 <process_signal>:
 *
 * @author		Francis Liechti (FL)
 * @date		27.05.2025	FL	Created
 *
 ****************************************************************************/
void process_signal(double* amplitudes, int32_t* audioData_Left, int32_t* audioData_Right, float* fftSignal, float* WindowedSignal) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b08e      	sub	sp, #56	@ 0x38
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	603b      	str	r3, [r7, #0]

	// Beamforming
	uint8_t direction = 0; //0 = dominating left, 1 = dominating right
 800118e:	2300      	movs	r3, #0
 8001190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	float scaleValue = 0; // for the non-dominating side
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
	applyWindow(audioData_Left, windowed_Signal_Left);
 800119a:	498a      	ldr	r1, [pc, #552]	@ (80013c4 <process_signal+0x244>)
 800119c:	68b8      	ldr	r0, [r7, #8]
 800119e:	f000 fa17 	bl	80015d0 <applyWindow>
	applyWindow(audioData_Right, windowed_Signal_Right);
 80011a2:	4989      	ldr	r1, [pc, #548]	@ (80013c8 <process_signal+0x248>)
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 fa13 	bl	80015d0 <applyWindow>

	// direction detection
	direction = beamform_direction(windowed_Signal_Left, windowed_Signal_Right, &scaleValue);
 80011aa:	f107 0310 	add.w	r3, r7, #16
 80011ae:	461a      	mov	r2, r3
 80011b0:	4985      	ldr	r1, [pc, #532]	@ (80013c8 <process_signal+0x248>)
 80011b2:	4884      	ldr	r0, [pc, #528]	@ (80013c4 <process_signal+0x244>)
 80011b4:	f000 fa76 	bl	80016a4 <beamform_direction>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	// FFT
	if(direction == 1){
 80011be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d104      	bne.n	80011d0 <process_signal+0x50>
		performFFT(fftSignal, windowed_Signal_Left);
 80011c6:	497f      	ldr	r1, [pc, #508]	@ (80013c4 <process_signal+0x244>)
 80011c8:	6838      	ldr	r0, [r7, #0]
 80011ca:	f7ff ff73 	bl	80010b4 <performFFT>
 80011ce:	e003      	b.n	80011d8 <process_signal+0x58>
	} else {
		performFFT(fftSignal, windowed_Signal_Right);
 80011d0:	497d      	ldr	r1, [pc, #500]	@ (80013c8 <process_signal+0x248>)
 80011d2:	6838      	ldr	r0, [r7, #0]
 80011d4:	f7ff ff6e 	bl	80010b4 <performFFT>
	}

	for(int i=0; i<NUM_FREQ_BANDS; i++){
 80011d8:	2300      	movs	r3, #0
 80011da:	637b      	str	r3, [r7, #52]	@ 0x34
 80011dc:	e0cb      	b.n	8001376 <process_signal+0x1f6>
		amplitudeMeans[i] = mean(fftSignal, freqbands[i], freqbands[i+1]);
 80011de:	4a7b      	ldr	r2, [pc, #492]	@ (80013cc <process_signal+0x24c>)
 80011e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80011e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a78      	ldr	r2, [pc, #480]	@ (80013cc <process_signal+0x24c>)
 80011ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f0:	461a      	mov	r2, r3
 80011f2:	6838      	ldr	r0, [r7, #0]
 80011f4:	f000 f8ee 	bl	80013d4 <mean>
 80011f8:	eef0 7a40 	vmov.f32	s15, s0
 80011fc:	4a74      	ldr	r2, [pc, #464]	@ (80013d0 <process_signal+0x250>)
 80011fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	edc3 7a00 	vstr	s15, [r3]
		float diff_upper = 0;
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	633b      	str	r3, [r7, #48]	@ 0x30
		float diff_lower = 0;
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(i == 0){
 8001214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001216:	2b00      	cmp	r3, #0
 8001218:	d125      	bne.n	8001266 <process_signal+0xe6>
			diff_lower = 0;
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			int num = (freqbands[i] + freqbands[i+1]) / 2; // calculate half bandwidth
 8001220:	4a6a      	ldr	r2, [pc, #424]	@ (80013cc <process_signal+0x24c>)
 8001222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800122a:	3301      	adds	r3, #1
 800122c:	4967      	ldr	r1, [pc, #412]	@ (80013cc <process_signal+0x24c>)
 800122e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001232:	4413      	add	r3, r2
 8001234:	0fda      	lsrs	r2, r3, #31
 8001236:	4413      	add	r3, r2
 8001238:	105b      	asrs	r3, r3, #1
 800123a:	617b      	str	r3, [r7, #20]
			diff_upper = mean(fftSignal, freqbands[i+1] - num, freqbands[i+1] + num);
 800123c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800123e:	3301      	adds	r3, #1
 8001240:	4a62      	ldr	r2, [pc, #392]	@ (80013cc <process_signal+0x24c>)
 8001242:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	1ad1      	subs	r1, r2, r3
 800124a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800124c:	3301      	adds	r3, #1
 800124e:	4a5f      	ldr	r2, [pc, #380]	@ (80013cc <process_signal+0x24c>)
 8001250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	4413      	add	r3, r2
 8001258:	461a      	mov	r2, r3
 800125a:	6838      	ldr	r0, [r7, #0]
 800125c:	f000 f8ba 	bl	80013d4 <mean>
 8001260:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8001264:	e068      	b.n	8001338 <process_signal+0x1b8>
		} else if (i== (NUM_FREQ_BANDS-1)){
 8001266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001268:	2b07      	cmp	r3, #7
 800126a:	d123      	bne.n	80012b4 <process_signal+0x134>
			diff_upper = 0;
 800126c:	f04f 0300 	mov.w	r3, #0
 8001270:	633b      	str	r3, [r7, #48]	@ 0x30
			int num = (freqbands[i-1] + freqbands[i]) / 2; // calculate half bandwidth
 8001272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001274:	3b01      	subs	r3, #1
 8001276:	4a55      	ldr	r2, [pc, #340]	@ (80013cc <process_signal+0x24c>)
 8001278:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800127c:	4953      	ldr	r1, [pc, #332]	@ (80013cc <process_signal+0x24c>)
 800127e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001280:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001284:	4413      	add	r3, r2
 8001286:	0fda      	lsrs	r2, r3, #31
 8001288:	4413      	add	r3, r2
 800128a:	105b      	asrs	r3, r3, #1
 800128c:	61bb      	str	r3, [r7, #24]
			diff_lower = mean(fftSignal, freqbands[i] - num, freqbands[i] + num);
 800128e:	4a4f      	ldr	r2, [pc, #316]	@ (80013cc <process_signal+0x24c>)
 8001290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001292:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	1ad1      	subs	r1, r2, r3
 800129a:	4a4c      	ldr	r2, [pc, #304]	@ (80013cc <process_signal+0x24c>)
 800129c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800129e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4413      	add	r3, r2
 80012a6:	461a      	mov	r2, r3
 80012a8:	6838      	ldr	r0, [r7, #0]
 80012aa:	f000 f893 	bl	80013d4 <mean>
 80012ae:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 80012b2:	e041      	b.n	8001338 <process_signal+0x1b8>
		}
		else {
			int num_low = (freqbands[i-1] + freqbands[i]) / 2;
 80012b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012b6:	3b01      	subs	r3, #1
 80012b8:	4a44      	ldr	r2, [pc, #272]	@ (80013cc <process_signal+0x24c>)
 80012ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012be:	4943      	ldr	r1, [pc, #268]	@ (80013cc <process_signal+0x24c>)
 80012c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012c6:	4413      	add	r3, r2
 80012c8:	0fda      	lsrs	r2, r3, #31
 80012ca:	4413      	add	r3, r2
 80012cc:	105b      	asrs	r3, r3, #1
 80012ce:	623b      	str	r3, [r7, #32]
			diff_lower = mean(fftSignal, freqbands[i] - num_low, freqbands[i] + num_low);
 80012d0:	4a3e      	ldr	r2, [pc, #248]	@ (80013cc <process_signal+0x24c>)
 80012d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	1ad1      	subs	r1, r2, r3
 80012dc:	4a3b      	ldr	r2, [pc, #236]	@ (80013cc <process_signal+0x24c>)
 80012de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	4413      	add	r3, r2
 80012e8:	461a      	mov	r2, r3
 80012ea:	6838      	ldr	r0, [r7, #0]
 80012ec:	f000 f872 	bl	80013d4 <mean>
 80012f0:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
			int num_upper = (freqbands[i] + freqbands[i+1]) / 2;
 80012f4:	4a35      	ldr	r2, [pc, #212]	@ (80013cc <process_signal+0x24c>)
 80012f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012fe:	3301      	adds	r3, #1
 8001300:	4932      	ldr	r1, [pc, #200]	@ (80013cc <process_signal+0x24c>)
 8001302:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001306:	4413      	add	r3, r2
 8001308:	0fda      	lsrs	r2, r3, #31
 800130a:	4413      	add	r3, r2
 800130c:	105b      	asrs	r3, r3, #1
 800130e:	61fb      	str	r3, [r7, #28]
			diff_upper = mean(fftSignal, freqbands[i+1] - num_upper, freqbands[i+1] + num_upper);
 8001310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001312:	3301      	adds	r3, #1
 8001314:	4a2d      	ldr	r2, [pc, #180]	@ (80013cc <process_signal+0x24c>)
 8001316:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	1ad1      	subs	r1, r2, r3
 800131e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001320:	3301      	adds	r3, #1
 8001322:	4a2a      	ldr	r2, [pc, #168]	@ (80013cc <process_signal+0x24c>)
 8001324:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	4413      	add	r3, r2
 800132c:	461a      	mov	r2, r3
 800132e:	6838      	ldr	r0, [r7, #0]
 8001330:	f000 f850 	bl	80013d4 <mean>
 8001334:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
		}
		// add some magical scaling
		amplitudeMeans[i] = amplitudeMeans[i]/2 + (diff_upper + diff_lower)/4;
 8001338:	4a25      	ldr	r2, [pc, #148]	@ (80013d0 <process_signal+0x250>)
 800133a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001348:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800134c:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001350:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001354:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001358:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 800135c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001364:	4a1a      	ldr	r2, [pc, #104]	@ (80013d0 <process_signal+0x250>)
 8001366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<NUM_FREQ_BANDS; i++){
 8001370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001372:	3301      	adds	r3, #1
 8001374:	637b      	str	r3, [r7, #52]	@ 0x34
 8001376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001378:	2b07      	cmp	r3, #7
 800137a:	f77f af30 	ble.w	80011de <process_signal+0x5e>
	}

	for(int i=0; i<NUM_SAMPLES; i++){
 800137e:	2300      	movs	r3, #0
 8001380:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001382:	e00c      	b.n	800139e <process_signal+0x21e>
		WindowedSignal[i] = windowed_Signal_Left[i];
 8001384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800138a:	4413      	add	r3, r2
 800138c:	490d      	ldr	r1, [pc, #52]	@ (80013c4 <process_signal+0x244>)
 800138e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001390:	0092      	lsls	r2, r2, #2
 8001392:	440a      	add	r2, r1
 8001394:	6812      	ldr	r2, [r2, #0]
 8001396:	601a      	str	r2, [r3, #0]
	for(int i=0; i<NUM_SAMPLES; i++){
 8001398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800139a:	3301      	adds	r3, #1
 800139c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800139e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013a4:	dbee      	blt.n	8001384 <process_signal+0x204>
	}
	// Set amplitudes
	sortvalues(amplitudes, amplitudeMeans, direction, scaleValue);
 80013a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80013aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013ae:	eeb0 0a67 	vmov.f32	s0, s15
 80013b2:	461a      	mov	r2, r3
 80013b4:	4906      	ldr	r1, [pc, #24]	@ (80013d0 <process_signal+0x250>)
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f000 f842 	bl	8001440 <sortvalues>
}
 80013bc:	bf00      	nop
 80013be:	3738      	adds	r7, #56	@ 0x38
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20001a54 	.word	0x20001a54
 80013c8:	20002254 	.word	0x20002254
 80013cc:	0800b4d8 	.word	0x0800b4d8
 80013d0:	20000234 	.word	0x20000234

080013d4 <mean>:
 *
 * @author		Francis Liechti (FL)
 * @date		28.05.2025	FL	Created
 *
 ****************************************************************************/
float mean(float* signal, int startpoint, int endpoint){
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	@ 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
	int size = endpoint-startpoint;
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
	float sum = 0;
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]

	for(int i=startpoint; i<=endpoint; i++){
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	e00e      	b.n	8001412 <mean+0x3e>
		sum += signal[i];
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	ed97 7a07 	vldr	s14, [r7, #28]
 8001404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001408:	edc7 7a07 	vstr	s15, [r7, #28]
	for(int i=startpoint; i<=endpoint; i++){
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	3301      	adds	r3, #1
 8001410:	61bb      	str	r3, [r7, #24]
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	429a      	cmp	r2, r3
 8001418:	ddec      	ble.n	80013f4 <mean+0x20>
	}
	return (sum/size);
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	ee07 3a90 	vmov	s15, r3
 8001420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001424:	ed97 7a07 	vldr	s14, [r7, #28]
 8001428:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800142c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001430:	eeb0 0a67 	vmov.f32	s0, s15
 8001434:	3724      	adds	r7, #36	@ 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <sortvalues>:
 *
 * @author		Francis Liechti (FL)
 * @date		28.05.2025	FL	Created
 *
 ****************************************************************************/
void sortvalues(double* amplitudes, float *meanValues, uint8_t direction, float scaleValue){
 8001440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	4613      	mov	r3, r2
 800144c:	ed87 0a00 	vstr	s0, [r7]
 8001450:	71fb      	strb	r3, [r7, #7]

	if(direction == 1){
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d13a      	bne.n	80014ce <sortvalues+0x8e>
		for(int i=0; i<NUM_FREQ_BANDS; i++){
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	e033      	b.n	80014c6 <sortvalues+0x86>
			amplitudes[sort_frequencies_left[i]] = (double) meanValues[i];
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	4413      	add	r3, r2
 8001466:	6819      	ldr	r1, [r3, #0]
 8001468:	4a38      	ldr	r2, [pc, #224]	@ (800154c <sortvalues+0x10c>)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	18d4      	adds	r4, r2, r3
 8001476:	4608      	mov	r0, r1
 8001478:	f7ff f8e6 	bl	8000648 <__aeabi_f2d>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	e9c4 2300 	strd	r2, r3, [r4]
			amplitudes[sort_frequencies_right[i]] = (double) meanValues[i] * scaleValue;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	4413      	add	r3, r2
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f8da 	bl	8000648 <__aeabi_f2d>
 8001494:	4604      	mov	r4, r0
 8001496:	460d      	mov	r5, r1
 8001498:	6838      	ldr	r0, [r7, #0]
 800149a:	f7ff f8d5 	bl	8000648 <__aeabi_f2d>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	482b      	ldr	r0, [pc, #172]	@ (8001550 <sortvalues+0x110>)
 80014a4:	6979      	ldr	r1, [r7, #20]
 80014a6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80014aa:	00c9      	lsls	r1, r1, #3
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	1846      	adds	r6, r0, r1
 80014b0:	4620      	mov	r0, r4
 80014b2:	4629      	mov	r1, r5
 80014b4:	f7ff f920 	bl	80006f8 <__aeabi_dmul>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	e9c6 2300 	strd	r2, r3, [r6]
		for(int i=0; i<NUM_FREQ_BANDS; i++){
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	3301      	adds	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2b07      	cmp	r3, #7
 80014ca:	ddc8      	ble.n	800145e <sortvalues+0x1e>
		for(int i=0; i<NUM_FREQ_BANDS; i++){
			amplitudes[sort_frequencies_left[i]] = (double) meanValues[i]*scaleValue;
			amplitudes[sort_frequencies_right[i]] = (double) meanValues[i];
		}
	}
}
 80014cc:	e039      	b.n	8001542 <sortvalues+0x102>
		for(int i=0; i<NUM_FREQ_BANDS; i++){
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	e033      	b.n	800153c <sortvalues+0xfc>
			amplitudes[sort_frequencies_left[i]] = (double) meanValues[i]*scaleValue;
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	4413      	add	r3, r2
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f8b2 	bl	8000648 <__aeabi_f2d>
 80014e4:	4604      	mov	r4, r0
 80014e6:	460d      	mov	r5, r1
 80014e8:	6838      	ldr	r0, [r7, #0]
 80014ea:	f7ff f8ad 	bl	8000648 <__aeabi_f2d>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4816      	ldr	r0, [pc, #88]	@ (800154c <sortvalues+0x10c>)
 80014f4:	6939      	ldr	r1, [r7, #16]
 80014f6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80014fa:	00c9      	lsls	r1, r1, #3
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	1846      	adds	r6, r0, r1
 8001500:	4620      	mov	r0, r4
 8001502:	4629      	mov	r1, r5
 8001504:	f7ff f8f8 	bl	80006f8 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	e9c6 2300 	strd	r2, r3, [r6]
			amplitudes[sort_frequencies_right[i]] = (double) meanValues[i];
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	4413      	add	r3, r2
 8001518:	6819      	ldr	r1, [r3, #0]
 800151a:	4a0d      	ldr	r2, [pc, #52]	@ (8001550 <sortvalues+0x110>)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	18d4      	adds	r4, r2, r3
 8001528:	4608      	mov	r0, r1
 800152a:	f7ff f88d 	bl	8000648 <__aeabi_f2d>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	e9c4 2300 	strd	r2, r3, [r4]
		for(int i=0; i<NUM_FREQ_BANDS; i++){
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	3301      	adds	r3, #1
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	2b07      	cmp	r3, #7
 8001540:	ddc8      	ble.n	80014d4 <sortvalues+0x94>
}
 8001542:	bf00      	nop
 8001544:	371c      	adds	r7, #28
 8001546:	46bd      	mov	sp, r7
 8001548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154a:	bf00      	nop
 800154c:	0800b4fc 	.word	0x0800b4fc
 8001550:	0800b51c 	.word	0x0800b51c

08001554 <generateHammingWindow>:
 *
 * @author		Francis Liechti (FL)
 * @date		03.06.2025	FL	Created
 *
 ****************************************************************************/
void generateHammingWindow(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
    for (uint32_t n = 0; n < NUM_SAMPLES; n++) {
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	e023      	b.n	80015a8 <generateHammingWindow+0x54>
        window[n] = 0.54f - 0.46f * arm_cos_f32((2.0f * PI * n) / (NUM_SAMPLES - 1));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	ee07 3a90 	vmov	s15, r3
 8001566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800156a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80015bc <generateHammingWindow+0x68>
 800156e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001572:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80015c0 <generateHammingWindow+0x6c>
 8001576:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800157a:	eeb0 0a47 	vmov.f32	s0, s14
 800157e:	f006 fbab 	bl	8007cd8 <arm_cos_f32>
 8001582:	eef0 7a40 	vmov.f32	s15, s0
 8001586:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80015c4 <generateHammingWindow+0x70>
 800158a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80015c8 <generateHammingWindow+0x74>
 8001592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001596:	4a0d      	ldr	r2, [pc, #52]	@ (80015cc <generateHammingWindow+0x78>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t n = 0; n < NUM_SAMPLES; n++) {
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3301      	adds	r3, #1
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015ae:	d3d7      	bcc.n	8001560 <generateHammingWindow+0xc>
    }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40c90fdb 	.word	0x40c90fdb
 80015c0:	43ff8000 	.word	0x43ff8000
 80015c4:	3eeb851f 	.word	0x3eeb851f
 80015c8:	3f0a3d71 	.word	0x3f0a3d71
 80015cc:	20001254 	.word	0x20001254

080015d0 <applyWindow>:
 *
 * @author		Francis Liechti (FL)
 * @date		03.06.2025	FL	Created
 *
 ****************************************************************************/
void applyWindow(int32_t *input, float32_t *output) {
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < NUM_SAMPLES; i++) {
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	e019      	b.n	8001614 <applyWindow+0x44>
        output[i] = input[i] * window[i];
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	4413      	add	r3, r2
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f2:	4a0e      	ldr	r2, [pc, #56]	@ (800162c <applyWindow+0x5c>)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	edd3 7a00 	vldr	s15, [r3]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	4413      	add	r3, r2
 8001606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160a:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < NUM_SAMPLES; i++) {
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3301      	adds	r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800161a:	d3e1      	bcc.n	80015e0 <applyWindow+0x10>
    }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20001254 	.word	0x20001254

08001630 <compute_energy>:
 *
 * @author		Francis Liechti (FL)
 * @date		04.06.2025	FL	Created
 *
 ****************************************************************************/
float compute_energy(float32_t* signal, int size) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
    float sum = 0.0f;
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < size; ++i)
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	e016      	b.n	8001674 <compute_energy+0x44>
        sum += (float) (signal[i] * signal[i]);
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	ed93 7a00 	vldr	s14, [r3]
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	edd3 7a00 	vldr	s15, [r3]
 800165e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001662:	ed97 7a03 	vldr	s14, [r7, #12]
 8001666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166a:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 0; i < size; ++i)
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	3301      	adds	r3, #1
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68ba      	ldr	r2, [r7, #8]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	dbe4      	blt.n	8001646 <compute_energy+0x16>
    return sqrtf(sum / size);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001686:	ed97 7a03 	vldr	s14, [r7, #12]
 800168a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800168e:	eeb0 0a66 	vmov.f32	s0, s13
 8001692:	f009 fd69 	bl	800b168 <sqrtf>
 8001696:	eef0 7a40 	vmov.f32	s15, s0
}
 800169a:	eeb0 0a67 	vmov.f32	s0, s15
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <beamform_direction>:
 *
 * @author		Francis Liechti (FL)
 * @date		04.06.2025	FL	Created
 *
 ****************************************************************************/
int beamform_direction(float* left, float* right, float *scaleValue){
 80016a4:	b5b0      	push	{r4, r5, r7, lr}
 80016a6:	b08a      	sub	sp, #40	@ 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]

    float e_left = compute_energy(left, NUM_SAMPLES);
 80016b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f7ff ffbb 	bl	8001630 <compute_energy>
 80016ba:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float e_right = compute_energy(right, NUM_SAMPLES);
 80016be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016c2:	68b8      	ldr	r0, [r7, #8]
 80016c4:	f7ff ffb4 	bl	8001630 <compute_energy>
 80016c8:	ed87 0a08 	vstr	s0, [r7, #32]
    int delay = estimate_delay_fast(left, right, NUM_SAMPLES, MAX_DELAY);
 80016cc:	2340      	movs	r3, #64	@ 0x40
 80016ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016d2:	68b9      	ldr	r1, [r7, #8]
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 f879 	bl	80017cc <estimate_delay_fast>
 80016da:	61f8      	str	r0, [r7, #28]

    // ratio for scaleValue weighted from delay and energy
    float e_ratio = e_left / (e_left + e_right + 1e-6f);
 80016dc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80016e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80017a8 <beamform_direction+0x104>
 80016ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016f0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80016f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f8:	edc7 7a06 	vstr	s15, [r7, #24]
	float d_ratio = fminf(fabsf(delay) / (float)MAX_DELAY, 1.0f);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	ee07 3a90 	vmov	s15, r3
 8001702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001706:	eef0 7ae7 	vabs.f32	s15, s15
 800170a:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80017ac <beamform_direction+0x108>
 800170e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001712:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001716:	eeb0 0a47 	vmov.f32	s0, s14
 800171a:	f009 fd49 	bl	800b1b0 <fminf>
 800171e:	ed87 0a05 	vstr	s0, [r7, #20]

	// Combine energy and delay factors, weighted average
	*scaleValue = (float) (0.5 * e_ratio + 0.5 * d_ratio);
 8001722:	69b8      	ldr	r0, [r7, #24]
 8001724:	f7fe ff90 	bl	8000648 <__aeabi_f2d>
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	4b20      	ldr	r3, [pc, #128]	@ (80017b0 <beamform_direction+0x10c>)
 800172e:	f7fe ffe3 	bl	80006f8 <__aeabi_dmul>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4614      	mov	r4, r2
 8001738:	461d      	mov	r5, r3
 800173a:	6978      	ldr	r0, [r7, #20]
 800173c:	f7fe ff84 	bl	8000648 <__aeabi_f2d>
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <beamform_direction+0x10c>)
 8001746:	f7fe ffd7 	bl	80006f8 <__aeabi_dmul>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4620      	mov	r0, r4
 8001750:	4629      	mov	r1, r5
 8001752:	f7fe fe1b 	bl	800038c <__adddf3>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f7ff fac3 	bl	8000ce8 <__aeabi_d2f>
 8001762:	4602      	mov	r2, r0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	601a      	str	r2, [r3, #0]

    // Decide based on delay and energy
    if (abs(delay) > 4)  // ~0.25ms
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	2b00      	cmp	r3, #0
 800176c:	bfb8      	it	lt
 800176e:	425b      	neglt	r3, r3
 8001770:	2b04      	cmp	r3, #4
 8001772:	dd07      	ble.n	8001784 <beamform_direction+0xe0>
        return (delay > 0) ? +1 : -1;  // left or right
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	2b00      	cmp	r3, #0
 8001778:	dd01      	ble.n	800177e <beamform_direction+0xda>
 800177a:	2301      	movs	r3, #1
 800177c:	e00f      	b.n	800179e <beamform_direction+0xfa>
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	e00c      	b.n	800179e <beamform_direction+0xfa>
    else
        return (e_left > e_right) ? +1 : -1;
 8001784:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001788:	edd7 7a08 	vldr	s15, [r7, #32]
 800178c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001794:	dd01      	ble.n	800179a <beamform_direction+0xf6>
 8001796:	2301      	movs	r3, #1
 8001798:	e001      	b.n	800179e <beamform_direction+0xfa>
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3728      	adds	r7, #40	@ 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bdb0      	pop	{r4, r5, r7, pc}
 80017a6:	bf00      	nop
 80017a8:	358637bd 	.word	0x358637bd
 80017ac:	42800000 	.word	0x42800000
 80017b0:	3fe00000 	.word	0x3fe00000

080017b4 <delay_estimator_init>:

void delay_estimator_init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
    arm_rfft_fast_init_f32(&rfft, CORR_FFT_LEN);   // returns ARM_MATH_SUCCESS
 80017b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <delay_estimator_init+0x14>)
 80017be:	f005 fd9d 	bl	80072fc <arm_rfft_fast_init_f32>
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20002a54 	.word	0x20002a54

080017cc <estimate_delay_fast>:
 *-----------------------------------------------------------------*/
int estimate_delay_fast(const float32_t *left,
                        const float32_t *right,
                        int numSamples,
                        int maxDelay)          // ± range to search
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b094      	sub	sp, #80	@ 0x50
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
    const uint32_t N = CORR_FFT_LEN;           // 1024 here
 80017da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const uint32_t Nby2 = N;                   // real FFT outputs N complex pts
 80017e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017e2:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* ----- 1. Copy signals into zero-padded FFT buffers ----- */
    memset(fftLeft,  0, N * sizeof(float32_t));
 80017e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	461a      	mov	r2, r3
 80017ea:	2100      	movs	r1, #0
 80017ec:	486a      	ldr	r0, [pc, #424]	@ (8001998 <estimate_delay_fast+0x1cc>)
 80017ee:	f007 fb95 	bl	8008f1c <memset>
    memset(fftRight, 0, N * sizeof(float32_t));
 80017f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	461a      	mov	r2, r3
 80017f8:	2100      	movs	r1, #0
 80017fa:	4868      	ldr	r0, [pc, #416]	@ (800199c <estimate_delay_fast+0x1d0>)
 80017fc:	f007 fb8e 	bl	8008f1c <memset>
    memcpy(fftLeft,  left,  numSamples * sizeof(float32_t));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	461a      	mov	r2, r3
 8001806:	68f9      	ldr	r1, [r7, #12]
 8001808:	4863      	ldr	r0, [pc, #396]	@ (8001998 <estimate_delay_fast+0x1cc>)
 800180a:	f007 fc06 	bl	800901a <memcpy>
    memcpy(fftRight, right, numSamples * sizeof(float32_t));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	461a      	mov	r2, r3
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	4861      	ldr	r0, [pc, #388]	@ (800199c <estimate_delay_fast+0x1d0>)
 8001818:	f007 fbff 	bl	800901a <memcpy>

    /* ----- 2. Forward FFTs (real → complex, interleaved) ----- */
    arm_rfft_fast_f32(&rfft, fftLeft,  fftLeft,  0);
 800181c:	2300      	movs	r3, #0
 800181e:	4a5e      	ldr	r2, [pc, #376]	@ (8001998 <estimate_delay_fast+0x1cc>)
 8001820:	495d      	ldr	r1, [pc, #372]	@ (8001998 <estimate_delay_fast+0x1cc>)
 8001822:	485f      	ldr	r0, [pc, #380]	@ (80019a0 <estimate_delay_fast+0x1d4>)
 8001824:	f005 fdec 	bl	8007400 <arm_rfft_fast_f32>
    arm_rfft_fast_f32(&rfft, fftRight, fftRight, 0);
 8001828:	2300      	movs	r3, #0
 800182a:	4a5c      	ldr	r2, [pc, #368]	@ (800199c <estimate_delay_fast+0x1d0>)
 800182c:	495b      	ldr	r1, [pc, #364]	@ (800199c <estimate_delay_fast+0x1d0>)
 800182e:	485c      	ldr	r0, [pc, #368]	@ (80019a0 <estimate_delay_fast+0x1d4>)
 8001830:	f005 fde6 	bl	8007400 <arm_rfft_fast_f32>

    /* ----- 3. Cross-spectrum with PHAT weight --------------- */
    for (uint32_t k = 0; k < Nby2; k += 2) {          // step over [Re,Im]
 8001834:	2300      	movs	r3, #0
 8001836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001838:	e073      	b.n	8001922 <estimate_delay_fast+0x156>
        float32_t ReL = fftLeft [k];
 800183a:	4a57      	ldr	r2, [pc, #348]	@ (8001998 <estimate_delay_fast+0x1cc>)
 800183c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	62fb      	str	r3, [r7, #44]	@ 0x2c
        float32_t ImL = fftLeft [k+1];
 8001846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001848:	3301      	adds	r3, #1
 800184a:	4a53      	ldr	r2, [pc, #332]	@ (8001998 <estimate_delay_fast+0x1cc>)
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
        float32_t ReR = fftRight[k];
 8001854:	4a51      	ldr	r2, [pc, #324]	@ (800199c <estimate_delay_fast+0x1d0>)
 8001856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
        float32_t ImR = fftRight[k+1];
 8001860:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001862:	3301      	adds	r3, #1
 8001864:	4a4d      	ldr	r2, [pc, #308]	@ (800199c <estimate_delay_fast+0x1d0>)
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	623b      	str	r3, [r7, #32]

        /* L*(f) · R(f)   (conjugate on left) */
        float32_t ReX =  ReL * ReR + ImL * ImR;
 800186e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001872:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800187a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800187e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001882:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800188a:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t ImX = -ImL * ReR + ReL * ImR;
 800188e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001892:	eeb1 7a67 	vneg.f32	s14, s15
 8001896:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800189a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800189e:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80018a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80018a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ae:	edc7 7a06 	vstr	s15, [r7, #24]

        /* PHAT normalisation  |X| → 1 */
        float32_t mag2 = ReX*ReX + ImX*ImX + 1e-12f;
 80018b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80018b6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80018be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c6:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80019a4 <estimate_delay_fast+0x1d8>
 80018ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018ce:	edc7 7a05 	vstr	s15, [r7, #20]
        float32_t invMag = 1.0f / sqrtf(mag2);
 80018d2:	ed97 0a05 	vldr	s0, [r7, #20]
 80018d6:	f009 fc47 	bl	800b168 <sqrtf>
 80018da:	eeb0 7a40 	vmov.f32	s14, s0
 80018de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80018e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018e6:	edc7 7a04 	vstr	s15, [r7, #16]

        fftCross[k]   = ReX * invMag;
 80018ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80018ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80018f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f6:	4a2c      	ldr	r2, [pc, #176]	@ (80019a8 <estimate_delay_fast+0x1dc>)
 80018f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	edc3 7a00 	vstr	s15, [r3]
        fftCross[k+1] = ImX * invMag;
 8001902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001904:	3301      	adds	r3, #1
 8001906:	ed97 7a06 	vldr	s14, [r7, #24]
 800190a:	edd7 7a04 	vldr	s15, [r7, #16]
 800190e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001912:	4a25      	ldr	r2, [pc, #148]	@ (80019a8 <estimate_delay_fast+0x1dc>)
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t k = 0; k < Nby2; k += 2) {          // step over [Re,Im]
 800191c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800191e:	3302      	adds	r3, #2
 8001920:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001922:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001926:	429a      	cmp	r2, r3
 8001928:	d387      	bcc.n	800183a <estimate_delay_fast+0x6e>
    }

    /* ----- 4. Inverse FFT → cross-correlation in time ------- */
    arm_rfft_fast_f32(&rfft, fftCross, corrTime, 1);  // inverse flag = 1
 800192a:	2301      	movs	r3, #1
 800192c:	4a1f      	ldr	r2, [pc, #124]	@ (80019ac <estimate_delay_fast+0x1e0>)
 800192e:	491e      	ldr	r1, [pc, #120]	@ (80019a8 <estimate_delay_fast+0x1dc>)
 8001930:	481b      	ldr	r0, [pc, #108]	@ (80019a0 <estimate_delay_fast+0x1d4>)
 8001932:	f005 fd65 	bl	8007400 <arm_rfft_fast_f32>

    /* ----- 5. Look for the peak in ±maxDelay --------------- */
    int   bestLag = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	64bb      	str	r3, [r7, #72]	@ 0x48
    float bestVal = -1e30f;
 800193a:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <estimate_delay_fast+0x1e4>)
 800193c:	647b      	str	r3, [r7, #68]	@ 0x44

    for (int lag = -maxDelay; lag <= maxDelay; ++lag) {
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	425b      	negs	r3, r3
 8001942:	643b      	str	r3, [r7, #64]	@ 0x40
 8001944:	e01e      	b.n	8001984 <estimate_delay_fast+0x1b8>
        /* Mapping: negative lags wrap to the end of corrTime[] */
        uint32_t idx = (lag < 0) ? (N + lag) : lag;
 8001946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001948:	2b00      	cmp	r3, #0
 800194a:	da03      	bge.n	8001954 <estimate_delay_fast+0x188>
 800194c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800194e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001950:	4413      	add	r3, r2
 8001952:	e000      	b.n	8001956 <estimate_delay_fast+0x18a>
 8001954:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001956:	637b      	str	r3, [r7, #52]	@ 0x34
        float32_t v = corrTime[idx];
 8001958:	4a14      	ldr	r2, [pc, #80]	@ (80019ac <estimate_delay_fast+0x1e0>)
 800195a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	633b      	str	r3, [r7, #48]	@ 0x30

        if (v > bestVal) { bestVal = v; bestLag = lag; }
 8001964:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001968:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800196c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001974:	dd03      	ble.n	800197e <estimate_delay_fast+0x1b2>
 8001976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001978:	647b      	str	r3, [r7, #68]	@ 0x44
 800197a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800197c:	64bb      	str	r3, [r7, #72]	@ 0x48
    for (int lag = -maxDelay; lag <= maxDelay; ++lag) {
 800197e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001980:	3301      	adds	r3, #1
 8001982:	643b      	str	r3, [r7, #64]	@ 0x40
 8001984:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	dddc      	ble.n	8001946 <estimate_delay_fast+0x17a>
    }
    return bestLag;
 800198c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800198e:	4618      	mov	r0, r3
 8001990:	3750      	adds	r7, #80	@ 0x50
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20002a6c 	.word	0x20002a6c
 800199c:	20003a6c 	.word	0x20003a6c
 80019a0:	20002a54 	.word	0x20002a54
 80019a4:	2b8cbccc 	.word	0x2b8cbccc
 80019a8:	20004a6c 	.word	0x20004a6c
 80019ac:	20005a6c 	.word	0x20005a6c
 80019b0:	f149f2ca 	.word	0xf149f2ca

080019b4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ba:	463b      	mov	r3, r7
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019c6:	4b21      	ldr	r3, [pc, #132]	@ (8001a4c <MX_ADC1_Init+0x98>)
 80019c8:	4a21      	ldr	r2, [pc, #132]	@ (8001a50 <MX_ADC1_Init+0x9c>)
 80019ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019cc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a4c <MX_ADC1_Init+0x98>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019d2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a4c <MX_ADC1_Init+0x98>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019d8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a4c <MX_ADC1_Init+0x98>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019de:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <MX_ADC1_Init+0x98>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019e4:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <MX_ADC1_Init+0x98>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019ec:	4b17      	ldr	r3, [pc, #92]	@ (8001a4c <MX_ADC1_Init+0x98>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019f2:	4b16      	ldr	r3, [pc, #88]	@ (8001a4c <MX_ADC1_Init+0x98>)
 80019f4:	4a17      	ldr	r2, [pc, #92]	@ (8001a54 <MX_ADC1_Init+0xa0>)
 80019f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019f8:	4b14      	ldr	r3, [pc, #80]	@ (8001a4c <MX_ADC1_Init+0x98>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019fe:	4b13      	ldr	r3, [pc, #76]	@ (8001a4c <MX_ADC1_Init+0x98>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a04:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <MX_ADC1_Init+0x98>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <MX_ADC1_Init+0x98>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a12:	480e      	ldr	r0, [pc, #56]	@ (8001a4c <MX_ADC1_Init+0x98>)
 8001a14:	f001 f9a6 	bl	8002d64 <HAL_ADC_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a1e:	f000 fc33 	bl	8002288 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a22:	2301      	movs	r3, #1
 8001a24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a26:	2301      	movs	r3, #1
 8001a28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a2e:	463b      	mov	r3, r7
 8001a30:	4619      	mov	r1, r3
 8001a32:	4806      	ldr	r0, [pc, #24]	@ (8001a4c <MX_ADC1_Init+0x98>)
 8001a34:	f001 f9da 	bl	8002dec <HAL_ADC_ConfigChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a3e:	f000 fc23 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20006a6c 	.word	0x20006a6c
 8001a50:	40012000 	.word	0x40012000
 8001a54:	0f000001 	.word	0x0f000001

08001a58 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	@ 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a17      	ldr	r2, [pc, #92]	@ (8001ad4 <HAL_ADC_MspInit+0x7c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d127      	bne.n	8001aca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	4b16      	ldr	r3, [pc, #88]	@ (8001ad8 <HAL_ADC_MspInit+0x80>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	4a15      	ldr	r2, [pc, #84]	@ (8001ad8 <HAL_ADC_MspInit+0x80>)
 8001a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <HAL_ADC_MspInit+0x80>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <HAL_ADC_MspInit+0x80>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad8 <HAL_ADC_MspInit+0x80>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <HAL_ADC_MspInit+0x80>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4805      	ldr	r0, [pc, #20]	@ (8001adc <HAL_ADC_MspInit+0x84>)
 8001ac6:	f002 f841 	bl	8003b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001aca:	bf00      	nop
 8001acc:	3728      	adds	r7, #40	@ 0x28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40012000 	.word	0x40012000
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020000 	.word	0x40020000

08001ae0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <MX_DMA_Init+0x3c>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	4a0b      	ldr	r2, [pc, #44]	@ (8001b1c <MX_DMA_Init+0x3c>)
 8001af0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <MX_DMA_Init+0x3c>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	2039      	movs	r0, #57	@ 0x39
 8001b08:	f001 fc79 	bl	80033fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b0c:	2039      	movs	r0, #57	@ 0x39
 8001b0e:	f001 fc92 	bl	8003436 <HAL_NVIC_EnableIRQ>

}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800

08001b20 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	4b35      	ldr	r3, [pc, #212]	@ (8001c10 <MX_GPIO_Init+0xf0>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	4a34      	ldr	r2, [pc, #208]	@ (8001c10 <MX_GPIO_Init+0xf0>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b46:	4b32      	ldr	r3, [pc, #200]	@ (8001c10 <MX_GPIO_Init+0xf0>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	4b2e      	ldr	r3, [pc, #184]	@ (8001c10 <MX_GPIO_Init+0xf0>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001c10 <MX_GPIO_Init+0xf0>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b62:	4b2b      	ldr	r3, [pc, #172]	@ (8001c10 <MX_GPIO_Init+0xf0>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	4b27      	ldr	r3, [pc, #156]	@ (8001c10 <MX_GPIO_Init+0xf0>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	4a26      	ldr	r2, [pc, #152]	@ (8001c10 <MX_GPIO_Init+0xf0>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7e:	4b24      	ldr	r3, [pc, #144]	@ (8001c10 <MX_GPIO_Init+0xf0>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A0_2_Pin|A1_2_Pin|A2_2_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001b90:	4820      	ldr	r0, [pc, #128]	@ (8001c14 <MX_GPIO_Init+0xf4>)
 8001b92:	f002 f96f 	bl	8003e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_1_Pin|A1_1_Pin|A2_1_Pin|DRIVE_EN_Pin
 8001b96:	2200      	movs	r2, #0
 8001b98:	f44f 613c 	mov.w	r1, #3008	@ 0xbc0
 8001b9c:	481e      	ldr	r0, [pc, #120]	@ (8001c18 <MX_GPIO_Init+0xf8>)
 8001b9e:	f002 f969 	bl	8003e74 <HAL_GPIO_WritePin>
                          |TIM_MEAS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|N_RES_Pin, GPIO_PIN_RESET);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001ba8:	481c      	ldr	r0, [pc, #112]	@ (8001c1c <MX_GPIO_Init+0xfc>)
 8001baa:	f002 f963 	bl	8003e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_2_Pin A1_2_Pin A2_2_Pin */
  GPIO_InitStruct.Pin = A0_2_Pin|A1_2_Pin|A2_2_Pin;
 8001bae:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001bb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4813      	ldr	r0, [pc, #76]	@ (8001c14 <MX_GPIO_Init+0xf4>)
 8001bc8:	f001 ffc0 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_1_Pin A1_1_Pin A2_1_Pin DRIVE_EN_Pin
                           TIM_MEAS_Pin */
  GPIO_InitStruct.Pin = A0_1_Pin|A1_1_Pin|A2_1_Pin|DRIVE_EN_Pin
 8001bcc:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 8001bd0:	60fb      	str	r3, [r7, #12]
                          |TIM_MEAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	4619      	mov	r1, r3
 8001be4:	480c      	ldr	r0, [pc, #48]	@ (8001c18 <MX_GPIO_Init+0xf8>)
 8001be6:	f001 ffb1 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin N_RES_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|N_RES_Pin;
 8001bea:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	4619      	mov	r1, r3
 8001c02:	4806      	ldr	r0, [pc, #24]	@ (8001c1c <MX_GPIO_Init+0xfc>)
 8001c04:	f001 ffa2 	bl	8003b4c <HAL_GPIO_Init>

}
 8001c08:	bf00      	nop
 8001c0a:	3720      	adds	r7, #32
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020400 	.word	0x40020400
 8001c18:	40020800 	.word	0x40020800
 8001c1c:	40020000 	.word	0x40020000

08001c20 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c24:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <MX_I2C1_Init+0x54>)
 8001c26:	4a14      	ldr	r2, [pc, #80]	@ (8001c78 <MX_I2C1_Init+0x58>)
 8001c28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c2a:	4b12      	ldr	r3, [pc, #72]	@ (8001c74 <MX_I2C1_Init+0x54>)
 8001c2c:	4a13      	ldr	r2, [pc, #76]	@ (8001c7c <MX_I2C1_Init+0x5c>)
 8001c2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001c30:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <MX_I2C1_Init+0x54>)
 8001c32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c36:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c38:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <MX_I2C1_Init+0x54>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <MX_I2C1_Init+0x54>)
 8001c40:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c46:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <MX_I2C1_Init+0x54>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c4c:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <MX_I2C1_Init+0x54>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c52:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <MX_I2C1_Init+0x54>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <MX_I2C1_Init+0x54>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c5e:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <MX_I2C1_Init+0x54>)
 8001c60:	f002 f922 	bl	8003ea8 <HAL_I2C_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001c6a:	f000 fb0d 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20006ab4 	.word	0x20006ab4
 8001c78:	40005400 	.word	0x40005400
 8001c7c:	00061a80 	.word	0x00061a80

08001c80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	@ 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a19      	ldr	r2, [pc, #100]	@ (8001d04 <HAL_I2C_MspInit+0x84>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d12c      	bne.n	8001cfc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	4b18      	ldr	r3, [pc, #96]	@ (8001d08 <HAL_I2C_MspInit+0x88>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	4a17      	ldr	r2, [pc, #92]	@ (8001d08 <HAL_I2C_MspInit+0x88>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <HAL_I2C_MspInit+0x88>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cbe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc4:	2312      	movs	r3, #18
 8001cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	480c      	ldr	r0, [pc, #48]	@ (8001d0c <HAL_I2C_MspInit+0x8c>)
 8001cdc:	f001 ff36 	bl	8003b4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <HAL_I2C_MspInit+0x88>)
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce8:	4a07      	ldr	r2, [pc, #28]	@ (8001d08 <HAL_I2C_MspInit+0x88>)
 8001cea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <HAL_I2C_MspInit+0x88>)
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3728      	adds	r7, #40	@ 0x28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40005400 	.word	0x40005400
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40020400 	.word	0x40020400

08001d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	f5ad 5d87 	sub.w	sp, sp, #4320	@ 0x10e0
 8001d16:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d18:	f000 ff8e 	bl	8002c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d1c:	f000 f9be 	bl	800209c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d20:	f7ff fefe 	bl	8001b20 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d24:	f7ff fedc 	bl	8001ae0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001d28:	f7ff ff7a 	bl	8001c20 <MX_I2C1_Init>
  MX_TIM7_Init();
 8001d2c:	f000 fc58 	bl	80025e0 <MX_TIM7_Init>
  MX_ADC1_Init();
 8001d30:	f7ff fe40 	bl	80019b4 <MX_ADC1_Init>
  MX_SAI1_Init();
 8001d34:	f000 faae 	bl	8002294 <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */


 init_drivers();
 8001d38:	f000 fcda 	bl	80026f0 <init_drivers>
 DWT_Init();
 8001d3c:	f000 fa1c 	bl	8002178 <DWT_Init>

	uint8_t numValues = 80;
 8001d40:	2350      	movs	r3, #80	@ 0x50
 8001d42:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001d46:	f102 0207 	add.w	r2, r2, #7
 8001d4a:	7013      	strb	r3, [r2, #0]
	uint8_t maxValue = 0x5B; // 2.3V RMS
 8001d4c:	235b      	movs	r3, #91	@ 0x5b
 8001d4e:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001d52:	f102 0206 	add.w	r2, r2, #6
 8001d56:	7013      	strb	r3, [r2, #0]

	double amplitudes[NUM_ACTUATORS] = {0};
 8001d58:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d5c:	f103 0318 	add.w	r3, r3, #24
 8001d60:	2280      	movs	r2, #128	@ 0x80
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f007 f8d9 	bl	8008f1c <memset>
	uint8_t counter = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001d70:	f102 0205 	add.w	r2, r2, #5
 8001d74:	7013      	strb	r3, [r2, #0]
	int32_t audioData_left[NUM_SAMPLES];
	int32_t audioData_right[NUM_SAMPLES];

	generateHammingWindow();
 8001d76:	f7ff fbed 	bl	8001554 <generateHammingWindow>
	delay_estimator_init();
 8001d7a:	f7ff fd1b 	bl	80017b4 <delay_estimator_init>

	uint8_t ready = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001d84:	f102 0217 	add.w	r2, r2, #23
 8001d88:	7013      	strb	r3, [r2, #0]

	for(int j=0; j<NUM_ACTUATORS; j++){
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001d90:	f102 0210 	add.w	r2, r2, #16
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e01d      	b.n	8001dd4 <main+0xc4>
		amplitudes[j] = 0;
 8001d98:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001d9c:	f103 0310 	add.w	r3, r3, #16
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	f503 5386 	add.w	r3, r3, #4288	@ 0x10c0
 8001da8:	f103 0318 	add.w	r3, r3, #24
 8001dac:	443b      	add	r3, r7
 8001dae:	f1a3 01a0 	sub.w	r1, r3, #160	@ 0xa0
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	e9c1 2300 	strd	r2, r3, [r1]
	for(int j=0; j<NUM_ACTUATORS; j++){
 8001dbe:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001dc2:	f103 0310 	add.w	r3, r3, #16
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001dce:	f102 0210 	add.w	r2, r2, #16
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001dd8:	f103 0310 	add.w	r3, r3, #16
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b0f      	cmp	r3, #15
 8001de0:	ddda      	ble.n	8001d98 <main+0x88>
//	printf("Semihosting test...\n\r");

	char s[50];
	char *p;
	FILE *fp;
	p = s;
 8001de2:	f107 0318 	add.w	r3, r7, #24
 8001de6:	3b14      	subs	r3, #20
 8001de8:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001dec:	6013      	str	r3, [r2, #0]


//	HAL_NVIC_EnableIRQ(TIM7_IRQn);
//	HAL_TIM_Base_Start_IT(&htim7);
	HAL_TIM_Base_Start(&htim7);
 8001dee:	48a1      	ldr	r0, [pc, #644]	@ (8002074 <main+0x364>)
 8001df0:	f004 ffce 	bl	8006d90 <HAL_TIM_Base_Start>

	HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint32_t *)rawdata, DMA_BUFFER_SIZE);
 8001df4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001df8:	499f      	ldr	r1, [pc, #636]	@ (8002078 <main+0x368>)
 8001dfa:	48a0      	ldr	r0, [pc, #640]	@ (800207c <main+0x36c>)
 8001dfc:	f004 fc6c 	bl	80066d8 <HAL_SAI_Receive_DMA>


	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
 8001e00:	2200      	movs	r2, #0
 8001e02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e06:	489e      	ldr	r0, [pc, #632]	@ (8002080 <main+0x370>)
 8001e08:	f002 f834 	bl	8003e74 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(TimCollapsed){
 8001e0c:	4b9d      	ldr	r3, [pc, #628]	@ (8002084 <main+0x374>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <main+0x10a>
		TimCollapsed = RESET;
 8001e14:	4b9b      	ldr	r3, [pc, #620]	@ (8002084 <main+0x374>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
	  }

	  if(ready!=0){
 8001e1a:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001e1e:	f103 0317 	add.w	r3, r3, #23
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01a      	beq.n	8001e5e <main+0x14e>
		  // clear actual waveform with falling edge
		  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e2e:	4894      	ldr	r0, [pc, #592]	@ (8002080 <main+0x370>)
 8001e30:	f002 f820 	bl	8003e74 <HAL_GPIO_WritePin>
		  delay_us(100);
 8001e34:	2064      	movs	r0, #100	@ 0x64
 8001e36:	f000 f9bf 	bl	80021b8 <delay_us>
		  // set new waveform
		  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, SET);
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e40:	488f      	ldr	r0, [pc, #572]	@ (8002080 <main+0x370>)
 8001e42:	f002 f817 	bl	8003e74 <HAL_GPIO_WritePin>
		  ready = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001e4c:	f102 0217 	add.w	r2, r2, #23
 8001e50:	7013      	strb	r3, [r2, #0]
		  HAL_GPIO_WritePin(TIM_MEAS_GPIO_Port, TIM_MEAS_Pin, RESET);
 8001e52:	2200      	movs	r2, #0
 8001e54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e58:	488b      	ldr	r0, [pc, #556]	@ (8002088 <main+0x378>)
 8001e5a:	f002 f80b 	bl	8003e74 <HAL_GPIO_WritePin>
	  }

	  if(Data_Arrived_First_Half && (ready == 0)){
 8001e5e:	4b8b      	ldr	r3, [pc, #556]	@ (800208c <main+0x37c>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d075      	beq.n	8001f52 <main+0x242>
 8001e66:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001e6a:	f103 0317 	add.w	r3, r3, #23
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d16e      	bne.n	8001f52 <main+0x242>
		  Data_Arrived_First_Half = RESET;
 8001e74:	4b85      	ldr	r3, [pc, #532]	@ (800208c <main+0x37c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(TIM_MEAS_GPIO_Port, TIM_MEAS_Pin, SET);
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e80:	4881      	ldr	r0, [pc, #516]	@ (8002088 <main+0x378>)
 8001e82:	f001 fff7 	bl	8003e74 <HAL_GPIO_WritePin>
		  // Create lock file to have no conflicts with matlab
//		  FILE* lock = fopen("C:\\...\\Data_Left.lock", "w");
//		  if (lock) fclose(lock);  // just create and close

//		  fp=fopen("C:\\Users\\franc\\OneDrive\\Dokumente\\MATLAB\\Master_Thesis\\Data_Left.txt", "w");
		  for(int i=0; i<NUM_SAMPLES; i++){
 8001e86:	2300      	movs	r3, #0
 8001e88:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001e8c:	f102 020c 	add.w	r2, r2, #12
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e038      	b.n	8001f06 <main+0x1f6>
			  // value is stored in four array parts (LSB left, MSB left, LSB right, MSB right)
			  // Sort it and value is 18-bit (MSB) in 2's complement
			  audioData_left[i] = ((int32_t)(rawdata[2*i] << 0)) >> 14;
 8001e94:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001e98:	f103 030c 	add.w	r3, r3, #12
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4a75      	ldr	r2, [pc, #468]	@ (8002078 <main+0x368>)
 8001ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea6:	1399      	asrs	r1, r3, #14
 8001ea8:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001eac:	f103 0318 	add.w	r3, r3, #24
 8001eb0:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001eb4:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001eb8:	f102 020c 	add.w	r2, r2, #12
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  audioData_right[i] = ((int32_t)(rawdata[2*i+1] << 0)) >> 14;
 8001ec2:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001ec6:	f103 030c 	add.w	r3, r3, #12
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	3301      	adds	r3, #1
 8001ed0:	4a69      	ldr	r2, [pc, #420]	@ (8002078 <main+0x368>)
 8001ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed6:	139a      	asrs	r2, r3, #14
 8001ed8:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001edc:	4619      	mov	r1, r3
 8001ede:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001ee2:	f103 030c 	add.w	r3, r3, #12
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	f843 2ca0 	str.w	r2, [r3, #-160]
		  for(int i=0; i<NUM_SAMPLES; i++){
 8001ef0:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001ef4:	f103 030c 	add.w	r3, r3, #12
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	3301      	adds	r3, #1
 8001efc:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001f00:	f102 020c 	add.w	r2, r2, #12
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001f0a:	f103 030c 	add.w	r3, r3, #12
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f14:	dbbe      	blt.n	8001e94 <main+0x184>
//			  fprintf(fp,"\n");
		  }
//		  fclose(fp);


		  process_signal(amplitudes, audioData_left, audioData_right, fftSignal, WindowedSignal);
 8001f16:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001f1a:	f607 0138 	addw	r1, r7, #2104	@ 0x838
 8001f1e:	f507 5081 	add.w	r0, r7, #4128	@ 0x1020
 8001f22:	f100 0018 	add.w	r0, r0, #24
 8001f26:	4b5a      	ldr	r3, [pc, #360]	@ (8002090 <main+0x380>)
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	4b5a      	ldr	r3, [pc, #360]	@ (8002094 <main+0x384>)
 8001f2c:	f7ff f928 	bl	8001180 <process_signal>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f30:	b672      	cpsid	i
}
 8001f32:	bf00      	nop
		  __disable_irq();
		  set_amplitude(amplitudes);
 8001f34:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001f38:	f103 0318 	add.w	r3, r3, #24
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 fddb 	bl	8002af8 <set_amplitude>
  __ASM volatile ("cpsie i" : : : "memory");
 8001f42:	b662      	cpsie	i
}
 8001f44:	bf00      	nop
//			  int n= sprintf (p, "%d", (int) WindowedSignal[i]);
//			  fprintf(fp,p);
//			  fprintf(fp,"\n");
//		  }
//		  fclose(fp);
		  ready = 1;
 8001f46:	2301      	movs	r3, #1
 8001f48:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001f4c:	f102 0217 	add.w	r2, r2, #23
 8001f50:	7013      	strb	r3, [r2, #0]

		  // Delete lock file as signal for "done writing"
//		   remove("C:\\...\\Data_Left.lock");
	  }

	  if(Data_Arrived_Second_Half && (ready==0)){
 8001f52:	4b51      	ldr	r3, [pc, #324]	@ (8002098 <main+0x388>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f43f af58 	beq.w	8001e0c <main+0xfc>
 8001f5c:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001f60:	f103 0317 	add.w	r3, r3, #23
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f47f af50 	bne.w	8001e0c <main+0xfc>
		  Data_Arrived_Second_Half = RESET;
 8001f6c:	4b4a      	ldr	r3, [pc, #296]	@ (8002098 <main+0x388>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(TIM_MEAS_GPIO_Port, TIM_MEAS_Pin, SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f78:	4843      	ldr	r0, [pc, #268]	@ (8002088 <main+0x378>)
 8001f7a:	f001 ff7b 	bl	8003e74 <HAL_GPIO_WritePin>
		  // Create lock file to have no conflicts with matlab
//		  FILE* lock = fopen("C:\\...\\Data_Left.lock", "w");
//		  if (lock) fclose(lock);  // just create and close
		  int offset = DMA_BUFFER_SIZE/2;
 8001f7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f82:	f507 5285 	add.w	r2, r7, #4256	@ 0x10a0
 8001f86:	f102 021c 	add.w	r2, r2, #28
 8001f8a:	6013      	str	r3, [r2, #0]
//
//		  fp=fopen("C:\\Users\\franc\\OneDrive\\Dokumente\\MATLAB\\Master_Thesis\\Data_Left.txt", "w");
		  for(int i=0; i<NUM_SAMPLES; i++){
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001f92:	f102 0208 	add.w	r2, r2, #8
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	e044      	b.n	8002024 <main+0x314>
//			  // value is stored in four array parts (LSB left, MSB left, LSB right, MSB right)
//			  // Sort it and value is 18-bit (MSB) in 2's complement
			  audioData_left[i] = ((int32_t)(rawdata[2*i + offset] << 0)) >> 14;
 8001f9a:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001f9e:	f103 0308 	add.w	r3, r3, #8
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	005a      	lsls	r2, r3, #1
 8001fa6:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001faa:	f103 031c 	add.w	r3, r3, #28
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a31      	ldr	r2, [pc, #196]	@ (8002078 <main+0x368>)
 8001fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb8:	1399      	asrs	r1, r3, #14
 8001fba:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001fbe:	f103 0318 	add.w	r3, r3, #24
 8001fc2:	f5a3 630a 	sub.w	r3, r3, #2208	@ 0x8a0
 8001fc6:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001fca:	f102 0208 	add.w	r2, r2, #8
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  audioData_right[i] = ((int32_t)(rawdata[2*i+1 + offset] << 0)) >> 14;
 8001fd4:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001fd8:	f103 0308 	add.w	r3, r3, #8
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001fe6:	f103 031c 	add.w	r3, r3, #28
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	4a22      	ldr	r2, [pc, #136]	@ (8002078 <main+0x368>)
 8001ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff4:	139a      	asrs	r2, r3, #14
 8001ff6:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8002000:	f103 0308 	add.w	r3, r3, #8
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	f843 2ca0 	str.w	r2, [r3, #-160]
		  for(int i=0; i<NUM_SAMPLES; i++){
 800200e:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8002012:	f103 0308 	add.w	r3, r3, #8
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 800201e:	f102 0208 	add.w	r2, r2, #8
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8002028:	f103 0308 	add.w	r3, r3, #8
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002032:	dbb2      	blt.n	8001f9a <main+0x28a>
//			  fprintf(fp,p);
//			  fprintf(fp,"\n");
		  }
//		  fclose(fp);

		  process_signal(amplitudes, audioData_left, audioData_right, fftSignal, WindowedSignal);
 8002034:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002038:	f607 0138 	addw	r1, r7, #2104	@ 0x838
 800203c:	f507 5081 	add.w	r0, r7, #4128	@ 0x1020
 8002040:	f100 0018 	add.w	r0, r0, #24
 8002044:	4b12      	ldr	r3, [pc, #72]	@ (8002090 <main+0x380>)
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <main+0x384>)
 800204a:	f7ff f899 	bl	8001180 <process_signal>
  __ASM volatile ("cpsid i" : : : "memory");
 800204e:	b672      	cpsid	i
}
 8002050:	bf00      	nop
		  __disable_irq();
		  set_amplitude(amplitudes);
 8002052:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002056:	f103 0318 	add.w	r3, r3, #24
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fd4c 	bl	8002af8 <set_amplitude>
  __ASM volatile ("cpsie i" : : : "memory");
 8002060:	b662      	cpsie	i
}
 8002062:	bf00      	nop
		  __enable_irq();
		  ready = 2;
 8002064:	2302      	movs	r3, #2
 8002066:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 800206a:	f102 0217 	add.w	r2, r2, #23
 800206e:	7013      	strb	r3, [r2, #0]
	  if(TimCollapsed){
 8002070:	e6cc      	b.n	8001e0c <main+0xfc>
 8002072:	bf00      	nop
 8002074:	20009bfc 	.word	0x20009bfc
 8002078:	20006b0c 	.word	0x20006b0c
 800207c:	20009b0c 	.word	0x20009b0c
 8002080:	40020000 	.word	0x40020000
 8002084:	20006b08 	.word	0x20006b08
 8002088:	40020800 	.word	0x40020800
 800208c:	20006b09 	.word	0x20006b09
 8002090:	2000930c 	.word	0x2000930c
 8002094:	20008b0c 	.word	0x20008b0c
 8002098:	20006b0a 	.word	0x20006b0a

0800209c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b094      	sub	sp, #80	@ 0x50
 80020a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	2234      	movs	r2, #52	@ 0x34
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f006 ff36 	bl	8008f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b0:	f107 0308 	add.w	r3, r7, #8
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c0:	2300      	movs	r3, #0
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002170 <SystemClock_Config+0xd4>)
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	4a29      	ldr	r2, [pc, #164]	@ (8002170 <SystemClock_Config+0xd4>)
 80020ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80020d0:	4b27      	ldr	r3, [pc, #156]	@ (8002170 <SystemClock_Config+0xd4>)
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020dc:	2300      	movs	r3, #0
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	4b24      	ldr	r3, [pc, #144]	@ (8002174 <SystemClock_Config+0xd8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80020e8:	4a22      	ldr	r2, [pc, #136]	@ (8002174 <SystemClock_Config+0xd8>)
 80020ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b20      	ldr	r3, [pc, #128]	@ (8002174 <SystemClock_Config+0xd8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020f8:	603b      	str	r3, [r7, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020fc:	2302      	movs	r3, #2
 80020fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002100:	2301      	movs	r3, #1
 8002102:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002104:	2310      	movs	r3, #16
 8002106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002108:	2302      	movs	r3, #2
 800210a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800210c:	2300      	movs	r3, #0
 800210e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002110:	2308      	movs	r3, #8
 8002112:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002114:	2360      	movs	r3, #96	@ 0x60
 8002116:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002118:	2302      	movs	r3, #2
 800211a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800211c:	2302      	movs	r3, #2
 800211e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002120:	2302      	movs	r3, #2
 8002122:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002124:	f107 031c 	add.w	r3, r7, #28
 8002128:	4618      	mov	r0, r3
 800212a:	f003 fedb 	bl	8005ee4 <HAL_RCC_OscConfig>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002134:	f000 f8a8 	bl	8002288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002138:	230f      	movs	r3, #15
 800213a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800213c:	2302      	movs	r3, #2
 800213e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002144:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002148:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800214a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800214e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002150:	f107 0308 	add.w	r3, r7, #8
 8002154:	2103      	movs	r1, #3
 8002156:	4618      	mov	r0, r3
 8002158:	f002 fea0 	bl	8004e9c <HAL_RCC_ClockConfig>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002162:	f000 f891 	bl	8002288 <Error_Handler>
  }
}
 8002166:	bf00      	nop
 8002168:	3750      	adds	r7, #80	@ 0x50
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	40007000 	.word	0x40007000

08002178 <DWT_Init>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		28.05.2025	FL	Created
 ****************************************************************************/
void DWT_Init(void) {
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 800217c:	4b0c      	ldr	r3, [pc, #48]	@ (80021b0 <DWT_Init+0x38>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d105      	bne.n	8002194 <DWT_Init+0x1c>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002188:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <DWT_Init+0x38>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a08      	ldr	r2, [pc, #32]	@ (80021b0 <DWT_Init+0x38>)
 800218e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002192:	60d3      	str	r3, [r2, #12]
    }
    DWT->CYCCNT = 0;
 8002194:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <DWT_Init+0x3c>)
 8002196:	2200      	movs	r2, #0
 8002198:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <DWT_Init+0x3c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a05      	ldr	r2, [pc, #20]	@ (80021b4 <DWT_Init+0x3c>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6013      	str	r3, [r2, #0]
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000edf0 	.word	0xe000edf0
 80021b4:	e0001000 	.word	0xe0001000

080021b8 <delay_us>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		28.05.2025	FL	Created
 ****************************************************************************/
void delay_us(uint32_t us) {
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 80021c0:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <delay_us+0x40>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0d      	ldr	r2, [pc, #52]	@ (80021fc <delay_us+0x44>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0c9a      	lsrs	r2, r3, #18
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	fb02 f303 	mul.w	r3, r2, r3
 80021d2:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 80021d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <delay_us+0x48>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 80021da:	bf00      	nop
 80021dc:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <delay_us+0x48>)
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d8f8      	bhi.n	80021dc <delay_us+0x24>
}
 80021ea:	bf00      	nop
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	20000000 	.word	0x20000000
 80021fc:	431bde83 	.word	0x431bde83
 8002200:	e0001000 	.word	0xe0001000

08002204 <HAL_TIM_PeriodElapsedCallback>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		12.03.2025	FL	Created
 ****************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a05      	ldr	r2, [pc, #20]	@ (8002228 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d102      	bne.n	800221c <HAL_TIM_PeriodElapsedCallback+0x18>
		TimCollapsed = SET;
 8002216:	4b05      	ldr	r3, [pc, #20]	@ (800222c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]
	}
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	40001400 	.word	0x40001400
 800222c:	20006b08 	.word	0x20006b08

08002230 <HAL_SAI_RxCpltCallback>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		05.06.2025	FL	Created
 ****************************************************************************/
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	if(hsai == &hsai_BlockA1){
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a06      	ldr	r2, [pc, #24]	@ (8002254 <HAL_SAI_RxCpltCallback+0x24>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d102      	bne.n	8002246 <HAL_SAI_RxCpltCallback+0x16>
		Data_Arrived_Second_Half = SET;
 8002240:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <HAL_SAI_RxCpltCallback+0x28>)
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]
//		HAL_GPIO_WritePin(TIM_MEAS_GPIO_Port, TIM_MEAS_Pin, SET);
	}
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20009b0c 	.word	0x20009b0c
 8002258:	20006b0a 	.word	0x20006b0a

0800225c <HAL_SAI_RxHalfCpltCallback>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		05.06.2025	FL	Created
 ****************************************************************************/
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai){
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	if(hsai == &hsai_BlockA1){
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a06      	ldr	r2, [pc, #24]	@ (8002280 <HAL_SAI_RxHalfCpltCallback+0x24>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d102      	bne.n	8002272 <HAL_SAI_RxHalfCpltCallback+0x16>
		Data_Arrived_First_Half = SET;
 800226c:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <HAL_SAI_RxHalfCpltCallback+0x28>)
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
//		HAL_GPIO_WritePin(TIM_MEAS_GPIO_Port, TIM_MEAS_Pin, RESET);
	}
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20009b0c 	.word	0x20009b0c
 8002284:	20006b09 	.word	0x20006b09

08002288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800228c:	b672      	cpsid	i
}
 800228e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <Error_Handler+0x8>

08002294 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002298:	4b17      	ldr	r3, [pc, #92]	@ (80022f8 <MX_SAI1_Init+0x64>)
 800229a:	4a18      	ldr	r2, [pc, #96]	@ (80022fc <MX_SAI1_Init+0x68>)
 800229c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 800229e:	4b16      	ldr	r3, [pc, #88]	@ (80022f8 <MX_SAI1_Init+0x64>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80022a4:	4b14      	ldr	r3, [pc, #80]	@ (80022f8 <MX_SAI1_Init+0x64>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80022aa:	4b13      	ldr	r3, [pc, #76]	@ (80022f8 <MX_SAI1_Init+0x64>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80022b0:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <MX_SAI1_Init+0x64>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80022b6:	4b10      	ldr	r3, [pc, #64]	@ (80022f8 <MX_SAI1_Init+0x64>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_NA;
 80022bc:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <MX_SAI1_Init+0x64>)
 80022be:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80022c2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 80022c4:	4b0c      	ldr	r3, [pc, #48]	@ (80022f8 <MX_SAI1_Init+0x64>)
 80022c6:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80022ca:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80022cc:	4b0a      	ldr	r3, [pc, #40]	@ (80022f8 <MX_SAI1_Init+0x64>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80022d2:	4b09      	ldr	r3, [pc, #36]	@ (80022f8 <MX_SAI1_Init+0x64>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80022d8:	4b07      	ldr	r3, [pc, #28]	@ (80022f8 <MX_SAI1_Init+0x64>)
 80022da:	2200      	movs	r2, #0
 80022dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_32BIT, 2) != HAL_OK)
 80022de:	2302      	movs	r3, #2
 80022e0:	2203      	movs	r2, #3
 80022e2:	2100      	movs	r1, #0
 80022e4:	4804      	ldr	r0, [pc, #16]	@ (80022f8 <MX_SAI1_Init+0x64>)
 80022e6:	f004 f89b 	bl	8006420 <HAL_SAI_InitProtocol>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 80022f0:	f7ff ffca 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20009b0c 	.word	0x20009b0c
 80022fc:	40015804 	.word	0x40015804

08002300 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b0a0      	sub	sp, #128	@ 0x80
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002308:	f107 0310 	add.w	r3, r7, #16
 800230c:	225c      	movs	r2, #92	@ 0x5c
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f006 fe03 	bl	8008f1c <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a4f      	ldr	r2, [pc, #316]	@ (8002458 <HAL_SAI_MspInit+0x158>)
 800231c:	4293      	cmp	r3, r2
 800231e:	f040 8096 	bne.w	800244e <HAL_SAI_MspInit+0x14e>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002322:	2304      	movs	r3, #4
 8002324:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 8002326:	2308      	movs	r3, #8
 8002328:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 123;
 800232a:	237b      	movs	r3, #123	@ 0x7b
 800232c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 15;
 800232e:	230f      	movs	r3, #15
 8002330:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8002332:	2302      	movs	r3, #2
 8002334:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002336:	2301      	movs	r3, #1
 8002338:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800233a:	2300      	movs	r3, #0
 800233c:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800233e:	f107 0310 	add.w	r3, r7, #16
 8002342:	4618      	mov	r0, r3
 8002344:	f002 feb0 	bl	80050a8 <HAL_RCCEx_PeriphCLKConfig>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_SAI_MspInit+0x52>
    {
      Error_Handler();
 800234e:	f7ff ff9b 	bl	8002288 <Error_Handler>
    }

    if (SAI1_client == 0)
 8002352:	4b42      	ldr	r3, [pc, #264]	@ (800245c <HAL_SAI_MspInit+0x15c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10d      	bne.n	8002376 <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b40      	ldr	r3, [pc, #256]	@ (8002460 <HAL_SAI_MspInit+0x160>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	4a3f      	ldr	r2, [pc, #252]	@ (8002460 <HAL_SAI_MspInit+0x160>)
 8002364:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002368:	6453      	str	r3, [r2, #68]	@ 0x44
 800236a:	4b3d      	ldr	r3, [pc, #244]	@ (8002460 <HAL_SAI_MspInit+0x160>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8002376:	4b39      	ldr	r3, [pc, #228]	@ (800245c <HAL_SAI_MspInit+0x15c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3301      	adds	r3, #1
 800237c:	4a37      	ldr	r2, [pc, #220]	@ (800245c <HAL_SAI_MspInit+0x15c>)
 800237e:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PC1     ------> SAI1_SD_A
    PA3     ------> SAI1_FS_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002380:	2302      	movs	r3, #2
 8002382:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002390:	2306      	movs	r3, #6
 8002392:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002394:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002398:	4619      	mov	r1, r3
 800239a:	4832      	ldr	r0, [pc, #200]	@ (8002464 <HAL_SAI_MspInit+0x164>)
 800239c:	f001 fbd6 	bl	8003b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023a0:	2308      	movs	r3, #8
 80023a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80023b0:	2306      	movs	r3, #6
 80023b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80023b8:	4619      	mov	r1, r3
 80023ba:	482b      	ldr	r0, [pc, #172]	@ (8002468 <HAL_SAI_MspInit+0x168>)
 80023bc:	f001 fbc6 	bl	8003b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ce:	2300      	movs	r3, #0
 80023d0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80023d2:	2306      	movs	r3, #6
 80023d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80023da:	4619      	mov	r1, r3
 80023dc:	4823      	ldr	r0, [pc, #140]	@ (800246c <HAL_SAI_MspInit+0x16c>)
 80023de:	f001 fbb5 	bl	8003b4c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 80023e2:	4b23      	ldr	r3, [pc, #140]	@ (8002470 <HAL_SAI_MspInit+0x170>)
 80023e4:	4a23      	ldr	r2, [pc, #140]	@ (8002474 <HAL_SAI_MspInit+0x174>)
 80023e6:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 80023e8:	4b21      	ldr	r3, [pc, #132]	@ (8002470 <HAL_SAI_MspInit+0x170>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ee:	4b20      	ldr	r3, [pc, #128]	@ (8002470 <HAL_SAI_MspInit+0x170>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80023f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002470 <HAL_SAI_MspInit+0x170>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80023fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002470 <HAL_SAI_MspInit+0x170>)
 80023fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002400:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002402:	4b1b      	ldr	r3, [pc, #108]	@ (8002470 <HAL_SAI_MspInit+0x170>)
 8002404:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002408:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800240a:	4b19      	ldr	r3, [pc, #100]	@ (8002470 <HAL_SAI_MspInit+0x170>)
 800240c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002410:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8002412:	4b17      	ldr	r3, [pc, #92]	@ (8002470 <HAL_SAI_MspInit+0x170>)
 8002414:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002418:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 800241a:	4b15      	ldr	r3, [pc, #84]	@ (8002470 <HAL_SAI_MspInit+0x170>)
 800241c:	2200      	movs	r2, #0
 800241e:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002420:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <HAL_SAI_MspInit+0x170>)
 8002422:	2200      	movs	r2, #0
 8002424:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002426:	4812      	ldr	r0, [pc, #72]	@ (8002470 <HAL_SAI_MspInit+0x170>)
 8002428:	f001 f820 	bl	800346c <HAL_DMA_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_SAI_MspInit+0x136>
    {
      Error_Handler();
 8002432:	f7ff ff29 	bl	8002288 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a0d      	ldr	r2, [pc, #52]	@ (8002470 <HAL_SAI_MspInit+0x170>)
 800243a:	675a      	str	r2, [r3, #116]	@ 0x74
 800243c:	4a0c      	ldr	r2, [pc, #48]	@ (8002470 <HAL_SAI_MspInit+0x170>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a0a      	ldr	r2, [pc, #40]	@ (8002470 <HAL_SAI_MspInit+0x170>)
 8002446:	671a      	str	r2, [r3, #112]	@ 0x70
 8002448:	4a09      	ldr	r2, [pc, #36]	@ (8002470 <HAL_SAI_MspInit+0x170>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 800244e:	bf00      	nop
 8002450:	3780      	adds	r7, #128	@ 0x80
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40015804 	.word	0x40015804
 800245c:	20009bf4 	.word	0x20009bf4
 8002460:	40023800 	.word	0x40023800
 8002464:	40020800 	.word	0x40020800
 8002468:	40020000 	.word	0x40020000
 800246c:	40020400 	.word	0x40020400
 8002470:	20009b94 	.word	0x20009b94
 8002474:	40026428 	.word	0x40026428

08002478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	4b10      	ldr	r3, [pc, #64]	@ (80024c4 <HAL_MspInit+0x4c>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002486:	4a0f      	ldr	r2, [pc, #60]	@ (80024c4 <HAL_MspInit+0x4c>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800248c:	6453      	str	r3, [r2, #68]	@ 0x44
 800248e:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <HAL_MspInit+0x4c>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <HAL_MspInit+0x4c>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	4a08      	ldr	r2, [pc, #32]	@ (80024c4 <HAL_MspInit+0x4c>)
 80024a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024aa:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <HAL_MspInit+0x4c>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800

080024c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <NMI_Handler+0x4>

080024d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <HardFault_Handler+0x4>

080024d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024dc:	bf00      	nop
 80024de:	e7fd      	b.n	80024dc <MemManage_Handler+0x4>

080024e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <BusFault_Handler+0x4>

080024e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024ec:	bf00      	nop
 80024ee:	e7fd      	b.n	80024ec <UsageFault_Handler+0x4>

080024f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800251e:	f000 fbdd 	bl	8002cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800252c:	4802      	ldr	r0, [pc, #8]	@ (8002538 <TIM7_IRQHandler+0x10>)
 800252e:	f004 fc97 	bl	8006e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20009bfc 	.word	0x20009bfc

0800253c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002540:	4802      	ldr	r0, [pc, #8]	@ (800254c <DMA2_Stream1_IRQHandler+0x10>)
 8002542:	f001 f899 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20009b94 	.word	0x20009b94

08002550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002558:	4a14      	ldr	r2, [pc, #80]	@ (80025ac <_sbrk+0x5c>)
 800255a:	4b15      	ldr	r3, [pc, #84]	@ (80025b0 <_sbrk+0x60>)
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002564:	4b13      	ldr	r3, [pc, #76]	@ (80025b4 <_sbrk+0x64>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800256c:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <_sbrk+0x64>)
 800256e:	4a12      	ldr	r2, [pc, #72]	@ (80025b8 <_sbrk+0x68>)
 8002570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002572:	4b10      	ldr	r3, [pc, #64]	@ (80025b4 <_sbrk+0x64>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	429a      	cmp	r2, r3
 800257e:	d207      	bcs.n	8002590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002580:	f006 fd1e 	bl	8008fc0 <__errno>
 8002584:	4603      	mov	r3, r0
 8002586:	220c      	movs	r2, #12
 8002588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
 800258e:	e009      	b.n	80025a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002590:	4b08      	ldr	r3, [pc, #32]	@ (80025b4 <_sbrk+0x64>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002596:	4b07      	ldr	r3, [pc, #28]	@ (80025b4 <_sbrk+0x64>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	4a05      	ldr	r2, [pc, #20]	@ (80025b4 <_sbrk+0x64>)
 80025a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025a2:	68fb      	ldr	r3, [r7, #12]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20020000 	.word	0x20020000
 80025b0:	00000400 	.word	0x00000400
 80025b4:	20009bf8 	.word	0x20009bf8
 80025b8:	20009e40 	.word	0x20009e40

080025bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c0:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <SystemInit+0x20>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c6:	4a05      	ldr	r2, [pc, #20]	@ (80025dc <SystemInit+0x20>)
 80025c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e6:	463b      	mov	r3, r7
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80025ee:	4b15      	ldr	r3, [pc, #84]	@ (8002644 <MX_TIM7_Init+0x64>)
 80025f0:	4a15      	ldr	r2, [pc, #84]	@ (8002648 <MX_TIM7_Init+0x68>)
 80025f2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9599;
 80025f4:	4b13      	ldr	r3, [pc, #76]	@ (8002644 <MX_TIM7_Init+0x64>)
 80025f6:	f242 527f 	movw	r2, #9599	@ 0x257f
 80025fa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fc:	4b11      	ldr	r3, [pc, #68]	@ (8002644 <MX_TIM7_Init+0x64>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8002602:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <MX_TIM7_Init+0x64>)
 8002604:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002608:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800260a:	4b0e      	ldr	r3, [pc, #56]	@ (8002644 <MX_TIM7_Init+0x64>)
 800260c:	2280      	movs	r2, #128	@ 0x80
 800260e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002610:	480c      	ldr	r0, [pc, #48]	@ (8002644 <MX_TIM7_Init+0x64>)
 8002612:	f004 fb6d 	bl	8006cf0 <HAL_TIM_Base_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800261c:	f7ff fe34 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002620:	2320      	movs	r3, #32
 8002622:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002624:	2300      	movs	r3, #0
 8002626:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002628:	463b      	mov	r3, r7
 800262a:	4619      	mov	r1, r3
 800262c:	4805      	ldr	r0, [pc, #20]	@ (8002644 <MX_TIM7_Init+0x64>)
 800262e:	f004 fdd5 	bl	80071dc <HAL_TIMEx_MasterConfigSynchronization>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002638:	f7ff fe26 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20009bfc 	.word	0x20009bfc
 8002648:	40001400 	.word	0x40001400

0800264c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0e      	ldr	r2, [pc, #56]	@ (8002694 <HAL_TIM_Base_MspInit+0x48>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d115      	bne.n	800268a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	4b0d      	ldr	r3, [pc, #52]	@ (8002698 <HAL_TIM_Base_MspInit+0x4c>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	4a0c      	ldr	r2, [pc, #48]	@ (8002698 <HAL_TIM_Base_MspInit+0x4c>)
 8002668:	f043 0320 	orr.w	r3, r3, #32
 800266c:	6413      	str	r3, [r2, #64]	@ 0x40
 800266e:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <HAL_TIM_Base_MspInit+0x4c>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2103      	movs	r1, #3
 800267e:	2037      	movs	r0, #55	@ 0x37
 8002680:	f000 febd 	bl	80033fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002684:	2037      	movs	r0, #55	@ 0x37
 8002686:	f000 fed6 	bl	8003436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40001400 	.word	0x40001400
 8002698:	40023800 	.word	0x40023800

0800269c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800269c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026a0:	f7ff ff8c 	bl	80025bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026a4:	480c      	ldr	r0, [pc, #48]	@ (80026d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026a6:	490d      	ldr	r1, [pc, #52]	@ (80026dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026a8:	4a0d      	ldr	r2, [pc, #52]	@ (80026e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ac:	e002      	b.n	80026b4 <LoopCopyDataInit>

080026ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b2:	3304      	adds	r3, #4

080026b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b8:	d3f9      	bcc.n	80026ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ba:	4a0a      	ldr	r2, [pc, #40]	@ (80026e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026bc:	4c0a      	ldr	r4, [pc, #40]	@ (80026e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c0:	e001      	b.n	80026c6 <LoopFillZerobss>

080026c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c4:	3204      	adds	r2, #4

080026c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c8:	d3fb      	bcc.n	80026c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80026ca:	f006 fc7f 	bl	8008fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ce:	f7ff fb1f 	bl	8001d10 <main>
  bx  lr    
 80026d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026dc:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80026e0:	0801f564 	.word	0x0801f564
  ldr r2, =_sbss
 80026e4:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80026e8:	20009e40 	.word	0x20009e40

080026ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026ec:	e7fe      	b.n	80026ec <ADC_IRQHandler>
	...

080026f0 <init_drivers>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		11.03.2025	FL	Created
 ****************************************************************************/
void init_drivers(void){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af02      	add	r7, sp, #8
	// First enable the drivers and the MUX
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
 80026f6:	2200      	movs	r2, #0
 80026f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80026fc:	4819      	ldr	r0, [pc, #100]	@ (8002764 <init_drivers+0x74>)
 80026fe:	f001 fbb9 	bl	8003e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N_RES_GPIO_Port, N_RES_Pin, GPIO_PIN_SET);
 8002702:	2201      	movs	r2, #1
 8002704:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002708:	4816      	ldr	r0, [pc, #88]	@ (8002764 <init_drivers+0x74>)
 800270a:	f001 fbb3 	bl	8003e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRIVE_EN_GPIO_Port, DRIVE_EN_Pin , GPIO_PIN_SET);
 800270e:	2201      	movs	r2, #1
 8002710:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002714:	4814      	ldr	r0, [pc, #80]	@ (8002768 <init_drivers+0x78>)
 8002716:	f001 fbad 	bl	8003e74 <HAL_GPIO_WritePin>

	// Set HW-addresses for the MUX
	HAL_GPIO_WritePin(A0_1_GPIO_Port, A0_1_Pin, GPIO_PIN_RESET);
 800271a:	2200      	movs	r2, #0
 800271c:	2140      	movs	r1, #64	@ 0x40
 800271e:	4812      	ldr	r0, [pc, #72]	@ (8002768 <init_drivers+0x78>)
 8002720:	f001 fba8 	bl	8003e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A1_1_GPIO_Port, A1_1_Pin, GPIO_PIN_RESET);
 8002724:	2200      	movs	r2, #0
 8002726:	2180      	movs	r1, #128	@ 0x80
 8002728:	480f      	ldr	r0, [pc, #60]	@ (8002768 <init_drivers+0x78>)
 800272a:	f001 fba3 	bl	8003e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A2_1_GPIO_Port, A2_1_Pin, GPIO_PIN_RESET);
 800272e:	2200      	movs	r2, #0
 8002730:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002734:	480c      	ldr	r0, [pc, #48]	@ (8002768 <init_drivers+0x78>)
 8002736:	f001 fb9d 	bl	8003e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A0_2_GPIO_Port, A0_2_Pin, GPIO_PIN_SET);
 800273a:	2201      	movs	r2, #1
 800273c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002740:	480a      	ldr	r0, [pc, #40]	@ (800276c <init_drivers+0x7c>)
 8002742:	f001 fb97 	bl	8003e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A1_2_GPIO_Port, A1_2_Pin, GPIO_PIN_RESET);
 8002746:	2200      	movs	r2, #0
 8002748:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800274c:	4807      	ldr	r0, [pc, #28]	@ (800276c <init_drivers+0x7c>)
 800274e:	f001 fb91 	bl	8003e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A2_2_GPIO_Port, A2_2_Pin, GPIO_PIN_RESET);
 8002752:	2200      	movs	r2, #0
 8002754:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002758:	4804      	ldr	r0, [pc, #16]	@ (800276c <init_drivers+0x7c>)
 800275a:	f001 fb8b 	bl	8003e74 <HAL_GPIO_WritePin>

	// Now init the drivers
	// Have to do it for every actuator
	// So first chose the actuator (GPIOs A0, A1, A2)
	for(uint8_t i=0; i<NUM_ACTUATORS; i++){
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]
 8002762:	e1b9      	b.n	8002ad8 <init_drivers+0x3e8>
 8002764:	40020000 	.word	0x40020000
 8002768:	40020800 	.word	0x40020800
 800276c:	40020400 	.word	0x40020400
		select_driver(i);
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fa00 	bl	8002b78 <select_driver>
		calib_complete = 0x02;
 8002778:	4bb2      	ldr	r3, [pc, #712]	@ (8002a44 <init_drivers+0x354>)
 800277a:	2202      	movs	r2, #2
 800277c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 800277e:	200a      	movs	r0, #10
 8002780:	f000 facc 	bl	8002d1c <HAL_Delay>
		int a = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	60bb      	str	r3, [r7, #8]

		// Send the initializations
		// Library Mode

		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, dev_RESET, sizeof(dev_RESET), TIMEOUT) == HAL_OK){
 8002788:	2364      	movs	r3, #100	@ 0x64
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	2302      	movs	r3, #2
 800278e:	4aae      	ldr	r2, [pc, #696]	@ (8002a48 <init_drivers+0x358>)
 8002790:	21b4      	movs	r1, #180	@ 0xb4
 8002792:	48ae      	ldr	r0, [pc, #696]	@ (8002a4c <init_drivers+0x35c>)
 8002794:	f001 fccc 	bl	8004130 <HAL_I2C_Master_Transmit>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d102      	bne.n	80027a4 <init_drivers+0xb4>
			a++;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	3301      	adds	r3, #1
 80027a2:	60bb      	str	r3, [r7, #8]
		}
		HAL_Delay(100);
 80027a4:	2064      	movs	r0, #100	@ 0x64
 80027a6:	f000 fab9 	bl	8002d1c <HAL_Delay>
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_rated_voltage, sizeof(set_rated_voltage), TIMEOUT) == HAL_OK){
 80027aa:	2364      	movs	r3, #100	@ 0x64
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	2302      	movs	r3, #2
 80027b0:	4aa7      	ldr	r2, [pc, #668]	@ (8002a50 <init_drivers+0x360>)
 80027b2:	21b4      	movs	r1, #180	@ 0xb4
 80027b4:	48a5      	ldr	r0, [pc, #660]	@ (8002a4c <init_drivers+0x35c>)
 80027b6:	f001 fcbb 	bl	8004130 <HAL_I2C_Master_Transmit>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <init_drivers+0xd6>
			a++;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	3301      	adds	r3, #1
 80027c4:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_Clamp, sizeof(set_Clamp), TIMEOUT) == HAL_OK){
 80027c6:	2364      	movs	r3, #100	@ 0x64
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2302      	movs	r3, #2
 80027cc:	4aa1      	ldr	r2, [pc, #644]	@ (8002a54 <init_drivers+0x364>)
 80027ce:	21b4      	movs	r1, #180	@ 0xb4
 80027d0:	489e      	ldr	r0, [pc, #632]	@ (8002a4c <init_drivers+0x35c>)
 80027d2:	f001 fcad 	bl	8004130 <HAL_I2C_Master_Transmit>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <init_drivers+0xf2>
			a++;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	3301      	adds	r3, #1
 80027e0:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_LRA, sizeof(set_LRA), TIMEOUT) == HAL_OK){
 80027e2:	2364      	movs	r3, #100	@ 0x64
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	2302      	movs	r3, #2
 80027e8:	4a9b      	ldr	r2, [pc, #620]	@ (8002a58 <init_drivers+0x368>)
 80027ea:	21b4      	movs	r1, #180	@ 0xb4
 80027ec:	4897      	ldr	r0, [pc, #604]	@ (8002a4c <init_drivers+0x35c>)
 80027ee:	f001 fc9f 	bl	8004130 <HAL_I2C_Master_Transmit>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d102      	bne.n	80027fe <init_drivers+0x10e>
			a++;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	3301      	adds	r3, #1
 80027fc:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, start_auto_calibration, sizeof(start_auto_calibration), TIMEOUT) == HAL_OK){
 80027fe:	2364      	movs	r3, #100	@ 0x64
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2302      	movs	r3, #2
 8002804:	4a95      	ldr	r2, [pc, #596]	@ (8002a5c <init_drivers+0x36c>)
 8002806:	21b4      	movs	r1, #180	@ 0xb4
 8002808:	4890      	ldr	r0, [pc, #576]	@ (8002a4c <init_drivers+0x35c>)
 800280a:	f001 fc91 	bl	8004130 <HAL_I2C_Master_Transmit>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <init_drivers+0x12a>
			a++;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	3301      	adds	r3, #1
 8002818:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, GO, sizeof(GO), TIMEOUT) == HAL_OK){
 800281a:	2364      	movs	r3, #100	@ 0x64
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	2302      	movs	r3, #2
 8002820:	4a8f      	ldr	r2, [pc, #572]	@ (8002a60 <init_drivers+0x370>)
 8002822:	21b4      	movs	r1, #180	@ 0xb4
 8002824:	4889      	ldr	r0, [pc, #548]	@ (8002a4c <init_drivers+0x35c>)
 8002826:	f001 fc83 	bl	8004130 <HAL_I2C_Master_Transmit>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <init_drivers+0x146>
			a++;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	3301      	adds	r3, #1
 8002834:	60bb      	str	r3, [r7, #8]
		}

		uint8_t reg = REG_GO;
 8002836:	230c      	movs	r3, #12
 8002838:	70fb      	strb	r3, [r7, #3]
			if(HAL_I2C_Master_Receive(&hi2c1, DEV_ADDRESS, Buf, 1, TIMEOUT) == HAL_OK){
				calib_complete = Buf[0];
			}

		}*/
		HAL_Delay(2000);
 800283a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800283e:	f000 fa6d 	bl	8002d1c <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, &reg, 1, TIMEOUT);
 8002842:	1cfa      	adds	r2, r7, #3
 8002844:	2364      	movs	r3, #100	@ 0x64
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2301      	movs	r3, #1
 800284a:	21b4      	movs	r1, #180	@ 0xb4
 800284c:	487f      	ldr	r0, [pc, #508]	@ (8002a4c <init_drivers+0x35c>)
 800284e:	f001 fc6f 	bl	8004130 <HAL_I2C_Master_Transmit>
		if(HAL_I2C_Master_Receive(&hi2c1, DEV_ADDRESS, Buf, 1, TIMEOUT) == HAL_OK){
 8002852:	2364      	movs	r3, #100	@ 0x64
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	2301      	movs	r3, #1
 8002858:	4a82      	ldr	r2, [pc, #520]	@ (8002a64 <init_drivers+0x374>)
 800285a:	21b4      	movs	r1, #180	@ 0xb4
 800285c:	487b      	ldr	r0, [pc, #492]	@ (8002a4c <init_drivers+0x35c>)
 800285e:	f001 fd65 	bl	800432c <HAL_I2C_Master_Receive>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d103      	bne.n	8002870 <init_drivers+0x180>
			calib_complete = Buf[0];
 8002868:	4b7e      	ldr	r3, [pc, #504]	@ (8002a64 <init_drivers+0x374>)
 800286a:	781a      	ldrb	r2, [r3, #0]
 800286c:	4b75      	ldr	r3, [pc, #468]	@ (8002a44 <init_drivers+0x354>)
 800286e:	701a      	strb	r2, [r3, #0]
		}

		reg = REG_STATUS;
 8002870:	2300      	movs	r3, #0
 8002872:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, &reg, 1, TIMEOUT);
 8002874:	1cfa      	adds	r2, r7, #3
 8002876:	2364      	movs	r3, #100	@ 0x64
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	2301      	movs	r3, #1
 800287c:	21b4      	movs	r1, #180	@ 0xb4
 800287e:	4873      	ldr	r0, [pc, #460]	@ (8002a4c <init_drivers+0x35c>)
 8002880:	f001 fc56 	bl	8004130 <HAL_I2C_Master_Transmit>
		if(HAL_I2C_Master_Receive(&hi2c1, DEV_ADDRESS, Buf, 1, TIMEOUT) == HAL_OK){
 8002884:	2364      	movs	r3, #100	@ 0x64
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	2301      	movs	r3, #1
 800288a:	4a76      	ldr	r2, [pc, #472]	@ (8002a64 <init_drivers+0x374>)
 800288c:	21b4      	movs	r1, #180	@ 0xb4
 800288e:	486f      	ldr	r0, [pc, #444]	@ (8002a4c <init_drivers+0x35c>)
 8002890:	f001 fd4c 	bl	800432c <HAL_I2C_Master_Receive>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d103      	bne.n	80028a2 <init_drivers+0x1b2>
			status = Buf[0];
 800289a:	4b72      	ldr	r3, [pc, #456]	@ (8002a64 <init_drivers+0x374>)
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	4b72      	ldr	r3, [pc, #456]	@ (8002a68 <init_drivers+0x378>)
 80028a0:	701a      	strb	r2, [r3, #0]
		}

		reg = REG_AUTO_CALIBRATION_RESULT;
 80028a2:	2318      	movs	r3, #24
 80028a4:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, &reg, 1, TIMEOUT);
 80028a6:	1cfa      	adds	r2, r7, #3
 80028a8:	2364      	movs	r3, #100	@ 0x64
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2301      	movs	r3, #1
 80028ae:	21b4      	movs	r1, #180	@ 0xb4
 80028b0:	4866      	ldr	r0, [pc, #408]	@ (8002a4c <init_drivers+0x35c>)
 80028b2:	f001 fc3d 	bl	8004130 <HAL_I2C_Master_Transmit>
		if(HAL_I2C_Master_Receive(&hi2c1, DEV_ADDRESS, Buf, 1, TIMEOUT) == HAL_OK){
 80028b6:	2364      	movs	r3, #100	@ 0x64
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2301      	movs	r3, #1
 80028bc:	4a69      	ldr	r2, [pc, #420]	@ (8002a64 <init_drivers+0x374>)
 80028be:	21b4      	movs	r1, #180	@ 0xb4
 80028c0:	4862      	ldr	r0, [pc, #392]	@ (8002a4c <init_drivers+0x35c>)
 80028c2:	f001 fd33 	bl	800432c <HAL_I2C_Master_Receive>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d103      	bne.n	80028d4 <init_drivers+0x1e4>
			A_CAL_COMP = Buf[0];
 80028cc:	4b65      	ldr	r3, [pc, #404]	@ (8002a64 <init_drivers+0x374>)
 80028ce:	781a      	ldrb	r2, [r3, #0]
 80028d0:	4b66      	ldr	r3, [pc, #408]	@ (8002a6c <init_drivers+0x37c>)
 80028d2:	701a      	strb	r2, [r3, #0]
		}
		reg = REG_AUTO_CALIBRATION_BACK_EMF_RESULT;
 80028d4:	2319      	movs	r3, #25
 80028d6:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, &reg, 1, TIMEOUT);
 80028d8:	1cfa      	adds	r2, r7, #3
 80028da:	2364      	movs	r3, #100	@ 0x64
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	2301      	movs	r3, #1
 80028e0:	21b4      	movs	r1, #180	@ 0xb4
 80028e2:	485a      	ldr	r0, [pc, #360]	@ (8002a4c <init_drivers+0x35c>)
 80028e4:	f001 fc24 	bl	8004130 <HAL_I2C_Master_Transmit>
		if(HAL_I2C_Master_Receive(&hi2c1, DEV_ADDRESS, Buf, 1, TIMEOUT) == HAL_OK){
 80028e8:	2364      	movs	r3, #100	@ 0x64
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	2301      	movs	r3, #1
 80028ee:	4a5d      	ldr	r2, [pc, #372]	@ (8002a64 <init_drivers+0x374>)
 80028f0:	21b4      	movs	r1, #180	@ 0xb4
 80028f2:	4856      	ldr	r0, [pc, #344]	@ (8002a4c <init_drivers+0x35c>)
 80028f4:	f001 fd1a 	bl	800432c <HAL_I2C_Master_Receive>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d103      	bne.n	8002906 <init_drivers+0x216>
			A_CAL_BEMF = Buf[0];
 80028fe:	4b59      	ldr	r3, [pc, #356]	@ (8002a64 <init_drivers+0x374>)
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	4b5b      	ldr	r3, [pc, #364]	@ (8002a70 <init_drivers+0x380>)
 8002904:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_LRA_settings, sizeof(set_LRA_settings), TIMEOUT) == HAL_OK){
 8002906:	2364      	movs	r3, #100	@ 0x64
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	2302      	movs	r3, #2
 800290c:	4a59      	ldr	r2, [pc, #356]	@ (8002a74 <init_drivers+0x384>)
 800290e:	21b4      	movs	r1, #180	@ 0xb4
 8002910:	484e      	ldr	r0, [pc, #312]	@ (8002a4c <init_drivers+0x35c>)
 8002912:	f001 fc0d 	bl	8004130 <HAL_I2C_Master_Transmit>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d102      	bne.n	8002922 <init_drivers+0x232>
			a++;
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	3301      	adds	r3, #1
 8002920:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_timing, sizeof(set_timing), TIMEOUT) == HAL_OK){
 8002922:	2364      	movs	r3, #100	@ 0x64
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	2302      	movs	r3, #2
 8002928:	4a53      	ldr	r2, [pc, #332]	@ (8002a78 <init_drivers+0x388>)
 800292a:	21b4      	movs	r1, #180	@ 0xb4
 800292c:	4847      	ldr	r0, [pc, #284]	@ (8002a4c <init_drivers+0x35c>)
 800292e:	f001 fbff 	bl	8004130 <HAL_I2C_Master_Transmit>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <init_drivers+0x24e>
			a++;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	3301      	adds	r3, #1
 800293c:	60bb      	str	r3, [r7, #8]
		}

		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_Control3, sizeof(set_Control3), TIMEOUT) == HAL_OK){
 800293e:	2364      	movs	r3, #100	@ 0x64
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	2302      	movs	r3, #2
 8002944:	4a4d      	ldr	r2, [pc, #308]	@ (8002a7c <init_drivers+0x38c>)
 8002946:	21b4      	movs	r1, #180	@ 0xb4
 8002948:	4840      	ldr	r0, [pc, #256]	@ (8002a4c <init_drivers+0x35c>)
 800294a:	f001 fbf1 	bl	8004130 <HAL_I2C_Master_Transmit>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d102      	bne.n	800295a <init_drivers+0x26a>
			a++;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	3301      	adds	r3, #1
 8002958:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_library, sizeof(set_library), TIMEOUT) == HAL_OK){
 800295a:	2364      	movs	r3, #100	@ 0x64
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2302      	movs	r3, #2
 8002960:	4a47      	ldr	r2, [pc, #284]	@ (8002a80 <init_drivers+0x390>)
 8002962:	21b4      	movs	r1, #180	@ 0xb4
 8002964:	4839      	ldr	r0, [pc, #228]	@ (8002a4c <init_drivers+0x35c>)
 8002966:	f001 fbe3 	bl	8004130 <HAL_I2C_Master_Transmit>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <init_drivers+0x286>
			a++;
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	3301      	adds	r3, #1
 8002974:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_mode, sizeof(set_mode), TIMEOUT) == HAL_OK){
 8002976:	2364      	movs	r3, #100	@ 0x64
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	2302      	movs	r3, #2
 800297c:	4a41      	ldr	r2, [pc, #260]	@ (8002a84 <init_drivers+0x394>)
 800297e:	21b4      	movs	r1, #180	@ 0xb4
 8002980:	4832      	ldr	r0, [pc, #200]	@ (8002a4c <init_drivers+0x35c>)
 8002982:	f001 fbd5 	bl	8004130 <HAL_I2C_Master_Transmit>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <init_drivers+0x2a2>
			a++;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	3301      	adds	r3, #1
 8002990:	60bb      	str	r3, [r7, #8]
		}

		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_period, sizeof(set_period), TIMEOUT) == HAL_OK){
 8002992:	2364      	movs	r3, #100	@ 0x64
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2302      	movs	r3, #2
 8002998:	4a3b      	ldr	r2, [pc, #236]	@ (8002a88 <init_drivers+0x398>)
 800299a:	21b4      	movs	r1, #180	@ 0xb4
 800299c:	482b      	ldr	r0, [pc, #172]	@ (8002a4c <init_drivers+0x35c>)
 800299e:	f001 fbc7 	bl	8004130 <HAL_I2C_Master_Transmit>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d102      	bne.n	80029ae <init_drivers+0x2be>
			a++;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	3301      	adds	r3, #1
 80029ac:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_waveform, sizeof(set_waveform), TIMEOUT) == HAL_OK){
 80029ae:	2364      	movs	r3, #100	@ 0x64
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	2302      	movs	r3, #2
 80029b4:	4a35      	ldr	r2, [pc, #212]	@ (8002a8c <init_drivers+0x39c>)
 80029b6:	21b4      	movs	r1, #180	@ 0xb4
 80029b8:	4824      	ldr	r0, [pc, #144]	@ (8002a4c <init_drivers+0x35c>)
 80029ba:	f001 fbb9 	bl	8004130 <HAL_I2C_Master_Transmit>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d102      	bne.n	80029ca <init_drivers+0x2da>
			a++;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	3301      	adds	r3, #1
 80029c8:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_waveform2, sizeof(set_waveform), TIMEOUT) == HAL_OK){
 80029ca:	2364      	movs	r3, #100	@ 0x64
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2302      	movs	r3, #2
 80029d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002a90 <init_drivers+0x3a0>)
 80029d2:	21b4      	movs	r1, #180	@ 0xb4
 80029d4:	481d      	ldr	r0, [pc, #116]	@ (8002a4c <init_drivers+0x35c>)
 80029d6:	f001 fbab 	bl	8004130 <HAL_I2C_Master_Transmit>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <init_drivers+0x2f6>
			a++;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	3301      	adds	r3, #1
 80029e4:	60bb      	str	r3, [r7, #8]
		}

		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_auto_OL, sizeof(set_auto_OL), TIMEOUT) == HAL_OK){
 80029e6:	2364      	movs	r3, #100	@ 0x64
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	2302      	movs	r3, #2
 80029ec:	4a29      	ldr	r2, [pc, #164]	@ (8002a94 <init_drivers+0x3a4>)
 80029ee:	21b4      	movs	r1, #180	@ 0xb4
 80029f0:	4816      	ldr	r0, [pc, #88]	@ (8002a4c <init_drivers+0x35c>)
 80029f2:	f001 fb9d 	bl	8004130 <HAL_I2C_Master_Transmit>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d102      	bne.n	8002a02 <init_drivers+0x312>
			a++;
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	3301      	adds	r3, #1
 8002a00:	60bb      	str	r3, [r7, #8]
		}

		// Send a trigger to have waveform while measuring resonance period
		// clear actual waveform with falling edge
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
 8002a02:	2200      	movs	r2, #0
 8002a04:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a08:	4823      	ldr	r0, [pc, #140]	@ (8002a98 <init_drivers+0x3a8>)
 8002a0a:	f001 fa33 	bl	8003e74 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8002a0e:	2001      	movs	r0, #1
 8002a10:	f000 f984 	bl	8002d1c <HAL_Delay>
		// Set new waveform with rising edge
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, SET);
 8002a14:	2201      	movs	r2, #1
 8002a16:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a1a:	481f      	ldr	r0, [pc, #124]	@ (8002a98 <init_drivers+0x3a8>)
 8002a1c:	f001 fa2a 	bl	8003e74 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8002a20:	200a      	movs	r0, #10
 8002a22:	f000 f97b 	bl	8002d1c <HAL_Delay>
		reg = REG_LRA_RESONANCE_PERIOD;
 8002a26:	2322      	movs	r3, #34	@ 0x22
 8002a28:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, &reg, 1, TIMEOUT);
 8002a2a:	1cfa      	adds	r2, r7, #3
 8002a2c:	2364      	movs	r3, #100	@ 0x64
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	2301      	movs	r3, #1
 8002a32:	21b4      	movs	r1, #180	@ 0xb4
 8002a34:	4805      	ldr	r0, [pc, #20]	@ (8002a4c <init_drivers+0x35c>)
 8002a36:	f001 fb7b 	bl	8004130 <HAL_I2C_Master_Transmit>
		if(HAL_I2C_Master_Receive(&hi2c1, DEV_ADDRESS, Buf, 1, TIMEOUT) == HAL_OK){
 8002a3a:	2364      	movs	r3, #100	@ 0x64
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e02c      	b.n	8002a9c <init_drivers+0x3ac>
 8002a42:	bf00      	nop
 8002a44:	20009c4b 	.word	0x20009c4b
 8002a48:	20000020 	.word	0x20000020
 8002a4c:	20006ab4 	.word	0x20006ab4
 8002a50:	20000038 	.word	0x20000038
 8002a54:	2000001c 	.word	0x2000001c
 8002a58:	20000008 	.word	0x20000008
 8002a5c:	20000010 	.word	0x20000010
 8002a60:	2000003c 	.word	0x2000003c
 8002a64:	20009c44 	.word	0x20009c44
 8002a68:	20009c4a 	.word	0x20009c4a
 8002a6c:	20009c48 	.word	0x20009c48
 8002a70:	20009c49 	.word	0x20009c49
 8002a74:	20000018 	.word	0x20000018
 8002a78:	20000014 	.word	0x20000014
 8002a7c:	2000000c 	.word	0x2000000c
 8002a80:	20000024 	.word	0x20000024
 8002a84:	20000004 	.word	0x20000004
 8002a88:	20000034 	.word	0x20000034
 8002a8c:	20000028 	.word	0x20000028
 8002a90:	2000002c 	.word	0x2000002c
 8002a94:	20000030 	.word	0x20000030
 8002a98:	40020000 	.word	0x40020000
 8002a9c:	4a13      	ldr	r2, [pc, #76]	@ (8002aec <init_drivers+0x3fc>)
 8002a9e:	21b4      	movs	r1, #180	@ 0xb4
 8002aa0:	4813      	ldr	r0, [pc, #76]	@ (8002af0 <init_drivers+0x400>)
 8002aa2:	f001 fc43 	bl	800432c <HAL_I2C_Master_Receive>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d103      	bne.n	8002ab4 <init_drivers+0x3c4>
			LRA_period = Buf[0];
 8002aac:	4b0f      	ldr	r3, [pc, #60]	@ (8002aec <init_drivers+0x3fc>)
 8002aae:	781a      	ldrb	r2, [r3, #0]
 8002ab0:	4b10      	ldr	r3, [pc, #64]	@ (8002af4 <init_drivers+0x404>)
 8002ab2:	701a      	strb	r2, [r3, #0]
		}

		// Set all actuators to 0V
		uint8_t send[2] = {REG_RATED_VOLTAGE, 0};
 8002ab4:	2316      	movs	r3, #22
 8002ab6:	803b      	strh	r3, [r7, #0]
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, send, sizeof(send), TIMEOUT) == HAL_OK){
 8002ab8:	463a      	mov	r2, r7
 8002aba:	2364      	movs	r3, #100	@ 0x64
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	2302      	movs	r3, #2
 8002ac0:	21b4      	movs	r1, #180	@ 0xb4
 8002ac2:	480b      	ldr	r0, [pc, #44]	@ (8002af0 <init_drivers+0x400>)
 8002ac4:	f001 fb34 	bl	8004130 <HAL_I2C_Master_Transmit>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <init_drivers+0x3e2>
			int a = 1;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	607b      	str	r3, [r7, #4]
	for(uint8_t i=0; i<NUM_ACTUATORS; i++){
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	2b0f      	cmp	r3, #15
 8002adc:	f67f ae48 	bls.w	8002770 <init_drivers+0x80>
		}
	}
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20009c44 	.word	0x20009c44
 8002af0:	20006ab4 	.word	0x20006ab4
 8002af4:	20009c4c 	.word	0x20009c4c

08002af8 <set_amplitude>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		12.03.2025	FL	Created
 ****************************************************************************/
void set_amplitude(double *amplitudes){
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	6078      	str	r0, [r7, #4]
	uint8_t value = amplitudes[0];
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b06:	4610      	mov	r0, r2
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f7fe f8cd 	bl	8000ca8 <__aeabi_d2uiz>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	74fb      	strb	r3, [r7, #19]

	for(int i=0; i<NUM_ACTUATORS; i++){
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	e025      	b.n	8002b64 <set_amplitude+0x6c>
		select_driver(i);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f82b 	bl	8002b78 <select_driver>
		value = (uint8_t)(amplitudes[i]); // calculation: datasheet p.21
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	f7fe f8b9 	bl	8000ca8 <__aeabi_d2uiz>
 8002b36:	4603      	mov	r3, r0
 8002b38:	74fb      	strb	r3, [r7, #19]
		uint8_t send[2] = {REG_RATED_VOLTAGE, value};
 8002b3a:	2316      	movs	r3, #22
 8002b3c:	723b      	strb	r3, [r7, #8]
 8002b3e:	7cfb      	ldrb	r3, [r7, #19]
 8002b40:	727b      	strb	r3, [r7, #9]
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, send, sizeof(send), TIMEOUT) == HAL_OK){
 8002b42:	f107 0208 	add.w	r2, r7, #8
 8002b46:	2364      	movs	r3, #100	@ 0x64
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	21b4      	movs	r1, #180	@ 0xb4
 8002b4e:	4809      	ldr	r0, [pc, #36]	@ (8002b74 <set_amplitude+0x7c>)
 8002b50:	f001 faee 	bl	8004130 <HAL_I2C_Master_Transmit>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <set_amplitude+0x66>
			int a = 1;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<NUM_ACTUATORS; i++){
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	3301      	adds	r3, #1
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2b0f      	cmp	r3, #15
 8002b68:	ddd6      	ble.n	8002b18 <set_amplitude+0x20>
		}
	}
}
 8002b6a:	bf00      	nop
 8002b6c:	bf00      	nop
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20006ab4 	.word	0x20006ab4

08002b78 <select_driver>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		12.03.2025	FL	Created
 ****************************************************************************/
void select_driver(uint8_t number){
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	4603      	mov	r3, r0
 8002b80:	71fb      	strb	r3, [r7, #7]
	int a = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
	uint8_t value = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	72fb      	strb	r3, [r7, #11]
	// Disable other MUX if necessary
	if(number == 0){
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10e      	bne.n	8002bae <select_driver+0x36>
		if(HAL_I2C_Master_Transmit(&hi2c1, SWITCH_ADDRESS_2, &value, sizeof(value), TIMEOUT) == HAL_OK){
 8002b90:	f107 020b 	add.w	r2, r7, #11
 8002b94:	2364      	movs	r3, #100	@ 0x64
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	2301      	movs	r3, #1
 8002b9a:	21e2      	movs	r1, #226	@ 0xe2
 8002b9c:	4825      	ldr	r0, [pc, #148]	@ (8002c34 <select_driver+0xbc>)
 8002b9e:	f001 fac7 	bl	8004130 <HAL_I2C_Master_Transmit>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d113      	bne.n	8002bd0 <select_driver+0x58>
			a = 1;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	e010      	b.n	8002bd0 <select_driver+0x58>
		}
	} else if(number == 8){
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d10d      	bne.n	8002bd0 <select_driver+0x58>
		if(HAL_I2C_Master_Transmit(&hi2c1, SWITCH_ADDRESS_1, &value, sizeof(value), TIMEOUT) == HAL_OK){
 8002bb4:	f107 020b 	add.w	r2, r7, #11
 8002bb8:	2364      	movs	r3, #100	@ 0x64
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	21e0      	movs	r1, #224	@ 0xe0
 8002bc0:	481c      	ldr	r0, [pc, #112]	@ (8002c34 <select_driver+0xbc>)
 8002bc2:	f001 fab5 	bl	8004130 <HAL_I2C_Master_Transmit>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <select_driver+0x58>
			a = 1;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
		}
	}

	if(number<8){
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	2b07      	cmp	r3, #7
 8002bd4:	d814      	bhi.n	8002c00 <select_driver+0x88>
		value = 1<<number;
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	72fb      	strb	r3, [r7, #11]
		if(HAL_I2C_Master_Transmit(&hi2c1, SWITCH_ADDRESS_1, &value, sizeof(value), TIMEOUT) == HAL_OK){
 8002be2:	f107 020b 	add.w	r2, r7, #11
 8002be6:	2364      	movs	r3, #100	@ 0x64
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	2301      	movs	r3, #1
 8002bec:	21e0      	movs	r1, #224	@ 0xe0
 8002bee:	4811      	ldr	r0, [pc, #68]	@ (8002c34 <select_driver+0xbc>)
 8002bf0:	f001 fa9e 	bl	8004130 <HAL_I2C_Master_Transmit>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d117      	bne.n	8002c2a <select_driver+0xb2>
			a = 1;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	60fb      	str	r3, [r7, #12]
		value = 1<<(number-8);
		if(HAL_I2C_Master_Transmit(&hi2c1, SWITCH_ADDRESS_2, &value, sizeof(value), TIMEOUT) == HAL_OK){
			a = 1;
		}
	}
}
 8002bfe:	e014      	b.n	8002c2a <select_driver+0xb2>
		value = 1<<(number-8);
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	3b08      	subs	r3, #8
 8002c04:	2201      	movs	r2, #1
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	72fb      	strb	r3, [r7, #11]
		if(HAL_I2C_Master_Transmit(&hi2c1, SWITCH_ADDRESS_2, &value, sizeof(value), TIMEOUT) == HAL_OK){
 8002c0e:	f107 020b 	add.w	r2, r7, #11
 8002c12:	2364      	movs	r3, #100	@ 0x64
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	2301      	movs	r3, #1
 8002c18:	21e2      	movs	r1, #226	@ 0xe2
 8002c1a:	4806      	ldr	r0, [pc, #24]	@ (8002c34 <select_driver+0xbc>)
 8002c1c:	f001 fa88 	bl	8004130 <HAL_I2C_Master_Transmit>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <select_driver+0xb2>
			a = 1;
 8002c26:	2301      	movs	r3, #1
 8002c28:	60fb      	str	r3, [r7, #12]
}
 8002c2a:	bf00      	nop
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20006ab4 	.word	0x20006ab4

08002c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c78 <HAL_Init+0x40>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0d      	ldr	r2, [pc, #52]	@ (8002c78 <HAL_Init+0x40>)
 8002c42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c48:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <HAL_Init+0x40>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c78 <HAL_Init+0x40>)
 8002c4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c54:	4b08      	ldr	r3, [pc, #32]	@ (8002c78 <HAL_Init+0x40>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a07      	ldr	r2, [pc, #28]	@ (8002c78 <HAL_Init+0x40>)
 8002c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c60:	2003      	movs	r0, #3
 8002c62:	f000 fbc1 	bl	80033e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c66:	200f      	movs	r0, #15
 8002c68:	f000 f808 	bl	8002c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c6c:	f7ff fc04 	bl	8002478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023c00 	.word	0x40023c00

08002c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c84:	4b12      	ldr	r3, [pc, #72]	@ (8002cd0 <HAL_InitTick+0x54>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b12      	ldr	r3, [pc, #72]	@ (8002cd4 <HAL_InitTick+0x58>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fbd9 	bl	8003452 <HAL_SYSTICK_Config>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e00e      	b.n	8002cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b0f      	cmp	r3, #15
 8002cae:	d80a      	bhi.n	8002cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb8:	f000 fba1 	bl	80033fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cbc:	4a06      	ldr	r2, [pc, #24]	@ (8002cd8 <HAL_InitTick+0x5c>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e000      	b.n	8002cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	20000044 	.word	0x20000044
 8002cd8:	20000040 	.word	0x20000040

08002cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <HAL_IncTick+0x20>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <HAL_IncTick+0x24>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	4a04      	ldr	r2, [pc, #16]	@ (8002d00 <HAL_IncTick+0x24>)
 8002cee:	6013      	str	r3, [r2, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000044 	.word	0x20000044
 8002d00:	20009c50 	.word	0x20009c50

08002d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return uwTick;
 8002d08:	4b03      	ldr	r3, [pc, #12]	@ (8002d18 <HAL_GetTick+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20009c50 	.word	0x20009c50

08002d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d24:	f7ff ffee 	bl	8002d04 <HAL_GetTick>
 8002d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d005      	beq.n	8002d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d36:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <HAL_Delay+0x44>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4413      	add	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d42:	bf00      	nop
 8002d44:	f7ff ffde 	bl	8002d04 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d8f7      	bhi.n	8002d44 <HAL_Delay+0x28>
  {
  }
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000044 	.word	0x20000044

08002d64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e033      	b.n	8002de2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fe fe68 	bl	8001a58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d118      	bne.n	8002dd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002daa:	f023 0302 	bic.w	r3, r3, #2
 8002dae:	f043 0202 	orr.w	r2, r3, #2
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f94a 	bl	8003050 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	f043 0201 	orr.w	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002dd2:	e001      	b.n	8002dd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x1c>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e113      	b.n	8003030 <HAL_ADC_ConfigChannel+0x244>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b09      	cmp	r3, #9
 8002e16:	d925      	bls.n	8002e64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68d9      	ldr	r1, [r3, #12]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	4613      	mov	r3, r2
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3b1e      	subs	r3, #30
 8002e2e:	2207      	movs	r2, #7
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43da      	mvns	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	400a      	ands	r2, r1
 8002e3c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68d9      	ldr	r1, [r3, #12]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	4618      	mov	r0, r3
 8002e50:	4603      	mov	r3, r0
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	4403      	add	r3, r0
 8002e56:	3b1e      	subs	r3, #30
 8002e58:	409a      	lsls	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	60da      	str	r2, [r3, #12]
 8002e62:	e022      	b.n	8002eaa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6919      	ldr	r1, [r3, #16]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	2207      	movs	r2, #7
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	400a      	ands	r2, r1
 8002e86:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6919      	ldr	r1, [r3, #16]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	4618      	mov	r0, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4403      	add	r3, r0
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	d824      	bhi.n	8002efc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3b05      	subs	r3, #5
 8002ec4:	221f      	movs	r2, #31
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	400a      	ands	r2, r1
 8002ed2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	3b05      	subs	r3, #5
 8002eee:	fa00 f203 	lsl.w	r2, r0, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002efa:	e04c      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b0c      	cmp	r3, #12
 8002f02:	d824      	bhi.n	8002f4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	3b23      	subs	r3, #35	@ 0x23
 8002f16:	221f      	movs	r2, #31
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43da      	mvns	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	400a      	ands	r2, r1
 8002f24:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	4618      	mov	r0, r3
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3b23      	subs	r3, #35	@ 0x23
 8002f40:	fa00 f203 	lsl.w	r2, r0, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f4c:	e023      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3b41      	subs	r3, #65	@ 0x41
 8002f60:	221f      	movs	r2, #31
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43da      	mvns	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	3b41      	subs	r3, #65	@ 0x41
 8002f8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f96:	4b29      	ldr	r3, [pc, #164]	@ (800303c <HAL_ADC_ConfigChannel+0x250>)
 8002f98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a28      	ldr	r2, [pc, #160]	@ (8003040 <HAL_ADC_ConfigChannel+0x254>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d10f      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x1d8>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b12      	cmp	r3, #18
 8002faa:	d10b      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8003040 <HAL_ADC_ConfigChannel+0x254>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d12b      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x23a>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8003044 <HAL_ADC_ConfigChannel+0x258>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d003      	beq.n	8002fe0 <HAL_ADC_ConfigChannel+0x1f4>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b11      	cmp	r3, #17
 8002fde:	d122      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a11      	ldr	r2, [pc, #68]	@ (8003044 <HAL_ADC_ConfigChannel+0x258>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d111      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003002:	4b11      	ldr	r3, [pc, #68]	@ (8003048 <HAL_ADC_ConfigChannel+0x25c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a11      	ldr	r2, [pc, #68]	@ (800304c <HAL_ADC_ConfigChannel+0x260>)
 8003008:	fba2 2303 	umull	r2, r3, r2, r3
 800300c:	0c9a      	lsrs	r2, r3, #18
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003018:	e002      	b.n	8003020 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	3b01      	subs	r3, #1
 800301e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f9      	bne.n	800301a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	40012300 	.word	0x40012300
 8003040:	40012000 	.word	0x40012000
 8003044:	10000012 	.word	0x10000012
 8003048:	20000000 	.word	0x20000000
 800304c:	431bde83 	.word	0x431bde83

08003050 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003058:	4b79      	ldr	r3, [pc, #484]	@ (8003240 <ADC_Init+0x1f0>)
 800305a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	431a      	orrs	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003084:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6859      	ldr	r1, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	021a      	lsls	r2, r3, #8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80030a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6859      	ldr	r1, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6899      	ldr	r1, [r3, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e2:	4a58      	ldr	r2, [pc, #352]	@ (8003244 <ADC_Init+0x1f4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d022      	beq.n	800312e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6899      	ldr	r1, [r3, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003118:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6899      	ldr	r1, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	e00f      	b.n	800314e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800313c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800314c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0202 	bic.w	r2, r2, #2
 800315c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6899      	ldr	r1, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	7e1b      	ldrb	r3, [r3, #24]
 8003168:	005a      	lsls	r2, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d01b      	beq.n	80031b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800318a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800319a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6859      	ldr	r1, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	3b01      	subs	r3, #1
 80031a8:	035a      	lsls	r2, r3, #13
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]
 80031b2:	e007      	b.n	80031c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031c2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80031d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	3b01      	subs	r3, #1
 80031e0:	051a      	lsls	r2, r3, #20
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80031f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6899      	ldr	r1, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003206:	025a      	lsls	r2, r3, #9
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800321e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6899      	ldr	r1, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	029a      	lsls	r2, r3, #10
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	609a      	str	r2, [r3, #8]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	40012300 	.word	0x40012300
 8003244:	0f000001 	.word	0x0f000001

08003248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003258:	4b0c      	ldr	r3, [pc, #48]	@ (800328c <__NVIC_SetPriorityGrouping+0x44>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003264:	4013      	ands	r3, r2
 8003266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003270:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800327a:	4a04      	ldr	r2, [pc, #16]	@ (800328c <__NVIC_SetPriorityGrouping+0x44>)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	60d3      	str	r3, [r2, #12]
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003294:	4b04      	ldr	r3, [pc, #16]	@ (80032a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	0a1b      	lsrs	r3, r3, #8
 800329a:	f003 0307 	and.w	r3, r3, #7
}
 800329e:	4618      	mov	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	db0b      	blt.n	80032d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	f003 021f 	and.w	r2, r3, #31
 80032c4:	4907      	ldr	r1, [pc, #28]	@ (80032e4 <__NVIC_EnableIRQ+0x38>)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	2001      	movs	r0, #1
 80032ce:	fa00 f202 	lsl.w	r2, r0, r2
 80032d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	e000e100 	.word	0xe000e100

080032e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	6039      	str	r1, [r7, #0]
 80032f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	db0a      	blt.n	8003312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	490c      	ldr	r1, [pc, #48]	@ (8003334 <__NVIC_SetPriority+0x4c>)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	0112      	lsls	r2, r2, #4
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	440b      	add	r3, r1
 800330c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003310:	e00a      	b.n	8003328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	b2da      	uxtb	r2, r3
 8003316:	4908      	ldr	r1, [pc, #32]	@ (8003338 <__NVIC_SetPriority+0x50>)
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	3b04      	subs	r3, #4
 8003320:	0112      	lsls	r2, r2, #4
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	440b      	add	r3, r1
 8003326:	761a      	strb	r2, [r3, #24]
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000e100 	.word	0xe000e100
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800333c:	b480      	push	{r7}
 800333e:	b089      	sub	sp, #36	@ 0x24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f1c3 0307 	rsb	r3, r3, #7
 8003356:	2b04      	cmp	r3, #4
 8003358:	bf28      	it	cs
 800335a:	2304      	movcs	r3, #4
 800335c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	3304      	adds	r3, #4
 8003362:	2b06      	cmp	r3, #6
 8003364:	d902      	bls.n	800336c <NVIC_EncodePriority+0x30>
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3b03      	subs	r3, #3
 800336a:	e000      	b.n	800336e <NVIC_EncodePriority+0x32>
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003370:	f04f 32ff 	mov.w	r2, #4294967295
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43da      	mvns	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	401a      	ands	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003384:	f04f 31ff 	mov.w	r1, #4294967295
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	fa01 f303 	lsl.w	r3, r1, r3
 800338e:	43d9      	mvns	r1, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003394:	4313      	orrs	r3, r2
         );
}
 8003396:	4618      	mov	r0, r3
 8003398:	3724      	adds	r7, #36	@ 0x24
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033b4:	d301      	bcc.n	80033ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033b6:	2301      	movs	r3, #1
 80033b8:	e00f      	b.n	80033da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ba:	4a0a      	ldr	r2, [pc, #40]	@ (80033e4 <SysTick_Config+0x40>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033c2:	210f      	movs	r1, #15
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295
 80033c8:	f7ff ff8e 	bl	80032e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033cc:	4b05      	ldr	r3, [pc, #20]	@ (80033e4 <SysTick_Config+0x40>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033d2:	4b04      	ldr	r3, [pc, #16]	@ (80033e4 <SysTick_Config+0x40>)
 80033d4:	2207      	movs	r2, #7
 80033d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	e000e010 	.word	0xe000e010

080033e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff29 	bl	8003248 <__NVIC_SetPriorityGrouping>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033fe:	b580      	push	{r7, lr}
 8003400:	b086      	sub	sp, #24
 8003402:	af00      	add	r7, sp, #0
 8003404:	4603      	mov	r3, r0
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003410:	f7ff ff3e 	bl	8003290 <__NVIC_GetPriorityGrouping>
 8003414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	6978      	ldr	r0, [r7, #20]
 800341c:	f7ff ff8e 	bl	800333c <NVIC_EncodePriority>
 8003420:	4602      	mov	r2, r0
 8003422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003426:	4611      	mov	r1, r2
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff5d 	bl	80032e8 <__NVIC_SetPriority>
}
 800342e:	bf00      	nop
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	4603      	mov	r3, r0
 800343e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff ff31 	bl	80032ac <__NVIC_EnableIRQ>
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff ffa2 	bl	80033a4 <SysTick_Config>
 8003460:	4603      	mov	r3, r0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003478:	f7ff fc44 	bl	8002d04 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e099      	b.n	80035bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034a8:	e00f      	b.n	80034ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034aa:	f7ff fc2b 	bl	8002d04 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	d908      	bls.n	80034ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2203      	movs	r2, #3
 80034c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e078      	b.n	80035bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1e8      	bne.n	80034aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4b38      	ldr	r3, [pc, #224]	@ (80035c4 <HAL_DMA_Init+0x158>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003502:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800350e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	2b04      	cmp	r3, #4
 8003522:	d107      	bne.n	8003534 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352c:	4313      	orrs	r3, r2
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f023 0307 	bic.w	r3, r3, #7
 800354a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	2b04      	cmp	r3, #4
 800355c:	d117      	bne.n	800358e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00e      	beq.n	800358e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 fa6f 	bl	8003a54 <DMA_CheckFifoParam>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2240      	movs	r2, #64	@ 0x40
 8003580:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800358a:	2301      	movs	r3, #1
 800358c:	e016      	b.n	80035bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fa26 	bl	80039e8 <DMA_CalcBaseAndBitshift>
 800359c:	4603      	mov	r3, r0
 800359e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a4:	223f      	movs	r2, #63	@ 0x3f
 80035a6:	409a      	lsls	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	f010803f 	.word	0xf010803f

080035c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_DMA_Start_IT+0x26>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e040      	b.n	8003670 <HAL_DMA_Start_IT+0xa8>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d12f      	bne.n	8003662 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2202      	movs	r2, #2
 8003606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68b9      	ldr	r1, [r7, #8]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f9b8 	bl	800398c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003620:	223f      	movs	r2, #63	@ 0x3f
 8003622:	409a      	lsls	r2, r3
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0216 	orr.w	r2, r2, #22
 8003636:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d007      	beq.n	8003650 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0208 	orr.w	r2, r2, #8
 800364e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	e005      	b.n	800366e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800366a:	2302      	movs	r3, #2
 800366c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800366e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003684:	4b8e      	ldr	r3, [pc, #568]	@ (80038c0 <HAL_DMA_IRQHandler+0x248>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a8e      	ldr	r2, [pc, #568]	@ (80038c4 <HAL_DMA_IRQHandler+0x24c>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	0a9b      	lsrs	r3, r3, #10
 8003690:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003696:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a2:	2208      	movs	r2, #8
 80036a4:	409a      	lsls	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01a      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d013      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0204 	bic.w	r2, r2, #4
 80036ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d0:	2208      	movs	r2, #8
 80036d2:	409a      	lsls	r2, r3
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036dc:	f043 0201 	orr.w	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e8:	2201      	movs	r2, #1
 80036ea:	409a      	lsls	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d012      	beq.n	800371a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003706:	2201      	movs	r2, #1
 8003708:	409a      	lsls	r2, r3
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003712:	f043 0202 	orr.w	r2, r3, #2
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371e:	2204      	movs	r2, #4
 8003720:	409a      	lsls	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4013      	ands	r3, r2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d012      	beq.n	8003750 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00b      	beq.n	8003750 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373c:	2204      	movs	r2, #4
 800373e:	409a      	lsls	r2, r3
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003748:	f043 0204 	orr.w	r2, r3, #4
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003754:	2210      	movs	r2, #16
 8003756:	409a      	lsls	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d043      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d03c      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003772:	2210      	movs	r2, #16
 8003774:	409a      	lsls	r2, r3
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d018      	beq.n	80037ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d108      	bne.n	80037a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d024      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	4798      	blx	r3
 80037a6:	e01f      	b.n	80037e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01b      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	4798      	blx	r3
 80037b8:	e016      	b.n	80037e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d107      	bne.n	80037d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0208 	bic.w	r2, r2, #8
 80037d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ec:	2220      	movs	r2, #32
 80037ee:	409a      	lsls	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 808f 	beq.w	8003918 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 8087 	beq.w	8003918 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380e:	2220      	movs	r2, #32
 8003810:	409a      	lsls	r2, r3
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b05      	cmp	r3, #5
 8003820:	d136      	bne.n	8003890 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0216 	bic.w	r2, r2, #22
 8003830:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695a      	ldr	r2, [r3, #20]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003840:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	d103      	bne.n	8003852 <HAL_DMA_IRQHandler+0x1da>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0208 	bic.w	r2, r2, #8
 8003860:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003866:	223f      	movs	r2, #63	@ 0x3f
 8003868:	409a      	lsls	r2, r3
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003882:	2b00      	cmp	r3, #0
 8003884:	d07e      	beq.n	8003984 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	4798      	blx	r3
        }
        return;
 800388e:	e079      	b.n	8003984 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d01d      	beq.n	80038da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10d      	bne.n	80038c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d031      	beq.n	8003918 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	4798      	blx	r3
 80038bc:	e02c      	b.n	8003918 <HAL_DMA_IRQHandler+0x2a0>
 80038be:	bf00      	nop
 80038c0:	20000000 	.word	0x20000000
 80038c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d023      	beq.n	8003918 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
 80038d8:	e01e      	b.n	8003918 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10f      	bne.n	8003908 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0210 	bic.w	r2, r2, #16
 80038f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391c:	2b00      	cmp	r3, #0
 800391e:	d032      	beq.n	8003986 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d022      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2205      	movs	r2, #5
 8003930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	3301      	adds	r3, #1
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	429a      	cmp	r2, r3
 800394e:	d307      	bcc.n	8003960 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f2      	bne.n	8003944 <HAL_DMA_IRQHandler+0x2cc>
 800395e:	e000      	b.n	8003962 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003960:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	4798      	blx	r3
 8003982:	e000      	b.n	8003986 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003984:	bf00      	nop
    }
  }
}
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80039a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b40      	cmp	r3, #64	@ 0x40
 80039b8:	d108      	bne.n	80039cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039ca:	e007      	b.n	80039dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	60da      	str	r2, [r3, #12]
}
 80039dc:	bf00      	nop
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	3b10      	subs	r3, #16
 80039f8:	4a14      	ldr	r2, [pc, #80]	@ (8003a4c <DMA_CalcBaseAndBitshift+0x64>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a02:	4a13      	ldr	r2, [pc, #76]	@ (8003a50 <DMA_CalcBaseAndBitshift+0x68>)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d909      	bls.n	8003a2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003a1e:	f023 0303 	bic.w	r3, r3, #3
 8003a22:	1d1a      	adds	r2, r3, #4
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a28:	e007      	b.n	8003a3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003a32:	f023 0303 	bic.w	r3, r3, #3
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	aaaaaaab 	.word	0xaaaaaaab
 8003a50:	0800b554 	.word	0x0800b554

08003a54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d11f      	bne.n	8003aae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d856      	bhi.n	8003b22 <DMA_CheckFifoParam+0xce>
 8003a74:	a201      	add	r2, pc, #4	@ (adr r2, 8003a7c <DMA_CheckFifoParam+0x28>)
 8003a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7a:	bf00      	nop
 8003a7c:	08003a8d 	.word	0x08003a8d
 8003a80:	08003a9f 	.word	0x08003a9f
 8003a84:	08003a8d 	.word	0x08003a8d
 8003a88:	08003b23 	.word	0x08003b23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d046      	beq.n	8003b26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9c:	e043      	b.n	8003b26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003aa6:	d140      	bne.n	8003b2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aac:	e03d      	b.n	8003b2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ab6:	d121      	bne.n	8003afc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d837      	bhi.n	8003b2e <DMA_CheckFifoParam+0xda>
 8003abe:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac4 <DMA_CheckFifoParam+0x70>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003ad5 	.word	0x08003ad5
 8003ac8:	08003adb 	.word	0x08003adb
 8003acc:	08003ad5 	.word	0x08003ad5
 8003ad0:	08003aed 	.word	0x08003aed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad8:	e030      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ade:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d025      	beq.n	8003b32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aea:	e022      	b.n	8003b32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003af4:	d11f      	bne.n	8003b36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003afa:	e01c      	b.n	8003b36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d903      	bls.n	8003b0a <DMA_CheckFifoParam+0xb6>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d003      	beq.n	8003b10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b08:	e018      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b0e:	e015      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00e      	beq.n	8003b3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b20:	e00b      	b.n	8003b3a <DMA_CheckFifoParam+0xe6>
      break;
 8003b22:	bf00      	nop
 8003b24:	e00a      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b26:	bf00      	nop
 8003b28:	e008      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b2a:	bf00      	nop
 8003b2c:	e006      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b2e:	bf00      	nop
 8003b30:	e004      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b32:	bf00      	nop
 8003b34:	e002      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b36:	bf00      	nop
 8003b38:	e000      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b3a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop

08003b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b089      	sub	sp, #36	@ 0x24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
 8003b66:	e165      	b.n	8003e34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b68:	2201      	movs	r2, #1
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	f040 8154 	bne.w	8003e2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d005      	beq.n	8003b9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d130      	bne.n	8003c00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	2203      	movs	r2, #3
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 0201 	and.w	r2, r3, #1
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d017      	beq.n	8003c3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d123      	bne.n	8003c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	08da      	lsrs	r2, r3, #3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3208      	adds	r2, #8
 8003c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	220f      	movs	r2, #15
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	08da      	lsrs	r2, r3, #3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3208      	adds	r2, #8
 8003c8a:	69b9      	ldr	r1, [r7, #24]
 8003c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 0203 	and.w	r2, r3, #3
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80ae 	beq.w	8003e2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	4b5d      	ldr	r3, [pc, #372]	@ (8003e4c <HAL_GPIO_Init+0x300>)
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cda:	4a5c      	ldr	r2, [pc, #368]	@ (8003e4c <HAL_GPIO_Init+0x300>)
 8003cdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ce2:	4b5a      	ldr	r3, [pc, #360]	@ (8003e4c <HAL_GPIO_Init+0x300>)
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cee:	4a58      	ldr	r2, [pc, #352]	@ (8003e50 <HAL_GPIO_Init+0x304>)
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	089b      	lsrs	r3, r3, #2
 8003cf4:	3302      	adds	r3, #2
 8003cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	220f      	movs	r2, #15
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a4f      	ldr	r2, [pc, #316]	@ (8003e54 <HAL_GPIO_Init+0x308>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d025      	beq.n	8003d66 <HAL_GPIO_Init+0x21a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a4e      	ldr	r2, [pc, #312]	@ (8003e58 <HAL_GPIO_Init+0x30c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d01f      	beq.n	8003d62 <HAL_GPIO_Init+0x216>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a4d      	ldr	r2, [pc, #308]	@ (8003e5c <HAL_GPIO_Init+0x310>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d019      	beq.n	8003d5e <HAL_GPIO_Init+0x212>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a4c      	ldr	r2, [pc, #304]	@ (8003e60 <HAL_GPIO_Init+0x314>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <HAL_GPIO_Init+0x20e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a4b      	ldr	r2, [pc, #300]	@ (8003e64 <HAL_GPIO_Init+0x318>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00d      	beq.n	8003d56 <HAL_GPIO_Init+0x20a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a4a      	ldr	r2, [pc, #296]	@ (8003e68 <HAL_GPIO_Init+0x31c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <HAL_GPIO_Init+0x206>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a49      	ldr	r2, [pc, #292]	@ (8003e6c <HAL_GPIO_Init+0x320>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <HAL_GPIO_Init+0x202>
 8003d4a:	2306      	movs	r3, #6
 8003d4c:	e00c      	b.n	8003d68 <HAL_GPIO_Init+0x21c>
 8003d4e:	2307      	movs	r3, #7
 8003d50:	e00a      	b.n	8003d68 <HAL_GPIO_Init+0x21c>
 8003d52:	2305      	movs	r3, #5
 8003d54:	e008      	b.n	8003d68 <HAL_GPIO_Init+0x21c>
 8003d56:	2304      	movs	r3, #4
 8003d58:	e006      	b.n	8003d68 <HAL_GPIO_Init+0x21c>
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e004      	b.n	8003d68 <HAL_GPIO_Init+0x21c>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e002      	b.n	8003d68 <HAL_GPIO_Init+0x21c>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <HAL_GPIO_Init+0x21c>
 8003d66:	2300      	movs	r3, #0
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	f002 0203 	and.w	r2, r2, #3
 8003d6e:	0092      	lsls	r2, r2, #2
 8003d70:	4093      	lsls	r3, r2
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d78:	4935      	ldr	r1, [pc, #212]	@ (8003e50 <HAL_GPIO_Init+0x304>)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	089b      	lsrs	r3, r3, #2
 8003d7e:	3302      	adds	r3, #2
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d86:	4b3a      	ldr	r3, [pc, #232]	@ (8003e70 <HAL_GPIO_Init+0x324>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4013      	ands	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003daa:	4a31      	ldr	r2, [pc, #196]	@ (8003e70 <HAL_GPIO_Init+0x324>)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003db0:	4b2f      	ldr	r3, [pc, #188]	@ (8003e70 <HAL_GPIO_Init+0x324>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dd4:	4a26      	ldr	r2, [pc, #152]	@ (8003e70 <HAL_GPIO_Init+0x324>)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dda:	4b25      	ldr	r3, [pc, #148]	@ (8003e70 <HAL_GPIO_Init+0x324>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	43db      	mvns	r3, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4013      	ands	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8003e70 <HAL_GPIO_Init+0x324>)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e04:	4b1a      	ldr	r3, [pc, #104]	@ (8003e70 <HAL_GPIO_Init+0x324>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e28:	4a11      	ldr	r2, [pc, #68]	@ (8003e70 <HAL_GPIO_Init+0x324>)
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3301      	adds	r3, #1
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b0f      	cmp	r3, #15
 8003e38:	f67f ae96 	bls.w	8003b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	3724      	adds	r7, #36	@ 0x24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	40013800 	.word	0x40013800
 8003e54:	40020000 	.word	0x40020000
 8003e58:	40020400 	.word	0x40020400
 8003e5c:	40020800 	.word	0x40020800
 8003e60:	40020c00 	.word	0x40020c00
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40021400 	.word	0x40021400
 8003e6c:	40021800 	.word	0x40021800
 8003e70:	40013c00 	.word	0x40013c00

08003e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	807b      	strh	r3, [r7, #2]
 8003e80:	4613      	mov	r3, r2
 8003e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e84:	787b      	ldrb	r3, [r7, #1]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e8a:	887a      	ldrh	r2, [r7, #2]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e90:	e003      	b.n	8003e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e92:	887b      	ldrh	r3, [r7, #2]
 8003e94:	041a      	lsls	r2, r3, #16
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	619a      	str	r2, [r3, #24]
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
	...

08003ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e12b      	b.n	8004112 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fd fed6 	bl	8001c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2224      	movs	r2, #36	@ 0x24
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0201 	bic.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003efa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f0c:	f001 f8b8 	bl	8005080 <HAL_RCC_GetPCLK1Freq>
 8003f10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	4a81      	ldr	r2, [pc, #516]	@ (800411c <HAL_I2C_Init+0x274>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d807      	bhi.n	8003f2c <HAL_I2C_Init+0x84>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4a80      	ldr	r2, [pc, #512]	@ (8004120 <HAL_I2C_Init+0x278>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	bf94      	ite	ls
 8003f24:	2301      	movls	r3, #1
 8003f26:	2300      	movhi	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	e006      	b.n	8003f3a <HAL_I2C_Init+0x92>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a7d      	ldr	r2, [pc, #500]	@ (8004124 <HAL_I2C_Init+0x27c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	bf94      	ite	ls
 8003f34:	2301      	movls	r3, #1
 8003f36:	2300      	movhi	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e0e7      	b.n	8004112 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4a78      	ldr	r2, [pc, #480]	@ (8004128 <HAL_I2C_Init+0x280>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	0c9b      	lsrs	r3, r3, #18
 8003f4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	4a6a      	ldr	r2, [pc, #424]	@ (800411c <HAL_I2C_Init+0x274>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d802      	bhi.n	8003f7c <HAL_I2C_Init+0xd4>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	e009      	b.n	8003f90 <HAL_I2C_Init+0xe8>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f82:	fb02 f303 	mul.w	r3, r2, r3
 8003f86:	4a69      	ldr	r2, [pc, #420]	@ (800412c <HAL_I2C_Init+0x284>)
 8003f88:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8c:	099b      	lsrs	r3, r3, #6
 8003f8e:	3301      	adds	r3, #1
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	430b      	orrs	r3, r1
 8003f96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003fa2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	495c      	ldr	r1, [pc, #368]	@ (800411c <HAL_I2C_Init+0x274>)
 8003fac:	428b      	cmp	r3, r1
 8003fae:	d819      	bhi.n	8003fe4 <HAL_I2C_Init+0x13c>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1e59      	subs	r1, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fbe:	1c59      	adds	r1, r3, #1
 8003fc0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003fc4:	400b      	ands	r3, r1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_I2C_Init+0x138>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1e59      	subs	r1, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fd8:	3301      	adds	r3, #1
 8003fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fde:	e051      	b.n	8004084 <HAL_I2C_Init+0x1dc>
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	e04f      	b.n	8004084 <HAL_I2C_Init+0x1dc>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d111      	bne.n	8004010 <HAL_I2C_Init+0x168>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	1e58      	subs	r0, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6859      	ldr	r1, [r3, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	440b      	add	r3, r1
 8003ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ffe:	3301      	adds	r3, #1
 8004000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004004:	2b00      	cmp	r3, #0
 8004006:	bf0c      	ite	eq
 8004008:	2301      	moveq	r3, #1
 800400a:	2300      	movne	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e012      	b.n	8004036 <HAL_I2C_Init+0x18e>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	1e58      	subs	r0, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	0099      	lsls	r1, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	fbb0 f3f3 	udiv	r3, r0, r3
 8004026:	3301      	adds	r3, #1
 8004028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800402c:	2b00      	cmp	r3, #0
 800402e:	bf0c      	ite	eq
 8004030:	2301      	moveq	r3, #1
 8004032:	2300      	movne	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_I2C_Init+0x196>
 800403a:	2301      	movs	r3, #1
 800403c:	e022      	b.n	8004084 <HAL_I2C_Init+0x1dc>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10e      	bne.n	8004064 <HAL_I2C_Init+0x1bc>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1e58      	subs	r0, r3, #1
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6859      	ldr	r1, [r3, #4]
 800404e:	460b      	mov	r3, r1
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	440b      	add	r3, r1
 8004054:	fbb0 f3f3 	udiv	r3, r0, r3
 8004058:	3301      	adds	r3, #1
 800405a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800405e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004062:	e00f      	b.n	8004084 <HAL_I2C_Init+0x1dc>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	1e58      	subs	r0, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6859      	ldr	r1, [r3, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	0099      	lsls	r1, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	fbb0 f3f3 	udiv	r3, r0, r3
 800407a:	3301      	adds	r3, #1
 800407c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004080:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	6809      	ldr	r1, [r1, #0]
 8004088:	4313      	orrs	r3, r2
 800408a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69da      	ldr	r2, [r3, #28]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80040b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6911      	ldr	r1, [r2, #16]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68d2      	ldr	r2, [r2, #12]
 80040be:	4311      	orrs	r1, r2
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6812      	ldr	r2, [r2, #0]
 80040c4:	430b      	orrs	r3, r1
 80040c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695a      	ldr	r2, [r3, #20]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	000186a0 	.word	0x000186a0
 8004120:	001e847f 	.word	0x001e847f
 8004124:	003d08ff 	.word	0x003d08ff
 8004128:	431bde83 	.word	0x431bde83
 800412c:	10624dd3 	.word	0x10624dd3

08004130 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	607a      	str	r2, [r7, #4]
 800413a:	461a      	mov	r2, r3
 800413c:	460b      	mov	r3, r1
 800413e:	817b      	strh	r3, [r7, #10]
 8004140:	4613      	mov	r3, r2
 8004142:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004144:	f7fe fdde 	bl	8002d04 <HAL_GetTick>
 8004148:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b20      	cmp	r3, #32
 8004154:	f040 80e0 	bne.w	8004318 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2319      	movs	r3, #25
 800415e:	2201      	movs	r2, #1
 8004160:	4970      	ldr	r1, [pc, #448]	@ (8004324 <HAL_I2C_Master_Transmit+0x1f4>)
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 fc64 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800416e:	2302      	movs	r3, #2
 8004170:	e0d3      	b.n	800431a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_I2C_Master_Transmit+0x50>
 800417c:	2302      	movs	r3, #2
 800417e:	e0cc      	b.n	800431a <HAL_I2C_Master_Transmit+0x1ea>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b01      	cmp	r3, #1
 8004194:	d007      	beq.n	80041a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0201 	orr.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2221      	movs	r2, #33	@ 0x21
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2210      	movs	r2, #16
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	893a      	ldrh	r2, [r7, #8]
 80041d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4a50      	ldr	r2, [pc, #320]	@ (8004328 <HAL_I2C_Master_Transmit+0x1f8>)
 80041e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041e8:	8979      	ldrh	r1, [r7, #10]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	6a3a      	ldr	r2, [r7, #32]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 face 	bl	8004790 <I2C_MasterRequestWrite>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e08d      	b.n	800431a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fe:	2300      	movs	r3, #0
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004214:	e066      	b.n	80042e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	6a39      	ldr	r1, [r7, #32]
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fd22 	bl	8004c64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00d      	beq.n	8004242 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	2b04      	cmp	r3, #4
 800422c:	d107      	bne.n	800423e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800423c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e06b      	b.n	800431a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	781a      	ldrb	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b04      	cmp	r3, #4
 800427e:	d11b      	bne.n	80042b8 <HAL_I2C_Master_Transmit+0x188>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004284:	2b00      	cmp	r3, #0
 8004286:	d017      	beq.n	80042b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428c:	781a      	ldrb	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	6a39      	ldr	r1, [r7, #32]
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 fd19 	bl	8004cf4 <I2C_WaitOnBTFFlagUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00d      	beq.n	80042e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d107      	bne.n	80042e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e01a      	b.n	800431a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d194      	bne.n	8004216 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	e000      	b.n	800431a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004318:	2302      	movs	r3, #2
  }
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	00100002 	.word	0x00100002
 8004328:	ffff0000 	.word	0xffff0000

0800432c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08c      	sub	sp, #48	@ 0x30
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	607a      	str	r2, [r7, #4]
 8004336:	461a      	mov	r2, r3
 8004338:	460b      	mov	r3, r1
 800433a:	817b      	strh	r3, [r7, #10]
 800433c:	4613      	mov	r3, r2
 800433e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004340:	f7fe fce0 	bl	8002d04 <HAL_GetTick>
 8004344:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b20      	cmp	r3, #32
 8004350:	f040 8217 	bne.w	8004782 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	2319      	movs	r3, #25
 800435a:	2201      	movs	r2, #1
 800435c:	497c      	ldr	r1, [pc, #496]	@ (8004550 <HAL_I2C_Master_Receive+0x224>)
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 fb66 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800436a:	2302      	movs	r3, #2
 800436c:	e20a      	b.n	8004784 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_I2C_Master_Receive+0x50>
 8004378:	2302      	movs	r3, #2
 800437a:	e203      	b.n	8004784 <HAL_I2C_Master_Receive+0x458>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b01      	cmp	r3, #1
 8004390:	d007      	beq.n	80043a2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0201 	orr.w	r2, r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2222      	movs	r2, #34	@ 0x22
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2210      	movs	r2, #16
 80043be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	893a      	ldrh	r2, [r7, #8]
 80043d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4a5c      	ldr	r2, [pc, #368]	@ (8004554 <HAL_I2C_Master_Receive+0x228>)
 80043e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043e4:	8979      	ldrh	r1, [r7, #10]
 80043e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 fa52 	bl	8004894 <I2C_MasterRequestRead>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e1c4      	b.n	8004784 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d113      	bne.n	800442a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004402:	2300      	movs	r3, #0
 8004404:	623b      	str	r3, [r7, #32]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	623b      	str	r3, [r7, #32]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	623b      	str	r3, [r7, #32]
 8004416:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	e198      	b.n	800475c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800442e:	2b01      	cmp	r3, #1
 8004430:	d11b      	bne.n	800446a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004440:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004442:	2300      	movs	r3, #0
 8004444:	61fb      	str	r3, [r7, #28]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	61fb      	str	r3, [r7, #28]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	61fb      	str	r3, [r7, #28]
 8004456:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	e178      	b.n	800475c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446e:	2b02      	cmp	r3, #2
 8004470:	d11b      	bne.n	80044aa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004480:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004490:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004492:	2300      	movs	r3, #0
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	61bb      	str	r3, [r7, #24]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	61bb      	str	r3, [r7, #24]
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	e158      	b.n	800475c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80044d0:	e144      	b.n	800475c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	f200 80f1 	bhi.w	80046be <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d123      	bne.n	800452c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fc4b 	bl	8004d84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e145      	b.n	8004784 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800452a:	e117      	b.n	800475c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004530:	2b02      	cmp	r3, #2
 8004532:	d14e      	bne.n	80045d2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453a:	2200      	movs	r2, #0
 800453c:	4906      	ldr	r1, [pc, #24]	@ (8004558 <HAL_I2C_Master_Receive+0x22c>)
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 fa76 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d008      	beq.n	800455c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e11a      	b.n	8004784 <HAL_I2C_Master_Receive+0x458>
 800454e:	bf00      	nop
 8004550:	00100002 	.word	0x00100002
 8004554:	ffff0000 	.word	0xffff0000
 8004558:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800456a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045d0:	e0c4      	b.n	800475c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d8:	2200      	movs	r2, #0
 80045da:	496c      	ldr	r1, [pc, #432]	@ (800478c <HAL_I2C_Master_Receive+0x460>)
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 fa27 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0cb      	b.n	8004784 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004634:	2200      	movs	r2, #0
 8004636:	4955      	ldr	r1, [pc, #340]	@ (800478c <HAL_I2C_Master_Receive+0x460>)
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 f9f9 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e09d      	b.n	8004784 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046bc:	e04e      	b.n	800475c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 fb5e 	bl	8004d84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e058      	b.n	8004784 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b04      	cmp	r3, #4
 8004710:	d124      	bne.n	800475c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004716:	2b03      	cmp	r3, #3
 8004718:	d107      	bne.n	800472a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004728:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004760:	2b00      	cmp	r3, #0
 8004762:	f47f aeb6 	bne.w	80044d2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	e000      	b.n	8004784 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004782:	2302      	movs	r3, #2
  }
}
 8004784:	4618      	mov	r0, r3
 8004786:	3728      	adds	r7, #40	@ 0x28
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	00010004 	.word	0x00010004

08004790 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af02      	add	r7, sp, #8
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	607a      	str	r2, [r7, #4]
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	460b      	mov	r3, r1
 800479e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d006      	beq.n	80047ba <I2C_MasterRequestWrite+0x2a>
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d003      	beq.n	80047ba <I2C_MasterRequestWrite+0x2a>
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047b8:	d108      	bne.n	80047cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	e00b      	b.n	80047e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d0:	2b12      	cmp	r3, #18
 80047d2:	d107      	bne.n	80047e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 f91d 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00d      	beq.n	8004818 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800480a:	d103      	bne.n	8004814 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004812:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e035      	b.n	8004884 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004820:	d108      	bne.n	8004834 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004822:	897b      	ldrh	r3, [r7, #10]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	461a      	mov	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004830:	611a      	str	r2, [r3, #16]
 8004832:	e01b      	b.n	800486c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004834:	897b      	ldrh	r3, [r7, #10]
 8004836:	11db      	asrs	r3, r3, #7
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f003 0306 	and.w	r3, r3, #6
 800483e:	b2db      	uxtb	r3, r3
 8004840:	f063 030f 	orn	r3, r3, #15
 8004844:	b2da      	uxtb	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	490e      	ldr	r1, [pc, #56]	@ (800488c <I2C_MasterRequestWrite+0xfc>)
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 f966 	bl	8004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e010      	b.n	8004884 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004862:	897b      	ldrh	r3, [r7, #10]
 8004864:	b2da      	uxtb	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	4907      	ldr	r1, [pc, #28]	@ (8004890 <I2C_MasterRequestWrite+0x100>)
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f956 	bl	8004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	00010008 	.word	0x00010008
 8004890:	00010002 	.word	0x00010002

08004894 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	607a      	str	r2, [r7, #4]
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	460b      	mov	r3, r1
 80048a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d006      	beq.n	80048ce <I2C_MasterRequestRead+0x3a>
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d003      	beq.n	80048ce <I2C_MasterRequestRead+0x3a>
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048cc:	d108      	bne.n	80048e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	e00b      	b.n	80048f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e4:	2b11      	cmp	r3, #17
 80048e6:	d107      	bne.n	80048f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 f893 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00d      	beq.n	800492c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800491a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800491e:	d103      	bne.n	8004928 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004926:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e079      	b.n	8004a20 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004934:	d108      	bne.n	8004948 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004936:	897b      	ldrh	r3, [r7, #10]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	b2da      	uxtb	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	611a      	str	r2, [r3, #16]
 8004946:	e05f      	b.n	8004a08 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004948:	897b      	ldrh	r3, [r7, #10]
 800494a:	11db      	asrs	r3, r3, #7
 800494c:	b2db      	uxtb	r3, r3
 800494e:	f003 0306 	and.w	r3, r3, #6
 8004952:	b2db      	uxtb	r3, r3
 8004954:	f063 030f 	orn	r3, r3, #15
 8004958:	b2da      	uxtb	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	4930      	ldr	r1, [pc, #192]	@ (8004a28 <I2C_MasterRequestRead+0x194>)
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f8dc 	bl	8004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e054      	b.n	8004a20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004976:	897b      	ldrh	r3, [r7, #10]
 8004978:	b2da      	uxtb	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	4929      	ldr	r1, [pc, #164]	@ (8004a2c <I2C_MasterRequestRead+0x198>)
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f8cc 	bl	8004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e044      	b.n	8004a20 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004996:	2300      	movs	r3, #0
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f831 	bl	8004a30 <I2C_WaitOnFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00d      	beq.n	80049f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049e2:	d103      	bne.n	80049ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049ea:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e017      	b.n	8004a20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80049f0:	897b      	ldrh	r3, [r7, #10]
 80049f2:	11db      	asrs	r3, r3, #7
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f003 0306 	and.w	r3, r3, #6
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	f063 030e 	orn	r3, r3, #14
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	4907      	ldr	r1, [pc, #28]	@ (8004a2c <I2C_MasterRequestRead+0x198>)
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 f888 	bl	8004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	00010008 	.word	0x00010008
 8004a2c:	00010002 	.word	0x00010002

08004a30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a40:	e048      	b.n	8004ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d044      	beq.n	8004ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4a:	f7fe f95b 	bl	8002d04 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d302      	bcc.n	8004a60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d139      	bne.n	8004ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	0c1b      	lsrs	r3, r3, #16
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d10d      	bne.n	8004a86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	43da      	mvns	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	4013      	ands	r3, r2
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	bf0c      	ite	eq
 8004a7c:	2301      	moveq	r3, #1
 8004a7e:	2300      	movne	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	e00c      	b.n	8004aa0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	43da      	mvns	r2, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4013      	ands	r3, r2
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bf0c      	ite	eq
 8004a98:	2301      	moveq	r3, #1
 8004a9a:	2300      	movne	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d116      	bne.n	8004ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	f043 0220 	orr.w	r2, r3, #32
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e023      	b.n	8004b1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	0c1b      	lsrs	r3, r3, #16
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d10d      	bne.n	8004afa <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	43da      	mvns	r2, r3
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	bf0c      	ite	eq
 8004af0:	2301      	moveq	r3, #1
 8004af2:	2300      	movne	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	e00c      	b.n	8004b14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	43da      	mvns	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4013      	ands	r3, r2
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	bf0c      	ite	eq
 8004b0c:	2301      	moveq	r3, #1
 8004b0e:	2300      	movne	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d093      	beq.n	8004a42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b32:	e071      	b.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b42:	d123      	bne.n	8004b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b78:	f043 0204 	orr.w	r2, r3, #4
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e067      	b.n	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d041      	beq.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b94:	f7fe f8b6 	bl	8002d04 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d302      	bcc.n	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d136      	bne.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	0c1b      	lsrs	r3, r3, #16
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d10c      	bne.n	8004bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	43da      	mvns	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	bf14      	ite	ne
 8004bc6:	2301      	movne	r3, #1
 8004bc8:	2300      	moveq	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	e00b      	b.n	8004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	43da      	mvns	r2, r3
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	bf14      	ite	ne
 8004be0:	2301      	movne	r3, #1
 8004be2:	2300      	moveq	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d016      	beq.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c04:	f043 0220 	orr.w	r2, r3, #32
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e021      	b.n	8004c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	0c1b      	lsrs	r3, r3, #16
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d10c      	bne.n	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	43da      	mvns	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf14      	ite	ne
 8004c34:	2301      	movne	r3, #1
 8004c36:	2300      	moveq	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e00b      	b.n	8004c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	43da      	mvns	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4013      	ands	r3, r2
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	bf14      	ite	ne
 8004c4e:	2301      	movne	r3, #1
 8004c50:	2300      	moveq	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f47f af6d 	bne.w	8004b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c70:	e034      	b.n	8004cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f8e3 	bl	8004e3e <I2C_IsAcknowledgeFailed>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e034      	b.n	8004cec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c88:	d028      	beq.n	8004cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8a:	f7fe f83b 	bl	8002d04 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d302      	bcc.n	8004ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d11d      	bne.n	8004cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004caa:	2b80      	cmp	r3, #128	@ 0x80
 8004cac:	d016      	beq.n	8004cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc8:	f043 0220 	orr.w	r2, r3, #32
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e007      	b.n	8004cec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce6:	2b80      	cmp	r3, #128	@ 0x80
 8004ce8:	d1c3      	bne.n	8004c72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d00:	e034      	b.n	8004d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 f89b 	bl	8004e3e <I2C_IsAcknowledgeFailed>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e034      	b.n	8004d7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d18:	d028      	beq.n	8004d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d1a:	f7fd fff3 	bl	8002d04 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d302      	bcc.n	8004d30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d11d      	bne.n	8004d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d016      	beq.n	8004d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d58:	f043 0220 	orr.w	r2, r3, #32
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e007      	b.n	8004d7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d1c3      	bne.n	8004d02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d90:	e049      	b.n	8004e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b10      	cmp	r3, #16
 8004d9e:	d119      	bne.n	8004dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0210 	mvn.w	r2, #16
 8004da8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e030      	b.n	8004e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd4:	f7fd ff96 	bl	8002d04 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d302      	bcc.n	8004dea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d11d      	bne.n	8004e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df4:	2b40      	cmp	r3, #64	@ 0x40
 8004df6:	d016      	beq.n	8004e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	f043 0220 	orr.w	r2, r3, #32
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e007      	b.n	8004e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e30:	2b40      	cmp	r3, #64	@ 0x40
 8004e32:	d1ae      	bne.n	8004d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e54:	d11b      	bne.n	8004e8e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e5e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7a:	f043 0204 	orr.w	r2, r3, #4
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e0cc      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb0:	4b68      	ldr	r3, [pc, #416]	@ (8005054 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d90c      	bls.n	8004ed8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ebe:	4b65      	ldr	r3, [pc, #404]	@ (8005054 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec6:	4b63      	ldr	r3, [pc, #396]	@ (8005054 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d001      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0b8      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d020      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ef0:	4b59      	ldr	r3, [pc, #356]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	4a58      	ldr	r2, [pc, #352]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004efa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d005      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f08:	4b53      	ldr	r3, [pc, #332]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	4a52      	ldr	r2, [pc, #328]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f14:	4b50      	ldr	r3, [pc, #320]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	494d      	ldr	r1, [pc, #308]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d044      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d107      	bne.n	8004f4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3a:	4b47      	ldr	r3, [pc, #284]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d119      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e07f      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d003      	beq.n	8004f5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d107      	bne.n	8004f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f5a:	4b3f      	ldr	r3, [pc, #252]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d109      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e06f      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f6a:	4b3b      	ldr	r3, [pc, #236]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e067      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f7a:	4b37      	ldr	r3, [pc, #220]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f023 0203 	bic.w	r2, r3, #3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	4934      	ldr	r1, [pc, #208]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f8c:	f7fd feba 	bl	8002d04 <HAL_GetTick>
 8004f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f92:	e00a      	b.n	8004faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f94:	f7fd feb6 	bl	8002d04 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e04f      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004faa:	4b2b      	ldr	r3, [pc, #172]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 020c 	and.w	r2, r3, #12
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d1eb      	bne.n	8004f94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fbc:	4b25      	ldr	r3, [pc, #148]	@ (8005054 <HAL_RCC_ClockConfig+0x1b8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 030f 	and.w	r3, r3, #15
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d20c      	bcs.n	8004fe4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fca:	4b22      	ldr	r3, [pc, #136]	@ (8005054 <HAL_RCC_ClockConfig+0x1b8>)
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd2:	4b20      	ldr	r3, [pc, #128]	@ (8005054 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d001      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e032      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d008      	beq.n	8005002 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff0:	4b19      	ldr	r3, [pc, #100]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	4916      	ldr	r1, [pc, #88]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800500e:	4b12      	ldr	r3, [pc, #72]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	490e      	ldr	r1, [pc, #56]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 800501e:	4313      	orrs	r3, r2
 8005020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005022:	f000 fdb5 	bl	8005b90 <HAL_RCC_GetSysClockFreq>
 8005026:	4602      	mov	r2, r0
 8005028:	4b0b      	ldr	r3, [pc, #44]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	091b      	lsrs	r3, r3, #4
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	490a      	ldr	r1, [pc, #40]	@ (800505c <HAL_RCC_ClockConfig+0x1c0>)
 8005034:	5ccb      	ldrb	r3, [r1, r3]
 8005036:	fa22 f303 	lsr.w	r3, r2, r3
 800503a:	4a09      	ldr	r2, [pc, #36]	@ (8005060 <HAL_RCC_ClockConfig+0x1c4>)
 800503c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800503e:	4b09      	ldr	r3, [pc, #36]	@ (8005064 <HAL_RCC_ClockConfig+0x1c8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f7fd fe1a 	bl	8002c7c <HAL_InitTick>

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40023c00 	.word	0x40023c00
 8005058:	40023800 	.word	0x40023800
 800505c:	0800b53c 	.word	0x0800b53c
 8005060:	20000000 	.word	0x20000000
 8005064:	20000040 	.word	0x20000040

08005068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800506c:	4b03      	ldr	r3, [pc, #12]	@ (800507c <HAL_RCC_GetHCLKFreq+0x14>)
 800506e:	681b      	ldr	r3, [r3, #0]
}
 8005070:	4618      	mov	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	20000000 	.word	0x20000000

08005080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005084:	f7ff fff0 	bl	8005068 <HAL_RCC_GetHCLKFreq>
 8005088:	4602      	mov	r2, r0
 800508a:	4b05      	ldr	r3, [pc, #20]	@ (80050a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	0a9b      	lsrs	r3, r3, #10
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	4903      	ldr	r1, [pc, #12]	@ (80050a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005096:	5ccb      	ldrb	r3, [r1, r3]
 8005098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800509c:	4618      	mov	r0, r3
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40023800 	.word	0x40023800
 80050a4:	0800b54c 	.word	0x0800b54c

080050a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08c      	sub	sp, #48	@ 0x30
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d010      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80050e0:	4b6f      	ldr	r3, [pc, #444]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050e6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ee:	496c      	ldr	r1, [pc, #432]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80050fe:	2301      	movs	r3, #1
 8005100:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d010      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800510e:	4b64      	ldr	r3, [pc, #400]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005110:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005114:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511c:	4960      	ldr	r1, [pc, #384]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800512c:	2301      	movs	r3, #1
 800512e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b00      	cmp	r3, #0
 800513a:	d017      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800513c:	4b58      	ldr	r3, [pc, #352]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800513e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005142:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514a:	4955      	ldr	r1, [pc, #340]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005156:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800515a:	d101      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800515c:	2301      	movs	r3, #1
 800515e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005168:	2301      	movs	r3, #1
 800516a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b00      	cmp	r3, #0
 8005176:	d017      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005178:	4b49      	ldr	r3, [pc, #292]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800517a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800517e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005186:	4946      	ldr	r1, [pc, #280]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005192:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005196:	d101      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005198:	2301      	movs	r3, #1
 800519a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80051a4:	2301      	movs	r3, #1
 80051a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 808a 	beq.w	80052ca <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051b6:	2300      	movs	r3, #0
 80051b8:	60bb      	str	r3, [r7, #8]
 80051ba:	4b39      	ldr	r3, [pc, #228]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051be:	4a38      	ldr	r2, [pc, #224]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80051c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80051c6:	4b36      	ldr	r3, [pc, #216]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ce:	60bb      	str	r3, [r7, #8]
 80051d0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80051d2:	4b34      	ldr	r3, [pc, #208]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a33      	ldr	r2, [pc, #204]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80051d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051de:	f7fd fd91 	bl	8002d04 <HAL_GetTick>
 80051e2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80051e4:	e008      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e6:	f7fd fd8d 	bl	8002d04 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e278      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80051f8:	4b2a      	ldr	r3, [pc, #168]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0f0      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005204:	4b26      	ldr	r3, [pc, #152]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005208:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800520c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d02f      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005218:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800521c:	6a3a      	ldr	r2, [r7, #32]
 800521e:	429a      	cmp	r2, r3
 8005220:	d028      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005222:	4b1f      	ldr	r3, [pc, #124]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005226:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800522a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800522c:	4b1e      	ldr	r3, [pc, #120]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800522e:	2201      	movs	r2, #1
 8005230:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005232:	4b1d      	ldr	r3, [pc, #116]	@ (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005238:	4a19      	ldr	r2, [pc, #100]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800523e:	4b18      	ldr	r3, [pc, #96]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b01      	cmp	r3, #1
 8005248:	d114      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800524a:	f7fd fd5b 	bl	8002d04 <HAL_GetTick>
 800524e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005250:	e00a      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005252:	f7fd fd57 	bl	8002d04 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005260:	4293      	cmp	r3, r2
 8005262:	d901      	bls.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e240      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005268:	4b0d      	ldr	r3, [pc, #52]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800526a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0ee      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005278:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800527c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005280:	d114      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005282:	4b07      	ldr	r3, [pc, #28]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005292:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005296:	4902      	ldr	r1, [pc, #8]	@ (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005298:	4313      	orrs	r3, r2
 800529a:	608b      	str	r3, [r1, #8]
 800529c:	e00c      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800529e:	bf00      	nop
 80052a0:	40023800 	.word	0x40023800
 80052a4:	40007000 	.word	0x40007000
 80052a8:	42470e40 	.word	0x42470e40
 80052ac:	4b4a      	ldr	r3, [pc, #296]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	4a49      	ldr	r2, [pc, #292]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052b2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80052b6:	6093      	str	r3, [r2, #8]
 80052b8:	4b47      	ldr	r3, [pc, #284]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c4:	4944      	ldr	r1, [pc, #272]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0310 	and.w	r3, r3, #16
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d004      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80052dc:	4b3f      	ldr	r3, [pc, #252]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80052de:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80052ec:	4b3a      	ldr	r3, [pc, #232]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052fa:	4937      	ldr	r1, [pc, #220]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800530e:	4b32      	ldr	r3, [pc, #200]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005310:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005314:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800531c:	492e      	ldr	r1, [pc, #184]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800531e:	4313      	orrs	r3, r2
 8005320:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800532c:	2b00      	cmp	r3, #0
 800532e:	d011      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005330:	4b29      	ldr	r3, [pc, #164]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005336:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800533e:	4926      	ldr	r1, [pc, #152]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800534a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800534e:	d101      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005350:	2301      	movs	r3, #1
 8005352:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005360:	4b1d      	ldr	r3, [pc, #116]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005362:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005366:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536e:	491a      	ldr	r1, [pc, #104]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005370:	4313      	orrs	r3, r2
 8005372:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800537e:	2b00      	cmp	r3, #0
 8005380:	d011      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005382:	4b15      	ldr	r3, [pc, #84]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005384:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005388:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005390:	4911      	ldr	r1, [pc, #68]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800539c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053a0:	d101      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80053a2:	2301      	movs	r3, #1
 80053a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80053a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d005      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053b4:	f040 80ff 	bne.w	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053b8:	4b09      	ldr	r3, [pc, #36]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053be:	f7fd fca1 	bl	8002d04 <HAL_GetTick>
 80053c2:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053c4:	e00e      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053c6:	f7fd fc9d 	bl	8002d04 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d907      	bls.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e188      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x642>
 80053d8:	40023800 	.word	0x40023800
 80053dc:	424711e0 	.word	0x424711e0
 80053e0:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053e4:	4b7e      	ldr	r3, [pc, #504]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1ea      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005400:	2b00      	cmp	r3, #0
 8005402:	d009      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800540c:	2b00      	cmp	r3, #0
 800540e:	d028      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005414:	2b00      	cmp	r3, #0
 8005416:	d124      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005418:	4b71      	ldr	r3, [pc, #452]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800541a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800541e:	0c1b      	lsrs	r3, r3, #16
 8005420:	f003 0303 	and.w	r3, r3, #3
 8005424:	3301      	adds	r3, #1
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800542a:	4b6d      	ldr	r3, [pc, #436]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800542c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005430:	0e1b      	lsrs	r3, r3, #24
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	019b      	lsls	r3, r3, #6
 8005442:	431a      	orrs	r2, r3
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	085b      	lsrs	r3, r3, #1
 8005448:	3b01      	subs	r3, #1
 800544a:	041b      	lsls	r3, r3, #16
 800544c:	431a      	orrs	r2, r3
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	061b      	lsls	r3, r3, #24
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	071b      	lsls	r3, r3, #28
 800545a:	4961      	ldr	r1, [pc, #388]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d004      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005472:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005476:	d00a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005480:	2b00      	cmp	r3, #0
 8005482:	d035      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005488:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800548c:	d130      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800548e:	4b54      	ldr	r3, [pc, #336]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005490:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005494:	0c1b      	lsrs	r3, r3, #16
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	3301      	adds	r3, #1
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054a0:	4b4f      	ldr	r3, [pc, #316]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80054a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054a6:	0f1b      	lsrs	r3, r3, #28
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	019b      	lsls	r3, r3, #6
 80054b8:	431a      	orrs	r2, r3
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	085b      	lsrs	r3, r3, #1
 80054be:	3b01      	subs	r3, #1
 80054c0:	041b      	lsls	r3, r3, #16
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	061b      	lsls	r3, r3, #24
 80054ca:	431a      	orrs	r2, r3
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	071b      	lsls	r3, r3, #28
 80054d0:	4943      	ldr	r1, [pc, #268]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80054d8:	4b41      	ldr	r3, [pc, #260]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80054da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054de:	f023 021f 	bic.w	r2, r3, #31
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e6:	3b01      	subs	r3, #1
 80054e8:	493d      	ldr	r1, [pc, #244]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d029      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005504:	d124      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005506:	4b36      	ldr	r3, [pc, #216]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005508:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800550c:	0c1b      	lsrs	r3, r3, #16
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	3301      	adds	r3, #1
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005518:	4b31      	ldr	r3, [pc, #196]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800551a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800551e:	0f1b      	lsrs	r3, r3, #28
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	019b      	lsls	r3, r3, #6
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	3b01      	subs	r3, #1
 800553a:	041b      	lsls	r3, r3, #16
 800553c:	431a      	orrs	r2, r3
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	061b      	lsls	r3, r3, #24
 8005542:	431a      	orrs	r2, r3
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	071b      	lsls	r3, r3, #28
 8005548:	4925      	ldr	r1, [pc, #148]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005558:	2b00      	cmp	r3, #0
 800555a:	d016      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	019b      	lsls	r3, r3, #6
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	085b      	lsrs	r3, r3, #1
 800556e:	3b01      	subs	r3, #1
 8005570:	041b      	lsls	r3, r3, #16
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	061b      	lsls	r3, r3, #24
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	071b      	lsls	r3, r3, #28
 8005582:	4917      	ldr	r1, [pc, #92]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005584:	4313      	orrs	r3, r2
 8005586:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800558a:	4b16      	ldr	r3, [pc, #88]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800558c:	2201      	movs	r2, #1
 800558e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005590:	f7fd fbb8 	bl	8002d04 <HAL_GetTick>
 8005594:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005598:	f7fd fbb4 	bl	8002d04 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e09f      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055aa:	4b0d      	ldr	r3, [pc, #52]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0f0      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 80055b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	f040 8095 	bne.w	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80055be:	4b0a      	ldr	r3, [pc, #40]	@ (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055c4:	f7fd fb9e 	bl	8002d04 <HAL_GetTick>
 80055c8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055ca:	e00f      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055cc:	f7fd fb9a 	bl	8002d04 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d908      	bls.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e085      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x642>
 80055de:	bf00      	nop
 80055e0:	40023800 	.word	0x40023800
 80055e4:	42470068 	.word	0x42470068
 80055e8:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055ec:	4b41      	ldr	r3, [pc, #260]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055f8:	d0e8      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005616:	2b00      	cmp	r3, #0
 8005618:	d02b      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800561e:	2b00      	cmp	r3, #0
 8005620:	d127      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005622:	4b34      	ldr	r3, [pc, #208]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005628:	0c1b      	lsrs	r3, r3, #16
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	3301      	adds	r3, #1
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699a      	ldr	r2, [r3, #24]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	019b      	lsls	r3, r3, #6
 800563e:	431a      	orrs	r2, r3
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	085b      	lsrs	r3, r3, #1
 8005644:	3b01      	subs	r3, #1
 8005646:	041b      	lsls	r3, r3, #16
 8005648:	431a      	orrs	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564e:	061b      	lsls	r3, r3, #24
 8005650:	4928      	ldr	r1, [pc, #160]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005652:	4313      	orrs	r3, r2
 8005654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005658:	4b26      	ldr	r3, [pc, #152]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800565a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800565e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005666:	3b01      	subs	r3, #1
 8005668:	021b      	lsls	r3, r3, #8
 800566a:	4922      	ldr	r1, [pc, #136]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800567a:	2b00      	cmp	r3, #0
 800567c:	d01d      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005682:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005686:	d118      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005688:	4b1a      	ldr	r3, [pc, #104]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800568a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800568e:	0e1b      	lsrs	r3, r3, #24
 8005690:	f003 030f 	and.w	r3, r3, #15
 8005694:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	019b      	lsls	r3, r3, #6
 80056a0:	431a      	orrs	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	085b      	lsrs	r3, r3, #1
 80056a8:	3b01      	subs	r3, #1
 80056aa:	041b      	lsls	r3, r3, #16
 80056ac:	431a      	orrs	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	061b      	lsls	r3, r3, #24
 80056b2:	4910      	ldr	r1, [pc, #64]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80056ba:	4b0f      	ldr	r3, [pc, #60]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80056bc:	2201      	movs	r2, #1
 80056be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056c0:	f7fd fb20 	bl	8002d04 <HAL_GetTick>
 80056c4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056c6:	e008      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80056c8:	f7fd fb1c 	bl	8002d04 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e007      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056da:	4b06      	ldr	r3, [pc, #24]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056e6:	d1ef      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3730      	adds	r7, #48	@ 0x30
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40023800 	.word	0x40023800
 80056f8:	42470070 	.word	0x42470070

080056fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b089      	sub	sp, #36	@ 0x24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3b01      	subs	r3, #1
 8005720:	2b07      	cmp	r3, #7
 8005722:	f200 8224 	bhi.w	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005726:	a201      	add	r2, pc, #4	@ (adr r2, 800572c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572c:	0800592f 	.word	0x0800592f
 8005730:	08005a59 	.word	0x08005a59
 8005734:	08005b6f 	.word	0x08005b6f
 8005738:	0800574d 	.word	0x0800574d
 800573c:	08005b6f 	.word	0x08005b6f
 8005740:	08005b6f 	.word	0x08005b6f
 8005744:	08005b6f 	.word	0x08005b6f
 8005748:	0800574d 	.word	0x0800574d
  {
    case RCC_PERIPHCLK_SAI1:
    case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 800574c:	4ba8      	ldr	r3, [pc, #672]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800574e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005752:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 800575a:	613b      	str	r3, [r7, #16]
      switch (saiclocksource)
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005762:	f000 80d6 	beq.w	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800576c:	f200 80dd 	bhi.w	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005776:	f000 809f 	beq.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005780:	f200 80d3 	bhi.w	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800578a:	d05b      	beq.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005792:	f200 80ca 	bhi.w	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800579c:	f000 80b6 	beq.w	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057a6:	f200 80c0 	bhi.w	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057b0:	f000 8082 	beq.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057ba:	f200 80b6 	bhi.w	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d004      	beq.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057ca:	d03b      	beq.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
        default :
        {
          break;
 80057cc:	e0ad      	b.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80057ce:	4b88      	ldr	r3, [pc, #544]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d109      	bne.n	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 80057da:	4b85      	ldr	r3, [pc, #532]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80057dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057e4:	4a83      	ldr	r2, [pc, #524]	@ (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80057e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ea:	61bb      	str	r3, [r7, #24]
 80057ec:	e008      	b.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 80057ee:	4b80      	ldr	r3, [pc, #512]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80057f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057f8:	4a7f      	ldr	r2, [pc, #508]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80057fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fe:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8005800:	4b7b      	ldr	r3, [pc, #492]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005806:	0e1b      	lsrs	r3, r3, #24
 8005808:	f003 030f 	and.w	r3, r3, #15
 800580c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg1);
 800580e:	4b78      	ldr	r3, [pc, #480]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005814:	099b      	lsrs	r3, r3, #6
 8005816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	fb03 f202 	mul.w	r2, r3, r2
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	fbb2 f3f3 	udiv	r3, r2, r3
 8005826:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8005828:	4b71      	ldr	r3, [pc, #452]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800582a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800582e:	0a1b      	lsrs	r3, r3, #8
 8005830:	f003 031f 	and.w	r3, r3, #31
 8005834:	3301      	adds	r3, #1
 8005836:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 8005838:	69fa      	ldr	r2, [r7, #28]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005840:	61fb      	str	r3, [r7, #28]
          break;
 8005842:	e073      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005844:	4b6a      	ldr	r3, [pc, #424]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d109      	bne.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005850:	4b67      	ldr	r3, [pc, #412]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005852:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005856:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800585a:	4a66      	ldr	r2, [pc, #408]	@ (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800585c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	e008      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8005864:	4b62      	ldr	r3, [pc, #392]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800586a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800586e:	4a62      	ldr	r2, [pc, #392]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005870:	fbb2 f3f3 	udiv	r3, r2, r3
 8005874:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8005876:	4b5e      	ldr	r3, [pc, #376]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005878:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800587c:	0e1b      	lsrs	r3, r3, #24
 800587e:	f003 030f 	and.w	r3, r3, #15
 8005882:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg1);
 8005884:	4b5a      	ldr	r3, [pc, #360]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005886:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800588a:	099b      	lsrs	r3, r3, #6
 800588c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	fb03 f202 	mul.w	r2, r3, r2
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	fbb2 f3f3 	udiv	r3, r2, r3
 800589c:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800589e:	4b54      	ldr	r3, [pc, #336]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80058a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058a4:	f003 031f 	and.w	r3, r3, #31
 80058a8:	3301      	adds	r3, #1
 80058aa:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b4:	61fb      	str	r3, [r7, #28]
          break;
 80058b6:	e039      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80058b8:	4b4d      	ldr	r3, [pc, #308]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d108      	bne.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80058c4:	4b4a      	ldr	r3, [pc, #296]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058cc:	4a49      	ldr	r2, [pc, #292]	@ (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80058ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	e007      	b.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80058d6:	4b46      	ldr	r3, [pc, #280]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058de:	4a46      	ldr	r2, [pc, #280]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80058e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e4:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 80058e6:	4b42      	ldr	r3, [pc, #264]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	0f1b      	lsrs	r3, r3, #28
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U)) / (tmpreg1);
 80058f2:	4b3f      	ldr	r3, [pc, #252]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	099b      	lsrs	r3, r3, #6
 80058f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	fb03 f202 	mul.w	r2, r3, r2
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	fbb2 f3f3 	udiv	r3, r2, r3
 8005908:	61fb      	str	r3, [r7, #28]
          break;
 800590a:	e00f      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 800590c:	4b3b      	ldr	r3, [pc, #236]	@ (80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800590e:	61fb      	str	r3, [r7, #28]
          break;
 8005910:	e00c      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005912:	4b37      	ldr	r3, [pc, #220]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d102      	bne.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 800591e:	4b35      	ldr	r3, [pc, #212]	@ (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005920:	61fb      	str	r3, [r7, #28]
          break;
 8005922:	e003      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8005924:	4b34      	ldr	r3, [pc, #208]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005926:	61fb      	str	r3, [r7, #28]
          break;
 8005928:	e000      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 800592a:	bf00      	nop
        }
      }
      break;
 800592c:	e120      	b.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800592e:	4b30      	ldr	r3, [pc, #192]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005930:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005934:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8005938:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8005940:	d079      	beq.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8005948:	f200 8082 	bhi.w	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005952:	d03c      	beq.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800595a:	d879      	bhi.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d006      	beq.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005968:	d172      	bne.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800596a:	4b24      	ldr	r3, [pc, #144]	@ (80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800596c:	61fb      	str	r3, [r7, #28]
          break;
 800596e:	e072      	b.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005970:	4b1f      	ldr	r3, [pc, #124]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005978:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800597c:	d109      	bne.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800597e:	4b1c      	ldr	r3, [pc, #112]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005980:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005984:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005988:	4a1b      	ldr	r2, [pc, #108]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800598a:	fbb2 f3f3 	udiv	r3, r2, r3
 800598e:	61bb      	str	r3, [r7, #24]
 8005990:	e008      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005992:	4b17      	ldr	r3, [pc, #92]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005994:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800599c:	4a15      	ldr	r2, [pc, #84]	@ (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800599e:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a2:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80059a4:	4b12      	ldr	r3, [pc, #72]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80059a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059aa:	099b      	lsrs	r3, r3, #6
 80059ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	fb02 f303 	mul.w	r3, r2, r3
 80059b6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80059b8:	4b0d      	ldr	r3, [pc, #52]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80059ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059be:	0f1b      	lsrs	r3, r3, #28
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ca:	61fb      	str	r3, [r7, #28]
          break;
 80059cc:	e043      	b.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80059ce:	4b08      	ldr	r3, [pc, #32]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059da:	d111      	bne.n	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80059dc:	4b04      	ldr	r3, [pc, #16]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059e4:	4a04      	ldr	r2, [pc, #16]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80059e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ea:	61bb      	str	r3, [r7, #24]
 80059ec:	e010      	b.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80059ee:	bf00      	nop
 80059f0:	40023800 	.word	0x40023800
 80059f4:	00f42400 	.word	0x00f42400
 80059f8:	017d7840 	.word	0x017d7840
 80059fc:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a00:	4b5f      	ldr	r3, [pc, #380]	@ (8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a08:	4a5e      	ldr	r2, [pc, #376]	@ (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8005a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005a10:	4b5b      	ldr	r3, [pc, #364]	@ (8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	099b      	lsrs	r3, r3, #6
 8005a16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	fb02 f303 	mul.w	r3, r2, r3
 8005a20:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005a22:	4b57      	ldr	r3, [pc, #348]	@ (8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	0f1b      	lsrs	r3, r3, #28
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a32:	61fb      	str	r3, [r7, #28]
          break;
 8005a34:	e00f      	b.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a36:	4b52      	ldr	r3, [pc, #328]	@ (8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a42:	d102      	bne.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8005a44:	4b50      	ldr	r3, [pc, #320]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8005a46:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005a48:	e005      	b.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8005a4a:	4b4e      	ldr	r3, [pc, #312]	@ (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8005a4c:	61fb      	str	r3, [r7, #28]
          break;
 8005a4e:	e002      	b.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	61fb      	str	r3, [r7, #28]
          break;
 8005a54:	bf00      	nop
        }
      }
      break;
 8005a56:	e08b      	b.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8005a58:	4b49      	ldr	r3, [pc, #292]	@ (8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a5e:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8005a62:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005a6a:	d06f      	beq.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005a72:	d878      	bhi.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a7a:	d03c      	beq.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a82:	d870      	bhi.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d006      	beq.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a90:	d169      	bne.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a92:	4b3e      	ldr	r3, [pc, #248]	@ (8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x490>)
 8005a94:	61fb      	str	r3, [r7, #28]
          break;
 8005a96:	e069      	b.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a98:	4b39      	ldr	r3, [pc, #228]	@ (8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005aa4:	d109      	bne.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005aa6:	4b36      	ldr	r3, [pc, #216]	@ (8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ab0:	4a35      	ldr	r2, [pc, #212]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8005ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab6:	61bb      	str	r3, [r7, #24]
 8005ab8:	e008      	b.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005aba:	4b31      	ldr	r3, [pc, #196]	@ (8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ac0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ac4:	4a2f      	ldr	r2, [pc, #188]	@ (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8005ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aca:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005acc:	4b2c      	ldr	r3, [pc, #176]	@ (8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ad2:	099b      	lsrs	r3, r3, #6
 8005ad4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	fb02 f303 	mul.w	r3, r2, r3
 8005ade:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005ae0:	4b27      	ldr	r3, [pc, #156]	@ (8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ae6:	0f1b      	lsrs	r3, r3, #28
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af2:	61fb      	str	r3, [r7, #28]
          break;
 8005af4:	e03a      	b.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005af6:	4b22      	ldr	r3, [pc, #136]	@ (8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005afe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b02:	d108      	bne.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b04:	4b1e      	ldr	r3, [pc, #120]	@ (8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8005b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b12:	61bb      	str	r3, [r7, #24]
 8005b14:	e007      	b.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b16:	4b1a      	ldr	r3, [pc, #104]	@ (8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b1e:	4a19      	ldr	r2, [pc, #100]	@ (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8005b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b24:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005b26:	4b16      	ldr	r3, [pc, #88]	@ (8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	099b      	lsrs	r3, r3, #6
 8005b2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	fb02 f303 	mul.w	r3, r2, r3
 8005b36:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005b38:	4b11      	ldr	r3, [pc, #68]	@ (8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	0f1b      	lsrs	r3, r3, #28
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b48:	61fb      	str	r3, [r7, #28]
          break;
 8005b4a:	e00f      	b.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b58:	d102      	bne.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8005b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8005b5c:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005b5e:	e005      	b.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8005b60:	4b08      	ldr	r3, [pc, #32]	@ (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8005b62:	61fb      	str	r3, [r7, #28]
          break;
 8005b64:	e002      	b.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	61fb      	str	r3, [r7, #28]
          break;
 8005b6a:	bf00      	nop
        }
      }
      break;
 8005b6c:	e000      	b.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    default:
    {
      break;
 8005b6e:	bf00      	nop
    }
  }
  return frequency;
 8005b70:	69fb      	ldr	r3, [r7, #28]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3724      	adds	r7, #36	@ 0x24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	40023800 	.word	0x40023800
 8005b84:	00f42400 	.word	0x00f42400
 8005b88:	017d7840 	.word	0x017d7840
 8005b8c:	00bb8000 	.word	0x00bb8000

08005b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b94:	b0a6      	sub	sp, #152	@ 0x98
 8005b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bb6:	4bc8      	ldr	r3, [pc, #800]	@ (8005ed8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 030c 	and.w	r3, r3, #12
 8005bbe:	2b0c      	cmp	r3, #12
 8005bc0:	f200 817e 	bhi.w	8005ec0 <HAL_RCC_GetSysClockFreq+0x330>
 8005bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bcc <HAL_RCC_GetSysClockFreq+0x3c>)
 8005bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bca:	bf00      	nop
 8005bcc:	08005c01 	.word	0x08005c01
 8005bd0:	08005ec1 	.word	0x08005ec1
 8005bd4:	08005ec1 	.word	0x08005ec1
 8005bd8:	08005ec1 	.word	0x08005ec1
 8005bdc:	08005c09 	.word	0x08005c09
 8005be0:	08005ec1 	.word	0x08005ec1
 8005be4:	08005ec1 	.word	0x08005ec1
 8005be8:	08005ec1 	.word	0x08005ec1
 8005bec:	08005c11 	.word	0x08005c11
 8005bf0:	08005ec1 	.word	0x08005ec1
 8005bf4:	08005ec1 	.word	0x08005ec1
 8005bf8:	08005ec1 	.word	0x08005ec1
 8005bfc:	08005d7b 	.word	0x08005d7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c00:	4bb6      	ldr	r3, [pc, #728]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x34c>)
 8005c02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005c06:	e15f      	b.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c08:	4bb5      	ldr	r3, [pc, #724]	@ (8005ee0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005c0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005c0e:	e15b      	b.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c10:	4bb1      	ldr	r3, [pc, #708]	@ (8005ed8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c1c:	4bae      	ldr	r3, [pc, #696]	@ (8005ed8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d031      	beq.n	8005c8c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c28:	4bab      	ldr	r3, [pc, #684]	@ (8005ed8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	099b      	lsrs	r3, r3, #6
 8005c2e:	2200      	movs	r2, #0
 8005c30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c40:	4ba7      	ldr	r3, [pc, #668]	@ (8005ee0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005c42:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005c46:	462a      	mov	r2, r5
 8005c48:	fb03 f202 	mul.w	r2, r3, r2
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	4621      	mov	r1, r4
 8005c50:	fb01 f303 	mul.w	r3, r1, r3
 8005c54:	4413      	add	r3, r2
 8005c56:	4aa2      	ldr	r2, [pc, #648]	@ (8005ee0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005c58:	4621      	mov	r1, r4
 8005c5a:	fba1 1202 	umull	r1, r2, r1, r2
 8005c5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c60:	460a      	mov	r2, r1
 8005c62:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005c64:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005c66:	4413      	add	r3, r2
 8005c68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c6e:	2200      	movs	r2, #0
 8005c70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c72:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005c74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c78:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005c7c:	f7fb f884 	bl	8000d88 <__aeabi_uldivmod>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4613      	mov	r3, r2
 8005c86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c8a:	e064      	b.n	8005d56 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c8c:	4b92      	ldr	r3, [pc, #584]	@ (8005ed8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	099b      	lsrs	r3, r3, #6
 8005c92:	2200      	movs	r2, #0
 8005c94:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c96:	657a      	str	r2, [r7, #84]	@ 0x54
 8005c98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ca4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005ca8:	4622      	mov	r2, r4
 8005caa:	462b      	mov	r3, r5
 8005cac:	f04f 0000 	mov.w	r0, #0
 8005cb0:	f04f 0100 	mov.w	r1, #0
 8005cb4:	0159      	lsls	r1, r3, #5
 8005cb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cba:	0150      	lsls	r0, r2, #5
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	1a51      	subs	r1, r2, r1
 8005cc4:	6139      	str	r1, [r7, #16]
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	eb63 0301 	sbc.w	r3, r3, r1
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	f04f 0300 	mov.w	r3, #0
 8005cd6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cda:	4659      	mov	r1, fp
 8005cdc:	018b      	lsls	r3, r1, #6
 8005cde:	4651      	mov	r1, sl
 8005ce0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ce4:	4651      	mov	r1, sl
 8005ce6:	018a      	lsls	r2, r1, #6
 8005ce8:	4651      	mov	r1, sl
 8005cea:	ebb2 0801 	subs.w	r8, r2, r1
 8005cee:	4659      	mov	r1, fp
 8005cf0:	eb63 0901 	sbc.w	r9, r3, r1
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d08:	4690      	mov	r8, r2
 8005d0a:	4699      	mov	r9, r3
 8005d0c:	4623      	mov	r3, r4
 8005d0e:	eb18 0303 	adds.w	r3, r8, r3
 8005d12:	60bb      	str	r3, [r7, #8]
 8005d14:	462b      	mov	r3, r5
 8005d16:	eb49 0303 	adc.w	r3, r9, r3
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	f04f 0300 	mov.w	r3, #0
 8005d24:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d28:	4629      	mov	r1, r5
 8005d2a:	028b      	lsls	r3, r1, #10
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d32:	4621      	mov	r1, r4
 8005d34:	028a      	lsls	r2, r1, #10
 8005d36:	4610      	mov	r0, r2
 8005d38:	4619      	mov	r1, r3
 8005d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d3e:	2200      	movs	r2, #0
 8005d40:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d42:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d48:	f7fb f81e 	bl	8000d88 <__aeabi_uldivmod>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4613      	mov	r3, r2
 8005d52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005d56:	4b60      	ldr	r3, [pc, #384]	@ (8005ed8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	0c1b      	lsrs	r3, r3, #16
 8005d5c:	f003 0303 	and.w	r3, r3, #3
 8005d60:	3301      	adds	r3, #1
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8005d68:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005d78:	e0a6      	b.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d7a:	4b57      	ldr	r3, [pc, #348]	@ (8005ed8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d86:	4b54      	ldr	r3, [pc, #336]	@ (8005ed8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d02a      	beq.n	8005de8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d92:	4b51      	ldr	r3, [pc, #324]	@ (8005ed8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	099b      	lsrs	r3, r3, #6
 8005d98:	2200      	movs	r2, #0
 8005d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005da4:	2100      	movs	r1, #0
 8005da6:	4b4e      	ldr	r3, [pc, #312]	@ (8005ee0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005da8:	fb03 f201 	mul.w	r2, r3, r1
 8005dac:	2300      	movs	r3, #0
 8005dae:	fb00 f303 	mul.w	r3, r0, r3
 8005db2:	4413      	add	r3, r2
 8005db4:	4a4a      	ldr	r2, [pc, #296]	@ (8005ee0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005db6:	fba0 1202 	umull	r1, r2, r0, r2
 8005dba:	677a      	str	r2, [r7, #116]	@ 0x74
 8005dbc:	460a      	mov	r2, r1
 8005dbe:	673a      	str	r2, [r7, #112]	@ 0x70
 8005dc0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005dc2:	4413      	add	r3, r2
 8005dc4:	677b      	str	r3, [r7, #116]	@ 0x74
 8005dc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dca:	2200      	movs	r2, #0
 8005dcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dce:	637a      	str	r2, [r7, #52]	@ 0x34
 8005dd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005dd4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8005dd8:	f7fa ffd6 	bl	8000d88 <__aeabi_uldivmod>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4613      	mov	r3, r2
 8005de2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005de6:	e05b      	b.n	8005ea0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005de8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ed8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	099b      	lsrs	r3, r3, #6
 8005dee:	2200      	movs	r2, #0
 8005df0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfa:	623b      	str	r3, [r7, #32]
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e04:	4642      	mov	r2, r8
 8005e06:	464b      	mov	r3, r9
 8005e08:	f04f 0000 	mov.w	r0, #0
 8005e0c:	f04f 0100 	mov.w	r1, #0
 8005e10:	0159      	lsls	r1, r3, #5
 8005e12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e16:	0150      	lsls	r0, r2, #5
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4641      	mov	r1, r8
 8005e1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e22:	4649      	mov	r1, r9
 8005e24:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e3c:	ebb2 040a 	subs.w	r4, r2, sl
 8005e40:	eb63 050b 	sbc.w	r5, r3, fp
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	f04f 0300 	mov.w	r3, #0
 8005e4c:	00eb      	lsls	r3, r5, #3
 8005e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e52:	00e2      	lsls	r2, r4, #3
 8005e54:	4614      	mov	r4, r2
 8005e56:	461d      	mov	r5, r3
 8005e58:	4643      	mov	r3, r8
 8005e5a:	18e3      	adds	r3, r4, r3
 8005e5c:	603b      	str	r3, [r7, #0]
 8005e5e:	464b      	mov	r3, r9
 8005e60:	eb45 0303 	adc.w	r3, r5, r3
 8005e64:	607b      	str	r3, [r7, #4]
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	f04f 0300 	mov.w	r3, #0
 8005e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e72:	4629      	mov	r1, r5
 8005e74:	028b      	lsls	r3, r1, #10
 8005e76:	4621      	mov	r1, r4
 8005e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	028a      	lsls	r2, r1, #10
 8005e80:	4610      	mov	r0, r2
 8005e82:	4619      	mov	r1, r3
 8005e84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e88:	2200      	movs	r2, #0
 8005e8a:	61bb      	str	r3, [r7, #24]
 8005e8c:	61fa      	str	r2, [r7, #28]
 8005e8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e92:	f7fa ff79 	bl	8000d88 <__aeabi_uldivmod>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	0f1b      	lsrs	r3, r3, #28
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8005eae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005eb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005ebe:	e003      	b.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ec0:	4b06      	ldr	r3, [pc, #24]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x34c>)
 8005ec2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005ec6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ec8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3798      	adds	r7, #152	@ 0x98
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ed6:	bf00      	nop
 8005ed8:	40023800 	.word	0x40023800
 8005edc:	00f42400 	.word	0x00f42400
 8005ee0:	017d7840 	.word	0x017d7840

08005ee4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e28d      	b.n	8006412 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 8083 	beq.w	800600a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005f04:	4b94      	ldr	r3, [pc, #592]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f003 030c 	and.w	r3, r3, #12
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d019      	beq.n	8005f44 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005f10:	4b91      	ldr	r3, [pc, #580]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 030c 	and.w	r3, r3, #12
        || \
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d106      	bne.n	8005f2a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005f1c:	4b8e      	ldr	r3, [pc, #568]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f28:	d00c      	beq.n	8005f44 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f2a:	4b8b      	ldr	r3, [pc, #556]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005f32:	2b0c      	cmp	r3, #12
 8005f34:	d112      	bne.n	8005f5c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f36:	4b88      	ldr	r3, [pc, #544]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f42:	d10b      	bne.n	8005f5c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f44:	4b84      	ldr	r3, [pc, #528]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d05b      	beq.n	8006008 <HAL_RCC_OscConfig+0x124>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d157      	bne.n	8006008 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e25a      	b.n	8006412 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f64:	d106      	bne.n	8005f74 <HAL_RCC_OscConfig+0x90>
 8005f66:	4b7c      	ldr	r3, [pc, #496]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a7b      	ldr	r2, [pc, #492]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8005f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	e01d      	b.n	8005fb0 <HAL_RCC_OscConfig+0xcc>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f7c:	d10c      	bne.n	8005f98 <HAL_RCC_OscConfig+0xb4>
 8005f7e:	4b76      	ldr	r3, [pc, #472]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a75      	ldr	r2, [pc, #468]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8005f84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	4b73      	ldr	r3, [pc, #460]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a72      	ldr	r2, [pc, #456]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8005f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	e00b      	b.n	8005fb0 <HAL_RCC_OscConfig+0xcc>
 8005f98:	4b6f      	ldr	r3, [pc, #444]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a6e      	ldr	r2, [pc, #440]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8005f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	4b6c      	ldr	r3, [pc, #432]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a6b      	ldr	r2, [pc, #428]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8005faa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d013      	beq.n	8005fe0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb8:	f7fc fea4 	bl	8002d04 <HAL_GetTick>
 8005fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fc0:	f7fc fea0 	bl	8002d04 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b64      	cmp	r3, #100	@ 0x64
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e21f      	b.n	8006412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd2:	4b61      	ldr	r3, [pc, #388]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0f0      	beq.n	8005fc0 <HAL_RCC_OscConfig+0xdc>
 8005fde:	e014      	b.n	800600a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe0:	f7fc fe90 	bl	8002d04 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fe8:	f7fc fe8c 	bl	8002d04 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b64      	cmp	r3, #100	@ 0x64
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e20b      	b.n	8006412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ffa:	4b57      	ldr	r3, [pc, #348]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1f0      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x104>
 8006006:	e000      	b.n	800600a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d06f      	beq.n	80060f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006016:	4b50      	ldr	r3, [pc, #320]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 030c 	and.w	r3, r3, #12
 800601e:	2b00      	cmp	r3, #0
 8006020:	d017      	beq.n	8006052 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006022:	4b4d      	ldr	r3, [pc, #308]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 030c 	and.w	r3, r3, #12
        || \
 800602a:	2b08      	cmp	r3, #8
 800602c:	d105      	bne.n	800603a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800602e:	4b4a      	ldr	r3, [pc, #296]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00b      	beq.n	8006052 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800603a:	4b47      	ldr	r3, [pc, #284]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006042:	2b0c      	cmp	r3, #12
 8006044:	d11c      	bne.n	8006080 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006046:	4b44      	ldr	r3, [pc, #272]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d116      	bne.n	8006080 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006052:	4b41      	ldr	r3, [pc, #260]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d005      	beq.n	800606a <HAL_RCC_OscConfig+0x186>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d001      	beq.n	800606a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e1d3      	b.n	8006412 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800606a:	4b3b      	ldr	r3, [pc, #236]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	4937      	ldr	r1, [pc, #220]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 800607a:	4313      	orrs	r3, r2
 800607c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800607e:	e03a      	b.n	80060f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d020      	beq.n	80060ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006088:	4b34      	ldr	r3, [pc, #208]	@ (800615c <HAL_RCC_OscConfig+0x278>)
 800608a:	2201      	movs	r2, #1
 800608c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608e:	f7fc fe39 	bl	8002d04 <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006094:	e008      	b.n	80060a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006096:	f7fc fe35 	bl	8002d04 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e1b4      	b.n	8006412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0f0      	beq.n	8006096 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060b4:	4b28      	ldr	r3, [pc, #160]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	4925      	ldr	r1, [pc, #148]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	600b      	str	r3, [r1, #0]
 80060c8:	e015      	b.n	80060f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060ca:	4b24      	ldr	r3, [pc, #144]	@ (800615c <HAL_RCC_OscConfig+0x278>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d0:	f7fc fe18 	bl	8002d04 <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060d8:	f7fc fe14 	bl	8002d04 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e193      	b.n	8006412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1f0      	bne.n	80060d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d036      	beq.n	8006170 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d016      	beq.n	8006138 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800610a:	4b15      	ldr	r3, [pc, #84]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 800610c:	2201      	movs	r2, #1
 800610e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006110:	f7fc fdf8 	bl	8002d04 <HAL_GetTick>
 8006114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006118:	f7fc fdf4 	bl	8002d04 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e173      	b.n	8006412 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800612a:	4b0b      	ldr	r3, [pc, #44]	@ (8006158 <HAL_RCC_OscConfig+0x274>)
 800612c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0f0      	beq.n	8006118 <HAL_RCC_OscConfig+0x234>
 8006136:	e01b      	b.n	8006170 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006138:	4b09      	ldr	r3, [pc, #36]	@ (8006160 <HAL_RCC_OscConfig+0x27c>)
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800613e:	f7fc fde1 	bl	8002d04 <HAL_GetTick>
 8006142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006144:	e00e      	b.n	8006164 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006146:	f7fc fddd 	bl	8002d04 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d907      	bls.n	8006164 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e15c      	b.n	8006412 <HAL_RCC_OscConfig+0x52e>
 8006158:	40023800 	.word	0x40023800
 800615c:	42470000 	.word	0x42470000
 8006160:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006164:	4b8a      	ldr	r3, [pc, #552]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 8006166:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1ea      	bne.n	8006146 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0304 	and.w	r3, r3, #4
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 8097 	beq.w	80062ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800617e:	2300      	movs	r3, #0
 8006180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006182:	4b83      	ldr	r3, [pc, #524]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 8006184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10f      	bne.n	80061ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800618e:	2300      	movs	r3, #0
 8006190:	60bb      	str	r3, [r7, #8]
 8006192:	4b7f      	ldr	r3, [pc, #508]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 8006194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006196:	4a7e      	ldr	r2, [pc, #504]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 8006198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800619c:	6413      	str	r3, [r2, #64]	@ 0x40
 800619e:	4b7c      	ldr	r3, [pc, #496]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 80061a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061a6:	60bb      	str	r3, [r7, #8]
 80061a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061aa:	2301      	movs	r3, #1
 80061ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ae:	4b79      	ldr	r3, [pc, #484]	@ (8006394 <HAL_RCC_OscConfig+0x4b0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d118      	bne.n	80061ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061ba:	4b76      	ldr	r3, [pc, #472]	@ (8006394 <HAL_RCC_OscConfig+0x4b0>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a75      	ldr	r2, [pc, #468]	@ (8006394 <HAL_RCC_OscConfig+0x4b0>)
 80061c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061c6:	f7fc fd9d 	bl	8002d04 <HAL_GetTick>
 80061ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061ce:	f7fc fd99 	bl	8002d04 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e118      	b.n	8006412 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061e0:	4b6c      	ldr	r3, [pc, #432]	@ (8006394 <HAL_RCC_OscConfig+0x4b0>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0f0      	beq.n	80061ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d106      	bne.n	8006202 <HAL_RCC_OscConfig+0x31e>
 80061f4:	4b66      	ldr	r3, [pc, #408]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 80061f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061f8:	4a65      	ldr	r2, [pc, #404]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 80061fa:	f043 0301 	orr.w	r3, r3, #1
 80061fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006200:	e01c      	b.n	800623c <HAL_RCC_OscConfig+0x358>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	2b05      	cmp	r3, #5
 8006208:	d10c      	bne.n	8006224 <HAL_RCC_OscConfig+0x340>
 800620a:	4b61      	ldr	r3, [pc, #388]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 800620c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800620e:	4a60      	ldr	r2, [pc, #384]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 8006210:	f043 0304 	orr.w	r3, r3, #4
 8006214:	6713      	str	r3, [r2, #112]	@ 0x70
 8006216:	4b5e      	ldr	r3, [pc, #376]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 8006218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800621a:	4a5d      	ldr	r2, [pc, #372]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 800621c:	f043 0301 	orr.w	r3, r3, #1
 8006220:	6713      	str	r3, [r2, #112]	@ 0x70
 8006222:	e00b      	b.n	800623c <HAL_RCC_OscConfig+0x358>
 8006224:	4b5a      	ldr	r3, [pc, #360]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 8006226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006228:	4a59      	ldr	r2, [pc, #356]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 800622a:	f023 0301 	bic.w	r3, r3, #1
 800622e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006230:	4b57      	ldr	r3, [pc, #348]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 8006232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006234:	4a56      	ldr	r2, [pc, #344]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 8006236:	f023 0304 	bic.w	r3, r3, #4
 800623a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d015      	beq.n	8006270 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006244:	f7fc fd5e 	bl	8002d04 <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800624a:	e00a      	b.n	8006262 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800624c:	f7fc fd5a 	bl	8002d04 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800625a:	4293      	cmp	r3, r2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e0d7      	b.n	8006412 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006262:	4b4b      	ldr	r3, [pc, #300]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 8006264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0ee      	beq.n	800624c <HAL_RCC_OscConfig+0x368>
 800626e:	e014      	b.n	800629a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006270:	f7fc fd48 	bl	8002d04 <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006276:	e00a      	b.n	800628e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006278:	f7fc fd44 	bl	8002d04 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006286:	4293      	cmp	r3, r2
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e0c1      	b.n	8006412 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800628e:	4b40      	ldr	r3, [pc, #256]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1ee      	bne.n	8006278 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800629a:	7dfb      	ldrb	r3, [r7, #23]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d105      	bne.n	80062ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 80062a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a4:	4a3a      	ldr	r2, [pc, #232]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 80062a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 80ad 	beq.w	8006410 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062b6:	4b36      	ldr	r3, [pc, #216]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 030c 	and.w	r3, r3, #12
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d060      	beq.n	8006384 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d145      	bne.n	8006356 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ca:	4b33      	ldr	r3, [pc, #204]	@ (8006398 <HAL_RCC_OscConfig+0x4b4>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d0:	f7fc fd18 	bl	8002d04 <HAL_GetTick>
 80062d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062d6:	e008      	b.n	80062ea <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062d8:	f7fc fd14 	bl	8002d04 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e093      	b.n	8006412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ea:	4b29      	ldr	r3, [pc, #164]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1f0      	bne.n	80062d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69da      	ldr	r2, [r3, #28]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006304:	019b      	lsls	r3, r3, #6
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630c:	085b      	lsrs	r3, r3, #1
 800630e:	3b01      	subs	r3, #1
 8006310:	041b      	lsls	r3, r3, #16
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006318:	061b      	lsls	r3, r3, #24
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006320:	071b      	lsls	r3, r3, #28
 8006322:	491b      	ldr	r1, [pc, #108]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 8006324:	4313      	orrs	r3, r2
 8006326:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006328:	4b1b      	ldr	r3, [pc, #108]	@ (8006398 <HAL_RCC_OscConfig+0x4b4>)
 800632a:	2201      	movs	r2, #1
 800632c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632e:	f7fc fce9 	bl	8002d04 <HAL_GetTick>
 8006332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006334:	e008      	b.n	8006348 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006336:	f7fc fce5 	bl	8002d04 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d901      	bls.n	8006348 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e064      	b.n	8006412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006348:	4b11      	ldr	r3, [pc, #68]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0f0      	beq.n	8006336 <HAL_RCC_OscConfig+0x452>
 8006354:	e05c      	b.n	8006410 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006356:	4b10      	ldr	r3, [pc, #64]	@ (8006398 <HAL_RCC_OscConfig+0x4b4>)
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800635c:	f7fc fcd2 	bl	8002d04 <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006362:	e008      	b.n	8006376 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006364:	f7fc fcce 	bl	8002d04 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e04d      	b.n	8006412 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006376:	4b06      	ldr	r3, [pc, #24]	@ (8006390 <HAL_RCC_OscConfig+0x4ac>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1f0      	bne.n	8006364 <HAL_RCC_OscConfig+0x480>
 8006382:	e045      	b.n	8006410 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d107      	bne.n	800639c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e040      	b.n	8006412 <HAL_RCC_OscConfig+0x52e>
 8006390:	40023800 	.word	0x40023800
 8006394:	40007000 	.word	0x40007000
 8006398:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800639c:	4b1f      	ldr	r3, [pc, #124]	@ (800641c <HAL_RCC_OscConfig+0x538>)
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d030      	beq.n	800640c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d129      	bne.n	800640c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d122      	bne.n	800640c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80063cc:	4013      	ands	r3, r2
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80063d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d119      	bne.n	800640c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e2:	085b      	lsrs	r3, r3, #1
 80063e4:	3b01      	subs	r3, #1
 80063e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d10f      	bne.n	800640c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d107      	bne.n	800640c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006406:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006408:	429a      	cmp	r2, r3
 800640a:	d001      	beq.n	8006410 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e000      	b.n	8006412 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	40023800 	.word	0x40023800

08006420 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b02      	cmp	r3, #2
 8006436:	d904      	bls.n	8006442 <HAL_SAI_InitProtocol+0x22>
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	3b03      	subs	r3, #3
 800643c:	2b01      	cmp	r3, #1
 800643e:	d812      	bhi.n	8006466 <HAL_SAI_InitProtocol+0x46>
 8006440:	e008      	b.n	8006454 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	68b9      	ldr	r1, [r7, #8]
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f9dd 	bl	8006808 <SAI_InitI2S>
 800644e:	4603      	mov	r3, r0
 8006450:	75fb      	strb	r3, [r7, #23]
      break;
 8006452:	e00b      	b.n	800646c <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 fa82 	bl	8006964 <SAI_InitPCM>
 8006460:	4603      	mov	r3, r0
 8006462:	75fb      	strb	r3, [r7, #23]
      break;
 8006464:	e002      	b.n	800646c <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	75fb      	strb	r3, [r7, #23]
      break;
 800646a:	bf00      	nop
  }

  if (status == HAL_OK)
 800646c:	7dfb      	ldrb	r3, [r7, #23]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d104      	bne.n	800647c <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 f808 	bl	8006488 <HAL_SAI_Init>
 8006478:	4603      	mov	r3, r0
 800647a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800647c:	7dfb      	ldrb	r3, [r7, #23]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
	...

08006488 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8006490:	2300      	movs	r3, #0
 8006492:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e10c      	b.n	80066c4 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d106      	bne.n	80064c4 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7fb ff1e 	bl	8002300 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 faff 	bl	8006ad0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fba6 	bl	8006c24 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d030      	beq.n	8006542 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fbe3 	bl	8006cac <SAI_GetInputClock>
 80064e6:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	461a      	mov	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	025b      	lsls	r3, r3, #9
 80064fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fe:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4a72      	ldr	r2, [pc, #456]	@ (80066cc <HAL_SAI_Init+0x244>)
 8006504:	fba2 2303 	umull	r2, r3, r2, r3
 8006508:	08da      	lsrs	r2, r3, #3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 800650e:	68f9      	ldr	r1, [r7, #12]
 8006510:	4b6e      	ldr	r3, [pc, #440]	@ (80066cc <HAL_SAI_Init+0x244>)
 8006512:	fba3 2301 	umull	r2, r3, r3, r1
 8006516:	08da      	lsrs	r2, r3, #3
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	1aca      	subs	r2, r1, r3
 8006522:	2a08      	cmp	r2, #8
 8006524:	d904      	bls.n	8006530 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652a:	1c5a      	adds	r2, r3, #1
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006534:	2b04      	cmp	r3, #4
 8006536:	d104      	bne.n	8006542 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800653c:	085a      	lsrs	r2, r3, #1
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_SAI_Init+0xca>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d109      	bne.n	8006566 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <HAL_SAI_Init+0xd6>
 800655a:	2300      	movs	r3, #0
 800655c:	e001      	b.n	8006562 <HAL_SAI_Init+0xda>
 800655e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	e008      	b.n	8006578 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656a:	2b01      	cmp	r3, #1
 800656c:	d102      	bne.n	8006574 <HAL_SAI_Init+0xec>
 800656e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006572:	e000      	b.n	8006576 <HAL_SAI_Init+0xee>
 8006574:	2300      	movs	r3, #0
 8006576:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	2b03      	cmp	r3, #3
 800657e:	d811      	bhi.n	80065a4 <HAL_SAI_Init+0x11c>
 8006580:	2b02      	cmp	r3, #2
 8006582:	d20b      	bcs.n	800659c <HAL_SAI_Init+0x114>
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <HAL_SAI_Init+0x106>
 8006588:	2b01      	cmp	r3, #1
 800658a:	d003      	beq.n	8006594 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 800658c:	e00a      	b.n	80065a4 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	613b      	str	r3, [r7, #16]
    break;
 8006592:	e008      	b.n	80065a6 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006594:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006598:	613b      	str	r3, [r7, #16]
    break;
 800659a:	e004      	b.n	80065a6 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800659c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80065a0:	613b      	str	r3, [r7, #16]
    break;
 80065a2:	e000      	b.n	80065a6 <HAL_SAI_Init+0x11e>
      break;
 80065a4:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6819      	ldr	r1, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	4b47      	ldr	r3, [pc, #284]	@ (80066d0 <HAL_SAI_Init+0x248>)
 80065b2:	400b      	ands	r3, r1
 80065b4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6819      	ldr	r1, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065c4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80065ca:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d0:	431a      	orrs	r2, r3
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 80065de:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80065ea:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f0:	051b      	lsls	r3, r3, #20
 80065f2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6812      	ldr	r2, [r2, #0]
 8006606:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800660a:	f023 030f 	bic.w	r3, r3, #15
 800660e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6859      	ldr	r1, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	699a      	ldr	r2, [r3, #24]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006624:	431a      	orrs	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6899      	ldr	r1, [r3, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	4b26      	ldr	r3, [pc, #152]	@ (80066d4 <HAL_SAI_Init+0x24c>)
 800663a:	400b      	ands	r3, r1
 800663c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6899      	ldr	r1, [r3, #8]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006648:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800664e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 8006654:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 800665a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006660:	3b01      	subs	r3, #1
 8006662:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006664:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68d9      	ldr	r1, [r3, #12]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800667c:	400b      	ands	r3, r1
 800667e:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68d9      	ldr	r1, [r3, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800668e:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006694:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8006696:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800669c:	3b01      	subs	r3, #1
 800669e:	021b      	lsls	r3, r3, #8
 80066a0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	cccccccd 	.word	0xcccccccd
 80066d0:	ff05c010 	.word	0xff05c010
 80066d4:	fff88000 	.word	0xfff88000

080066d8 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	4613      	mov	r3, r2
 80066e4:	80fb      	strh	r3, [r7, #6]
  if ((pData == NULL) || (Size == 0))
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d002      	beq.n	80066f2 <HAL_SAI_Receive_DMA+0x1a>
 80066ec:	88fb      	ldrh	r3, [r7, #6]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e074      	b.n	80067e0 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d16d      	bne.n	80067de <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006708:	2b01      	cmp	r3, #1
 800670a:	d101      	bne.n	8006710 <HAL_SAI_Receive_DMA+0x38>
 800670c:	2302      	movs	r3, #2
 800670e:	e067      	b.n	80067e0 <HAL_SAI_Receive_DMA+0x108>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    hsai->pBuffPtr = pData;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	669a      	str	r2, [r3, #104]	@ 0x68
    hsai->XferSize = Size;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	88fa      	ldrh	r2, [r7, #6]
 8006722:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
    hsai->XferCount = Size;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	88fa      	ldrh	r2, [r7, #6]
 800672a:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2222      	movs	r2, #34	@ 0x22
 800673a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006742:	4a29      	ldr	r2, [pc, #164]	@ (80067e8 <HAL_SAI_Receive_DMA+0x110>)
 8006744:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800674a:	4a28      	ldr	r2, [pc, #160]	@ (80067ec <HAL_SAI_Receive_DMA+0x114>)
 800674c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006752:	4a27      	ldr	r2, [pc, #156]	@ (80067f0 <HAL_SAI_Receive_DMA+0x118>)
 8006754:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800675a:	2200      	movs	r2, #0
 800675c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	331c      	adds	r3, #28
 8006768:	4619      	mov	r1, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800676e:	461a      	mov	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8006776:	f7fc ff27 	bl	80035c8 <HAL_DMA_Start_IT>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      return  HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e029      	b.n	80067e0 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800678c:	2100      	movs	r1, #0
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 f968 	bl	8006a64 <SAI_InterruptFlag>
 8006794:	4601      	mov	r1, r0
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	691a      	ldr	r2, [r3, #16]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80067b2:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d107      	bne.n	80067d2 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80067d0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	e000      	b.n	80067e0 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 80067de:	2302      	movs	r3, #2
  }
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	08006ba1 	.word	0x08006ba1
 80067ec:	08006b41 	.word	0x08006b41
 80067f0:	08006bbd 	.word	0x08006bbd

080067f4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
 8006814:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <SAI_InitI2S+0x2a>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	2b02      	cmp	r3, #2
 8006830:	d103      	bne.n	800683a <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	641a      	str	r2, [r3, #64]	@ 0x40
 8006838:	e002      	b.n	8006840 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2201      	movs	r2, #1
 800683e:	641a      	str	r2, [r3, #64]	@ 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006846:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800684e:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e076      	b.n	8006958 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d107      	bne.n	8006880 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	651a      	str	r2, [r3, #80]	@ 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800687c:	655a      	str	r2, [r3, #84]	@ 0x54
 800687e:	e006      	b.n	800688e <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006886:	651a      	str	r2, [r3, #80]	@ 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Frame definition */
  switch (datasize)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b03      	cmp	r3, #3
 8006892:	d84f      	bhi.n	8006934 <SAI_InitI2S+0x12c>
 8006894:	a201      	add	r2, pc, #4	@ (adr r2, 800689c <SAI_InitI2S+0x94>)
 8006896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689a:	bf00      	nop
 800689c:	080068ad 	.word	0x080068ad
 80068a0:	080068cf 	.word	0x080068cf
 80068a4:	080068f1 	.word	0x080068f1
 80068a8:	08006913 	.word	0x08006913
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2280      	movs	r2, #128	@ 0x80
 80068b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	085b      	lsrs	r3, r3, #1
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	085b      	lsrs	r3, r3, #1
 80068c0:	011a      	lsls	r2, r3, #4
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2240      	movs	r2, #64	@ 0x40
 80068ca:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 80068cc:	e034      	b.n	8006938 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2280      	movs	r2, #128	@ 0x80
 80068d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	085b      	lsrs	r3, r3, #1
 80068d8:	019a      	lsls	r2, r3, #6
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	085b      	lsrs	r3, r3, #1
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2280      	movs	r2, #128	@ 0x80
 80068ec:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 80068ee:	e023      	b.n	8006938 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	22c0      	movs	r2, #192	@ 0xc0
 80068f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	085b      	lsrs	r3, r3, #1
 80068fa:	019a      	lsls	r2, r3, #6
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	085b      	lsrs	r3, r3, #1
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2280      	movs	r2, #128	@ 0x80
 800690e:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8006910:	e012      	b.n	8006938 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	22e0      	movs	r2, #224	@ 0xe0
 8006916:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	085b      	lsrs	r3, r3, #1
 800691c:	019a      	lsls	r2, r3, #6
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	085b      	lsrs	r3, r3, #1
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2280      	movs	r2, #128	@ 0x80
 8006930:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8006932:	e001      	b.n	8006938 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e00f      	b.n	8006958 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b02      	cmp	r3, #2
 800693c:	d10b      	bne.n	8006956 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d102      	bne.n	800694a <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2210      	movs	r2, #16
 8006948:	659a      	str	r2, [r3, #88]	@ 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b02      	cmp	r3, #2
 800694e:	d102      	bne.n	8006956 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2208      	movs	r2, #8
 8006954:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <SAI_InitPCM+0x2a>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	2b02      	cmp	r3, #2
 800698c:	d103      	bne.n	8006996 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2201      	movs	r2, #1
 8006992:	641a      	str	r2, [r3, #64]	@ 0x40
 8006994:	e002      	b.n	800699c <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	641a      	str	r2, [r3, #64]	@ 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80069a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80069b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80069c4:	665a      	str	r2, [r3, #100]	@ 0x64

  if (protocol == SAI_PCM_SHORT)
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d103      	bne.n	80069d4 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2201      	movs	r2, #1
 80069d0:	649a      	str	r2, [r3, #72]	@ 0x48
 80069d2:	e002      	b.n	80069da <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	220d      	movs	r2, #13
 80069d8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  switch (datasize)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d837      	bhi.n	8006a50 <SAI_InitPCM+0xec>
 80069e0:	a201      	add	r2, pc, #4	@ (adr r2, 80069e8 <SAI_InitPCM+0x84>)
 80069e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e6:	bf00      	nop
 80069e8:	080069f9 	.word	0x080069f9
 80069ec:	08006a0f 	.word	0x08006a0f
 80069f0:	08006a25 	.word	0x08006a25
 80069f4:	08006a3b 	.word	0x08006a3b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2280      	movs	r2, #128	@ 0x80
 80069fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	011a      	lsls	r2, r3, #4
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2240      	movs	r2, #64	@ 0x40
 8006a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8006a0c:	e022      	b.n	8006a54 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2280      	movs	r2, #128	@ 0x80
 8006a12:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2280      	movs	r2, #128	@ 0x80
 8006a20:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8006a22:	e017      	b.n	8006a54 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	22c0      	movs	r2, #192	@ 0xc0
 8006a28:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2280      	movs	r2, #128	@ 0x80
 8006a36:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8006a38:	e00c      	b.n	8006a54 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	22e0      	movs	r2, #224	@ 0xe0
 8006a3e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2280      	movs	r2, #128	@ 0x80
 8006a4c:	65da      	str	r2, [r3, #92]	@ 0x5c
      break;
 8006a4e:	e001      	b.n	8006a54 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e000      	b.n	8006a56 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop

08006a64 <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d103      	bne.n	8006a80 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f043 0308 	orr.w	r3, r3, #8
 8006a7e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	d10b      	bne.n	8006aa0 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	d003      	beq.n	8006a98 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d103      	bne.n	8006aa0 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f043 0310 	orr.w	r3, r3, #16
 8006a9e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	2b03      	cmp	r3, #3
 8006aa6:	d003      	beq.n	8006ab0 <SAI_InterruptFlag+0x4c>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d104      	bne.n	8006aba <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	e003      	b.n	8006ac2 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f043 0304 	orr.w	r3, r3, #4
 8006ac0:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006ad8:	4b17      	ldr	r3, [pc, #92]	@ (8006b38 <SAI_Disable+0x68>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a17      	ldr	r2, [pc, #92]	@ (8006b3c <SAI_Disable+0x6c>)
 8006ade:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae2:	0b1b      	lsrs	r3, r3, #12
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006afa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	1e5a      	subs	r2, r3, #1
 8006b00:	60fa      	str	r2, [r7, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10a      	bne.n	8006b1c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	72fb      	strb	r3, [r7, #11]
      break;
 8006b1a:	e006      	b.n	8006b2a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1e8      	bne.n	8006afc <SAI_Disable+0x2c>

  return status;
 8006b2a:	7afb      	ldrb	r3, [r7, #11]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	20000000 	.word	0x20000000
 8006b3c:	95cbec1b 	.word	0x95cbec1b

08006b40 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b56:	d01c      	beq.n	8006b92 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006b66:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0U;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006b70:	2100      	movs	r1, #0
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f7ff ff76 	bl	8006a64 <SAI_InterruptFlag>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	43d9      	mvns	r1, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	691a      	ldr	r2, [r3, #16]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	400a      	ands	r2, r1
 8006b88:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f7fb fb4c 	bl	8002230 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006b98:	bf00      	nop
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f7fb fb54 	bl	800225c <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006bb4:	bf00      	nop
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc8:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bd0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d004      	beq.n	8006bee <SAI_DMAError+0x32>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d112      	bne.n	8006c14 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006bfc:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff ff66 	bl	8006ad0 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f7ff fded 	bl	80067f4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006c1a:	bf00      	nop
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
	...

08006c24 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d00c      	beq.n	8006c4e <SAI_BlockSynchroConfig+0x2a>
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d80d      	bhi.n	8006c54 <SAI_BlockSynchroConfig+0x30>
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d002      	beq.n	8006c42 <SAI_BlockSynchroConfig+0x1e>
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d003      	beq.n	8006c48 <SAI_BlockSynchroConfig+0x24>
 8006c40:	e008      	b.n	8006c54 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	60fb      	str	r3, [r7, #12]
      break;
 8006c46:	e008      	b.n	8006c5a <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006c48:	2310      	movs	r3, #16
 8006c4a:	60fb      	str	r3, [r7, #12]
      break;
 8006c4c:	e005      	b.n	8006c5a <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006c4e:	2320      	movs	r3, #32
 8006c50:	60fb      	str	r3, [r7, #12]
      break;
 8006c52:	e002      	b.n	8006c5a <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	60fb      	str	r3, [r7, #12]
      break;
 8006c58:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d103      	bne.n	8006c6a <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f043 0301 	orr.w	r3, r3, #1
 8006c68:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a0b      	ldr	r2, [pc, #44]	@ (8006c9c <SAI_BlockSynchroConfig+0x78>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d004      	beq.n	8006c7e <SAI_BlockSynchroConfig+0x5a>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a09      	ldr	r2, [pc, #36]	@ (8006ca0 <SAI_BlockSynchroConfig+0x7c>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d103      	bne.n	8006c86 <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 8006c7e:	4a09      	ldr	r2, [pc, #36]	@ (8006ca4 <SAI_BlockSynchroConfig+0x80>)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6013      	str	r3, [r2, #0]
 8006c84:	e003      	b.n	8006c8e <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006c86:	4a08      	ldr	r2, [pc, #32]	@ (8006ca8 <SAI_BlockSynchroConfig+0x84>)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8006c8c:	bf00      	nop
 8006c8e:	bf00      	nop
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	40015804 	.word	0x40015804
 8006ca0:	40015824 	.word	0x40015824
 8006ca4:	40015800 	.word	0x40015800
 8006ca8:	40015c00 	.word	0x40015c00

08006cac <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8006ce8 <SAI_GetInputClock+0x3c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d004      	beq.n	8006ccc <SAI_GetInputClock+0x20>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a09      	ldr	r2, [pc, #36]	@ (8006cec <SAI_GetInputClock+0x40>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d104      	bne.n	8006cd6 <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006ccc:	2004      	movs	r0, #4
 8006cce:	f7fe fd15 	bl	80056fc <HAL_RCCEx_GetPeriphCLKFreq>
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	e003      	b.n	8006cde <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006cd6:	2008      	movs	r0, #8
 8006cd8:	f7fe fd10 	bl	80056fc <HAL_RCCEx_GetPeriphCLKFreq>
 8006cdc:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8006cde:	68fb      	ldr	r3, [r7, #12]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	40015804 	.word	0x40015804
 8006cec:	40015824 	.word	0x40015824

08006cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e041      	b.n	8006d86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d106      	bne.n	8006d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7fb fc98 	bl	800264c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4610      	mov	r0, r2
 8006d30:	f000 f9ae 	bl	8007090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
	...

08006d90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d001      	beq.n	8006da8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e046      	b.n	8006e36 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a23      	ldr	r2, [pc, #140]	@ (8006e44 <HAL_TIM_Base_Start+0xb4>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d022      	beq.n	8006e00 <HAL_TIM_Base_Start+0x70>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dc2:	d01d      	beq.n	8006e00 <HAL_TIM_Base_Start+0x70>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8006e48 <HAL_TIM_Base_Start+0xb8>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d018      	beq.n	8006e00 <HAL_TIM_Base_Start+0x70>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8006e4c <HAL_TIM_Base_Start+0xbc>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d013      	beq.n	8006e00 <HAL_TIM_Base_Start+0x70>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8006e50 <HAL_TIM_Base_Start+0xc0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d00e      	beq.n	8006e00 <HAL_TIM_Base_Start+0x70>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1b      	ldr	r2, [pc, #108]	@ (8006e54 <HAL_TIM_Base_Start+0xc4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d009      	beq.n	8006e00 <HAL_TIM_Base_Start+0x70>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a19      	ldr	r2, [pc, #100]	@ (8006e58 <HAL_TIM_Base_Start+0xc8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d004      	beq.n	8006e00 <HAL_TIM_Base_Start+0x70>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a18      	ldr	r2, [pc, #96]	@ (8006e5c <HAL_TIM_Base_Start+0xcc>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d111      	bne.n	8006e24 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b06      	cmp	r3, #6
 8006e10:	d010      	beq.n	8006e34 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f042 0201 	orr.w	r2, r2, #1
 8006e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e22:	e007      	b.n	8006e34 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0201 	orr.w	r2, r2, #1
 8006e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	40010000 	.word	0x40010000
 8006e48:	40000400 	.word	0x40000400
 8006e4c:	40000800 	.word	0x40000800
 8006e50:	40000c00 	.word	0x40000c00
 8006e54:	40010400 	.word	0x40010400
 8006e58:	40014000 	.word	0x40014000
 8006e5c:	40001800 	.word	0x40001800

08006e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d020      	beq.n	8006ec4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d01b      	beq.n	8006ec4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f06f 0202 	mvn.w	r2, #2
 8006e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f8d2 	bl	8007054 <HAL_TIM_IC_CaptureCallback>
 8006eb0:	e005      	b.n	8006ebe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f8c4 	bl	8007040 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f8d5 	bl	8007068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f003 0304 	and.w	r3, r3, #4
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d020      	beq.n	8006f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01b      	beq.n	8006f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f06f 0204 	mvn.w	r2, #4
 8006ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f8ac 	bl	8007054 <HAL_TIM_IC_CaptureCallback>
 8006efc:	e005      	b.n	8006f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f89e 	bl	8007040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f8af 	bl	8007068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f003 0308 	and.w	r3, r3, #8
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d020      	beq.n	8006f5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d01b      	beq.n	8006f5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f06f 0208 	mvn.w	r2, #8
 8006f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2204      	movs	r2, #4
 8006f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f886 	bl	8007054 <HAL_TIM_IC_CaptureCallback>
 8006f48:	e005      	b.n	8006f56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f878 	bl	8007040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f889 	bl	8007068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f003 0310 	and.w	r3, r3, #16
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d020      	beq.n	8006fa8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f003 0310 	and.w	r3, r3, #16
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d01b      	beq.n	8006fa8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f06f 0210 	mvn.w	r2, #16
 8006f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2208      	movs	r2, #8
 8006f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f860 	bl	8007054 <HAL_TIM_IC_CaptureCallback>
 8006f94:	e005      	b.n	8006fa2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f852 	bl	8007040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f863 	bl	8007068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00c      	beq.n	8006fcc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d007      	beq.n	8006fcc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f06f 0201 	mvn.w	r2, #1
 8006fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7fb f91c 	bl	8002204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00c      	beq.n	8006ff0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d007      	beq.n	8006ff0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f97c 	bl	80072e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00c      	beq.n	8007014 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007000:	2b00      	cmp	r3, #0
 8007002:	d007      	beq.n	8007014 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800700c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f834 	bl	800707c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00c      	beq.n	8007038 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b00      	cmp	r3, #0
 8007026:	d007      	beq.n	8007038 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f06f 0220 	mvn.w	r2, #32
 8007030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f94e 	bl	80072d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007038:	bf00      	nop
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a43      	ldr	r2, [pc, #268]	@ (80071b0 <TIM_Base_SetConfig+0x120>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d013      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ae:	d00f      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a40      	ldr	r2, [pc, #256]	@ (80071b4 <TIM_Base_SetConfig+0x124>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00b      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a3f      	ldr	r2, [pc, #252]	@ (80071b8 <TIM_Base_SetConfig+0x128>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d007      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a3e      	ldr	r2, [pc, #248]	@ (80071bc <TIM_Base_SetConfig+0x12c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d003      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a3d      	ldr	r2, [pc, #244]	@ (80071c0 <TIM_Base_SetConfig+0x130>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d108      	bne.n	80070e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a32      	ldr	r2, [pc, #200]	@ (80071b0 <TIM_Base_SetConfig+0x120>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d02b      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f0:	d027      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a2f      	ldr	r2, [pc, #188]	@ (80071b4 <TIM_Base_SetConfig+0x124>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d023      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a2e      	ldr	r2, [pc, #184]	@ (80071b8 <TIM_Base_SetConfig+0x128>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d01f      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a2d      	ldr	r2, [pc, #180]	@ (80071bc <TIM_Base_SetConfig+0x12c>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d01b      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a2c      	ldr	r2, [pc, #176]	@ (80071c0 <TIM_Base_SetConfig+0x130>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d017      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a2b      	ldr	r2, [pc, #172]	@ (80071c4 <TIM_Base_SetConfig+0x134>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d013      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a2a      	ldr	r2, [pc, #168]	@ (80071c8 <TIM_Base_SetConfig+0x138>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d00f      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a29      	ldr	r2, [pc, #164]	@ (80071cc <TIM_Base_SetConfig+0x13c>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d00b      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a28      	ldr	r2, [pc, #160]	@ (80071d0 <TIM_Base_SetConfig+0x140>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d007      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a27      	ldr	r2, [pc, #156]	@ (80071d4 <TIM_Base_SetConfig+0x144>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d003      	beq.n	8007142 <TIM_Base_SetConfig+0xb2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a26      	ldr	r2, [pc, #152]	@ (80071d8 <TIM_Base_SetConfig+0x148>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d108      	bne.n	8007154 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	4313      	orrs	r3, r2
 8007152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	4313      	orrs	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	689a      	ldr	r2, [r3, #8]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a0e      	ldr	r2, [pc, #56]	@ (80071b0 <TIM_Base_SetConfig+0x120>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d003      	beq.n	8007182 <TIM_Base_SetConfig+0xf2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a10      	ldr	r2, [pc, #64]	@ (80071c0 <TIM_Base_SetConfig+0x130>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d103      	bne.n	800718a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	691a      	ldr	r2, [r3, #16]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f043 0204 	orr.w	r2, r3, #4
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	601a      	str	r2, [r3, #0]
}
 80071a2:	bf00      	nop
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	40010000 	.word	0x40010000
 80071b4:	40000400 	.word	0x40000400
 80071b8:	40000800 	.word	0x40000800
 80071bc:	40000c00 	.word	0x40000c00
 80071c0:	40010400 	.word	0x40010400
 80071c4:	40014000 	.word	0x40014000
 80071c8:	40014400 	.word	0x40014400
 80071cc:	40014800 	.word	0x40014800
 80071d0:	40001800 	.word	0x40001800
 80071d4:	40001c00 	.word	0x40001c00
 80071d8:	40002000 	.word	0x40002000

080071dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d101      	bne.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071f0:	2302      	movs	r3, #2
 80071f2:	e05a      	b.n	80072aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800721a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	4313      	orrs	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a21      	ldr	r2, [pc, #132]	@ (80072b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d022      	beq.n	800727e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007240:	d01d      	beq.n	800727e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a1d      	ldr	r2, [pc, #116]	@ (80072bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d018      	beq.n	800727e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a1b      	ldr	r2, [pc, #108]	@ (80072c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d013      	beq.n	800727e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a1a      	ldr	r2, [pc, #104]	@ (80072c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d00e      	beq.n	800727e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a18      	ldr	r2, [pc, #96]	@ (80072c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d009      	beq.n	800727e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a17      	ldr	r2, [pc, #92]	@ (80072cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d004      	beq.n	800727e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a15      	ldr	r2, [pc, #84]	@ (80072d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d10c      	bne.n	8007298 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007284:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	4313      	orrs	r3, r2
 800728e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	40010000 	.word	0x40010000
 80072bc:	40000400 	.word	0x40000400
 80072c0:	40000800 	.word	0x40000800
 80072c4:	40000c00 	.word	0x40000c00
 80072c8:	40010400 	.word	0x40010400
 80072cc:	40014000 	.word	0x40014000
 80072d0:	40001800 	.word	0x40001800

080072d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <arm_rfft_fast_init_f32>:
 80072fc:	084b      	lsrs	r3, r1, #1
 80072fe:	2b80      	cmp	r3, #128	@ 0x80
 8007300:	b410      	push	{r4}
 8007302:	8201      	strh	r1, [r0, #16]
 8007304:	8003      	strh	r3, [r0, #0]
 8007306:	d046      	beq.n	8007396 <arm_rfft_fast_init_f32+0x9a>
 8007308:	d916      	bls.n	8007338 <arm_rfft_fast_init_f32+0x3c>
 800730a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800730e:	d03c      	beq.n	800738a <arm_rfft_fast_init_f32+0x8e>
 8007310:	d928      	bls.n	8007364 <arm_rfft_fast_init_f32+0x68>
 8007312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007316:	d01f      	beq.n	8007358 <arm_rfft_fast_init_f32+0x5c>
 8007318:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800731c:	d112      	bne.n	8007344 <arm_rfft_fast_init_f32+0x48>
 800731e:	4920      	ldr	r1, [pc, #128]	@ (80073a0 <arm_rfft_fast_init_f32+0xa4>)
 8007320:	4a20      	ldr	r2, [pc, #128]	@ (80073a4 <arm_rfft_fast_init_f32+0xa8>)
 8007322:	4b21      	ldr	r3, [pc, #132]	@ (80073a8 <arm_rfft_fast_init_f32+0xac>)
 8007324:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8007328:	8184      	strh	r4, [r0, #12]
 800732a:	6081      	str	r1, [r0, #8]
 800732c:	6042      	str	r2, [r0, #4]
 800732e:	6143      	str	r3, [r0, #20]
 8007330:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007334:	2000      	movs	r0, #0
 8007336:	4770      	bx	lr
 8007338:	2b20      	cmp	r3, #32
 800733a:	d01c      	beq.n	8007376 <arm_rfft_fast_init_f32+0x7a>
 800733c:	2b40      	cmp	r3, #64	@ 0x40
 800733e:	d006      	beq.n	800734e <arm_rfft_fast_init_f32+0x52>
 8007340:	2b10      	cmp	r3, #16
 8007342:	d01d      	beq.n	8007380 <arm_rfft_fast_init_f32+0x84>
 8007344:	f04f 30ff 	mov.w	r0, #4294967295
 8007348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	2438      	movs	r4, #56	@ 0x38
 8007350:	4916      	ldr	r1, [pc, #88]	@ (80073ac <arm_rfft_fast_init_f32+0xb0>)
 8007352:	4a17      	ldr	r2, [pc, #92]	@ (80073b0 <arm_rfft_fast_init_f32+0xb4>)
 8007354:	4b17      	ldr	r3, [pc, #92]	@ (80073b4 <arm_rfft_fast_init_f32+0xb8>)
 8007356:	e7e7      	b.n	8007328 <arm_rfft_fast_init_f32+0x2c>
 8007358:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800735c:	4916      	ldr	r1, [pc, #88]	@ (80073b8 <arm_rfft_fast_init_f32+0xbc>)
 800735e:	4a17      	ldr	r2, [pc, #92]	@ (80073bc <arm_rfft_fast_init_f32+0xc0>)
 8007360:	4b17      	ldr	r3, [pc, #92]	@ (80073c0 <arm_rfft_fast_init_f32+0xc4>)
 8007362:	e7e1      	b.n	8007328 <arm_rfft_fast_init_f32+0x2c>
 8007364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007368:	d1ec      	bne.n	8007344 <arm_rfft_fast_init_f32+0x48>
 800736a:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800736e:	4915      	ldr	r1, [pc, #84]	@ (80073c4 <arm_rfft_fast_init_f32+0xc8>)
 8007370:	4a15      	ldr	r2, [pc, #84]	@ (80073c8 <arm_rfft_fast_init_f32+0xcc>)
 8007372:	4b16      	ldr	r3, [pc, #88]	@ (80073cc <arm_rfft_fast_init_f32+0xd0>)
 8007374:	e7d8      	b.n	8007328 <arm_rfft_fast_init_f32+0x2c>
 8007376:	2430      	movs	r4, #48	@ 0x30
 8007378:	4915      	ldr	r1, [pc, #84]	@ (80073d0 <arm_rfft_fast_init_f32+0xd4>)
 800737a:	4a16      	ldr	r2, [pc, #88]	@ (80073d4 <arm_rfft_fast_init_f32+0xd8>)
 800737c:	4b16      	ldr	r3, [pc, #88]	@ (80073d8 <arm_rfft_fast_init_f32+0xdc>)
 800737e:	e7d3      	b.n	8007328 <arm_rfft_fast_init_f32+0x2c>
 8007380:	2414      	movs	r4, #20
 8007382:	4916      	ldr	r1, [pc, #88]	@ (80073dc <arm_rfft_fast_init_f32+0xe0>)
 8007384:	4a16      	ldr	r2, [pc, #88]	@ (80073e0 <arm_rfft_fast_init_f32+0xe4>)
 8007386:	4b17      	ldr	r3, [pc, #92]	@ (80073e4 <arm_rfft_fast_init_f32+0xe8>)
 8007388:	e7ce      	b.n	8007328 <arm_rfft_fast_init_f32+0x2c>
 800738a:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800738e:	4916      	ldr	r1, [pc, #88]	@ (80073e8 <arm_rfft_fast_init_f32+0xec>)
 8007390:	4a16      	ldr	r2, [pc, #88]	@ (80073ec <arm_rfft_fast_init_f32+0xf0>)
 8007392:	4b17      	ldr	r3, [pc, #92]	@ (80073f0 <arm_rfft_fast_init_f32+0xf4>)
 8007394:	e7c8      	b.n	8007328 <arm_rfft_fast_init_f32+0x2c>
 8007396:	24d0      	movs	r4, #208	@ 0xd0
 8007398:	4916      	ldr	r1, [pc, #88]	@ (80073f4 <arm_rfft_fast_init_f32+0xf8>)
 800739a:	4a17      	ldr	r2, [pc, #92]	@ (80073f8 <arm_rfft_fast_init_f32+0xfc>)
 800739c:	4b17      	ldr	r3, [pc, #92]	@ (80073fc <arm_rfft_fast_init_f32+0x100>)
 800739e:	e7c3      	b.n	8007328 <arm_rfft_fast_init_f32+0x2c>
 80073a0:	0801ab78 	.word	0x0801ab78
 80073a4:	0800b56c 	.word	0x0800b56c
 80073a8:	080116dc 	.word	0x080116dc
 80073ac:	0800f66c 	.word	0x0800f66c
 80073b0:	0801c938 	.word	0x0801c938
 80073b4:	0801ee28 	.word	0x0801ee28
 80073b8:	0801805c 	.word	0x0801805c
 80073bc:	08015f5c 	.word	0x08015f5c
 80073c0:	0800f6dc 	.word	0x0800f6dc
 80073c4:	0801eab8 	.word	0x0801eab8
 80073c8:	080156dc 	.word	0x080156dc
 80073cc:	0801cb38 	.word	0x0801cb38
 80073d0:	08018f14 	.word	0x08018f14
 80073d4:	08017f5c 	.word	0x08017f5c
 80073d8:	0800f56c 	.word	0x0800f56c
 80073dc:	08018e6c 	.word	0x08018e6c
 80073e0:	08015edc 	.word	0x08015edc
 80073e4:	08018e94 	.word	0x08018e94
 80073e8:	0801d338 	.word	0x0801d338
 80073ec:	08019b78 	.word	0x08019b78
 80073f0:	0801d6b8 	.word	0x0801d6b8
 80073f4:	0801f028 	.word	0x0801f028
 80073f8:	08019778 	.word	0x08019778
 80073fc:	0801e6b8 	.word	0x0801e6b8

08007400 <arm_rfft_fast_f32>:
 8007400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007404:	8a06      	ldrh	r6, [r0, #16]
 8007406:	0876      	lsrs	r6, r6, #1
 8007408:	4607      	mov	r7, r0
 800740a:	4615      	mov	r5, r2
 800740c:	8006      	strh	r6, [r0, #0]
 800740e:	460c      	mov	r4, r1
 8007410:	2b00      	cmp	r3, #0
 8007412:	d15c      	bne.n	80074ce <arm_rfft_fast_f32+0xce>
 8007414:	461a      	mov	r2, r3
 8007416:	2301      	movs	r3, #1
 8007418:	f000 fbe4 	bl	8007be4 <arm_cfft_f32>
 800741c:	edd4 7a00 	vldr	s15, [r4]
 8007420:	ed94 7a01 	vldr	s14, [r4, #4]
 8007424:	883e      	ldrh	r6, [r7, #0]
 8007426:	6978      	ldr	r0, [r7, #20]
 8007428:	ee37 7a07 	vadd.f32	s14, s14, s14
 800742c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007430:	eeb6 3a00 	vmov.f32	s6, #96	@ 0x3f000000  0.5
 8007434:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007438:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800743c:	3e01      	subs	r6, #1
 800743e:	ee26 7a83 	vmul.f32	s14, s13, s6
 8007442:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007446:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800744a:	ed85 7a00 	vstr	s14, [r5]
 800744e:	edc5 7a01 	vstr	s15, [r5, #4]
 8007452:	3010      	adds	r0, #16
 8007454:	f105 0210 	add.w	r2, r5, #16
 8007458:	3b08      	subs	r3, #8
 800745a:	f104 0110 	add.w	r1, r4, #16
 800745e:	ed93 7a02 	vldr	s14, [r3, #8]
 8007462:	ed51 6a02 	vldr	s13, [r1, #-8]
 8007466:	ed10 6a02 	vldr	s12, [r0, #-8]
 800746a:	edd3 3a03 	vldr	s7, [r3, #12]
 800746e:	ed11 5a01 	vldr	s10, [r1, #-4]
 8007472:	ed50 5a01 	vldr	s11, [r0, #-4]
 8007476:	ee77 7a66 	vsub.f32	s15, s14, s13
 800747a:	ee77 4a26 	vadd.f32	s9, s14, s13
 800747e:	ee33 4a85 	vadd.f32	s8, s7, s10
 8007482:	ee66 6a27 	vmul.f32	s13, s12, s15
 8007486:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800748a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800748e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007492:	ee77 7a05 	vadd.f32	s15, s14, s10
 8007496:	ee26 6a04 	vmul.f32	s12, s12, s8
 800749a:	ee65 5a84 	vmul.f32	s11, s11, s8
 800749e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80074a2:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80074a6:	ee67 7a83 	vmul.f32	s15, s15, s6
 80074aa:	ee27 7a03 	vmul.f32	s14, s14, s6
 80074ae:	3e01      	subs	r6, #1
 80074b0:	ed02 7a02 	vstr	s14, [r2, #-8]
 80074b4:	ed42 7a01 	vstr	s15, [r2, #-4]
 80074b8:	f1a3 0308 	sub.w	r3, r3, #8
 80074bc:	f101 0108 	add.w	r1, r1, #8
 80074c0:	f100 0008 	add.w	r0, r0, #8
 80074c4:	f102 0208 	add.w	r2, r2, #8
 80074c8:	d1c9      	bne.n	800745e <arm_rfft_fast_f32+0x5e>
 80074ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074ce:	edd1 7a00 	vldr	s15, [r1]
 80074d2:	edd1 6a01 	vldr	s13, [r1, #4]
 80074d6:	6941      	ldr	r1, [r0, #20]
 80074d8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80074dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80074e0:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 80074e4:	ee27 7a23 	vmul.f32	s14, s14, s7
 80074e8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80074ec:	3e01      	subs	r6, #1
 80074ee:	ed82 7a00 	vstr	s14, [r2]
 80074f2:	edc2 7a01 	vstr	s15, [r2, #4]
 80074f6:	00f0      	lsls	r0, r6, #3
 80074f8:	b3ee      	cbz	r6, 8007576 <arm_rfft_fast_f32+0x176>
 80074fa:	3808      	subs	r0, #8
 80074fc:	f101 0e10 	add.w	lr, r1, #16
 8007500:	4420      	add	r0, r4
 8007502:	f104 0110 	add.w	r1, r4, #16
 8007506:	f102 0c10 	add.w	ip, r2, #16
 800750a:	ed90 7a02 	vldr	s14, [r0, #8]
 800750e:	ed51 6a02 	vldr	s13, [r1, #-8]
 8007512:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8007516:	ed90 4a03 	vldr	s8, [r0, #12]
 800751a:	ed11 5a01 	vldr	s10, [r1, #-4]
 800751e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8007522:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8007526:	ee74 4a05 	vadd.f32	s9, s8, s10
 800752a:	ee26 3a27 	vmul.f32	s6, s12, s15
 800752e:	ee77 6a26 	vadd.f32	s13, s14, s13
 8007532:	ee35 5a44 	vsub.f32	s10, s10, s8
 8007536:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800753a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800753e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8007542:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007546:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800754a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800754e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8007552:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8007556:	ee27 7a23 	vmul.f32	s14, s14, s7
 800755a:	3e01      	subs	r6, #1
 800755c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8007560:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8007564:	f1a0 0008 	sub.w	r0, r0, #8
 8007568:	f101 0108 	add.w	r1, r1, #8
 800756c:	f10e 0e08 	add.w	lr, lr, #8
 8007570:	f10c 0c08 	add.w	ip, ip, #8
 8007574:	d1c9      	bne.n	800750a <arm_rfft_fast_f32+0x10a>
 8007576:	461a      	mov	r2, r3
 8007578:	4629      	mov	r1, r5
 800757a:	4638      	mov	r0, r7
 800757c:	2301      	movs	r3, #1
 800757e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007582:	f000 bb2f 	b.w	8007be4 <arm_cfft_f32>
 8007586:	bf00      	nop

08007588 <arm_cfft_radix8by2_f32>:
 8007588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758c:	ed2d 8b08 	vpush	{d8-d11}
 8007590:	4607      	mov	r7, r0
 8007592:	4608      	mov	r0, r1
 8007594:	f8b7 e000 	ldrh.w	lr, [r7]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800759e:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 80075a2:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80075a6:	f000 80b0 	beq.w	800770a <arm_cfft_radix8by2_f32+0x182>
 80075aa:	008b      	lsls	r3, r1, #2
 80075ac:	3310      	adds	r3, #16
 80075ae:	18c6      	adds	r6, r0, r3
 80075b0:	3210      	adds	r2, #16
 80075b2:	4443      	add	r3, r8
 80075b4:	f100 0510 	add.w	r5, r0, #16
 80075b8:	f108 0410 	add.w	r4, r8, #16
 80075bc:	ed54 1a04 	vldr	s3, [r4, #-16]
 80075c0:	ed54 6a03 	vldr	s13, [r4, #-12]
 80075c4:	ed13 4a04 	vldr	s8, [r3, #-16]
 80075c8:	ed53 3a03 	vldr	s7, [r3, #-12]
 80075cc:	ed53 5a02 	vldr	s11, [r3, #-8]
 80075d0:	ed13 5a01 	vldr	s10, [r3, #-4]
 80075d4:	ed14 0a02 	vldr	s0, [r4, #-8]
 80075d8:	ed54 7a01 	vldr	s15, [r4, #-4]
 80075dc:	ed16 2a04 	vldr	s4, [r6, #-16]
 80075e0:	ed56 2a03 	vldr	s5, [r6, #-12]
 80075e4:	ed15 6a03 	vldr	s12, [r5, #-12]
 80075e8:	ed15 7a01 	vldr	s14, [r5, #-4]
 80075ec:	ed15 3a04 	vldr	s6, [r5, #-16]
 80075f0:	ed56 0a02 	vldr	s1, [r6, #-8]
 80075f4:	ed16 1a01 	vldr	s2, [r6, #-4]
 80075f8:	ed55 4a02 	vldr	s9, [r5, #-8]
 80075fc:	ee73 ba21 	vadd.f32	s23, s6, s3
 8007600:	ee36 ba26 	vadd.f32	s22, s12, s13
 8007604:	ee37 aa27 	vadd.f32	s20, s14, s15
 8007608:	ee72 9a04 	vadd.f32	s19, s4, s8
 800760c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8007610:	ee31 8a05 	vadd.f32	s16, s2, s10
 8007614:	ee74 aa80 	vadd.f32	s21, s9, s0
 8007618:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800761c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8007620:	ed05 ba03 	vstr	s22, [r5, #-12]
 8007624:	ed45 aa02 	vstr	s21, [r5, #-8]
 8007628:	ed05 aa01 	vstr	s20, [r5, #-4]
 800762c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8007630:	ed46 9a04 	vstr	s19, [r6, #-16]
 8007634:	ed06 9a03 	vstr	s18, [r6, #-12]
 8007638:	ed46 8a02 	vstr	s17, [r6, #-8]
 800763c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007640:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8007644:	ed12 6a03 	vldr	s12, [r2, #-12]
 8007648:	ed52 2a04 	vldr	s5, [r2, #-16]
 800764c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007650:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007654:	ee26 8a86 	vmul.f32	s16, s13, s12
 8007658:	ee24 2a06 	vmul.f32	s4, s8, s12
 800765c:	ee63 1a22 	vmul.f32	s3, s6, s5
 8007660:	ee24 4a22 	vmul.f32	s8, s8, s5
 8007664:	ee23 3a06 	vmul.f32	s6, s6, s12
 8007668:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800766c:	ee23 6a86 	vmul.f32	s12, s7, s12
 8007670:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8007674:	ee36 6a04 	vadd.f32	s12, s12, s8
 8007678:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800767c:	ee72 3a63 	vsub.f32	s7, s4, s7
 8007680:	ee71 2a88 	vadd.f32	s5, s3, s16
 8007684:	ed44 6a03 	vstr	s13, [r4, #-12]
 8007688:	ed44 2a04 	vstr	s5, [r4, #-16]
 800768c:	ed43 3a04 	vstr	s7, [r3, #-16]
 8007690:	ed03 6a03 	vstr	s12, [r3, #-12]
 8007694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007698:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800769c:	ed12 7a01 	vldr	s14, [r2, #-4]
 80076a0:	ed52 5a02 	vldr	s11, [r2, #-8]
 80076a4:	ee35 6a41 	vsub.f32	s12, s10, s2
 80076a8:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80076ac:	ee67 3a87 	vmul.f32	s7, s15, s14
 80076b0:	ee26 5a87 	vmul.f32	s10, s13, s14
 80076b4:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80076b8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80076bc:	ee64 4a87 	vmul.f32	s9, s9, s14
 80076c0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80076c4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80076c8:	ee26 6a25 	vmul.f32	s12, s12, s11
 80076cc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80076d0:	ee74 5a23 	vadd.f32	s11, s8, s7
 80076d4:	ee35 6a46 	vsub.f32	s12, s10, s12
 80076d8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80076dc:	f1be 0e01 	subs.w	lr, lr, #1
 80076e0:	ed44 5a02 	vstr	s11, [r4, #-8]
 80076e4:	f105 0510 	add.w	r5, r5, #16
 80076e8:	ed44 7a01 	vstr	s15, [r4, #-4]
 80076ec:	f106 0610 	add.w	r6, r6, #16
 80076f0:	ed03 6a02 	vstr	s12, [r3, #-8]
 80076f4:	ed03 7a01 	vstr	s14, [r3, #-4]
 80076f8:	f102 0210 	add.w	r2, r2, #16
 80076fc:	f104 0410 	add.w	r4, r4, #16
 8007700:	f103 0310 	add.w	r3, r3, #16
 8007704:	f47f af5a 	bne.w	80075bc <arm_cfft_radix8by2_f32+0x34>
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	b28c      	uxth	r4, r1
 800770c:	4621      	mov	r1, r4
 800770e:	2302      	movs	r3, #2
 8007710:	f000 fb22 	bl	8007d58 <arm_radix8_butterfly_f32>
 8007714:	ecbd 8b08 	vpop	{d8-d11}
 8007718:	4621      	mov	r1, r4
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	4640      	mov	r0, r8
 800771e:	2302      	movs	r3, #2
 8007720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007724:	f000 bb18 	b.w	8007d58 <arm_radix8_butterfly_f32>

08007728 <arm_cfft_radix8by4_f32>:
 8007728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772c:	ed2d 8b0a 	vpush	{d8-d12}
 8007730:	8802      	ldrh	r2, [r0, #0]
 8007732:	ed91 6a00 	vldr	s12, [r1]
 8007736:	b08f      	sub	sp, #60	@ 0x3c
 8007738:	460f      	mov	r7, r1
 800773a:	0852      	lsrs	r2, r2, #1
 800773c:	6841      	ldr	r1, [r0, #4]
 800773e:	900c      	str	r0, [sp, #48]	@ 0x30
 8007740:	0093      	lsls	r3, r2, #2
 8007742:	4638      	mov	r0, r7
 8007744:	4418      	add	r0, r3
 8007746:	4606      	mov	r6, r0
 8007748:	9009      	str	r0, [sp, #36]	@ 0x24
 800774a:	4418      	add	r0, r3
 800774c:	edd0 6a00 	vldr	s13, [r0]
 8007750:	ed96 4a00 	vldr	s8, [r6]
 8007754:	edd6 2a01 	vldr	s5, [r6, #4]
 8007758:	edd0 7a01 	vldr	s15, [r0, #4]
 800775c:	900a      	str	r0, [sp, #40]	@ 0x28
 800775e:	ee76 5a26 	vadd.f32	s11, s12, s13
 8007762:	4604      	mov	r4, r0
 8007764:	4625      	mov	r5, r4
 8007766:	441c      	add	r4, r3
 8007768:	edd4 4a00 	vldr	s9, [r4]
 800776c:	ed97 7a01 	vldr	s14, [r7, #4]
 8007770:	ed94 3a01 	vldr	s6, [r4, #4]
 8007774:	9401      	str	r4, [sp, #4]
 8007776:	ee35 5a84 	vadd.f32	s10, s11, s8
 800777a:	4630      	mov	r0, r6
 800777c:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007780:	463e      	mov	r6, r7
 8007782:	ee15 ea10 	vmov	lr, s10
 8007786:	ee76 6a66 	vsub.f32	s13, s12, s13
 800778a:	f846 eb08 	str.w	lr, [r6], #8
 800778e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007792:	ed90 5a01 	vldr	s10, [r0, #4]
 8007796:	9605      	str	r6, [sp, #20]
 8007798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800779c:	9e01      	ldr	r6, [sp, #4]
 800779e:	9707      	str	r7, [sp, #28]
 80077a0:	ee76 3aa2 	vadd.f32	s7, s13, s5
 80077a4:	ed96 2a01 	vldr	s4, [r6, #4]
 80077a8:	ee36 7a05 	vadd.f32	s14, s12, s10
 80077ac:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80077b0:	ee37 5ac4 	vsub.f32	s10, s15, s8
 80077b4:	ee77 7a84 	vadd.f32	s15, s15, s8
 80077b8:	ee33 4ac3 	vsub.f32	s8, s7, s6
 80077bc:	4604      	mov	r4, r0
 80077be:	46a3      	mov	fp, r4
 80077c0:	ee37 7a02 	vadd.f32	s14, s14, s4
 80077c4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80077c8:	ee14 8a10 	vmov	r8, s8
 80077cc:	46a4      	mov	ip, r4
 80077ce:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80077d2:	ed87 7a01 	vstr	s14, [r7, #4]
 80077d6:	f84b 8b08 	str.w	r8, [fp], #8
 80077da:	f1ac 0704 	sub.w	r7, ip, #4
 80077de:	ed8c 5a01 	vstr	s10, [ip, #4]
 80077e2:	f101 0c08 	add.w	ip, r1, #8
 80077e6:	462c      	mov	r4, r5
 80077e8:	f8cd c010 	str.w	ip, [sp, #16]
 80077ec:	ee15 ca90 	vmov	ip, s11
 80077f0:	ee36 6a62 	vsub.f32	s12, s12, s5
 80077f4:	f844 cb08 	str.w	ip, [r4], #8
 80077f8:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80077fc:	ee36 6a43 	vsub.f32	s12, s12, s6
 8007800:	9406      	str	r4, [sp, #24]
 8007802:	ee76 6a83 	vadd.f32	s13, s13, s6
 8007806:	f101 0410 	add.w	r4, r1, #16
 800780a:	0852      	lsrs	r2, r2, #1
 800780c:	9402      	str	r4, [sp, #8]
 800780e:	ed85 6a01 	vstr	s12, [r5, #4]
 8007812:	462c      	mov	r4, r5
 8007814:	f101 0518 	add.w	r5, r1, #24
 8007818:	920b      	str	r2, [sp, #44]	@ 0x2c
 800781a:	46b2      	mov	sl, r6
 800781c:	9503      	str	r5, [sp, #12]
 800781e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007822:	3a02      	subs	r2, #2
 8007824:	ee16 5a90 	vmov	r5, s13
 8007828:	46b6      	mov	lr, r6
 800782a:	4630      	mov	r0, r6
 800782c:	0852      	lsrs	r2, r2, #1
 800782e:	f84a 5b08 	str.w	r5, [sl], #8
 8007832:	f1a0 0604 	sub.w	r6, r0, #4
 8007836:	edce 7a01 	vstr	s15, [lr, #4]
 800783a:	9208      	str	r2, [sp, #32]
 800783c:	f000 8130 	beq.w	8007aa0 <arm_cfft_radix8by4_f32+0x378>
 8007840:	4691      	mov	r9, r2
 8007842:	9a07      	ldr	r2, [sp, #28]
 8007844:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007848:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 800784c:	3b08      	subs	r3, #8
 800784e:	f102 0510 	add.w	r5, r2, #16
 8007852:	f101 0c20 	add.w	ip, r1, #32
 8007856:	f1a4 020c 	sub.w	r2, r4, #12
 800785a:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800785e:	4433      	add	r3, r6
 8007860:	3410      	adds	r4, #16
 8007862:	4650      	mov	r0, sl
 8007864:	4659      	mov	r1, fp
 8007866:	ed55 3a02 	vldr	s7, [r5, #-8]
 800786a:	ed14 5a02 	vldr	s10, [r4, #-8]
 800786e:	ed91 7a00 	vldr	s14, [r1]
 8007872:	edd0 7a00 	vldr	s15, [r0]
 8007876:	ed54 5a01 	vldr	s11, [r4, #-4]
 800787a:	ed15 4a01 	vldr	s8, [r5, #-4]
 800787e:	edd0 6a01 	vldr	s13, [r0, #4]
 8007882:	ed91 6a01 	vldr	s12, [r1, #4]
 8007886:	ee33 8a85 	vadd.f32	s16, s7, s10
 800788a:	ee34 0a25 	vadd.f32	s0, s8, s11
 800788e:	ee78 4a07 	vadd.f32	s9, s16, s14
 8007892:	ee74 5a65 	vsub.f32	s11, s8, s11
 8007896:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800789a:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800789e:	ed45 4a02 	vstr	s9, [r5, #-8]
 80078a2:	edd1 4a01 	vldr	s9, [r1, #4]
 80078a6:	ed90 4a01 	vldr	s8, [r0, #4]
 80078aa:	ee70 4a24 	vadd.f32	s9, s0, s9
 80078ae:	ee75 aa06 	vadd.f32	s21, s10, s12
 80078b2:	ee74 4a84 	vadd.f32	s9, s9, s8
 80078b6:	ee35 aac7 	vsub.f32	s20, s11, s14
 80078ba:	ed45 4a01 	vstr	s9, [r5, #-4]
 80078be:	edd6 1a00 	vldr	s3, [r6]
 80078c2:	edd7 0a00 	vldr	s1, [r7]
 80078c6:	ed92 4a02 	vldr	s8, [r2, #8]
 80078ca:	edd3 3a02 	vldr	s7, [r3, #8]
 80078ce:	ed93 2a01 	vldr	s4, [r3, #4]
 80078d2:	ed16 1a01 	vldr	s2, [r6, #-4]
 80078d6:	edd2 2a01 	vldr	s5, [r2, #4]
 80078da:	ed57 9a01 	vldr	s19, [r7, #-4]
 80078de:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80078e2:	ee39 3a81 	vadd.f32	s6, s19, s2
 80078e6:	ee74 8a84 	vadd.f32	s17, s9, s8
 80078ea:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80078ee:	ee78 8aa3 	vadd.f32	s17, s17, s7
 80078f2:	ee7a aae6 	vsub.f32	s21, s21, s13
 80078f6:	ee18 aa90 	vmov	sl, s17
 80078fa:	f847 a908 	str.w	sl, [r7], #-8
 80078fe:	edd2 8a01 	vldr	s17, [r2, #4]
 8007902:	ed93 9a01 	vldr	s18, [r3, #4]
 8007906:	ee73 8a28 	vadd.f32	s17, s6, s17
 800790a:	ee3a aa27 	vadd.f32	s20, s20, s15
 800790e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8007912:	ee74 0a63 	vsub.f32	s1, s8, s7
 8007916:	edc7 8a01 	vstr	s17, [r7, #4]
 800791a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800791e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8007922:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8007926:	ee6a ba28 	vmul.f32	s23, s20, s17
 800792a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800792e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8007932:	ee31 9a20 	vadd.f32	s18, s2, s1
 8007936:	ee79 9a82 	vadd.f32	s19, s19, s4
 800793a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800793e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8007942:	ee69 baa8 	vmul.f32	s23, s19, s17
 8007946:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800794a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800794e:	ee69 8a28 	vmul.f32	s17, s18, s17
 8007952:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8007956:	ee1c aa10 	vmov	sl, s24
 800795a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800795e:	f841 ab08 	str.w	sl, [r1], #8
 8007962:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8007966:	ee3b bacb 	vsub.f32	s22, s23, s22
 800796a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800796e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8007972:	ed01 aa01 	vstr	s20, [r1, #-4]
 8007976:	edc2 8a01 	vstr	s17, [r2, #4]
 800797a:	ed82 ba02 	vstr	s22, [r2, #8]
 800797e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8007982:	ee74 3a63 	vsub.f32	s7, s8, s7
 8007986:	ee38 8a47 	vsub.f32	s16, s16, s14
 800798a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800798e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8007992:	ee33 3a42 	vsub.f32	s6, s6, s4
 8007996:	ee38 8a67 	vsub.f32	s16, s16, s15
 800799a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800799e:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80079a2:	ee63 8a04 	vmul.f32	s17, s6, s8
 80079a6:	ee28 aa24 	vmul.f32	s20, s16, s9
 80079aa:	ee60 9a04 	vmul.f32	s19, s0, s8
 80079ae:	ee28 8a04 	vmul.f32	s16, s16, s8
 80079b2:	ee20 0a24 	vmul.f32	s0, s0, s9
 80079b6:	ee63 3a84 	vmul.f32	s7, s7, s8
 80079ba:	ee39 4a68 	vsub.f32	s8, s18, s17
 80079be:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80079c2:	ee14 aa10 	vmov	sl, s8
 80079c6:	ee30 0a48 	vsub.f32	s0, s0, s16
 80079ca:	ee63 4a24 	vmul.f32	s9, s6, s9
 80079ce:	ed44 9a02 	vstr	s19, [r4, #-8]
 80079d2:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80079d6:	ed04 0a01 	vstr	s0, [r4, #-4]
 80079da:	f846 a908 	str.w	sl, [r6], #-8
 80079de:	ee35 6a46 	vsub.f32	s12, s10, s12
 80079e2:	ee35 7a87 	vadd.f32	s14, s11, s14
 80079e6:	edc6 3a01 	vstr	s7, [r6, #4]
 80079ea:	ee76 6a26 	vadd.f32	s13, s12, s13
 80079ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079f2:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 80079f6:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 80079fa:	ee67 5a86 	vmul.f32	s11, s15, s12
 80079fe:	ee26 5a87 	vmul.f32	s10, s13, s14
 8007a02:	ee72 2a62 	vsub.f32	s5, s4, s5
 8007a06:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8007a0a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8007a0e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8007a12:	ee62 0a86 	vmul.f32	s1, s5, s12
 8007a16:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007a1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a1e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8007a22:	ee62 2a87 	vmul.f32	s5, s5, s14
 8007a26:	ee21 1a07 	vmul.f32	s2, s2, s14
 8007a2a:	ee15 aa90 	vmov	sl, s11
 8007a2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a32:	f840 ab08 	str.w	sl, [r0], #8
 8007a36:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8007a3a:	ee76 2a22 	vadd.f32	s5, s12, s5
 8007a3e:	f1b9 0901 	subs.w	r9, r9, #1
 8007a42:	ed40 7a01 	vstr	s15, [r0, #-4]
 8007a46:	f105 0508 	add.w	r5, r5, #8
 8007a4a:	ed83 1a02 	vstr	s2, [r3, #8]
 8007a4e:	edc3 2a01 	vstr	s5, [r3, #4]
 8007a52:	f108 0808 	add.w	r8, r8, #8
 8007a56:	f1a2 0208 	sub.w	r2, r2, #8
 8007a5a:	f10c 0c10 	add.w	ip, ip, #16
 8007a5e:	f104 0408 	add.w	r4, r4, #8
 8007a62:	f10e 0e18 	add.w	lr, lr, #24
 8007a66:	f1a3 0308 	sub.w	r3, r3, #8
 8007a6a:	f47f aefc 	bne.w	8007866 <arm_cfft_radix8by4_f32+0x13e>
 8007a6e:	9908      	ldr	r1, [sp, #32]
 8007a70:	9802      	ldr	r0, [sp, #8]
 8007a72:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8007a76:	00cb      	lsls	r3, r1, #3
 8007a78:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007a7c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007a80:	9102      	str	r1, [sp, #8]
 8007a82:	9905      	ldr	r1, [sp, #20]
 8007a84:	4419      	add	r1, r3
 8007a86:	9105      	str	r1, [sp, #20]
 8007a88:	9904      	ldr	r1, [sp, #16]
 8007a8a:	4419      	add	r1, r3
 8007a8c:	9104      	str	r1, [sp, #16]
 8007a8e:	9906      	ldr	r1, [sp, #24]
 8007a90:	449b      	add	fp, r3
 8007a92:	4419      	add	r1, r3
 8007a94:	449a      	add	sl, r3
 8007a96:	9b03      	ldr	r3, [sp, #12]
 8007a98:	9106      	str	r1, [sp, #24]
 8007a9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a9e:	9303      	str	r3, [sp, #12]
 8007aa0:	9a05      	ldr	r2, [sp, #20]
 8007aa2:	9806      	ldr	r0, [sp, #24]
 8007aa4:	ed92 4a00 	vldr	s8, [r2]
 8007aa8:	ed90 7a00 	vldr	s14, [r0]
 8007aac:	ed9b 3a00 	vldr	s6, [fp]
 8007ab0:	edda 3a00 	vldr	s7, [sl]
 8007ab4:	edd2 4a01 	vldr	s9, [r2, #4]
 8007ab8:	edd0 6a01 	vldr	s13, [r0, #4]
 8007abc:	ed9a 2a01 	vldr	s4, [sl, #4]
 8007ac0:	eddb 7a01 	vldr	s15, [fp, #4]
 8007ac4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8007ac8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007aca:	ee34 6a07 	vadd.f32	s12, s8, s14
 8007ace:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8007ad2:	ee36 5a03 	vadd.f32	s10, s12, s6
 8007ad6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8007ada:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007ade:	ee34 7a47 	vsub.f32	s14, s8, s14
 8007ae2:	ed82 5a00 	vstr	s10, [r2]
 8007ae6:	ed9b 5a01 	vldr	s10, [fp, #4]
 8007aea:	edda 4a01 	vldr	s9, [sl, #4]
 8007aee:	ee35 5a85 	vadd.f32	s10, s11, s10
 8007af2:	ee37 4a27 	vadd.f32	s8, s14, s15
 8007af6:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007afa:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8007afe:	ed82 5a01 	vstr	s10, [r2, #4]
 8007b02:	9a04      	ldr	r2, [sp, #16]
 8007b04:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8007b08:	edd2 1a00 	vldr	s3, [r2]
 8007b0c:	edd2 2a01 	vldr	s5, [r2, #4]
 8007b10:	9a02      	ldr	r2, [sp, #8]
 8007b12:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007b16:	ee36 6a43 	vsub.f32	s12, s12, s6
 8007b1a:	ee64 4a21 	vmul.f32	s9, s8, s3
 8007b1e:	ee24 4a22 	vmul.f32	s8, s8, s5
 8007b22:	ee65 2a22 	vmul.f32	s5, s10, s5
 8007b26:	ee25 5a21 	vmul.f32	s10, s10, s3
 8007b2a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8007b2e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8007b32:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8007b36:	edcb 2a00 	vstr	s5, [fp]
 8007b3a:	ed8b 5a01 	vstr	s10, [fp, #4]
 8007b3e:	ed92 4a01 	vldr	s8, [r2, #4]
 8007b42:	ed92 5a00 	vldr	s10, [r2]
 8007b46:	9a03      	ldr	r2, [sp, #12]
 8007b48:	ee36 6a63 	vsub.f32	s12, s12, s7
 8007b4c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8007b50:	ee66 4a05 	vmul.f32	s9, s12, s10
 8007b54:	ee25 5a85 	vmul.f32	s10, s11, s10
 8007b58:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007b5c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007b60:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007b64:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8007b68:	ee76 6a83 	vadd.f32	s13, s13, s6
 8007b6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007b70:	ed80 6a01 	vstr	s12, [r0, #4]
 8007b74:	edc0 5a00 	vstr	s11, [r0]
 8007b78:	edd2 5a01 	vldr	s11, [r2, #4]
 8007b7c:	9807      	ldr	r0, [sp, #28]
 8007b7e:	ee77 7a02 	vadd.f32	s15, s14, s4
 8007b82:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8007b86:	edd2 6a00 	vldr	s13, [r2]
 8007b8a:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8007b8e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8007b92:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007b96:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007b9a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007b9e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8007ba2:	edca 7a01 	vstr	s15, [sl, #4]
 8007ba6:	ed8a 7a00 	vstr	s14, [sl]
 8007baa:	6872      	ldr	r2, [r6, #4]
 8007bac:	4621      	mov	r1, r4
 8007bae:	2304      	movs	r3, #4
 8007bb0:	f000 f8d2 	bl	8007d58 <arm_radix8_butterfly_f32>
 8007bb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bb6:	6872      	ldr	r2, [r6, #4]
 8007bb8:	4621      	mov	r1, r4
 8007bba:	2304      	movs	r3, #4
 8007bbc:	f000 f8cc 	bl	8007d58 <arm_radix8_butterfly_f32>
 8007bc0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007bc2:	6872      	ldr	r2, [r6, #4]
 8007bc4:	4621      	mov	r1, r4
 8007bc6:	2304      	movs	r3, #4
 8007bc8:	f000 f8c6 	bl	8007d58 <arm_radix8_butterfly_f32>
 8007bcc:	6872      	ldr	r2, [r6, #4]
 8007bce:	9801      	ldr	r0, [sp, #4]
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	2304      	movs	r3, #4
 8007bd4:	b00f      	add	sp, #60	@ 0x3c
 8007bd6:	ecbd 8b0a 	vpop	{d8-d12}
 8007bda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bde:	f000 b8bb 	b.w	8007d58 <arm_radix8_butterfly_f32>
 8007be2:	bf00      	nop

08007be4 <arm_cfft_f32>:
 8007be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be8:	2a01      	cmp	r2, #1
 8007bea:	4606      	mov	r6, r0
 8007bec:	4617      	mov	r7, r2
 8007bee:	460c      	mov	r4, r1
 8007bf0:	4698      	mov	r8, r3
 8007bf2:	8805      	ldrh	r5, [r0, #0]
 8007bf4:	d054      	beq.n	8007ca0 <arm_cfft_f32+0xbc>
 8007bf6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8007bfa:	d04c      	beq.n	8007c96 <arm_cfft_f32+0xb2>
 8007bfc:	d916      	bls.n	8007c2c <arm_cfft_f32+0x48>
 8007bfe:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8007c02:	d01a      	beq.n	8007c3a <arm_cfft_f32+0x56>
 8007c04:	d95c      	bls.n	8007cc0 <arm_cfft_f32+0xdc>
 8007c06:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8007c0a:	d044      	beq.n	8007c96 <arm_cfft_f32+0xb2>
 8007c0c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8007c10:	d105      	bne.n	8007c1e <arm_cfft_f32+0x3a>
 8007c12:	2301      	movs	r3, #1
 8007c14:	6872      	ldr	r2, [r6, #4]
 8007c16:	4629      	mov	r1, r5
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f000 f89d 	bl	8007d58 <arm_radix8_butterfly_f32>
 8007c1e:	f1b8 0f00 	cmp.w	r8, #0
 8007c22:	d111      	bne.n	8007c48 <arm_cfft_f32+0x64>
 8007c24:	2f01      	cmp	r7, #1
 8007c26:	d016      	beq.n	8007c56 <arm_cfft_f32+0x72>
 8007c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c2c:	2d20      	cmp	r5, #32
 8007c2e:	d032      	beq.n	8007c96 <arm_cfft_f32+0xb2>
 8007c30:	d94a      	bls.n	8007cc8 <arm_cfft_f32+0xe4>
 8007c32:	2d40      	cmp	r5, #64	@ 0x40
 8007c34:	d0ed      	beq.n	8007c12 <arm_cfft_f32+0x2e>
 8007c36:	2d80      	cmp	r5, #128	@ 0x80
 8007c38:	d1f1      	bne.n	8007c1e <arm_cfft_f32+0x3a>
 8007c3a:	4621      	mov	r1, r4
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f7ff fca3 	bl	8007588 <arm_cfft_radix8by2_f32>
 8007c42:	f1b8 0f00 	cmp.w	r8, #0
 8007c46:	d0ed      	beq.n	8007c24 <arm_cfft_f32+0x40>
 8007c48:	68b2      	ldr	r2, [r6, #8]
 8007c4a:	89b1      	ldrh	r1, [r6, #12]
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f7f8 fadf 	bl	8000210 <arm_bitreversal_32>
 8007c52:	2f01      	cmp	r7, #1
 8007c54:	d1e8      	bne.n	8007c28 <arm_cfft_f32+0x44>
 8007c56:	ee07 5a90 	vmov	s15, r5
 8007c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007c66:	2d00      	cmp	r5, #0
 8007c68:	d0de      	beq.n	8007c28 <arm_cfft_f32+0x44>
 8007c6a:	f104 0108 	add.w	r1, r4, #8
 8007c6e:	2300      	movs	r3, #0
 8007c70:	3301      	adds	r3, #1
 8007c72:	429d      	cmp	r5, r3
 8007c74:	f101 0108 	add.w	r1, r1, #8
 8007c78:	ed11 7a04 	vldr	s14, [r1, #-16]
 8007c7c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8007c80:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007c84:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007c88:	ed01 7a04 	vstr	s14, [r1, #-16]
 8007c8c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007c90:	d1ee      	bne.n	8007c70 <arm_cfft_f32+0x8c>
 8007c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c96:	4621      	mov	r1, r4
 8007c98:	4630      	mov	r0, r6
 8007c9a:	f7ff fd45 	bl	8007728 <arm_cfft_radix8by4_f32>
 8007c9e:	e7be      	b.n	8007c1e <arm_cfft_f32+0x3a>
 8007ca0:	b1ad      	cbz	r5, 8007cce <arm_cfft_f32+0xea>
 8007ca2:	f101 030c 	add.w	r3, r1, #12
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	ed53 7a02 	vldr	s15, [r3, #-8]
 8007cac:	3201      	adds	r2, #1
 8007cae:	eef1 7a67 	vneg.f32	s15, s15
 8007cb2:	4295      	cmp	r5, r2
 8007cb4:	ed43 7a02 	vstr	s15, [r3, #-8]
 8007cb8:	f103 0308 	add.w	r3, r3, #8
 8007cbc:	d1f4      	bne.n	8007ca8 <arm_cfft_f32+0xc4>
 8007cbe:	e79a      	b.n	8007bf6 <arm_cfft_f32+0x12>
 8007cc0:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8007cc4:	d0a5      	beq.n	8007c12 <arm_cfft_f32+0x2e>
 8007cc6:	e7aa      	b.n	8007c1e <arm_cfft_f32+0x3a>
 8007cc8:	2d10      	cmp	r5, #16
 8007cca:	d0b6      	beq.n	8007c3a <arm_cfft_f32+0x56>
 8007ccc:	e7a7      	b.n	8007c1e <arm_cfft_f32+0x3a>
 8007cce:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8007cd2:	d894      	bhi.n	8007bfe <arm_cfft_f32+0x1a>
 8007cd4:	e7aa      	b.n	8007c2c <arm_cfft_f32+0x48>
 8007cd6:	bf00      	nop

08007cd8 <arm_cos_f32>:
 8007cd8:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8007d4c <arm_cos_f32+0x74>
 8007cdc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007ce0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8007ce4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007ce8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007cf4:	d504      	bpl.n	8007d00 <arm_cos_f32+0x28>
 8007cf6:	ee17 3a90 	vmov	r3, s15
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	ee07 3a90 	vmov	s15, r3
 8007d00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d04:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8007d50 <arm_cos_f32+0x78>
 8007d08:	4a12      	ldr	r2, [pc, #72]	@ (8007d54 <arm_cos_f32+0x7c>)
 8007d0a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007d0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d12:	ee20 0a26 	vmul.f32	s0, s0, s13
 8007d16:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007d1a:	ee17 3a90 	vmov	r3, s15
 8007d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d22:	ee07 3a90 	vmov	s15, r3
 8007d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007d2e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007d32:	edd1 6a01 	vldr	s13, [r1, #4]
 8007d36:	ed91 0a00 	vldr	s0, [r1]
 8007d3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007d3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007d42:	ee27 0a00 	vmul.f32	s0, s14, s0
 8007d46:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007d4a:	4770      	bx	lr
 8007d4c:	3e22f983 	.word	0x3e22f983
 8007d50:	44000000 	.word	0x44000000
 8007d54:	08018f74 	.word	0x08018f74

08007d58 <arm_radix8_butterfly_f32>:
 8007d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d5c:	ed2d 8b10 	vpush	{d8-d15}
 8007d60:	461c      	mov	r4, r3
 8007d62:	b09d      	sub	sp, #116	@ 0x74
 8007d64:	4603      	mov	r3, r0
 8007d66:	3304      	adds	r3, #4
 8007d68:	ed9f bac4 	vldr	s22, [pc, #784]	@ 800807c <arm_radix8_butterfly_f32+0x324>
 8007d6c:	9019      	str	r0, [sp, #100]	@ 0x64
 8007d6e:	921a      	str	r2, [sp, #104]	@ 0x68
 8007d70:	468b      	mov	fp, r1
 8007d72:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007d74:	468a      	mov	sl, r1
 8007d76:	46a1      	mov	r9, r4
 8007d78:	4607      	mov	r7, r0
 8007d7a:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8007d7e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8007d82:	eb03 0508 	add.w	r5, r3, r8
 8007d86:	195c      	adds	r4, r3, r5
 8007d88:	00de      	lsls	r6, r3, #3
 8007d8a:	191a      	adds	r2, r3, r4
 8007d8c:	9600      	str	r6, [sp, #0]
 8007d8e:	1898      	adds	r0, r3, r2
 8007d90:	4619      	mov	r1, r3
 8007d92:	9e00      	ldr	r6, [sp, #0]
 8007d94:	9311      	str	r3, [sp, #68]	@ 0x44
 8007d96:	4401      	add	r1, r0
 8007d98:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8007d9c:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8007da0:	19be      	adds	r6, r7, r6
 8007da2:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8007da6:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8007daa:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8007dae:	9f00      	ldr	r7, [sp, #0]
 8007db0:	011b      	lsls	r3, r3, #4
 8007db2:	eb06 0e07 	add.w	lr, r6, r7
 8007db6:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8007db8:	9302      	str	r3, [sp, #8]
 8007dba:	3204      	adds	r2, #4
 8007dbc:	3104      	adds	r1, #4
 8007dbe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007dc2:	f04f 0c00 	mov.w	ip, #0
 8007dc6:	edde 7a00 	vldr	s15, [lr]
 8007dca:	edd6 6a00 	vldr	s13, [r6]
 8007dce:	ed95 2a00 	vldr	s4, [r5]
 8007dd2:	ed17 aa01 	vldr	s20, [r7, #-4]
 8007dd6:	edd4 4a00 	vldr	s9, [r4]
 8007dda:	ed90 5a00 	vldr	s10, [r0]
 8007dde:	ed12 7a01 	vldr	s14, [r2, #-4]
 8007de2:	ed51 0a01 	vldr	s1, [r1, #-4]
 8007de6:	ee77 8a85 	vadd.f32	s17, s15, s10
 8007dea:	ee76 3a87 	vadd.f32	s7, s13, s14
 8007dee:	ee32 4a20 	vadd.f32	s8, s4, s1
 8007df2:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8007df6:	ee33 6a84 	vadd.f32	s12, s7, s8
 8007dfa:	ee73 5a28 	vadd.f32	s11, s6, s17
 8007dfe:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007e02:	ee75 6a86 	vadd.f32	s13, s11, s12
 8007e06:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8007e0a:	ed47 6a01 	vstr	s13, [r7, #-4]
 8007e0e:	edc4 5a00 	vstr	s11, [r4]
 8007e12:	ed92 9a00 	vldr	s18, [r2]
 8007e16:	ed95 1a01 	vldr	s2, [r5, #4]
 8007e1a:	edd6 5a01 	vldr	s11, [r6, #4]
 8007e1e:	ed91 6a00 	vldr	s12, [r1]
 8007e22:	edd7 2a00 	vldr	s5, [r7]
 8007e26:	edd4 1a01 	vldr	s3, [r4, #4]
 8007e2a:	edde 6a01 	vldr	s13, [lr, #4]
 8007e2e:	edd0 9a01 	vldr	s19, [r0, #4]
 8007e32:	ee72 0a60 	vsub.f32	s1, s4, s1
 8007e36:	ee71 aa46 	vsub.f32	s21, s2, s12
 8007e3a:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8007e3e:	ee37 0a60 	vsub.f32	s0, s14, s1
 8007e42:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8007e46:	ee37 7a20 	vadd.f32	s14, s14, s1
 8007e4a:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8007e4e:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8007e52:	ee75 5a89 	vadd.f32	s11, s11, s18
 8007e56:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8007e5a:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8007e5e:	ee31 6a06 	vadd.f32	s12, s2, s12
 8007e62:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8007e66:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8007e6a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8007e6e:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8007e72:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8007e76:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8007e7a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8007e7e:	ee33 3a68 	vsub.f32	s6, s6, s17
 8007e82:	ee36 0a88 	vadd.f32	s0, s13, s16
 8007e86:	ee75 8a86 	vadd.f32	s17, s11, s12
 8007e8a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8007e8e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8007e92:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8007e96:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8007e9a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8007e9e:	ee75 4a27 	vadd.f32	s9, s10, s15
 8007ea2:	ee71 5a49 	vsub.f32	s11, s2, s18
 8007ea6:	ee31 2a09 	vadd.f32	s4, s2, s18
 8007eaa:	ee75 7a67 	vsub.f32	s15, s10, s15
 8007eae:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8007eb2:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8007eb6:	ee73 0a06 	vadd.f32	s1, s6, s12
 8007eba:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8007ebe:	ee36 5a87 	vadd.f32	s10, s13, s14
 8007ec2:	ee32 8a28 	vadd.f32	s16, s4, s17
 8007ec6:	ee33 6a46 	vsub.f32	s12, s6, s12
 8007eca:	ee34 4a25 	vadd.f32	s8, s8, s11
 8007ece:	ee33 3a80 	vadd.f32	s6, s7, s0
 8007ed2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007ed6:	ee71 5a64 	vsub.f32	s11, s2, s9
 8007eda:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8007ede:	ee32 2a68 	vsub.f32	s4, s4, s17
 8007ee2:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8007ee6:	ee74 4a81 	vadd.f32	s9, s9, s2
 8007eea:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8007eee:	44dc      	add	ip, fp
 8007ef0:	45e2      	cmp	sl, ip
 8007ef2:	ed87 8a00 	vstr	s16, [r7]
 8007ef6:	ed84 2a01 	vstr	s4, [r4, #4]
 8007efa:	441f      	add	r7, r3
 8007efc:	edce 0a00 	vstr	s1, [lr]
 8007f00:	441c      	add	r4, r3
 8007f02:	ed80 6a00 	vstr	s12, [r0]
 8007f06:	edce 1a01 	vstr	s3, [lr, #4]
 8007f0a:	ed80 4a01 	vstr	s8, [r0, #4]
 8007f0e:	449e      	add	lr, r3
 8007f10:	ed86 3a00 	vstr	s6, [r6]
 8007f14:	4418      	add	r0, r3
 8007f16:	ed41 3a01 	vstr	s7, [r1, #-4]
 8007f1a:	ed02 5a01 	vstr	s10, [r2, #-4]
 8007f1e:	ed85 7a00 	vstr	s14, [r5]
 8007f22:	edc6 5a01 	vstr	s11, [r6, #4]
 8007f26:	edc1 4a00 	vstr	s9, [r1]
 8007f2a:	441e      	add	r6, r3
 8007f2c:	edc2 6a00 	vstr	s13, [r2]
 8007f30:	4419      	add	r1, r3
 8007f32:	edc5 7a01 	vstr	s15, [r5, #4]
 8007f36:	441a      	add	r2, r3
 8007f38:	441d      	add	r5, r3
 8007f3a:	f63f af44 	bhi.w	8007dc6 <arm_radix8_butterfly_f32+0x6e>
 8007f3e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007f40:	2a07      	cmp	r2, #7
 8007f42:	f240 81f5 	bls.w	8008330 <arm_radix8_butterfly_f32+0x5d8>
 8007f46:	f108 0101 	add.w	r1, r8, #1
 8007f4a:	188f      	adds	r7, r1, r2
 8007f4c:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8007f50:	19d6      	adds	r6, r2, r7
 8007f52:	eb08 0c09 	add.w	ip, r8, r9
 8007f56:	1994      	adds	r4, r2, r6
 8007f58:	eb0c 0e09 	add.w	lr, ip, r9
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	9701      	str	r7, [sp, #4]
 8007f60:	4420      	add	r0, r4
 8007f62:	eb0e 0709 	add.w	r7, lr, r9
 8007f66:	1815      	adds	r5, r2, r0
 8007f68:	eb07 0209 	add.w	r2, r7, r9
 8007f6c:	9203      	str	r2, [sp, #12]
 8007f6e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007f70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f74:	9117      	str	r1, [sp, #92]	@ 0x5c
 8007f76:	440a      	add	r2, r1
 8007f78:	9900      	ldr	r1, [sp, #0]
 8007f7a:	3108      	adds	r1, #8
 8007f7c:	9100      	str	r1, [sp, #0]
 8007f7e:	9902      	ldr	r1, [sp, #8]
 8007f80:	3108      	adds	r1, #8
 8007f82:	9102      	str	r1, [sp, #8]
 8007f84:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8007f86:	00ff      	lsls	r7, r7, #3
 8007f88:	9715      	str	r7, [sp, #84]	@ 0x54
 8007f8a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8007f8e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007f92:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8007f96:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8007f98:	9903      	ldr	r1, [sp, #12]
 8007f9a:	19d7      	adds	r7, r2, r7
 8007f9c:	00c9      	lsls	r1, r1, #3
 8007f9e:	9114      	str	r1, [sp, #80]	@ 0x50
 8007fa0:	9710      	str	r7, [sp, #64]	@ 0x40
 8007fa2:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8007fa4:	9f00      	ldr	r7, [sp, #0]
 8007fa6:	19cf      	adds	r7, r1, r7
 8007fa8:	970d      	str	r7, [sp, #52]	@ 0x34
 8007faa:	9f02      	ldr	r7, [sp, #8]
 8007fac:	19cf      	adds	r7, r1, r7
 8007fae:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8007fb2:	970c      	str	r7, [sp, #48]	@ 0x30
 8007fb4:	9f01      	ldr	r7, [sp, #4]
 8007fb6:	f8cd e058 	str.w	lr, [sp, #88]	@ 0x58
 8007fba:	3504      	adds	r5, #4
 8007fbc:	3004      	adds	r0, #4
 8007fbe:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8007fc2:	9508      	str	r5, [sp, #32]
 8007fc4:	9009      	str	r0, [sp, #36]	@ 0x24
 8007fc6:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8007fc8:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8007fca:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 8007fce:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8007fd2:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8007fd6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007fd8:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 8007fdc:	1945      	adds	r5, r0, r5
 8007fde:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8007fe2:	460f      	mov	r7, r1
 8007fe4:	3404      	adds	r4, #4
 8007fe6:	4641      	mov	r1, r8
 8007fe8:	1841      	adds	r1, r0, r1
 8007fea:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
 8007fee:	940a      	str	r4, [sp, #40]	@ 0x28
 8007ff0:	eb00 0c06 	add.w	ip, r0, r6
 8007ff4:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 8007ff8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007ffa:	9506      	str	r5, [sp, #24]
 8007ffc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8007ffe:	9105      	str	r1, [sp, #20]
 8008000:	4639      	mov	r1, r7
 8008002:	1905      	adds	r5, r0, r4
 8008004:	3108      	adds	r1, #8
 8008006:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8008008:	9507      	str	r5, [sp, #28]
 800800a:	910f      	str	r1, [sp, #60]	@ 0x3c
 800800c:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8008010:	2101      	movs	r1, #1
 8008012:	eb00 0e06 	add.w	lr, r0, r6
 8008016:	9518      	str	r5, [sp, #96]	@ 0x60
 8008018:	9404      	str	r4, [sp, #16]
 800801a:	9103      	str	r1, [sp, #12]
 800801c:	4620      	mov	r0, r4
 800801e:	4689      	mov	r9, r1
 8008020:	9e06      	ldr	r6, [sp, #24]
 8008022:	ed90 fa00 	vldr	s30, [r0]
 8008026:	edd6 7a01 	vldr	s15, [r6, #4]
 800802a:	edd0 ba01 	vldr	s23, [r0, #4]
 800802e:	edcd 7a00 	vstr	s15, [sp]
 8008032:	a80d      	add	r0, sp, #52	@ 0x34
 8008034:	edde 7a01 	vldr	s15, [lr, #4]
 8008038:	9c05      	ldr	r4, [sp, #20]
 800803a:	9d07      	ldr	r5, [sp, #28]
 800803c:	edd2 fa00 	vldr	s31, [r2]
 8008040:	ed92 ca01 	vldr	s24, [r2, #4]
 8008044:	edcd 7a01 	vstr	s15, [sp, #4]
 8008048:	c807      	ldmia	r0, {r0, r1, r2}
 800804a:	eddc 7a01 	vldr	s15, [ip, #4]
 800804e:	edd4 ea00 	vldr	s29, [r4]
 8008052:	ed95 ea00 	vldr	s28, [r5]
 8008056:	edd6 da00 	vldr	s27, [r6]
 800805a:	edd4 aa01 	vldr	s21, [r4, #4]
 800805e:	ed95 aa01 	vldr	s20, [r5, #4]
 8008062:	ed9e da00 	vldr	s26, [lr]
 8008066:	eddc ca00 	vldr	s25, [ip]
 800806a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800806e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8008070:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008072:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008074:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8008076:	edcd 7a02 	vstr	s15, [sp, #8]
 800807a:	e001      	b.n	8008080 <arm_radix8_butterfly_f32+0x328>
 800807c:	3f3504f3 	.word	0x3f3504f3
 8008080:	ed16 6a01 	vldr	s12, [r6, #-4]
 8008084:	ed91 5a00 	vldr	s10, [r1]
 8008088:	ed57 9a01 	vldr	s19, [r7, #-4]
 800808c:	edd5 7a00 	vldr	s15, [r5]
 8008090:	ed18 7a01 	vldr	s14, [r8, #-4]
 8008094:	edd2 3a00 	vldr	s7, [r2]
 8008098:	ed94 3a00 	vldr	s6, [r4]
 800809c:	ed90 2a00 	vldr	s4, [r0]
 80080a0:	ed92 0a01 	vldr	s0, [r2, #4]
 80080a4:	ee33 8a85 	vadd.f32	s16, s7, s10
 80080a8:	ee32 1a06 	vadd.f32	s2, s4, s12
 80080ac:	ee33 4a29 	vadd.f32	s8, s6, s19
 80080b0:	ee77 4a87 	vadd.f32	s9, s15, s14
 80080b4:	ee78 1a04 	vadd.f32	s3, s16, s8
 80080b8:	ee71 6a24 	vadd.f32	s13, s2, s9
 80080bc:	ee32 2a46 	vsub.f32	s4, s4, s12
 80080c0:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80080c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080c8:	ed82 6a00 	vstr	s12, [r2]
 80080cc:	edd5 8a01 	vldr	s17, [r5, #4]
 80080d0:	ed90 9a01 	vldr	s18, [r0, #4]
 80080d4:	edd6 2a00 	vldr	s5, [r6]
 80080d8:	ed98 7a00 	vldr	s14, [r8]
 80080dc:	edd4 0a01 	vldr	s1, [r4, #4]
 80080e0:	ed91 6a01 	vldr	s12, [r1, #4]
 80080e4:	edd7 5a00 	vldr	s11, [r7]
 80080e8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80080ec:	ee33 3a69 	vsub.f32	s6, s6, s19
 80080f0:	ee39 5a62 	vsub.f32	s10, s18, s5
 80080f4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 80080f8:	ee38 4a44 	vsub.f32	s8, s16, s8
 80080fc:	ee38 7a87 	vadd.f32	s14, s17, s14
 8008100:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8008104:	ee79 2a22 	vadd.f32	s5, s18, s5
 8008108:	ee75 8a69 	vsub.f32	s17, s10, s19
 800810c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8008110:	ee35 5a29 	vadd.f32	s10, s10, s19
 8008114:	ee72 7a67 	vsub.f32	s15, s4, s15
 8008118:	ee30 2a06 	vadd.f32	s4, s0, s12
 800811c:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8008120:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8008124:	ee32 9a08 	vadd.f32	s18, s4, s16
 8008128:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800812c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8008130:	ee71 4a64 	vsub.f32	s9, s2, s9
 8008134:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8008138:	ee32 1a87 	vadd.f32	s2, s5, s14
 800813c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8008140:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8008144:	ee30 6a46 	vsub.f32	s12, s0, s12
 8008148:	ee73 0a29 	vadd.f32	s1, s6, s19
 800814c:	ee36 0a28 	vadd.f32	s0, s12, s17
 8008150:	ee33 3a69 	vsub.f32	s6, s6, s19
 8008154:	ee32 7a64 	vsub.f32	s14, s4, s9
 8008158:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800815c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8008160:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8008164:	ee75 8a85 	vadd.f32	s17, s11, s10
 8008168:	ee74 3a22 	vadd.f32	s7, s8, s5
 800816c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8008170:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8008174:	ee79 1a41 	vsub.f32	s3, s18, s2
 8008178:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800817c:	ee76 5a43 	vsub.f32	s11, s12, s6
 8008180:	ee74 2a62 	vsub.f32	s5, s8, s5
 8008184:	ee74 4a82 	vadd.f32	s9, s9, s4
 8008188:	ee30 4a60 	vsub.f32	s8, s0, s1
 800818c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8008190:	ee30 0a80 	vadd.f32	s0, s1, s0
 8008194:	ee77 9a85 	vadd.f32	s19, s15, s10
 8008198:	ee33 6a06 	vadd.f32	s12, s6, s12
 800819c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80081a0:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80081a4:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80081a8:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80081ac:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80081b0:	ee39 1a01 	vadd.f32	s2, s18, s2
 80081b4:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80081b8:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80081bc:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80081c0:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80081c4:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80081c8:	ee35 3a03 	vadd.f32	s6, s10, s6
 80081cc:	ee72 6a66 	vsub.f32	s13, s4, s13
 80081d0:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80081d4:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80081d8:	ed9d 4a02 	vldr	s8, [sp, #8]
 80081dc:	ed82 1a01 	vstr	s2, [r2, #4]
 80081e0:	ee77 3a63 	vsub.f32	s7, s14, s7
 80081e4:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80081e8:	ed9d 7a01 	vldr	s14, [sp, #4]
 80081ec:	ed81 3a00 	vstr	s6, [r1]
 80081f0:	ee30 9a89 	vadd.f32	s18, s1, s18
 80081f4:	ee32 2a05 	vadd.f32	s4, s4, s10
 80081f8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 80081fc:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8008200:	ee67 2a22 	vmul.f32	s5, s14, s5
 8008204:	ee64 1a00 	vmul.f32	s3, s8, s0
 8008208:	ee27 7a24 	vmul.f32	s14, s14, s9
 800820c:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8008210:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8008214:	ee64 8a28 	vmul.f32	s17, s8, s17
 8008218:	ed9d 4a00 	vldr	s8, [sp]
 800821c:	edc1 6a01 	vstr	s13, [r1, #4]
 8008220:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8008224:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8008228:	ee64 9a29 	vmul.f32	s19, s8, s19
 800822c:	ee24 4a25 	vmul.f32	s8, s8, s11
 8008230:	ee30 7a87 	vadd.f32	s14, s1, s14
 8008234:	ee74 4a84 	vadd.f32	s9, s9, s8
 8008238:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800823c:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8008240:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8008244:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8008248:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800824c:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8008250:	ee75 1a21 	vadd.f32	s3, s10, s3
 8008254:	ee30 0a68 	vsub.f32	s0, s0, s17
 8008258:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800825c:	ee70 0a84 	vadd.f32	s1, s1, s8
 8008260:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008264:	44d9      	add	r9, fp
 8008266:	45ca      	cmp	sl, r9
 8008268:	ed84 9a00 	vstr	s18, [r4]
 800826c:	edc4 3a01 	vstr	s7, [r4, #4]
 8008270:	441a      	add	r2, r3
 8008272:	ed07 7a01 	vstr	s14, [r7, #-4]
 8008276:	edc7 2a00 	vstr	s5, [r7]
 800827a:	4419      	add	r1, r3
 800827c:	ed80 2a00 	vstr	s4, [r0]
 8008280:	ed80 8a01 	vstr	s16, [r0, #4]
 8008284:	441c      	add	r4, r3
 8008286:	ed48 1a01 	vstr	s3, [r8, #-4]
 800828a:	ed88 0a00 	vstr	s0, [r8]
 800828e:	441f      	add	r7, r3
 8008290:	ed46 4a01 	vstr	s9, [r6, #-4]
 8008294:	4418      	add	r0, r3
 8008296:	edc6 9a00 	vstr	s19, [r6]
 800829a:	4498      	add	r8, r3
 800829c:	edc5 0a00 	vstr	s1, [r5]
 80082a0:	ed85 6a01 	vstr	s12, [r5, #4]
 80082a4:	441e      	add	r6, r3
 80082a6:	441d      	add	r5, r3
 80082a8:	f63f aeea 	bhi.w	8008080 <arm_radix8_butterfly_f32+0x328>
 80082ac:	9a03      	ldr	r2, [sp, #12]
 80082ae:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80082b0:	3201      	adds	r2, #1
 80082b2:	4611      	mov	r1, r2
 80082b4:	9203      	str	r2, [sp, #12]
 80082b6:	9a04      	ldr	r2, [sp, #16]
 80082b8:	4402      	add	r2, r0
 80082ba:	9204      	str	r2, [sp, #16]
 80082bc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80082be:	9a05      	ldr	r2, [sp, #20]
 80082c0:	4402      	add	r2, r0
 80082c2:	9205      	str	r2, [sp, #20]
 80082c4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80082c6:	9a07      	ldr	r2, [sp, #28]
 80082c8:	4402      	add	r2, r0
 80082ca:	9207      	str	r2, [sp, #28]
 80082cc:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80082ce:	9a06      	ldr	r2, [sp, #24]
 80082d0:	4402      	add	r2, r0
 80082d2:	9206      	str	r2, [sp, #24]
 80082d4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80082d6:	4496      	add	lr, r2
 80082d8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80082da:	4494      	add	ip, r2
 80082dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80082de:	3208      	adds	r2, #8
 80082e0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80082e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082e4:	3208      	adds	r2, #8
 80082e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80082e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80082ea:	3208      	adds	r2, #8
 80082ec:	920d      	str	r2, [sp, #52]	@ 0x34
 80082ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80082f0:	3208      	adds	r2, #8
 80082f2:	920c      	str	r2, [sp, #48]	@ 0x30
 80082f4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80082f6:	3208      	adds	r2, #8
 80082f8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80082fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80082fc:	3208      	adds	r2, #8
 80082fe:	920a      	str	r2, [sp, #40]	@ 0x28
 8008300:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008302:	3208      	adds	r2, #8
 8008304:	9209      	str	r2, [sp, #36]	@ 0x24
 8008306:	9a08      	ldr	r2, [sp, #32]
 8008308:	3208      	adds	r2, #8
 800830a:	9208      	str	r2, [sp, #32]
 800830c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800830e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8008310:	4288      	cmp	r0, r1
 8008312:	4622      	mov	r2, r4
 8008314:	d007      	beq.n	8008326 <arm_radix8_butterfly_f32+0x5ce>
 8008316:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8008318:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800831c:	4621      	mov	r1, r4
 800831e:	4401      	add	r1, r0
 8008320:	9110      	str	r1, [sp, #64]	@ 0x40
 8008322:	9804      	ldr	r0, [sp, #16]
 8008324:	e67c      	b.n	8008020 <arm_radix8_butterfly_f32+0x2c8>
 8008326:	4683      	mov	fp, r0
 8008328:	f8bd 905c 	ldrh.w	r9, [sp, #92]	@ 0x5c
 800832c:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 800832e:	e524      	b.n	8007d7a <arm_radix8_butterfly_f32+0x22>
 8008330:	b01d      	add	sp, #116	@ 0x74
 8008332:	ecbd 8b10 	vpop	{d8-d15}
 8008336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833a:	bf00      	nop

0800833c <__cvt>:
 800833c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008340:	ec57 6b10 	vmov	r6, r7, d0
 8008344:	2f00      	cmp	r7, #0
 8008346:	460c      	mov	r4, r1
 8008348:	4619      	mov	r1, r3
 800834a:	463b      	mov	r3, r7
 800834c:	bfbb      	ittet	lt
 800834e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008352:	461f      	movlt	r7, r3
 8008354:	2300      	movge	r3, #0
 8008356:	232d      	movlt	r3, #45	@ 0x2d
 8008358:	700b      	strb	r3, [r1, #0]
 800835a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800835c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008360:	4691      	mov	r9, r2
 8008362:	f023 0820 	bic.w	r8, r3, #32
 8008366:	bfbc      	itt	lt
 8008368:	4632      	movlt	r2, r6
 800836a:	4616      	movlt	r6, r2
 800836c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008370:	d005      	beq.n	800837e <__cvt+0x42>
 8008372:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008376:	d100      	bne.n	800837a <__cvt+0x3e>
 8008378:	3401      	adds	r4, #1
 800837a:	2102      	movs	r1, #2
 800837c:	e000      	b.n	8008380 <__cvt+0x44>
 800837e:	2103      	movs	r1, #3
 8008380:	ab03      	add	r3, sp, #12
 8008382:	9301      	str	r3, [sp, #4]
 8008384:	ab02      	add	r3, sp, #8
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	ec47 6b10 	vmov	d0, r6, r7
 800838c:	4653      	mov	r3, sl
 800838e:	4622      	mov	r2, r4
 8008390:	f000 feda 	bl	8009148 <_dtoa_r>
 8008394:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008398:	4605      	mov	r5, r0
 800839a:	d119      	bne.n	80083d0 <__cvt+0x94>
 800839c:	f019 0f01 	tst.w	r9, #1
 80083a0:	d00e      	beq.n	80083c0 <__cvt+0x84>
 80083a2:	eb00 0904 	add.w	r9, r0, r4
 80083a6:	2200      	movs	r2, #0
 80083a8:	2300      	movs	r3, #0
 80083aa:	4630      	mov	r0, r6
 80083ac:	4639      	mov	r1, r7
 80083ae:	f7f8 fc0b 	bl	8000bc8 <__aeabi_dcmpeq>
 80083b2:	b108      	cbz	r0, 80083b8 <__cvt+0x7c>
 80083b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80083b8:	2230      	movs	r2, #48	@ 0x30
 80083ba:	9b03      	ldr	r3, [sp, #12]
 80083bc:	454b      	cmp	r3, r9
 80083be:	d31e      	bcc.n	80083fe <__cvt+0xc2>
 80083c0:	9b03      	ldr	r3, [sp, #12]
 80083c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083c4:	1b5b      	subs	r3, r3, r5
 80083c6:	4628      	mov	r0, r5
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	b004      	add	sp, #16
 80083cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80083d4:	eb00 0904 	add.w	r9, r0, r4
 80083d8:	d1e5      	bne.n	80083a6 <__cvt+0x6a>
 80083da:	7803      	ldrb	r3, [r0, #0]
 80083dc:	2b30      	cmp	r3, #48	@ 0x30
 80083de:	d10a      	bne.n	80083f6 <__cvt+0xba>
 80083e0:	2200      	movs	r2, #0
 80083e2:	2300      	movs	r3, #0
 80083e4:	4630      	mov	r0, r6
 80083e6:	4639      	mov	r1, r7
 80083e8:	f7f8 fbee 	bl	8000bc8 <__aeabi_dcmpeq>
 80083ec:	b918      	cbnz	r0, 80083f6 <__cvt+0xba>
 80083ee:	f1c4 0401 	rsb	r4, r4, #1
 80083f2:	f8ca 4000 	str.w	r4, [sl]
 80083f6:	f8da 3000 	ldr.w	r3, [sl]
 80083fa:	4499      	add	r9, r3
 80083fc:	e7d3      	b.n	80083a6 <__cvt+0x6a>
 80083fe:	1c59      	adds	r1, r3, #1
 8008400:	9103      	str	r1, [sp, #12]
 8008402:	701a      	strb	r2, [r3, #0]
 8008404:	e7d9      	b.n	80083ba <__cvt+0x7e>

08008406 <__exponent>:
 8008406:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008408:	2900      	cmp	r1, #0
 800840a:	bfba      	itte	lt
 800840c:	4249      	neglt	r1, r1
 800840e:	232d      	movlt	r3, #45	@ 0x2d
 8008410:	232b      	movge	r3, #43	@ 0x2b
 8008412:	2909      	cmp	r1, #9
 8008414:	7002      	strb	r2, [r0, #0]
 8008416:	7043      	strb	r3, [r0, #1]
 8008418:	dd29      	ble.n	800846e <__exponent+0x68>
 800841a:	f10d 0307 	add.w	r3, sp, #7
 800841e:	461d      	mov	r5, r3
 8008420:	270a      	movs	r7, #10
 8008422:	461a      	mov	r2, r3
 8008424:	fbb1 f6f7 	udiv	r6, r1, r7
 8008428:	fb07 1416 	mls	r4, r7, r6, r1
 800842c:	3430      	adds	r4, #48	@ 0x30
 800842e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008432:	460c      	mov	r4, r1
 8008434:	2c63      	cmp	r4, #99	@ 0x63
 8008436:	f103 33ff 	add.w	r3, r3, #4294967295
 800843a:	4631      	mov	r1, r6
 800843c:	dcf1      	bgt.n	8008422 <__exponent+0x1c>
 800843e:	3130      	adds	r1, #48	@ 0x30
 8008440:	1e94      	subs	r4, r2, #2
 8008442:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008446:	1c41      	adds	r1, r0, #1
 8008448:	4623      	mov	r3, r4
 800844a:	42ab      	cmp	r3, r5
 800844c:	d30a      	bcc.n	8008464 <__exponent+0x5e>
 800844e:	f10d 0309 	add.w	r3, sp, #9
 8008452:	1a9b      	subs	r3, r3, r2
 8008454:	42ac      	cmp	r4, r5
 8008456:	bf88      	it	hi
 8008458:	2300      	movhi	r3, #0
 800845a:	3302      	adds	r3, #2
 800845c:	4403      	add	r3, r0
 800845e:	1a18      	subs	r0, r3, r0
 8008460:	b003      	add	sp, #12
 8008462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008464:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008468:	f801 6f01 	strb.w	r6, [r1, #1]!
 800846c:	e7ed      	b.n	800844a <__exponent+0x44>
 800846e:	2330      	movs	r3, #48	@ 0x30
 8008470:	3130      	adds	r1, #48	@ 0x30
 8008472:	7083      	strb	r3, [r0, #2]
 8008474:	70c1      	strb	r1, [r0, #3]
 8008476:	1d03      	adds	r3, r0, #4
 8008478:	e7f1      	b.n	800845e <__exponent+0x58>
	...

0800847c <_printf_float>:
 800847c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008480:	b08d      	sub	sp, #52	@ 0x34
 8008482:	460c      	mov	r4, r1
 8008484:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008488:	4616      	mov	r6, r2
 800848a:	461f      	mov	r7, r3
 800848c:	4605      	mov	r5, r0
 800848e:	f000 fd4d 	bl	8008f2c <_localeconv_r>
 8008492:	6803      	ldr	r3, [r0, #0]
 8008494:	9304      	str	r3, [sp, #16]
 8008496:	4618      	mov	r0, r3
 8008498:	f7f7 ff6a 	bl	8000370 <strlen>
 800849c:	2300      	movs	r3, #0
 800849e:	930a      	str	r3, [sp, #40]	@ 0x28
 80084a0:	f8d8 3000 	ldr.w	r3, [r8]
 80084a4:	9005      	str	r0, [sp, #20]
 80084a6:	3307      	adds	r3, #7
 80084a8:	f023 0307 	bic.w	r3, r3, #7
 80084ac:	f103 0208 	add.w	r2, r3, #8
 80084b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80084b4:	f8d4 b000 	ldr.w	fp, [r4]
 80084b8:	f8c8 2000 	str.w	r2, [r8]
 80084bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80084c4:	9307      	str	r3, [sp, #28]
 80084c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80084ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80084ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084d2:	4b9c      	ldr	r3, [pc, #624]	@ (8008744 <_printf_float+0x2c8>)
 80084d4:	f04f 32ff 	mov.w	r2, #4294967295
 80084d8:	f7f8 fba8 	bl	8000c2c <__aeabi_dcmpun>
 80084dc:	bb70      	cbnz	r0, 800853c <_printf_float+0xc0>
 80084de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084e2:	4b98      	ldr	r3, [pc, #608]	@ (8008744 <_printf_float+0x2c8>)
 80084e4:	f04f 32ff 	mov.w	r2, #4294967295
 80084e8:	f7f8 fb82 	bl	8000bf0 <__aeabi_dcmple>
 80084ec:	bb30      	cbnz	r0, 800853c <_printf_float+0xc0>
 80084ee:	2200      	movs	r2, #0
 80084f0:	2300      	movs	r3, #0
 80084f2:	4640      	mov	r0, r8
 80084f4:	4649      	mov	r1, r9
 80084f6:	f7f8 fb71 	bl	8000bdc <__aeabi_dcmplt>
 80084fa:	b110      	cbz	r0, 8008502 <_printf_float+0x86>
 80084fc:	232d      	movs	r3, #45	@ 0x2d
 80084fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008502:	4a91      	ldr	r2, [pc, #580]	@ (8008748 <_printf_float+0x2cc>)
 8008504:	4b91      	ldr	r3, [pc, #580]	@ (800874c <_printf_float+0x2d0>)
 8008506:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800850a:	bf8c      	ite	hi
 800850c:	4690      	movhi	r8, r2
 800850e:	4698      	movls	r8, r3
 8008510:	2303      	movs	r3, #3
 8008512:	6123      	str	r3, [r4, #16]
 8008514:	f02b 0304 	bic.w	r3, fp, #4
 8008518:	6023      	str	r3, [r4, #0]
 800851a:	f04f 0900 	mov.w	r9, #0
 800851e:	9700      	str	r7, [sp, #0]
 8008520:	4633      	mov	r3, r6
 8008522:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008524:	4621      	mov	r1, r4
 8008526:	4628      	mov	r0, r5
 8008528:	f000 f9d2 	bl	80088d0 <_printf_common>
 800852c:	3001      	adds	r0, #1
 800852e:	f040 808d 	bne.w	800864c <_printf_float+0x1d0>
 8008532:	f04f 30ff 	mov.w	r0, #4294967295
 8008536:	b00d      	add	sp, #52	@ 0x34
 8008538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800853c:	4642      	mov	r2, r8
 800853e:	464b      	mov	r3, r9
 8008540:	4640      	mov	r0, r8
 8008542:	4649      	mov	r1, r9
 8008544:	f7f8 fb72 	bl	8000c2c <__aeabi_dcmpun>
 8008548:	b140      	cbz	r0, 800855c <_printf_float+0xe0>
 800854a:	464b      	mov	r3, r9
 800854c:	2b00      	cmp	r3, #0
 800854e:	bfbc      	itt	lt
 8008550:	232d      	movlt	r3, #45	@ 0x2d
 8008552:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008556:	4a7e      	ldr	r2, [pc, #504]	@ (8008750 <_printf_float+0x2d4>)
 8008558:	4b7e      	ldr	r3, [pc, #504]	@ (8008754 <_printf_float+0x2d8>)
 800855a:	e7d4      	b.n	8008506 <_printf_float+0x8a>
 800855c:	6863      	ldr	r3, [r4, #4]
 800855e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008562:	9206      	str	r2, [sp, #24]
 8008564:	1c5a      	adds	r2, r3, #1
 8008566:	d13b      	bne.n	80085e0 <_printf_float+0x164>
 8008568:	2306      	movs	r3, #6
 800856a:	6063      	str	r3, [r4, #4]
 800856c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008570:	2300      	movs	r3, #0
 8008572:	6022      	str	r2, [r4, #0]
 8008574:	9303      	str	r3, [sp, #12]
 8008576:	ab0a      	add	r3, sp, #40	@ 0x28
 8008578:	e9cd a301 	strd	sl, r3, [sp, #4]
 800857c:	ab09      	add	r3, sp, #36	@ 0x24
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	6861      	ldr	r1, [r4, #4]
 8008582:	ec49 8b10 	vmov	d0, r8, r9
 8008586:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800858a:	4628      	mov	r0, r5
 800858c:	f7ff fed6 	bl	800833c <__cvt>
 8008590:	9b06      	ldr	r3, [sp, #24]
 8008592:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008594:	2b47      	cmp	r3, #71	@ 0x47
 8008596:	4680      	mov	r8, r0
 8008598:	d129      	bne.n	80085ee <_printf_float+0x172>
 800859a:	1cc8      	adds	r0, r1, #3
 800859c:	db02      	blt.n	80085a4 <_printf_float+0x128>
 800859e:	6863      	ldr	r3, [r4, #4]
 80085a0:	4299      	cmp	r1, r3
 80085a2:	dd41      	ble.n	8008628 <_printf_float+0x1ac>
 80085a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80085a8:	fa5f fa8a 	uxtb.w	sl, sl
 80085ac:	3901      	subs	r1, #1
 80085ae:	4652      	mov	r2, sl
 80085b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80085b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80085b6:	f7ff ff26 	bl	8008406 <__exponent>
 80085ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085bc:	1813      	adds	r3, r2, r0
 80085be:	2a01      	cmp	r2, #1
 80085c0:	4681      	mov	r9, r0
 80085c2:	6123      	str	r3, [r4, #16]
 80085c4:	dc02      	bgt.n	80085cc <_printf_float+0x150>
 80085c6:	6822      	ldr	r2, [r4, #0]
 80085c8:	07d2      	lsls	r2, r2, #31
 80085ca:	d501      	bpl.n	80085d0 <_printf_float+0x154>
 80085cc:	3301      	adds	r3, #1
 80085ce:	6123      	str	r3, [r4, #16]
 80085d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d0a2      	beq.n	800851e <_printf_float+0xa2>
 80085d8:	232d      	movs	r3, #45	@ 0x2d
 80085da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085de:	e79e      	b.n	800851e <_printf_float+0xa2>
 80085e0:	9a06      	ldr	r2, [sp, #24]
 80085e2:	2a47      	cmp	r2, #71	@ 0x47
 80085e4:	d1c2      	bne.n	800856c <_printf_float+0xf0>
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1c0      	bne.n	800856c <_printf_float+0xf0>
 80085ea:	2301      	movs	r3, #1
 80085ec:	e7bd      	b.n	800856a <_printf_float+0xee>
 80085ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80085f2:	d9db      	bls.n	80085ac <_printf_float+0x130>
 80085f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80085f8:	d118      	bne.n	800862c <_printf_float+0x1b0>
 80085fa:	2900      	cmp	r1, #0
 80085fc:	6863      	ldr	r3, [r4, #4]
 80085fe:	dd0b      	ble.n	8008618 <_printf_float+0x19c>
 8008600:	6121      	str	r1, [r4, #16]
 8008602:	b913      	cbnz	r3, 800860a <_printf_float+0x18e>
 8008604:	6822      	ldr	r2, [r4, #0]
 8008606:	07d0      	lsls	r0, r2, #31
 8008608:	d502      	bpl.n	8008610 <_printf_float+0x194>
 800860a:	3301      	adds	r3, #1
 800860c:	440b      	add	r3, r1
 800860e:	6123      	str	r3, [r4, #16]
 8008610:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008612:	f04f 0900 	mov.w	r9, #0
 8008616:	e7db      	b.n	80085d0 <_printf_float+0x154>
 8008618:	b913      	cbnz	r3, 8008620 <_printf_float+0x1a4>
 800861a:	6822      	ldr	r2, [r4, #0]
 800861c:	07d2      	lsls	r2, r2, #31
 800861e:	d501      	bpl.n	8008624 <_printf_float+0x1a8>
 8008620:	3302      	adds	r3, #2
 8008622:	e7f4      	b.n	800860e <_printf_float+0x192>
 8008624:	2301      	movs	r3, #1
 8008626:	e7f2      	b.n	800860e <_printf_float+0x192>
 8008628:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800862c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800862e:	4299      	cmp	r1, r3
 8008630:	db05      	blt.n	800863e <_printf_float+0x1c2>
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	6121      	str	r1, [r4, #16]
 8008636:	07d8      	lsls	r0, r3, #31
 8008638:	d5ea      	bpl.n	8008610 <_printf_float+0x194>
 800863a:	1c4b      	adds	r3, r1, #1
 800863c:	e7e7      	b.n	800860e <_printf_float+0x192>
 800863e:	2900      	cmp	r1, #0
 8008640:	bfd4      	ite	le
 8008642:	f1c1 0202 	rsble	r2, r1, #2
 8008646:	2201      	movgt	r2, #1
 8008648:	4413      	add	r3, r2
 800864a:	e7e0      	b.n	800860e <_printf_float+0x192>
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	055a      	lsls	r2, r3, #21
 8008650:	d407      	bmi.n	8008662 <_printf_float+0x1e6>
 8008652:	6923      	ldr	r3, [r4, #16]
 8008654:	4642      	mov	r2, r8
 8008656:	4631      	mov	r1, r6
 8008658:	4628      	mov	r0, r5
 800865a:	47b8      	blx	r7
 800865c:	3001      	adds	r0, #1
 800865e:	d12b      	bne.n	80086b8 <_printf_float+0x23c>
 8008660:	e767      	b.n	8008532 <_printf_float+0xb6>
 8008662:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008666:	f240 80dd 	bls.w	8008824 <_printf_float+0x3a8>
 800866a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800866e:	2200      	movs	r2, #0
 8008670:	2300      	movs	r3, #0
 8008672:	f7f8 faa9 	bl	8000bc8 <__aeabi_dcmpeq>
 8008676:	2800      	cmp	r0, #0
 8008678:	d033      	beq.n	80086e2 <_printf_float+0x266>
 800867a:	4a37      	ldr	r2, [pc, #220]	@ (8008758 <_printf_float+0x2dc>)
 800867c:	2301      	movs	r3, #1
 800867e:	4631      	mov	r1, r6
 8008680:	4628      	mov	r0, r5
 8008682:	47b8      	blx	r7
 8008684:	3001      	adds	r0, #1
 8008686:	f43f af54 	beq.w	8008532 <_printf_float+0xb6>
 800868a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800868e:	4543      	cmp	r3, r8
 8008690:	db02      	blt.n	8008698 <_printf_float+0x21c>
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	07d8      	lsls	r0, r3, #31
 8008696:	d50f      	bpl.n	80086b8 <_printf_float+0x23c>
 8008698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800869c:	4631      	mov	r1, r6
 800869e:	4628      	mov	r0, r5
 80086a0:	47b8      	blx	r7
 80086a2:	3001      	adds	r0, #1
 80086a4:	f43f af45 	beq.w	8008532 <_printf_float+0xb6>
 80086a8:	f04f 0900 	mov.w	r9, #0
 80086ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80086b0:	f104 0a1a 	add.w	sl, r4, #26
 80086b4:	45c8      	cmp	r8, r9
 80086b6:	dc09      	bgt.n	80086cc <_printf_float+0x250>
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	079b      	lsls	r3, r3, #30
 80086bc:	f100 8103 	bmi.w	80088c6 <_printf_float+0x44a>
 80086c0:	68e0      	ldr	r0, [r4, #12]
 80086c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086c4:	4298      	cmp	r0, r3
 80086c6:	bfb8      	it	lt
 80086c8:	4618      	movlt	r0, r3
 80086ca:	e734      	b.n	8008536 <_printf_float+0xba>
 80086cc:	2301      	movs	r3, #1
 80086ce:	4652      	mov	r2, sl
 80086d0:	4631      	mov	r1, r6
 80086d2:	4628      	mov	r0, r5
 80086d4:	47b8      	blx	r7
 80086d6:	3001      	adds	r0, #1
 80086d8:	f43f af2b 	beq.w	8008532 <_printf_float+0xb6>
 80086dc:	f109 0901 	add.w	r9, r9, #1
 80086e0:	e7e8      	b.n	80086b4 <_printf_float+0x238>
 80086e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	dc39      	bgt.n	800875c <_printf_float+0x2e0>
 80086e8:	4a1b      	ldr	r2, [pc, #108]	@ (8008758 <_printf_float+0x2dc>)
 80086ea:	2301      	movs	r3, #1
 80086ec:	4631      	mov	r1, r6
 80086ee:	4628      	mov	r0, r5
 80086f0:	47b8      	blx	r7
 80086f2:	3001      	adds	r0, #1
 80086f4:	f43f af1d 	beq.w	8008532 <_printf_float+0xb6>
 80086f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80086fc:	ea59 0303 	orrs.w	r3, r9, r3
 8008700:	d102      	bne.n	8008708 <_printf_float+0x28c>
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	07d9      	lsls	r1, r3, #31
 8008706:	d5d7      	bpl.n	80086b8 <_printf_float+0x23c>
 8008708:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800870c:	4631      	mov	r1, r6
 800870e:	4628      	mov	r0, r5
 8008710:	47b8      	blx	r7
 8008712:	3001      	adds	r0, #1
 8008714:	f43f af0d 	beq.w	8008532 <_printf_float+0xb6>
 8008718:	f04f 0a00 	mov.w	sl, #0
 800871c:	f104 0b1a 	add.w	fp, r4, #26
 8008720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008722:	425b      	negs	r3, r3
 8008724:	4553      	cmp	r3, sl
 8008726:	dc01      	bgt.n	800872c <_printf_float+0x2b0>
 8008728:	464b      	mov	r3, r9
 800872a:	e793      	b.n	8008654 <_printf_float+0x1d8>
 800872c:	2301      	movs	r3, #1
 800872e:	465a      	mov	r2, fp
 8008730:	4631      	mov	r1, r6
 8008732:	4628      	mov	r0, r5
 8008734:	47b8      	blx	r7
 8008736:	3001      	adds	r0, #1
 8008738:	f43f aefb 	beq.w	8008532 <_printf_float+0xb6>
 800873c:	f10a 0a01 	add.w	sl, sl, #1
 8008740:	e7ee      	b.n	8008720 <_printf_float+0x2a4>
 8008742:	bf00      	nop
 8008744:	7fefffff 	.word	0x7fefffff
 8008748:	0801f1cc 	.word	0x0801f1cc
 800874c:	0801f1c8 	.word	0x0801f1c8
 8008750:	0801f1d4 	.word	0x0801f1d4
 8008754:	0801f1d0 	.word	0x0801f1d0
 8008758:	0801f1d8 	.word	0x0801f1d8
 800875c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800875e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008762:	4553      	cmp	r3, sl
 8008764:	bfa8      	it	ge
 8008766:	4653      	movge	r3, sl
 8008768:	2b00      	cmp	r3, #0
 800876a:	4699      	mov	r9, r3
 800876c:	dc36      	bgt.n	80087dc <_printf_float+0x360>
 800876e:	f04f 0b00 	mov.w	fp, #0
 8008772:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008776:	f104 021a 	add.w	r2, r4, #26
 800877a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800877c:	9306      	str	r3, [sp, #24]
 800877e:	eba3 0309 	sub.w	r3, r3, r9
 8008782:	455b      	cmp	r3, fp
 8008784:	dc31      	bgt.n	80087ea <_printf_float+0x36e>
 8008786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008788:	459a      	cmp	sl, r3
 800878a:	dc3a      	bgt.n	8008802 <_printf_float+0x386>
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	07da      	lsls	r2, r3, #31
 8008790:	d437      	bmi.n	8008802 <_printf_float+0x386>
 8008792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008794:	ebaa 0903 	sub.w	r9, sl, r3
 8008798:	9b06      	ldr	r3, [sp, #24]
 800879a:	ebaa 0303 	sub.w	r3, sl, r3
 800879e:	4599      	cmp	r9, r3
 80087a0:	bfa8      	it	ge
 80087a2:	4699      	movge	r9, r3
 80087a4:	f1b9 0f00 	cmp.w	r9, #0
 80087a8:	dc33      	bgt.n	8008812 <_printf_float+0x396>
 80087aa:	f04f 0800 	mov.w	r8, #0
 80087ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087b2:	f104 0b1a 	add.w	fp, r4, #26
 80087b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087b8:	ebaa 0303 	sub.w	r3, sl, r3
 80087bc:	eba3 0309 	sub.w	r3, r3, r9
 80087c0:	4543      	cmp	r3, r8
 80087c2:	f77f af79 	ble.w	80086b8 <_printf_float+0x23c>
 80087c6:	2301      	movs	r3, #1
 80087c8:	465a      	mov	r2, fp
 80087ca:	4631      	mov	r1, r6
 80087cc:	4628      	mov	r0, r5
 80087ce:	47b8      	blx	r7
 80087d0:	3001      	adds	r0, #1
 80087d2:	f43f aeae 	beq.w	8008532 <_printf_float+0xb6>
 80087d6:	f108 0801 	add.w	r8, r8, #1
 80087da:	e7ec      	b.n	80087b6 <_printf_float+0x33a>
 80087dc:	4642      	mov	r2, r8
 80087de:	4631      	mov	r1, r6
 80087e0:	4628      	mov	r0, r5
 80087e2:	47b8      	blx	r7
 80087e4:	3001      	adds	r0, #1
 80087e6:	d1c2      	bne.n	800876e <_printf_float+0x2f2>
 80087e8:	e6a3      	b.n	8008532 <_printf_float+0xb6>
 80087ea:	2301      	movs	r3, #1
 80087ec:	4631      	mov	r1, r6
 80087ee:	4628      	mov	r0, r5
 80087f0:	9206      	str	r2, [sp, #24]
 80087f2:	47b8      	blx	r7
 80087f4:	3001      	adds	r0, #1
 80087f6:	f43f ae9c 	beq.w	8008532 <_printf_float+0xb6>
 80087fa:	9a06      	ldr	r2, [sp, #24]
 80087fc:	f10b 0b01 	add.w	fp, fp, #1
 8008800:	e7bb      	b.n	800877a <_printf_float+0x2fe>
 8008802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008806:	4631      	mov	r1, r6
 8008808:	4628      	mov	r0, r5
 800880a:	47b8      	blx	r7
 800880c:	3001      	adds	r0, #1
 800880e:	d1c0      	bne.n	8008792 <_printf_float+0x316>
 8008810:	e68f      	b.n	8008532 <_printf_float+0xb6>
 8008812:	9a06      	ldr	r2, [sp, #24]
 8008814:	464b      	mov	r3, r9
 8008816:	4442      	add	r2, r8
 8008818:	4631      	mov	r1, r6
 800881a:	4628      	mov	r0, r5
 800881c:	47b8      	blx	r7
 800881e:	3001      	adds	r0, #1
 8008820:	d1c3      	bne.n	80087aa <_printf_float+0x32e>
 8008822:	e686      	b.n	8008532 <_printf_float+0xb6>
 8008824:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008828:	f1ba 0f01 	cmp.w	sl, #1
 800882c:	dc01      	bgt.n	8008832 <_printf_float+0x3b6>
 800882e:	07db      	lsls	r3, r3, #31
 8008830:	d536      	bpl.n	80088a0 <_printf_float+0x424>
 8008832:	2301      	movs	r3, #1
 8008834:	4642      	mov	r2, r8
 8008836:	4631      	mov	r1, r6
 8008838:	4628      	mov	r0, r5
 800883a:	47b8      	blx	r7
 800883c:	3001      	adds	r0, #1
 800883e:	f43f ae78 	beq.w	8008532 <_printf_float+0xb6>
 8008842:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008846:	4631      	mov	r1, r6
 8008848:	4628      	mov	r0, r5
 800884a:	47b8      	blx	r7
 800884c:	3001      	adds	r0, #1
 800884e:	f43f ae70 	beq.w	8008532 <_printf_float+0xb6>
 8008852:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008856:	2200      	movs	r2, #0
 8008858:	2300      	movs	r3, #0
 800885a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800885e:	f7f8 f9b3 	bl	8000bc8 <__aeabi_dcmpeq>
 8008862:	b9c0      	cbnz	r0, 8008896 <_printf_float+0x41a>
 8008864:	4653      	mov	r3, sl
 8008866:	f108 0201 	add.w	r2, r8, #1
 800886a:	4631      	mov	r1, r6
 800886c:	4628      	mov	r0, r5
 800886e:	47b8      	blx	r7
 8008870:	3001      	adds	r0, #1
 8008872:	d10c      	bne.n	800888e <_printf_float+0x412>
 8008874:	e65d      	b.n	8008532 <_printf_float+0xb6>
 8008876:	2301      	movs	r3, #1
 8008878:	465a      	mov	r2, fp
 800887a:	4631      	mov	r1, r6
 800887c:	4628      	mov	r0, r5
 800887e:	47b8      	blx	r7
 8008880:	3001      	adds	r0, #1
 8008882:	f43f ae56 	beq.w	8008532 <_printf_float+0xb6>
 8008886:	f108 0801 	add.w	r8, r8, #1
 800888a:	45d0      	cmp	r8, sl
 800888c:	dbf3      	blt.n	8008876 <_printf_float+0x3fa>
 800888e:	464b      	mov	r3, r9
 8008890:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008894:	e6df      	b.n	8008656 <_printf_float+0x1da>
 8008896:	f04f 0800 	mov.w	r8, #0
 800889a:	f104 0b1a 	add.w	fp, r4, #26
 800889e:	e7f4      	b.n	800888a <_printf_float+0x40e>
 80088a0:	2301      	movs	r3, #1
 80088a2:	4642      	mov	r2, r8
 80088a4:	e7e1      	b.n	800886a <_printf_float+0x3ee>
 80088a6:	2301      	movs	r3, #1
 80088a8:	464a      	mov	r2, r9
 80088aa:	4631      	mov	r1, r6
 80088ac:	4628      	mov	r0, r5
 80088ae:	47b8      	blx	r7
 80088b0:	3001      	adds	r0, #1
 80088b2:	f43f ae3e 	beq.w	8008532 <_printf_float+0xb6>
 80088b6:	f108 0801 	add.w	r8, r8, #1
 80088ba:	68e3      	ldr	r3, [r4, #12]
 80088bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088be:	1a5b      	subs	r3, r3, r1
 80088c0:	4543      	cmp	r3, r8
 80088c2:	dcf0      	bgt.n	80088a6 <_printf_float+0x42a>
 80088c4:	e6fc      	b.n	80086c0 <_printf_float+0x244>
 80088c6:	f04f 0800 	mov.w	r8, #0
 80088ca:	f104 0919 	add.w	r9, r4, #25
 80088ce:	e7f4      	b.n	80088ba <_printf_float+0x43e>

080088d0 <_printf_common>:
 80088d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088d4:	4616      	mov	r6, r2
 80088d6:	4698      	mov	r8, r3
 80088d8:	688a      	ldr	r2, [r1, #8]
 80088da:	690b      	ldr	r3, [r1, #16]
 80088dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088e0:	4293      	cmp	r3, r2
 80088e2:	bfb8      	it	lt
 80088e4:	4613      	movlt	r3, r2
 80088e6:	6033      	str	r3, [r6, #0]
 80088e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80088ec:	4607      	mov	r7, r0
 80088ee:	460c      	mov	r4, r1
 80088f0:	b10a      	cbz	r2, 80088f6 <_printf_common+0x26>
 80088f2:	3301      	adds	r3, #1
 80088f4:	6033      	str	r3, [r6, #0]
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	0699      	lsls	r1, r3, #26
 80088fa:	bf42      	ittt	mi
 80088fc:	6833      	ldrmi	r3, [r6, #0]
 80088fe:	3302      	addmi	r3, #2
 8008900:	6033      	strmi	r3, [r6, #0]
 8008902:	6825      	ldr	r5, [r4, #0]
 8008904:	f015 0506 	ands.w	r5, r5, #6
 8008908:	d106      	bne.n	8008918 <_printf_common+0x48>
 800890a:	f104 0a19 	add.w	sl, r4, #25
 800890e:	68e3      	ldr	r3, [r4, #12]
 8008910:	6832      	ldr	r2, [r6, #0]
 8008912:	1a9b      	subs	r3, r3, r2
 8008914:	42ab      	cmp	r3, r5
 8008916:	dc26      	bgt.n	8008966 <_printf_common+0x96>
 8008918:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800891c:	6822      	ldr	r2, [r4, #0]
 800891e:	3b00      	subs	r3, #0
 8008920:	bf18      	it	ne
 8008922:	2301      	movne	r3, #1
 8008924:	0692      	lsls	r2, r2, #26
 8008926:	d42b      	bmi.n	8008980 <_printf_common+0xb0>
 8008928:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800892c:	4641      	mov	r1, r8
 800892e:	4638      	mov	r0, r7
 8008930:	47c8      	blx	r9
 8008932:	3001      	adds	r0, #1
 8008934:	d01e      	beq.n	8008974 <_printf_common+0xa4>
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	6922      	ldr	r2, [r4, #16]
 800893a:	f003 0306 	and.w	r3, r3, #6
 800893e:	2b04      	cmp	r3, #4
 8008940:	bf02      	ittt	eq
 8008942:	68e5      	ldreq	r5, [r4, #12]
 8008944:	6833      	ldreq	r3, [r6, #0]
 8008946:	1aed      	subeq	r5, r5, r3
 8008948:	68a3      	ldr	r3, [r4, #8]
 800894a:	bf0c      	ite	eq
 800894c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008950:	2500      	movne	r5, #0
 8008952:	4293      	cmp	r3, r2
 8008954:	bfc4      	itt	gt
 8008956:	1a9b      	subgt	r3, r3, r2
 8008958:	18ed      	addgt	r5, r5, r3
 800895a:	2600      	movs	r6, #0
 800895c:	341a      	adds	r4, #26
 800895e:	42b5      	cmp	r5, r6
 8008960:	d11a      	bne.n	8008998 <_printf_common+0xc8>
 8008962:	2000      	movs	r0, #0
 8008964:	e008      	b.n	8008978 <_printf_common+0xa8>
 8008966:	2301      	movs	r3, #1
 8008968:	4652      	mov	r2, sl
 800896a:	4641      	mov	r1, r8
 800896c:	4638      	mov	r0, r7
 800896e:	47c8      	blx	r9
 8008970:	3001      	adds	r0, #1
 8008972:	d103      	bne.n	800897c <_printf_common+0xac>
 8008974:	f04f 30ff 	mov.w	r0, #4294967295
 8008978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800897c:	3501      	adds	r5, #1
 800897e:	e7c6      	b.n	800890e <_printf_common+0x3e>
 8008980:	18e1      	adds	r1, r4, r3
 8008982:	1c5a      	adds	r2, r3, #1
 8008984:	2030      	movs	r0, #48	@ 0x30
 8008986:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800898a:	4422      	add	r2, r4
 800898c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008990:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008994:	3302      	adds	r3, #2
 8008996:	e7c7      	b.n	8008928 <_printf_common+0x58>
 8008998:	2301      	movs	r3, #1
 800899a:	4622      	mov	r2, r4
 800899c:	4641      	mov	r1, r8
 800899e:	4638      	mov	r0, r7
 80089a0:	47c8      	blx	r9
 80089a2:	3001      	adds	r0, #1
 80089a4:	d0e6      	beq.n	8008974 <_printf_common+0xa4>
 80089a6:	3601      	adds	r6, #1
 80089a8:	e7d9      	b.n	800895e <_printf_common+0x8e>
	...

080089ac <_printf_i>:
 80089ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089b0:	7e0f      	ldrb	r7, [r1, #24]
 80089b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80089b4:	2f78      	cmp	r7, #120	@ 0x78
 80089b6:	4691      	mov	r9, r2
 80089b8:	4680      	mov	r8, r0
 80089ba:	460c      	mov	r4, r1
 80089bc:	469a      	mov	sl, r3
 80089be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80089c2:	d807      	bhi.n	80089d4 <_printf_i+0x28>
 80089c4:	2f62      	cmp	r7, #98	@ 0x62
 80089c6:	d80a      	bhi.n	80089de <_printf_i+0x32>
 80089c8:	2f00      	cmp	r7, #0
 80089ca:	f000 80d1 	beq.w	8008b70 <_printf_i+0x1c4>
 80089ce:	2f58      	cmp	r7, #88	@ 0x58
 80089d0:	f000 80b8 	beq.w	8008b44 <_printf_i+0x198>
 80089d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80089dc:	e03a      	b.n	8008a54 <_printf_i+0xa8>
 80089de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80089e2:	2b15      	cmp	r3, #21
 80089e4:	d8f6      	bhi.n	80089d4 <_printf_i+0x28>
 80089e6:	a101      	add	r1, pc, #4	@ (adr r1, 80089ec <_printf_i+0x40>)
 80089e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089ec:	08008a45 	.word	0x08008a45
 80089f0:	08008a59 	.word	0x08008a59
 80089f4:	080089d5 	.word	0x080089d5
 80089f8:	080089d5 	.word	0x080089d5
 80089fc:	080089d5 	.word	0x080089d5
 8008a00:	080089d5 	.word	0x080089d5
 8008a04:	08008a59 	.word	0x08008a59
 8008a08:	080089d5 	.word	0x080089d5
 8008a0c:	080089d5 	.word	0x080089d5
 8008a10:	080089d5 	.word	0x080089d5
 8008a14:	080089d5 	.word	0x080089d5
 8008a18:	08008b57 	.word	0x08008b57
 8008a1c:	08008a83 	.word	0x08008a83
 8008a20:	08008b11 	.word	0x08008b11
 8008a24:	080089d5 	.word	0x080089d5
 8008a28:	080089d5 	.word	0x080089d5
 8008a2c:	08008b79 	.word	0x08008b79
 8008a30:	080089d5 	.word	0x080089d5
 8008a34:	08008a83 	.word	0x08008a83
 8008a38:	080089d5 	.word	0x080089d5
 8008a3c:	080089d5 	.word	0x080089d5
 8008a40:	08008b19 	.word	0x08008b19
 8008a44:	6833      	ldr	r3, [r6, #0]
 8008a46:	1d1a      	adds	r2, r3, #4
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	6032      	str	r2, [r6, #0]
 8008a4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a54:	2301      	movs	r3, #1
 8008a56:	e09c      	b.n	8008b92 <_printf_i+0x1e6>
 8008a58:	6833      	ldr	r3, [r6, #0]
 8008a5a:	6820      	ldr	r0, [r4, #0]
 8008a5c:	1d19      	adds	r1, r3, #4
 8008a5e:	6031      	str	r1, [r6, #0]
 8008a60:	0606      	lsls	r6, r0, #24
 8008a62:	d501      	bpl.n	8008a68 <_printf_i+0xbc>
 8008a64:	681d      	ldr	r5, [r3, #0]
 8008a66:	e003      	b.n	8008a70 <_printf_i+0xc4>
 8008a68:	0645      	lsls	r5, r0, #25
 8008a6a:	d5fb      	bpl.n	8008a64 <_printf_i+0xb8>
 8008a6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a70:	2d00      	cmp	r5, #0
 8008a72:	da03      	bge.n	8008a7c <_printf_i+0xd0>
 8008a74:	232d      	movs	r3, #45	@ 0x2d
 8008a76:	426d      	negs	r5, r5
 8008a78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a7c:	4858      	ldr	r0, [pc, #352]	@ (8008be0 <_printf_i+0x234>)
 8008a7e:	230a      	movs	r3, #10
 8008a80:	e011      	b.n	8008aa6 <_printf_i+0xfa>
 8008a82:	6821      	ldr	r1, [r4, #0]
 8008a84:	6833      	ldr	r3, [r6, #0]
 8008a86:	0608      	lsls	r0, r1, #24
 8008a88:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a8c:	d402      	bmi.n	8008a94 <_printf_i+0xe8>
 8008a8e:	0649      	lsls	r1, r1, #25
 8008a90:	bf48      	it	mi
 8008a92:	b2ad      	uxthmi	r5, r5
 8008a94:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a96:	4852      	ldr	r0, [pc, #328]	@ (8008be0 <_printf_i+0x234>)
 8008a98:	6033      	str	r3, [r6, #0]
 8008a9a:	bf14      	ite	ne
 8008a9c:	230a      	movne	r3, #10
 8008a9e:	2308      	moveq	r3, #8
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008aa6:	6866      	ldr	r6, [r4, #4]
 8008aa8:	60a6      	str	r6, [r4, #8]
 8008aaa:	2e00      	cmp	r6, #0
 8008aac:	db05      	blt.n	8008aba <_printf_i+0x10e>
 8008aae:	6821      	ldr	r1, [r4, #0]
 8008ab0:	432e      	orrs	r6, r5
 8008ab2:	f021 0104 	bic.w	r1, r1, #4
 8008ab6:	6021      	str	r1, [r4, #0]
 8008ab8:	d04b      	beq.n	8008b52 <_printf_i+0x1a6>
 8008aba:	4616      	mov	r6, r2
 8008abc:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ac0:	fb03 5711 	mls	r7, r3, r1, r5
 8008ac4:	5dc7      	ldrb	r7, [r0, r7]
 8008ac6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008aca:	462f      	mov	r7, r5
 8008acc:	42bb      	cmp	r3, r7
 8008ace:	460d      	mov	r5, r1
 8008ad0:	d9f4      	bls.n	8008abc <_printf_i+0x110>
 8008ad2:	2b08      	cmp	r3, #8
 8008ad4:	d10b      	bne.n	8008aee <_printf_i+0x142>
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	07df      	lsls	r7, r3, #31
 8008ada:	d508      	bpl.n	8008aee <_printf_i+0x142>
 8008adc:	6923      	ldr	r3, [r4, #16]
 8008ade:	6861      	ldr	r1, [r4, #4]
 8008ae0:	4299      	cmp	r1, r3
 8008ae2:	bfde      	ittt	le
 8008ae4:	2330      	movle	r3, #48	@ 0x30
 8008ae6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008aea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008aee:	1b92      	subs	r2, r2, r6
 8008af0:	6122      	str	r2, [r4, #16]
 8008af2:	f8cd a000 	str.w	sl, [sp]
 8008af6:	464b      	mov	r3, r9
 8008af8:	aa03      	add	r2, sp, #12
 8008afa:	4621      	mov	r1, r4
 8008afc:	4640      	mov	r0, r8
 8008afe:	f7ff fee7 	bl	80088d0 <_printf_common>
 8008b02:	3001      	adds	r0, #1
 8008b04:	d14a      	bne.n	8008b9c <_printf_i+0x1f0>
 8008b06:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0a:	b004      	add	sp, #16
 8008b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b10:	6823      	ldr	r3, [r4, #0]
 8008b12:	f043 0320 	orr.w	r3, r3, #32
 8008b16:	6023      	str	r3, [r4, #0]
 8008b18:	4832      	ldr	r0, [pc, #200]	@ (8008be4 <_printf_i+0x238>)
 8008b1a:	2778      	movs	r7, #120	@ 0x78
 8008b1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	6831      	ldr	r1, [r6, #0]
 8008b24:	061f      	lsls	r7, r3, #24
 8008b26:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b2a:	d402      	bmi.n	8008b32 <_printf_i+0x186>
 8008b2c:	065f      	lsls	r7, r3, #25
 8008b2e:	bf48      	it	mi
 8008b30:	b2ad      	uxthmi	r5, r5
 8008b32:	6031      	str	r1, [r6, #0]
 8008b34:	07d9      	lsls	r1, r3, #31
 8008b36:	bf44      	itt	mi
 8008b38:	f043 0320 	orrmi.w	r3, r3, #32
 8008b3c:	6023      	strmi	r3, [r4, #0]
 8008b3e:	b11d      	cbz	r5, 8008b48 <_printf_i+0x19c>
 8008b40:	2310      	movs	r3, #16
 8008b42:	e7ad      	b.n	8008aa0 <_printf_i+0xf4>
 8008b44:	4826      	ldr	r0, [pc, #152]	@ (8008be0 <_printf_i+0x234>)
 8008b46:	e7e9      	b.n	8008b1c <_printf_i+0x170>
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	f023 0320 	bic.w	r3, r3, #32
 8008b4e:	6023      	str	r3, [r4, #0]
 8008b50:	e7f6      	b.n	8008b40 <_printf_i+0x194>
 8008b52:	4616      	mov	r6, r2
 8008b54:	e7bd      	b.n	8008ad2 <_printf_i+0x126>
 8008b56:	6833      	ldr	r3, [r6, #0]
 8008b58:	6825      	ldr	r5, [r4, #0]
 8008b5a:	6961      	ldr	r1, [r4, #20]
 8008b5c:	1d18      	adds	r0, r3, #4
 8008b5e:	6030      	str	r0, [r6, #0]
 8008b60:	062e      	lsls	r6, r5, #24
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	d501      	bpl.n	8008b6a <_printf_i+0x1be>
 8008b66:	6019      	str	r1, [r3, #0]
 8008b68:	e002      	b.n	8008b70 <_printf_i+0x1c4>
 8008b6a:	0668      	lsls	r0, r5, #25
 8008b6c:	d5fb      	bpl.n	8008b66 <_printf_i+0x1ba>
 8008b6e:	8019      	strh	r1, [r3, #0]
 8008b70:	2300      	movs	r3, #0
 8008b72:	6123      	str	r3, [r4, #16]
 8008b74:	4616      	mov	r6, r2
 8008b76:	e7bc      	b.n	8008af2 <_printf_i+0x146>
 8008b78:	6833      	ldr	r3, [r6, #0]
 8008b7a:	1d1a      	adds	r2, r3, #4
 8008b7c:	6032      	str	r2, [r6, #0]
 8008b7e:	681e      	ldr	r6, [r3, #0]
 8008b80:	6862      	ldr	r2, [r4, #4]
 8008b82:	2100      	movs	r1, #0
 8008b84:	4630      	mov	r0, r6
 8008b86:	f7f7 fba3 	bl	80002d0 <memchr>
 8008b8a:	b108      	cbz	r0, 8008b90 <_printf_i+0x1e4>
 8008b8c:	1b80      	subs	r0, r0, r6
 8008b8e:	6060      	str	r0, [r4, #4]
 8008b90:	6863      	ldr	r3, [r4, #4]
 8008b92:	6123      	str	r3, [r4, #16]
 8008b94:	2300      	movs	r3, #0
 8008b96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b9a:	e7aa      	b.n	8008af2 <_printf_i+0x146>
 8008b9c:	6923      	ldr	r3, [r4, #16]
 8008b9e:	4632      	mov	r2, r6
 8008ba0:	4649      	mov	r1, r9
 8008ba2:	4640      	mov	r0, r8
 8008ba4:	47d0      	blx	sl
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	d0ad      	beq.n	8008b06 <_printf_i+0x15a>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	079b      	lsls	r3, r3, #30
 8008bae:	d413      	bmi.n	8008bd8 <_printf_i+0x22c>
 8008bb0:	68e0      	ldr	r0, [r4, #12]
 8008bb2:	9b03      	ldr	r3, [sp, #12]
 8008bb4:	4298      	cmp	r0, r3
 8008bb6:	bfb8      	it	lt
 8008bb8:	4618      	movlt	r0, r3
 8008bba:	e7a6      	b.n	8008b0a <_printf_i+0x15e>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	4632      	mov	r2, r6
 8008bc0:	4649      	mov	r1, r9
 8008bc2:	4640      	mov	r0, r8
 8008bc4:	47d0      	blx	sl
 8008bc6:	3001      	adds	r0, #1
 8008bc8:	d09d      	beq.n	8008b06 <_printf_i+0x15a>
 8008bca:	3501      	adds	r5, #1
 8008bcc:	68e3      	ldr	r3, [r4, #12]
 8008bce:	9903      	ldr	r1, [sp, #12]
 8008bd0:	1a5b      	subs	r3, r3, r1
 8008bd2:	42ab      	cmp	r3, r5
 8008bd4:	dcf2      	bgt.n	8008bbc <_printf_i+0x210>
 8008bd6:	e7eb      	b.n	8008bb0 <_printf_i+0x204>
 8008bd8:	2500      	movs	r5, #0
 8008bda:	f104 0619 	add.w	r6, r4, #25
 8008bde:	e7f5      	b.n	8008bcc <_printf_i+0x220>
 8008be0:	0801f1da 	.word	0x0801f1da
 8008be4:	0801f1eb 	.word	0x0801f1eb

08008be8 <std>:
 8008be8:	2300      	movs	r3, #0
 8008bea:	b510      	push	{r4, lr}
 8008bec:	4604      	mov	r4, r0
 8008bee:	e9c0 3300 	strd	r3, r3, [r0]
 8008bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bf6:	6083      	str	r3, [r0, #8]
 8008bf8:	8181      	strh	r1, [r0, #12]
 8008bfa:	6643      	str	r3, [r0, #100]	@ 0x64
 8008bfc:	81c2      	strh	r2, [r0, #14]
 8008bfe:	6183      	str	r3, [r0, #24]
 8008c00:	4619      	mov	r1, r3
 8008c02:	2208      	movs	r2, #8
 8008c04:	305c      	adds	r0, #92	@ 0x5c
 8008c06:	f000 f989 	bl	8008f1c <memset>
 8008c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008c40 <std+0x58>)
 8008c0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c44 <std+0x5c>)
 8008c10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c12:	4b0d      	ldr	r3, [pc, #52]	@ (8008c48 <std+0x60>)
 8008c14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c16:	4b0d      	ldr	r3, [pc, #52]	@ (8008c4c <std+0x64>)
 8008c18:	6323      	str	r3, [r4, #48]	@ 0x30
 8008c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008c50 <std+0x68>)
 8008c1c:	6224      	str	r4, [r4, #32]
 8008c1e:	429c      	cmp	r4, r3
 8008c20:	d006      	beq.n	8008c30 <std+0x48>
 8008c22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008c26:	4294      	cmp	r4, r2
 8008c28:	d002      	beq.n	8008c30 <std+0x48>
 8008c2a:	33d0      	adds	r3, #208	@ 0xd0
 8008c2c:	429c      	cmp	r4, r3
 8008c2e:	d105      	bne.n	8008c3c <std+0x54>
 8008c30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c38:	f000 b9ec 	b.w	8009014 <__retarget_lock_init_recursive>
 8008c3c:	bd10      	pop	{r4, pc}
 8008c3e:	bf00      	nop
 8008c40:	08008d6d 	.word	0x08008d6d
 8008c44:	08008d8f 	.word	0x08008d8f
 8008c48:	08008dc7 	.word	0x08008dc7
 8008c4c:	08008deb 	.word	0x08008deb
 8008c50:	20009c54 	.word	0x20009c54

08008c54 <stdio_exit_handler>:
 8008c54:	4a02      	ldr	r2, [pc, #8]	@ (8008c60 <stdio_exit_handler+0xc>)
 8008c56:	4903      	ldr	r1, [pc, #12]	@ (8008c64 <stdio_exit_handler+0x10>)
 8008c58:	4803      	ldr	r0, [pc, #12]	@ (8008c68 <stdio_exit_handler+0x14>)
 8008c5a:	f000 b869 	b.w	8008d30 <_fwalk_sglue>
 8008c5e:	bf00      	nop
 8008c60:	20000048 	.word	0x20000048
 8008c64:	0800a6e5 	.word	0x0800a6e5
 8008c68:	20000058 	.word	0x20000058

08008c6c <cleanup_stdio>:
 8008c6c:	6841      	ldr	r1, [r0, #4]
 8008c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ca0 <cleanup_stdio+0x34>)
 8008c70:	4299      	cmp	r1, r3
 8008c72:	b510      	push	{r4, lr}
 8008c74:	4604      	mov	r4, r0
 8008c76:	d001      	beq.n	8008c7c <cleanup_stdio+0x10>
 8008c78:	f001 fd34 	bl	800a6e4 <_fflush_r>
 8008c7c:	68a1      	ldr	r1, [r4, #8]
 8008c7e:	4b09      	ldr	r3, [pc, #36]	@ (8008ca4 <cleanup_stdio+0x38>)
 8008c80:	4299      	cmp	r1, r3
 8008c82:	d002      	beq.n	8008c8a <cleanup_stdio+0x1e>
 8008c84:	4620      	mov	r0, r4
 8008c86:	f001 fd2d 	bl	800a6e4 <_fflush_r>
 8008c8a:	68e1      	ldr	r1, [r4, #12]
 8008c8c:	4b06      	ldr	r3, [pc, #24]	@ (8008ca8 <cleanup_stdio+0x3c>)
 8008c8e:	4299      	cmp	r1, r3
 8008c90:	d004      	beq.n	8008c9c <cleanup_stdio+0x30>
 8008c92:	4620      	mov	r0, r4
 8008c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c98:	f001 bd24 	b.w	800a6e4 <_fflush_r>
 8008c9c:	bd10      	pop	{r4, pc}
 8008c9e:	bf00      	nop
 8008ca0:	20009c54 	.word	0x20009c54
 8008ca4:	20009cbc 	.word	0x20009cbc
 8008ca8:	20009d24 	.word	0x20009d24

08008cac <global_stdio_init.part.0>:
 8008cac:	b510      	push	{r4, lr}
 8008cae:	4b0b      	ldr	r3, [pc, #44]	@ (8008cdc <global_stdio_init.part.0+0x30>)
 8008cb0:	4c0b      	ldr	r4, [pc, #44]	@ (8008ce0 <global_stdio_init.part.0+0x34>)
 8008cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8008ce4 <global_stdio_init.part.0+0x38>)
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	2200      	movs	r2, #0
 8008cba:	2104      	movs	r1, #4
 8008cbc:	f7ff ff94 	bl	8008be8 <std>
 8008cc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	2109      	movs	r1, #9
 8008cc8:	f7ff ff8e 	bl	8008be8 <std>
 8008ccc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cd6:	2112      	movs	r1, #18
 8008cd8:	f7ff bf86 	b.w	8008be8 <std>
 8008cdc:	20009d8c 	.word	0x20009d8c
 8008ce0:	20009c54 	.word	0x20009c54
 8008ce4:	08008c55 	.word	0x08008c55

08008ce8 <__sfp_lock_acquire>:
 8008ce8:	4801      	ldr	r0, [pc, #4]	@ (8008cf0 <__sfp_lock_acquire+0x8>)
 8008cea:	f000 b994 	b.w	8009016 <__retarget_lock_acquire_recursive>
 8008cee:	bf00      	nop
 8008cf0:	20009d95 	.word	0x20009d95

08008cf4 <__sfp_lock_release>:
 8008cf4:	4801      	ldr	r0, [pc, #4]	@ (8008cfc <__sfp_lock_release+0x8>)
 8008cf6:	f000 b98f 	b.w	8009018 <__retarget_lock_release_recursive>
 8008cfa:	bf00      	nop
 8008cfc:	20009d95 	.word	0x20009d95

08008d00 <__sinit>:
 8008d00:	b510      	push	{r4, lr}
 8008d02:	4604      	mov	r4, r0
 8008d04:	f7ff fff0 	bl	8008ce8 <__sfp_lock_acquire>
 8008d08:	6a23      	ldr	r3, [r4, #32]
 8008d0a:	b11b      	cbz	r3, 8008d14 <__sinit+0x14>
 8008d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d10:	f7ff bff0 	b.w	8008cf4 <__sfp_lock_release>
 8008d14:	4b04      	ldr	r3, [pc, #16]	@ (8008d28 <__sinit+0x28>)
 8008d16:	6223      	str	r3, [r4, #32]
 8008d18:	4b04      	ldr	r3, [pc, #16]	@ (8008d2c <__sinit+0x2c>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1f5      	bne.n	8008d0c <__sinit+0xc>
 8008d20:	f7ff ffc4 	bl	8008cac <global_stdio_init.part.0>
 8008d24:	e7f2      	b.n	8008d0c <__sinit+0xc>
 8008d26:	bf00      	nop
 8008d28:	08008c6d 	.word	0x08008c6d
 8008d2c:	20009d8c 	.word	0x20009d8c

08008d30 <_fwalk_sglue>:
 8008d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d34:	4607      	mov	r7, r0
 8008d36:	4688      	mov	r8, r1
 8008d38:	4614      	mov	r4, r2
 8008d3a:	2600      	movs	r6, #0
 8008d3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d40:	f1b9 0901 	subs.w	r9, r9, #1
 8008d44:	d505      	bpl.n	8008d52 <_fwalk_sglue+0x22>
 8008d46:	6824      	ldr	r4, [r4, #0]
 8008d48:	2c00      	cmp	r4, #0
 8008d4a:	d1f7      	bne.n	8008d3c <_fwalk_sglue+0xc>
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d52:	89ab      	ldrh	r3, [r5, #12]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d907      	bls.n	8008d68 <_fwalk_sglue+0x38>
 8008d58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	d003      	beq.n	8008d68 <_fwalk_sglue+0x38>
 8008d60:	4629      	mov	r1, r5
 8008d62:	4638      	mov	r0, r7
 8008d64:	47c0      	blx	r8
 8008d66:	4306      	orrs	r6, r0
 8008d68:	3568      	adds	r5, #104	@ 0x68
 8008d6a:	e7e9      	b.n	8008d40 <_fwalk_sglue+0x10>

08008d6c <__sread>:
 8008d6c:	b510      	push	{r4, lr}
 8008d6e:	460c      	mov	r4, r1
 8008d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d74:	f000 f900 	bl	8008f78 <_read_r>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	bfab      	itete	ge
 8008d7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d7e:	89a3      	ldrhlt	r3, [r4, #12]
 8008d80:	181b      	addge	r3, r3, r0
 8008d82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d86:	bfac      	ite	ge
 8008d88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d8a:	81a3      	strhlt	r3, [r4, #12]
 8008d8c:	bd10      	pop	{r4, pc}

08008d8e <__swrite>:
 8008d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d92:	461f      	mov	r7, r3
 8008d94:	898b      	ldrh	r3, [r1, #12]
 8008d96:	05db      	lsls	r3, r3, #23
 8008d98:	4605      	mov	r5, r0
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	4616      	mov	r6, r2
 8008d9e:	d505      	bpl.n	8008dac <__swrite+0x1e>
 8008da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da4:	2302      	movs	r3, #2
 8008da6:	2200      	movs	r2, #0
 8008da8:	f000 f8d4 	bl	8008f54 <_lseek_r>
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008db2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008db6:	81a3      	strh	r3, [r4, #12]
 8008db8:	4632      	mov	r2, r6
 8008dba:	463b      	mov	r3, r7
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc2:	f000 b8eb 	b.w	8008f9c <_write_r>

08008dc6 <__sseek>:
 8008dc6:	b510      	push	{r4, lr}
 8008dc8:	460c      	mov	r4, r1
 8008dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dce:	f000 f8c1 	bl	8008f54 <_lseek_r>
 8008dd2:	1c43      	adds	r3, r0, #1
 8008dd4:	89a3      	ldrh	r3, [r4, #12]
 8008dd6:	bf15      	itete	ne
 8008dd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008dda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008dde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008de2:	81a3      	strheq	r3, [r4, #12]
 8008de4:	bf18      	it	ne
 8008de6:	81a3      	strhne	r3, [r4, #12]
 8008de8:	bd10      	pop	{r4, pc}

08008dea <__sclose>:
 8008dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dee:	f000 b8a1 	b.w	8008f34 <_close_r>

08008df2 <__swbuf_r>:
 8008df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df4:	460e      	mov	r6, r1
 8008df6:	4614      	mov	r4, r2
 8008df8:	4605      	mov	r5, r0
 8008dfa:	b118      	cbz	r0, 8008e04 <__swbuf_r+0x12>
 8008dfc:	6a03      	ldr	r3, [r0, #32]
 8008dfe:	b90b      	cbnz	r3, 8008e04 <__swbuf_r+0x12>
 8008e00:	f7ff ff7e 	bl	8008d00 <__sinit>
 8008e04:	69a3      	ldr	r3, [r4, #24]
 8008e06:	60a3      	str	r3, [r4, #8]
 8008e08:	89a3      	ldrh	r3, [r4, #12]
 8008e0a:	071a      	lsls	r2, r3, #28
 8008e0c:	d501      	bpl.n	8008e12 <__swbuf_r+0x20>
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	b943      	cbnz	r3, 8008e24 <__swbuf_r+0x32>
 8008e12:	4621      	mov	r1, r4
 8008e14:	4628      	mov	r0, r5
 8008e16:	f000 f82b 	bl	8008e70 <__swsetup_r>
 8008e1a:	b118      	cbz	r0, 8008e24 <__swbuf_r+0x32>
 8008e1c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e20:	4638      	mov	r0, r7
 8008e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	6922      	ldr	r2, [r4, #16]
 8008e28:	1a98      	subs	r0, r3, r2
 8008e2a:	6963      	ldr	r3, [r4, #20]
 8008e2c:	b2f6      	uxtb	r6, r6
 8008e2e:	4283      	cmp	r3, r0
 8008e30:	4637      	mov	r7, r6
 8008e32:	dc05      	bgt.n	8008e40 <__swbuf_r+0x4e>
 8008e34:	4621      	mov	r1, r4
 8008e36:	4628      	mov	r0, r5
 8008e38:	f001 fc54 	bl	800a6e4 <_fflush_r>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d1ed      	bne.n	8008e1c <__swbuf_r+0x2a>
 8008e40:	68a3      	ldr	r3, [r4, #8]
 8008e42:	3b01      	subs	r3, #1
 8008e44:	60a3      	str	r3, [r4, #8]
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	1c5a      	adds	r2, r3, #1
 8008e4a:	6022      	str	r2, [r4, #0]
 8008e4c:	701e      	strb	r6, [r3, #0]
 8008e4e:	6962      	ldr	r2, [r4, #20]
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d004      	beq.n	8008e60 <__swbuf_r+0x6e>
 8008e56:	89a3      	ldrh	r3, [r4, #12]
 8008e58:	07db      	lsls	r3, r3, #31
 8008e5a:	d5e1      	bpl.n	8008e20 <__swbuf_r+0x2e>
 8008e5c:	2e0a      	cmp	r6, #10
 8008e5e:	d1df      	bne.n	8008e20 <__swbuf_r+0x2e>
 8008e60:	4621      	mov	r1, r4
 8008e62:	4628      	mov	r0, r5
 8008e64:	f001 fc3e 	bl	800a6e4 <_fflush_r>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d0d9      	beq.n	8008e20 <__swbuf_r+0x2e>
 8008e6c:	e7d6      	b.n	8008e1c <__swbuf_r+0x2a>
	...

08008e70 <__swsetup_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4b29      	ldr	r3, [pc, #164]	@ (8008f18 <__swsetup_r+0xa8>)
 8008e74:	4605      	mov	r5, r0
 8008e76:	6818      	ldr	r0, [r3, #0]
 8008e78:	460c      	mov	r4, r1
 8008e7a:	b118      	cbz	r0, 8008e84 <__swsetup_r+0x14>
 8008e7c:	6a03      	ldr	r3, [r0, #32]
 8008e7e:	b90b      	cbnz	r3, 8008e84 <__swsetup_r+0x14>
 8008e80:	f7ff ff3e 	bl	8008d00 <__sinit>
 8008e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e88:	0719      	lsls	r1, r3, #28
 8008e8a:	d422      	bmi.n	8008ed2 <__swsetup_r+0x62>
 8008e8c:	06da      	lsls	r2, r3, #27
 8008e8e:	d407      	bmi.n	8008ea0 <__swsetup_r+0x30>
 8008e90:	2209      	movs	r2, #9
 8008e92:	602a      	str	r2, [r5, #0]
 8008e94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e98:	81a3      	strh	r3, [r4, #12]
 8008e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9e:	e033      	b.n	8008f08 <__swsetup_r+0x98>
 8008ea0:	0758      	lsls	r0, r3, #29
 8008ea2:	d512      	bpl.n	8008eca <__swsetup_r+0x5a>
 8008ea4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ea6:	b141      	cbz	r1, 8008eba <__swsetup_r+0x4a>
 8008ea8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008eac:	4299      	cmp	r1, r3
 8008eae:	d002      	beq.n	8008eb6 <__swsetup_r+0x46>
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	f000 ff19 	bl	8009ce8 <_free_r>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ec0:	81a3      	strh	r3, [r4, #12]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	6063      	str	r3, [r4, #4]
 8008ec6:	6923      	ldr	r3, [r4, #16]
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	89a3      	ldrh	r3, [r4, #12]
 8008ecc:	f043 0308 	orr.w	r3, r3, #8
 8008ed0:	81a3      	strh	r3, [r4, #12]
 8008ed2:	6923      	ldr	r3, [r4, #16]
 8008ed4:	b94b      	cbnz	r3, 8008eea <__swsetup_r+0x7a>
 8008ed6:	89a3      	ldrh	r3, [r4, #12]
 8008ed8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ee0:	d003      	beq.n	8008eea <__swsetup_r+0x7a>
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f001 fc4b 	bl	800a780 <__smakebuf_r>
 8008eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eee:	f013 0201 	ands.w	r2, r3, #1
 8008ef2:	d00a      	beq.n	8008f0a <__swsetup_r+0x9a>
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	60a2      	str	r2, [r4, #8]
 8008ef8:	6962      	ldr	r2, [r4, #20]
 8008efa:	4252      	negs	r2, r2
 8008efc:	61a2      	str	r2, [r4, #24]
 8008efe:	6922      	ldr	r2, [r4, #16]
 8008f00:	b942      	cbnz	r2, 8008f14 <__swsetup_r+0xa4>
 8008f02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f06:	d1c5      	bne.n	8008e94 <__swsetup_r+0x24>
 8008f08:	bd38      	pop	{r3, r4, r5, pc}
 8008f0a:	0799      	lsls	r1, r3, #30
 8008f0c:	bf58      	it	pl
 8008f0e:	6962      	ldrpl	r2, [r4, #20]
 8008f10:	60a2      	str	r2, [r4, #8]
 8008f12:	e7f4      	b.n	8008efe <__swsetup_r+0x8e>
 8008f14:	2000      	movs	r0, #0
 8008f16:	e7f7      	b.n	8008f08 <__swsetup_r+0x98>
 8008f18:	20000054 	.word	0x20000054

08008f1c <memset>:
 8008f1c:	4402      	add	r2, r0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d100      	bne.n	8008f26 <memset+0xa>
 8008f24:	4770      	bx	lr
 8008f26:	f803 1b01 	strb.w	r1, [r3], #1
 8008f2a:	e7f9      	b.n	8008f20 <memset+0x4>

08008f2c <_localeconv_r>:
 8008f2c:	4800      	ldr	r0, [pc, #0]	@ (8008f30 <_localeconv_r+0x4>)
 8008f2e:	4770      	bx	lr
 8008f30:	20000194 	.word	0x20000194

08008f34 <_close_r>:
 8008f34:	b538      	push	{r3, r4, r5, lr}
 8008f36:	4d06      	ldr	r5, [pc, #24]	@ (8008f50 <_close_r+0x1c>)
 8008f38:	2300      	movs	r3, #0
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	4608      	mov	r0, r1
 8008f3e:	602b      	str	r3, [r5, #0]
 8008f40:	f001 ff78 	bl	800ae34 <_close>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d102      	bne.n	8008f4e <_close_r+0x1a>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	b103      	cbz	r3, 8008f4e <_close_r+0x1a>
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	20009d90 	.word	0x20009d90

08008f54 <_lseek_r>:
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	4d07      	ldr	r5, [pc, #28]	@ (8008f74 <_lseek_r+0x20>)
 8008f58:	4604      	mov	r4, r0
 8008f5a:	4608      	mov	r0, r1
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	2200      	movs	r2, #0
 8008f60:	602a      	str	r2, [r5, #0]
 8008f62:	461a      	mov	r2, r3
 8008f64:	f001 ff27 	bl	800adb6 <_lseek>
 8008f68:	1c43      	adds	r3, r0, #1
 8008f6a:	d102      	bne.n	8008f72 <_lseek_r+0x1e>
 8008f6c:	682b      	ldr	r3, [r5, #0]
 8008f6e:	b103      	cbz	r3, 8008f72 <_lseek_r+0x1e>
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	bd38      	pop	{r3, r4, r5, pc}
 8008f74:	20009d90 	.word	0x20009d90

08008f78 <_read_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	4d07      	ldr	r5, [pc, #28]	@ (8008f98 <_read_r+0x20>)
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	4608      	mov	r0, r1
 8008f80:	4611      	mov	r1, r2
 8008f82:	2200      	movs	r2, #0
 8008f84:	602a      	str	r2, [r5, #0]
 8008f86:	461a      	mov	r2, r3
 8008f88:	f001 febf 	bl	800ad0a <_read>
 8008f8c:	1c43      	adds	r3, r0, #1
 8008f8e:	d102      	bne.n	8008f96 <_read_r+0x1e>
 8008f90:	682b      	ldr	r3, [r5, #0]
 8008f92:	b103      	cbz	r3, 8008f96 <_read_r+0x1e>
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	bd38      	pop	{r3, r4, r5, pc}
 8008f98:	20009d90 	.word	0x20009d90

08008f9c <_write_r>:
 8008f9c:	b538      	push	{r3, r4, r5, lr}
 8008f9e:	4d07      	ldr	r5, [pc, #28]	@ (8008fbc <_write_r+0x20>)
 8008fa0:	4604      	mov	r4, r0
 8008fa2:	4608      	mov	r0, r1
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	602a      	str	r2, [r5, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	f001 ff15 	bl	800adda <_write>
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	d102      	bne.n	8008fba <_write_r+0x1e>
 8008fb4:	682b      	ldr	r3, [r5, #0]
 8008fb6:	b103      	cbz	r3, 8008fba <_write_r+0x1e>
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	bd38      	pop	{r3, r4, r5, pc}
 8008fbc:	20009d90 	.word	0x20009d90

08008fc0 <__errno>:
 8008fc0:	4b01      	ldr	r3, [pc, #4]	@ (8008fc8 <__errno+0x8>)
 8008fc2:	6818      	ldr	r0, [r3, #0]
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	20000054 	.word	0x20000054

08008fcc <__libc_init_array>:
 8008fcc:	b570      	push	{r4, r5, r6, lr}
 8008fce:	4d0d      	ldr	r5, [pc, #52]	@ (8009004 <__libc_init_array+0x38>)
 8008fd0:	4c0d      	ldr	r4, [pc, #52]	@ (8009008 <__libc_init_array+0x3c>)
 8008fd2:	1b64      	subs	r4, r4, r5
 8008fd4:	10a4      	asrs	r4, r4, #2
 8008fd6:	2600      	movs	r6, #0
 8008fd8:	42a6      	cmp	r6, r4
 8008fda:	d109      	bne.n	8008ff0 <__libc_init_array+0x24>
 8008fdc:	4d0b      	ldr	r5, [pc, #44]	@ (800900c <__libc_init_array+0x40>)
 8008fde:	4c0c      	ldr	r4, [pc, #48]	@ (8009010 <__libc_init_array+0x44>)
 8008fe0:	f002 fa6e 	bl	800b4c0 <_init>
 8008fe4:	1b64      	subs	r4, r4, r5
 8008fe6:	10a4      	asrs	r4, r4, #2
 8008fe8:	2600      	movs	r6, #0
 8008fea:	42a6      	cmp	r6, r4
 8008fec:	d105      	bne.n	8008ffa <__libc_init_array+0x2e>
 8008fee:	bd70      	pop	{r4, r5, r6, pc}
 8008ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ff4:	4798      	blx	r3
 8008ff6:	3601      	adds	r6, #1
 8008ff8:	e7ee      	b.n	8008fd8 <__libc_init_array+0xc>
 8008ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ffe:	4798      	blx	r3
 8009000:	3601      	adds	r6, #1
 8009002:	e7f2      	b.n	8008fea <__libc_init_array+0x1e>
 8009004:	0801f55c 	.word	0x0801f55c
 8009008:	0801f55c 	.word	0x0801f55c
 800900c:	0801f55c 	.word	0x0801f55c
 8009010:	0801f560 	.word	0x0801f560

08009014 <__retarget_lock_init_recursive>:
 8009014:	4770      	bx	lr

08009016 <__retarget_lock_acquire_recursive>:
 8009016:	4770      	bx	lr

08009018 <__retarget_lock_release_recursive>:
 8009018:	4770      	bx	lr

0800901a <memcpy>:
 800901a:	440a      	add	r2, r1
 800901c:	4291      	cmp	r1, r2
 800901e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009022:	d100      	bne.n	8009026 <memcpy+0xc>
 8009024:	4770      	bx	lr
 8009026:	b510      	push	{r4, lr}
 8009028:	f811 4b01 	ldrb.w	r4, [r1], #1
 800902c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009030:	4291      	cmp	r1, r2
 8009032:	d1f9      	bne.n	8009028 <memcpy+0xe>
 8009034:	bd10      	pop	{r4, pc}

08009036 <quorem>:
 8009036:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903a:	6903      	ldr	r3, [r0, #16]
 800903c:	690c      	ldr	r4, [r1, #16]
 800903e:	42a3      	cmp	r3, r4
 8009040:	4607      	mov	r7, r0
 8009042:	db7e      	blt.n	8009142 <quorem+0x10c>
 8009044:	3c01      	subs	r4, #1
 8009046:	f101 0814 	add.w	r8, r1, #20
 800904a:	00a3      	lsls	r3, r4, #2
 800904c:	f100 0514 	add.w	r5, r0, #20
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009056:	9301      	str	r3, [sp, #4]
 8009058:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800905c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009060:	3301      	adds	r3, #1
 8009062:	429a      	cmp	r2, r3
 8009064:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009068:	fbb2 f6f3 	udiv	r6, r2, r3
 800906c:	d32e      	bcc.n	80090cc <quorem+0x96>
 800906e:	f04f 0a00 	mov.w	sl, #0
 8009072:	46c4      	mov	ip, r8
 8009074:	46ae      	mov	lr, r5
 8009076:	46d3      	mov	fp, sl
 8009078:	f85c 3b04 	ldr.w	r3, [ip], #4
 800907c:	b298      	uxth	r0, r3
 800907e:	fb06 a000 	mla	r0, r6, r0, sl
 8009082:	0c02      	lsrs	r2, r0, #16
 8009084:	0c1b      	lsrs	r3, r3, #16
 8009086:	fb06 2303 	mla	r3, r6, r3, r2
 800908a:	f8de 2000 	ldr.w	r2, [lr]
 800908e:	b280      	uxth	r0, r0
 8009090:	b292      	uxth	r2, r2
 8009092:	1a12      	subs	r2, r2, r0
 8009094:	445a      	add	r2, fp
 8009096:	f8de 0000 	ldr.w	r0, [lr]
 800909a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800909e:	b29b      	uxth	r3, r3
 80090a0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80090a4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80090a8:	b292      	uxth	r2, r2
 80090aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80090ae:	45e1      	cmp	r9, ip
 80090b0:	f84e 2b04 	str.w	r2, [lr], #4
 80090b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80090b8:	d2de      	bcs.n	8009078 <quorem+0x42>
 80090ba:	9b00      	ldr	r3, [sp, #0]
 80090bc:	58eb      	ldr	r3, [r5, r3]
 80090be:	b92b      	cbnz	r3, 80090cc <quorem+0x96>
 80090c0:	9b01      	ldr	r3, [sp, #4]
 80090c2:	3b04      	subs	r3, #4
 80090c4:	429d      	cmp	r5, r3
 80090c6:	461a      	mov	r2, r3
 80090c8:	d32f      	bcc.n	800912a <quorem+0xf4>
 80090ca:	613c      	str	r4, [r7, #16]
 80090cc:	4638      	mov	r0, r7
 80090ce:	f001 f97d 	bl	800a3cc <__mcmp>
 80090d2:	2800      	cmp	r0, #0
 80090d4:	db25      	blt.n	8009122 <quorem+0xec>
 80090d6:	4629      	mov	r1, r5
 80090d8:	2000      	movs	r0, #0
 80090da:	f858 2b04 	ldr.w	r2, [r8], #4
 80090de:	f8d1 c000 	ldr.w	ip, [r1]
 80090e2:	fa1f fe82 	uxth.w	lr, r2
 80090e6:	fa1f f38c 	uxth.w	r3, ip
 80090ea:	eba3 030e 	sub.w	r3, r3, lr
 80090ee:	4403      	add	r3, r0
 80090f0:	0c12      	lsrs	r2, r2, #16
 80090f2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80090f6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009100:	45c1      	cmp	r9, r8
 8009102:	f841 3b04 	str.w	r3, [r1], #4
 8009106:	ea4f 4022 	mov.w	r0, r2, asr #16
 800910a:	d2e6      	bcs.n	80090da <quorem+0xa4>
 800910c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009110:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009114:	b922      	cbnz	r2, 8009120 <quorem+0xea>
 8009116:	3b04      	subs	r3, #4
 8009118:	429d      	cmp	r5, r3
 800911a:	461a      	mov	r2, r3
 800911c:	d30b      	bcc.n	8009136 <quorem+0x100>
 800911e:	613c      	str	r4, [r7, #16]
 8009120:	3601      	adds	r6, #1
 8009122:	4630      	mov	r0, r6
 8009124:	b003      	add	sp, #12
 8009126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800912a:	6812      	ldr	r2, [r2, #0]
 800912c:	3b04      	subs	r3, #4
 800912e:	2a00      	cmp	r2, #0
 8009130:	d1cb      	bne.n	80090ca <quorem+0x94>
 8009132:	3c01      	subs	r4, #1
 8009134:	e7c6      	b.n	80090c4 <quorem+0x8e>
 8009136:	6812      	ldr	r2, [r2, #0]
 8009138:	3b04      	subs	r3, #4
 800913a:	2a00      	cmp	r2, #0
 800913c:	d1ef      	bne.n	800911e <quorem+0xe8>
 800913e:	3c01      	subs	r4, #1
 8009140:	e7ea      	b.n	8009118 <quorem+0xe2>
 8009142:	2000      	movs	r0, #0
 8009144:	e7ee      	b.n	8009124 <quorem+0xee>
	...

08009148 <_dtoa_r>:
 8009148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914c:	69c7      	ldr	r7, [r0, #28]
 800914e:	b097      	sub	sp, #92	@ 0x5c
 8009150:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009154:	ec55 4b10 	vmov	r4, r5, d0
 8009158:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800915a:	9107      	str	r1, [sp, #28]
 800915c:	4681      	mov	r9, r0
 800915e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009160:	9311      	str	r3, [sp, #68]	@ 0x44
 8009162:	b97f      	cbnz	r7, 8009184 <_dtoa_r+0x3c>
 8009164:	2010      	movs	r0, #16
 8009166:	f000 fe09 	bl	8009d7c <malloc>
 800916a:	4602      	mov	r2, r0
 800916c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009170:	b920      	cbnz	r0, 800917c <_dtoa_r+0x34>
 8009172:	4ba9      	ldr	r3, [pc, #676]	@ (8009418 <_dtoa_r+0x2d0>)
 8009174:	21ef      	movs	r1, #239	@ 0xef
 8009176:	48a9      	ldr	r0, [pc, #676]	@ (800941c <_dtoa_r+0x2d4>)
 8009178:	f001 fb70 	bl	800a85c <__assert_func>
 800917c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009180:	6007      	str	r7, [r0, #0]
 8009182:	60c7      	str	r7, [r0, #12]
 8009184:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009188:	6819      	ldr	r1, [r3, #0]
 800918a:	b159      	cbz	r1, 80091a4 <_dtoa_r+0x5c>
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	604a      	str	r2, [r1, #4]
 8009190:	2301      	movs	r3, #1
 8009192:	4093      	lsls	r3, r2
 8009194:	608b      	str	r3, [r1, #8]
 8009196:	4648      	mov	r0, r9
 8009198:	f000 fee6 	bl	8009f68 <_Bfree>
 800919c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80091a0:	2200      	movs	r2, #0
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	1e2b      	subs	r3, r5, #0
 80091a6:	bfb9      	ittee	lt
 80091a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80091ac:	9305      	strlt	r3, [sp, #20]
 80091ae:	2300      	movge	r3, #0
 80091b0:	6033      	strge	r3, [r6, #0]
 80091b2:	9f05      	ldr	r7, [sp, #20]
 80091b4:	4b9a      	ldr	r3, [pc, #616]	@ (8009420 <_dtoa_r+0x2d8>)
 80091b6:	bfbc      	itt	lt
 80091b8:	2201      	movlt	r2, #1
 80091ba:	6032      	strlt	r2, [r6, #0]
 80091bc:	43bb      	bics	r3, r7
 80091be:	d112      	bne.n	80091e6 <_dtoa_r+0x9e>
 80091c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80091c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80091c6:	6013      	str	r3, [r2, #0]
 80091c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80091cc:	4323      	orrs	r3, r4
 80091ce:	f000 855a 	beq.w	8009c86 <_dtoa_r+0xb3e>
 80091d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80091d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009434 <_dtoa_r+0x2ec>
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 855c 	beq.w	8009c96 <_dtoa_r+0xb4e>
 80091de:	f10a 0303 	add.w	r3, sl, #3
 80091e2:	f000 bd56 	b.w	8009c92 <_dtoa_r+0xb4a>
 80091e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80091ea:	2200      	movs	r2, #0
 80091ec:	ec51 0b17 	vmov	r0, r1, d7
 80091f0:	2300      	movs	r3, #0
 80091f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80091f6:	f7f7 fce7 	bl	8000bc8 <__aeabi_dcmpeq>
 80091fa:	4680      	mov	r8, r0
 80091fc:	b158      	cbz	r0, 8009216 <_dtoa_r+0xce>
 80091fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009200:	2301      	movs	r3, #1
 8009202:	6013      	str	r3, [r2, #0]
 8009204:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009206:	b113      	cbz	r3, 800920e <_dtoa_r+0xc6>
 8009208:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800920a:	4b86      	ldr	r3, [pc, #536]	@ (8009424 <_dtoa_r+0x2dc>)
 800920c:	6013      	str	r3, [r2, #0]
 800920e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009438 <_dtoa_r+0x2f0>
 8009212:	f000 bd40 	b.w	8009c96 <_dtoa_r+0xb4e>
 8009216:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800921a:	aa14      	add	r2, sp, #80	@ 0x50
 800921c:	a915      	add	r1, sp, #84	@ 0x54
 800921e:	4648      	mov	r0, r9
 8009220:	f001 f984 	bl	800a52c <__d2b>
 8009224:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009228:	9002      	str	r0, [sp, #8]
 800922a:	2e00      	cmp	r6, #0
 800922c:	d078      	beq.n	8009320 <_dtoa_r+0x1d8>
 800922e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009230:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009238:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800923c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009240:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009244:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009248:	4619      	mov	r1, r3
 800924a:	2200      	movs	r2, #0
 800924c:	4b76      	ldr	r3, [pc, #472]	@ (8009428 <_dtoa_r+0x2e0>)
 800924e:	f7f7 f89b 	bl	8000388 <__aeabi_dsub>
 8009252:	a36b      	add	r3, pc, #428	@ (adr r3, 8009400 <_dtoa_r+0x2b8>)
 8009254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009258:	f7f7 fa4e 	bl	80006f8 <__aeabi_dmul>
 800925c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009408 <_dtoa_r+0x2c0>)
 800925e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009262:	f7f7 f893 	bl	800038c <__adddf3>
 8009266:	4604      	mov	r4, r0
 8009268:	4630      	mov	r0, r6
 800926a:	460d      	mov	r5, r1
 800926c:	f7f7 f9da 	bl	8000624 <__aeabi_i2d>
 8009270:	a367      	add	r3, pc, #412	@ (adr r3, 8009410 <_dtoa_r+0x2c8>)
 8009272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009276:	f7f7 fa3f 	bl	80006f8 <__aeabi_dmul>
 800927a:	4602      	mov	r2, r0
 800927c:	460b      	mov	r3, r1
 800927e:	4620      	mov	r0, r4
 8009280:	4629      	mov	r1, r5
 8009282:	f7f7 f883 	bl	800038c <__adddf3>
 8009286:	4604      	mov	r4, r0
 8009288:	460d      	mov	r5, r1
 800928a:	f7f7 fce5 	bl	8000c58 <__aeabi_d2iz>
 800928e:	2200      	movs	r2, #0
 8009290:	4607      	mov	r7, r0
 8009292:	2300      	movs	r3, #0
 8009294:	4620      	mov	r0, r4
 8009296:	4629      	mov	r1, r5
 8009298:	f7f7 fca0 	bl	8000bdc <__aeabi_dcmplt>
 800929c:	b140      	cbz	r0, 80092b0 <_dtoa_r+0x168>
 800929e:	4638      	mov	r0, r7
 80092a0:	f7f7 f9c0 	bl	8000624 <__aeabi_i2d>
 80092a4:	4622      	mov	r2, r4
 80092a6:	462b      	mov	r3, r5
 80092a8:	f7f7 fc8e 	bl	8000bc8 <__aeabi_dcmpeq>
 80092ac:	b900      	cbnz	r0, 80092b0 <_dtoa_r+0x168>
 80092ae:	3f01      	subs	r7, #1
 80092b0:	2f16      	cmp	r7, #22
 80092b2:	d852      	bhi.n	800935a <_dtoa_r+0x212>
 80092b4:	4b5d      	ldr	r3, [pc, #372]	@ (800942c <_dtoa_r+0x2e4>)
 80092b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80092ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80092c2:	f7f7 fc8b 	bl	8000bdc <__aeabi_dcmplt>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d049      	beq.n	800935e <_dtoa_r+0x216>
 80092ca:	3f01      	subs	r7, #1
 80092cc:	2300      	movs	r3, #0
 80092ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80092d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80092d2:	1b9b      	subs	r3, r3, r6
 80092d4:	1e5a      	subs	r2, r3, #1
 80092d6:	bf45      	ittet	mi
 80092d8:	f1c3 0301 	rsbmi	r3, r3, #1
 80092dc:	9300      	strmi	r3, [sp, #0]
 80092de:	2300      	movpl	r3, #0
 80092e0:	2300      	movmi	r3, #0
 80092e2:	9206      	str	r2, [sp, #24]
 80092e4:	bf54      	ite	pl
 80092e6:	9300      	strpl	r3, [sp, #0]
 80092e8:	9306      	strmi	r3, [sp, #24]
 80092ea:	2f00      	cmp	r7, #0
 80092ec:	db39      	blt.n	8009362 <_dtoa_r+0x21a>
 80092ee:	9b06      	ldr	r3, [sp, #24]
 80092f0:	970d      	str	r7, [sp, #52]	@ 0x34
 80092f2:	443b      	add	r3, r7
 80092f4:	9306      	str	r3, [sp, #24]
 80092f6:	2300      	movs	r3, #0
 80092f8:	9308      	str	r3, [sp, #32]
 80092fa:	9b07      	ldr	r3, [sp, #28]
 80092fc:	2b09      	cmp	r3, #9
 80092fe:	d863      	bhi.n	80093c8 <_dtoa_r+0x280>
 8009300:	2b05      	cmp	r3, #5
 8009302:	bfc4      	itt	gt
 8009304:	3b04      	subgt	r3, #4
 8009306:	9307      	strgt	r3, [sp, #28]
 8009308:	9b07      	ldr	r3, [sp, #28]
 800930a:	f1a3 0302 	sub.w	r3, r3, #2
 800930e:	bfcc      	ite	gt
 8009310:	2400      	movgt	r4, #0
 8009312:	2401      	movle	r4, #1
 8009314:	2b03      	cmp	r3, #3
 8009316:	d863      	bhi.n	80093e0 <_dtoa_r+0x298>
 8009318:	e8df f003 	tbb	[pc, r3]
 800931c:	2b375452 	.word	0x2b375452
 8009320:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009324:	441e      	add	r6, r3
 8009326:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800932a:	2b20      	cmp	r3, #32
 800932c:	bfc1      	itttt	gt
 800932e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009332:	409f      	lslgt	r7, r3
 8009334:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009338:	fa24 f303 	lsrgt.w	r3, r4, r3
 800933c:	bfd6      	itet	le
 800933e:	f1c3 0320 	rsble	r3, r3, #32
 8009342:	ea47 0003 	orrgt.w	r0, r7, r3
 8009346:	fa04 f003 	lslle.w	r0, r4, r3
 800934a:	f7f7 f95b 	bl	8000604 <__aeabi_ui2d>
 800934e:	2201      	movs	r2, #1
 8009350:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009354:	3e01      	subs	r6, #1
 8009356:	9212      	str	r2, [sp, #72]	@ 0x48
 8009358:	e776      	b.n	8009248 <_dtoa_r+0x100>
 800935a:	2301      	movs	r3, #1
 800935c:	e7b7      	b.n	80092ce <_dtoa_r+0x186>
 800935e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009360:	e7b6      	b.n	80092d0 <_dtoa_r+0x188>
 8009362:	9b00      	ldr	r3, [sp, #0]
 8009364:	1bdb      	subs	r3, r3, r7
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	427b      	negs	r3, r7
 800936a:	9308      	str	r3, [sp, #32]
 800936c:	2300      	movs	r3, #0
 800936e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009370:	e7c3      	b.n	80092fa <_dtoa_r+0x1b2>
 8009372:	2301      	movs	r3, #1
 8009374:	9309      	str	r3, [sp, #36]	@ 0x24
 8009376:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009378:	eb07 0b03 	add.w	fp, r7, r3
 800937c:	f10b 0301 	add.w	r3, fp, #1
 8009380:	2b01      	cmp	r3, #1
 8009382:	9303      	str	r3, [sp, #12]
 8009384:	bfb8      	it	lt
 8009386:	2301      	movlt	r3, #1
 8009388:	e006      	b.n	8009398 <_dtoa_r+0x250>
 800938a:	2301      	movs	r3, #1
 800938c:	9309      	str	r3, [sp, #36]	@ 0x24
 800938e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009390:	2b00      	cmp	r3, #0
 8009392:	dd28      	ble.n	80093e6 <_dtoa_r+0x29e>
 8009394:	469b      	mov	fp, r3
 8009396:	9303      	str	r3, [sp, #12]
 8009398:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800939c:	2100      	movs	r1, #0
 800939e:	2204      	movs	r2, #4
 80093a0:	f102 0514 	add.w	r5, r2, #20
 80093a4:	429d      	cmp	r5, r3
 80093a6:	d926      	bls.n	80093f6 <_dtoa_r+0x2ae>
 80093a8:	6041      	str	r1, [r0, #4]
 80093aa:	4648      	mov	r0, r9
 80093ac:	f000 fd9c 	bl	8009ee8 <_Balloc>
 80093b0:	4682      	mov	sl, r0
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d142      	bne.n	800943c <_dtoa_r+0x2f4>
 80093b6:	4b1e      	ldr	r3, [pc, #120]	@ (8009430 <_dtoa_r+0x2e8>)
 80093b8:	4602      	mov	r2, r0
 80093ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80093be:	e6da      	b.n	8009176 <_dtoa_r+0x2e>
 80093c0:	2300      	movs	r3, #0
 80093c2:	e7e3      	b.n	800938c <_dtoa_r+0x244>
 80093c4:	2300      	movs	r3, #0
 80093c6:	e7d5      	b.n	8009374 <_dtoa_r+0x22c>
 80093c8:	2401      	movs	r4, #1
 80093ca:	2300      	movs	r3, #0
 80093cc:	9307      	str	r3, [sp, #28]
 80093ce:	9409      	str	r4, [sp, #36]	@ 0x24
 80093d0:	f04f 3bff 	mov.w	fp, #4294967295
 80093d4:	2200      	movs	r2, #0
 80093d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80093da:	2312      	movs	r3, #18
 80093dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80093de:	e7db      	b.n	8009398 <_dtoa_r+0x250>
 80093e0:	2301      	movs	r3, #1
 80093e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093e4:	e7f4      	b.n	80093d0 <_dtoa_r+0x288>
 80093e6:	f04f 0b01 	mov.w	fp, #1
 80093ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80093ee:	465b      	mov	r3, fp
 80093f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80093f4:	e7d0      	b.n	8009398 <_dtoa_r+0x250>
 80093f6:	3101      	adds	r1, #1
 80093f8:	0052      	lsls	r2, r2, #1
 80093fa:	e7d1      	b.n	80093a0 <_dtoa_r+0x258>
 80093fc:	f3af 8000 	nop.w
 8009400:	636f4361 	.word	0x636f4361
 8009404:	3fd287a7 	.word	0x3fd287a7
 8009408:	8b60c8b3 	.word	0x8b60c8b3
 800940c:	3fc68a28 	.word	0x3fc68a28
 8009410:	509f79fb 	.word	0x509f79fb
 8009414:	3fd34413 	.word	0x3fd34413
 8009418:	0801f209 	.word	0x0801f209
 800941c:	0801f220 	.word	0x0801f220
 8009420:	7ff00000 	.word	0x7ff00000
 8009424:	0801f1d9 	.word	0x0801f1d9
 8009428:	3ff80000 	.word	0x3ff80000
 800942c:	0801f388 	.word	0x0801f388
 8009430:	0801f278 	.word	0x0801f278
 8009434:	0801f205 	.word	0x0801f205
 8009438:	0801f1d8 	.word	0x0801f1d8
 800943c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009440:	6018      	str	r0, [r3, #0]
 8009442:	9b03      	ldr	r3, [sp, #12]
 8009444:	2b0e      	cmp	r3, #14
 8009446:	f200 80a1 	bhi.w	800958c <_dtoa_r+0x444>
 800944a:	2c00      	cmp	r4, #0
 800944c:	f000 809e 	beq.w	800958c <_dtoa_r+0x444>
 8009450:	2f00      	cmp	r7, #0
 8009452:	dd33      	ble.n	80094bc <_dtoa_r+0x374>
 8009454:	4b9c      	ldr	r3, [pc, #624]	@ (80096c8 <_dtoa_r+0x580>)
 8009456:	f007 020f 	and.w	r2, r7, #15
 800945a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800945e:	ed93 7b00 	vldr	d7, [r3]
 8009462:	05f8      	lsls	r0, r7, #23
 8009464:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009468:	ea4f 1427 	mov.w	r4, r7, asr #4
 800946c:	d516      	bpl.n	800949c <_dtoa_r+0x354>
 800946e:	4b97      	ldr	r3, [pc, #604]	@ (80096cc <_dtoa_r+0x584>)
 8009470:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009474:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009478:	f7f7 fa68 	bl	800094c <__aeabi_ddiv>
 800947c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009480:	f004 040f 	and.w	r4, r4, #15
 8009484:	2603      	movs	r6, #3
 8009486:	4d91      	ldr	r5, [pc, #580]	@ (80096cc <_dtoa_r+0x584>)
 8009488:	b954      	cbnz	r4, 80094a0 <_dtoa_r+0x358>
 800948a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800948e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009492:	f7f7 fa5b 	bl	800094c <__aeabi_ddiv>
 8009496:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800949a:	e028      	b.n	80094ee <_dtoa_r+0x3a6>
 800949c:	2602      	movs	r6, #2
 800949e:	e7f2      	b.n	8009486 <_dtoa_r+0x33e>
 80094a0:	07e1      	lsls	r1, r4, #31
 80094a2:	d508      	bpl.n	80094b6 <_dtoa_r+0x36e>
 80094a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80094a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80094ac:	f7f7 f924 	bl	80006f8 <__aeabi_dmul>
 80094b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80094b4:	3601      	adds	r6, #1
 80094b6:	1064      	asrs	r4, r4, #1
 80094b8:	3508      	adds	r5, #8
 80094ba:	e7e5      	b.n	8009488 <_dtoa_r+0x340>
 80094bc:	f000 80af 	beq.w	800961e <_dtoa_r+0x4d6>
 80094c0:	427c      	negs	r4, r7
 80094c2:	4b81      	ldr	r3, [pc, #516]	@ (80096c8 <_dtoa_r+0x580>)
 80094c4:	4d81      	ldr	r5, [pc, #516]	@ (80096cc <_dtoa_r+0x584>)
 80094c6:	f004 020f 	and.w	r2, r4, #15
 80094ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80094d6:	f7f7 f90f 	bl	80006f8 <__aeabi_dmul>
 80094da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094de:	1124      	asrs	r4, r4, #4
 80094e0:	2300      	movs	r3, #0
 80094e2:	2602      	movs	r6, #2
 80094e4:	2c00      	cmp	r4, #0
 80094e6:	f040 808f 	bne.w	8009608 <_dtoa_r+0x4c0>
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1d3      	bne.n	8009496 <_dtoa_r+0x34e>
 80094ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f000 8094 	beq.w	8009622 <_dtoa_r+0x4da>
 80094fa:	4b75      	ldr	r3, [pc, #468]	@ (80096d0 <_dtoa_r+0x588>)
 80094fc:	2200      	movs	r2, #0
 80094fe:	4620      	mov	r0, r4
 8009500:	4629      	mov	r1, r5
 8009502:	f7f7 fb6b 	bl	8000bdc <__aeabi_dcmplt>
 8009506:	2800      	cmp	r0, #0
 8009508:	f000 808b 	beq.w	8009622 <_dtoa_r+0x4da>
 800950c:	9b03      	ldr	r3, [sp, #12]
 800950e:	2b00      	cmp	r3, #0
 8009510:	f000 8087 	beq.w	8009622 <_dtoa_r+0x4da>
 8009514:	f1bb 0f00 	cmp.w	fp, #0
 8009518:	dd34      	ble.n	8009584 <_dtoa_r+0x43c>
 800951a:	4620      	mov	r0, r4
 800951c:	4b6d      	ldr	r3, [pc, #436]	@ (80096d4 <_dtoa_r+0x58c>)
 800951e:	2200      	movs	r2, #0
 8009520:	4629      	mov	r1, r5
 8009522:	f7f7 f8e9 	bl	80006f8 <__aeabi_dmul>
 8009526:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800952a:	f107 38ff 	add.w	r8, r7, #4294967295
 800952e:	3601      	adds	r6, #1
 8009530:	465c      	mov	r4, fp
 8009532:	4630      	mov	r0, r6
 8009534:	f7f7 f876 	bl	8000624 <__aeabi_i2d>
 8009538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800953c:	f7f7 f8dc 	bl	80006f8 <__aeabi_dmul>
 8009540:	4b65      	ldr	r3, [pc, #404]	@ (80096d8 <_dtoa_r+0x590>)
 8009542:	2200      	movs	r2, #0
 8009544:	f7f6 ff22 	bl	800038c <__adddf3>
 8009548:	4605      	mov	r5, r0
 800954a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800954e:	2c00      	cmp	r4, #0
 8009550:	d16a      	bne.n	8009628 <_dtoa_r+0x4e0>
 8009552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009556:	4b61      	ldr	r3, [pc, #388]	@ (80096dc <_dtoa_r+0x594>)
 8009558:	2200      	movs	r2, #0
 800955a:	f7f6 ff15 	bl	8000388 <__aeabi_dsub>
 800955e:	4602      	mov	r2, r0
 8009560:	460b      	mov	r3, r1
 8009562:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009566:	462a      	mov	r2, r5
 8009568:	4633      	mov	r3, r6
 800956a:	f7f7 fb55 	bl	8000c18 <__aeabi_dcmpgt>
 800956e:	2800      	cmp	r0, #0
 8009570:	f040 8298 	bne.w	8009aa4 <_dtoa_r+0x95c>
 8009574:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009578:	462a      	mov	r2, r5
 800957a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800957e:	f7f7 fb2d 	bl	8000bdc <__aeabi_dcmplt>
 8009582:	bb38      	cbnz	r0, 80095d4 <_dtoa_r+0x48c>
 8009584:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009588:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800958c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800958e:	2b00      	cmp	r3, #0
 8009590:	f2c0 8157 	blt.w	8009842 <_dtoa_r+0x6fa>
 8009594:	2f0e      	cmp	r7, #14
 8009596:	f300 8154 	bgt.w	8009842 <_dtoa_r+0x6fa>
 800959a:	4b4b      	ldr	r3, [pc, #300]	@ (80096c8 <_dtoa_r+0x580>)
 800959c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095a0:	ed93 7b00 	vldr	d7, [r3]
 80095a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	ed8d 7b00 	vstr	d7, [sp]
 80095ac:	f280 80e5 	bge.w	800977a <_dtoa_r+0x632>
 80095b0:	9b03      	ldr	r3, [sp, #12]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f300 80e1 	bgt.w	800977a <_dtoa_r+0x632>
 80095b8:	d10c      	bne.n	80095d4 <_dtoa_r+0x48c>
 80095ba:	4b48      	ldr	r3, [pc, #288]	@ (80096dc <_dtoa_r+0x594>)
 80095bc:	2200      	movs	r2, #0
 80095be:	ec51 0b17 	vmov	r0, r1, d7
 80095c2:	f7f7 f899 	bl	80006f8 <__aeabi_dmul>
 80095c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095ca:	f7f7 fb1b 	bl	8000c04 <__aeabi_dcmpge>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	f000 8266 	beq.w	8009aa0 <_dtoa_r+0x958>
 80095d4:	2400      	movs	r4, #0
 80095d6:	4625      	mov	r5, r4
 80095d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095da:	4656      	mov	r6, sl
 80095dc:	ea6f 0803 	mvn.w	r8, r3
 80095e0:	2700      	movs	r7, #0
 80095e2:	4621      	mov	r1, r4
 80095e4:	4648      	mov	r0, r9
 80095e6:	f000 fcbf 	bl	8009f68 <_Bfree>
 80095ea:	2d00      	cmp	r5, #0
 80095ec:	f000 80bd 	beq.w	800976a <_dtoa_r+0x622>
 80095f0:	b12f      	cbz	r7, 80095fe <_dtoa_r+0x4b6>
 80095f2:	42af      	cmp	r7, r5
 80095f4:	d003      	beq.n	80095fe <_dtoa_r+0x4b6>
 80095f6:	4639      	mov	r1, r7
 80095f8:	4648      	mov	r0, r9
 80095fa:	f000 fcb5 	bl	8009f68 <_Bfree>
 80095fe:	4629      	mov	r1, r5
 8009600:	4648      	mov	r0, r9
 8009602:	f000 fcb1 	bl	8009f68 <_Bfree>
 8009606:	e0b0      	b.n	800976a <_dtoa_r+0x622>
 8009608:	07e2      	lsls	r2, r4, #31
 800960a:	d505      	bpl.n	8009618 <_dtoa_r+0x4d0>
 800960c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009610:	f7f7 f872 	bl	80006f8 <__aeabi_dmul>
 8009614:	3601      	adds	r6, #1
 8009616:	2301      	movs	r3, #1
 8009618:	1064      	asrs	r4, r4, #1
 800961a:	3508      	adds	r5, #8
 800961c:	e762      	b.n	80094e4 <_dtoa_r+0x39c>
 800961e:	2602      	movs	r6, #2
 8009620:	e765      	b.n	80094ee <_dtoa_r+0x3a6>
 8009622:	9c03      	ldr	r4, [sp, #12]
 8009624:	46b8      	mov	r8, r7
 8009626:	e784      	b.n	8009532 <_dtoa_r+0x3ea>
 8009628:	4b27      	ldr	r3, [pc, #156]	@ (80096c8 <_dtoa_r+0x580>)
 800962a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800962c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009630:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009634:	4454      	add	r4, sl
 8009636:	2900      	cmp	r1, #0
 8009638:	d054      	beq.n	80096e4 <_dtoa_r+0x59c>
 800963a:	4929      	ldr	r1, [pc, #164]	@ (80096e0 <_dtoa_r+0x598>)
 800963c:	2000      	movs	r0, #0
 800963e:	f7f7 f985 	bl	800094c <__aeabi_ddiv>
 8009642:	4633      	mov	r3, r6
 8009644:	462a      	mov	r2, r5
 8009646:	f7f6 fe9f 	bl	8000388 <__aeabi_dsub>
 800964a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800964e:	4656      	mov	r6, sl
 8009650:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009654:	f7f7 fb00 	bl	8000c58 <__aeabi_d2iz>
 8009658:	4605      	mov	r5, r0
 800965a:	f7f6 ffe3 	bl	8000624 <__aeabi_i2d>
 800965e:	4602      	mov	r2, r0
 8009660:	460b      	mov	r3, r1
 8009662:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009666:	f7f6 fe8f 	bl	8000388 <__aeabi_dsub>
 800966a:	3530      	adds	r5, #48	@ 0x30
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009674:	f806 5b01 	strb.w	r5, [r6], #1
 8009678:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800967c:	f7f7 faae 	bl	8000bdc <__aeabi_dcmplt>
 8009680:	2800      	cmp	r0, #0
 8009682:	d172      	bne.n	800976a <_dtoa_r+0x622>
 8009684:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009688:	4911      	ldr	r1, [pc, #68]	@ (80096d0 <_dtoa_r+0x588>)
 800968a:	2000      	movs	r0, #0
 800968c:	f7f6 fe7c 	bl	8000388 <__aeabi_dsub>
 8009690:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009694:	f7f7 faa2 	bl	8000bdc <__aeabi_dcmplt>
 8009698:	2800      	cmp	r0, #0
 800969a:	f040 80b4 	bne.w	8009806 <_dtoa_r+0x6be>
 800969e:	42a6      	cmp	r6, r4
 80096a0:	f43f af70 	beq.w	8009584 <_dtoa_r+0x43c>
 80096a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80096a8:	4b0a      	ldr	r3, [pc, #40]	@ (80096d4 <_dtoa_r+0x58c>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	f7f7 f824 	bl	80006f8 <__aeabi_dmul>
 80096b0:	4b08      	ldr	r3, [pc, #32]	@ (80096d4 <_dtoa_r+0x58c>)
 80096b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80096b6:	2200      	movs	r2, #0
 80096b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096bc:	f7f7 f81c 	bl	80006f8 <__aeabi_dmul>
 80096c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096c4:	e7c4      	b.n	8009650 <_dtoa_r+0x508>
 80096c6:	bf00      	nop
 80096c8:	0801f388 	.word	0x0801f388
 80096cc:	0801f360 	.word	0x0801f360
 80096d0:	3ff00000 	.word	0x3ff00000
 80096d4:	40240000 	.word	0x40240000
 80096d8:	401c0000 	.word	0x401c0000
 80096dc:	40140000 	.word	0x40140000
 80096e0:	3fe00000 	.word	0x3fe00000
 80096e4:	4631      	mov	r1, r6
 80096e6:	4628      	mov	r0, r5
 80096e8:	f7f7 f806 	bl	80006f8 <__aeabi_dmul>
 80096ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80096f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80096f2:	4656      	mov	r6, sl
 80096f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096f8:	f7f7 faae 	bl	8000c58 <__aeabi_d2iz>
 80096fc:	4605      	mov	r5, r0
 80096fe:	f7f6 ff91 	bl	8000624 <__aeabi_i2d>
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800970a:	f7f6 fe3d 	bl	8000388 <__aeabi_dsub>
 800970e:	3530      	adds	r5, #48	@ 0x30
 8009710:	f806 5b01 	strb.w	r5, [r6], #1
 8009714:	4602      	mov	r2, r0
 8009716:	460b      	mov	r3, r1
 8009718:	42a6      	cmp	r6, r4
 800971a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800971e:	f04f 0200 	mov.w	r2, #0
 8009722:	d124      	bne.n	800976e <_dtoa_r+0x626>
 8009724:	4baf      	ldr	r3, [pc, #700]	@ (80099e4 <_dtoa_r+0x89c>)
 8009726:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800972a:	f7f6 fe2f 	bl	800038c <__adddf3>
 800972e:	4602      	mov	r2, r0
 8009730:	460b      	mov	r3, r1
 8009732:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009736:	f7f7 fa6f 	bl	8000c18 <__aeabi_dcmpgt>
 800973a:	2800      	cmp	r0, #0
 800973c:	d163      	bne.n	8009806 <_dtoa_r+0x6be>
 800973e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009742:	49a8      	ldr	r1, [pc, #672]	@ (80099e4 <_dtoa_r+0x89c>)
 8009744:	2000      	movs	r0, #0
 8009746:	f7f6 fe1f 	bl	8000388 <__aeabi_dsub>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009752:	f7f7 fa43 	bl	8000bdc <__aeabi_dcmplt>
 8009756:	2800      	cmp	r0, #0
 8009758:	f43f af14 	beq.w	8009584 <_dtoa_r+0x43c>
 800975c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800975e:	1e73      	subs	r3, r6, #1
 8009760:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009762:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009766:	2b30      	cmp	r3, #48	@ 0x30
 8009768:	d0f8      	beq.n	800975c <_dtoa_r+0x614>
 800976a:	4647      	mov	r7, r8
 800976c:	e03b      	b.n	80097e6 <_dtoa_r+0x69e>
 800976e:	4b9e      	ldr	r3, [pc, #632]	@ (80099e8 <_dtoa_r+0x8a0>)
 8009770:	f7f6 ffc2 	bl	80006f8 <__aeabi_dmul>
 8009774:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009778:	e7bc      	b.n	80096f4 <_dtoa_r+0x5ac>
 800977a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800977e:	4656      	mov	r6, sl
 8009780:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009784:	4620      	mov	r0, r4
 8009786:	4629      	mov	r1, r5
 8009788:	f7f7 f8e0 	bl	800094c <__aeabi_ddiv>
 800978c:	f7f7 fa64 	bl	8000c58 <__aeabi_d2iz>
 8009790:	4680      	mov	r8, r0
 8009792:	f7f6 ff47 	bl	8000624 <__aeabi_i2d>
 8009796:	e9dd 2300 	ldrd	r2, r3, [sp]
 800979a:	f7f6 ffad 	bl	80006f8 <__aeabi_dmul>
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	4620      	mov	r0, r4
 80097a4:	4629      	mov	r1, r5
 80097a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80097aa:	f7f6 fded 	bl	8000388 <__aeabi_dsub>
 80097ae:	f806 4b01 	strb.w	r4, [r6], #1
 80097b2:	9d03      	ldr	r5, [sp, #12]
 80097b4:	eba6 040a 	sub.w	r4, r6, sl
 80097b8:	42a5      	cmp	r5, r4
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	d133      	bne.n	8009828 <_dtoa_r+0x6e0>
 80097c0:	f7f6 fde4 	bl	800038c <__adddf3>
 80097c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097c8:	4604      	mov	r4, r0
 80097ca:	460d      	mov	r5, r1
 80097cc:	f7f7 fa24 	bl	8000c18 <__aeabi_dcmpgt>
 80097d0:	b9c0      	cbnz	r0, 8009804 <_dtoa_r+0x6bc>
 80097d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097d6:	4620      	mov	r0, r4
 80097d8:	4629      	mov	r1, r5
 80097da:	f7f7 f9f5 	bl	8000bc8 <__aeabi_dcmpeq>
 80097de:	b110      	cbz	r0, 80097e6 <_dtoa_r+0x69e>
 80097e0:	f018 0f01 	tst.w	r8, #1
 80097e4:	d10e      	bne.n	8009804 <_dtoa_r+0x6bc>
 80097e6:	9902      	ldr	r1, [sp, #8]
 80097e8:	4648      	mov	r0, r9
 80097ea:	f000 fbbd 	bl	8009f68 <_Bfree>
 80097ee:	2300      	movs	r3, #0
 80097f0:	7033      	strb	r3, [r6, #0]
 80097f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80097f4:	3701      	adds	r7, #1
 80097f6:	601f      	str	r7, [r3, #0]
 80097f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f000 824b 	beq.w	8009c96 <_dtoa_r+0xb4e>
 8009800:	601e      	str	r6, [r3, #0]
 8009802:	e248      	b.n	8009c96 <_dtoa_r+0xb4e>
 8009804:	46b8      	mov	r8, r7
 8009806:	4633      	mov	r3, r6
 8009808:	461e      	mov	r6, r3
 800980a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800980e:	2a39      	cmp	r2, #57	@ 0x39
 8009810:	d106      	bne.n	8009820 <_dtoa_r+0x6d8>
 8009812:	459a      	cmp	sl, r3
 8009814:	d1f8      	bne.n	8009808 <_dtoa_r+0x6c0>
 8009816:	2230      	movs	r2, #48	@ 0x30
 8009818:	f108 0801 	add.w	r8, r8, #1
 800981c:	f88a 2000 	strb.w	r2, [sl]
 8009820:	781a      	ldrb	r2, [r3, #0]
 8009822:	3201      	adds	r2, #1
 8009824:	701a      	strb	r2, [r3, #0]
 8009826:	e7a0      	b.n	800976a <_dtoa_r+0x622>
 8009828:	4b6f      	ldr	r3, [pc, #444]	@ (80099e8 <_dtoa_r+0x8a0>)
 800982a:	2200      	movs	r2, #0
 800982c:	f7f6 ff64 	bl	80006f8 <__aeabi_dmul>
 8009830:	2200      	movs	r2, #0
 8009832:	2300      	movs	r3, #0
 8009834:	4604      	mov	r4, r0
 8009836:	460d      	mov	r5, r1
 8009838:	f7f7 f9c6 	bl	8000bc8 <__aeabi_dcmpeq>
 800983c:	2800      	cmp	r0, #0
 800983e:	d09f      	beq.n	8009780 <_dtoa_r+0x638>
 8009840:	e7d1      	b.n	80097e6 <_dtoa_r+0x69e>
 8009842:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009844:	2a00      	cmp	r2, #0
 8009846:	f000 80ea 	beq.w	8009a1e <_dtoa_r+0x8d6>
 800984a:	9a07      	ldr	r2, [sp, #28]
 800984c:	2a01      	cmp	r2, #1
 800984e:	f300 80cd 	bgt.w	80099ec <_dtoa_r+0x8a4>
 8009852:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009854:	2a00      	cmp	r2, #0
 8009856:	f000 80c1 	beq.w	80099dc <_dtoa_r+0x894>
 800985a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800985e:	9c08      	ldr	r4, [sp, #32]
 8009860:	9e00      	ldr	r6, [sp, #0]
 8009862:	9a00      	ldr	r2, [sp, #0]
 8009864:	441a      	add	r2, r3
 8009866:	9200      	str	r2, [sp, #0]
 8009868:	9a06      	ldr	r2, [sp, #24]
 800986a:	2101      	movs	r1, #1
 800986c:	441a      	add	r2, r3
 800986e:	4648      	mov	r0, r9
 8009870:	9206      	str	r2, [sp, #24]
 8009872:	f000 fc2d 	bl	800a0d0 <__i2b>
 8009876:	4605      	mov	r5, r0
 8009878:	b166      	cbz	r6, 8009894 <_dtoa_r+0x74c>
 800987a:	9b06      	ldr	r3, [sp, #24]
 800987c:	2b00      	cmp	r3, #0
 800987e:	dd09      	ble.n	8009894 <_dtoa_r+0x74c>
 8009880:	42b3      	cmp	r3, r6
 8009882:	9a00      	ldr	r2, [sp, #0]
 8009884:	bfa8      	it	ge
 8009886:	4633      	movge	r3, r6
 8009888:	1ad2      	subs	r2, r2, r3
 800988a:	9200      	str	r2, [sp, #0]
 800988c:	9a06      	ldr	r2, [sp, #24]
 800988e:	1af6      	subs	r6, r6, r3
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	9306      	str	r3, [sp, #24]
 8009894:	9b08      	ldr	r3, [sp, #32]
 8009896:	b30b      	cbz	r3, 80098dc <_dtoa_r+0x794>
 8009898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 80c6 	beq.w	8009a2c <_dtoa_r+0x8e4>
 80098a0:	2c00      	cmp	r4, #0
 80098a2:	f000 80c0 	beq.w	8009a26 <_dtoa_r+0x8de>
 80098a6:	4629      	mov	r1, r5
 80098a8:	4622      	mov	r2, r4
 80098aa:	4648      	mov	r0, r9
 80098ac:	f000 fcc8 	bl	800a240 <__pow5mult>
 80098b0:	9a02      	ldr	r2, [sp, #8]
 80098b2:	4601      	mov	r1, r0
 80098b4:	4605      	mov	r5, r0
 80098b6:	4648      	mov	r0, r9
 80098b8:	f000 fc20 	bl	800a0fc <__multiply>
 80098bc:	9902      	ldr	r1, [sp, #8]
 80098be:	4680      	mov	r8, r0
 80098c0:	4648      	mov	r0, r9
 80098c2:	f000 fb51 	bl	8009f68 <_Bfree>
 80098c6:	9b08      	ldr	r3, [sp, #32]
 80098c8:	1b1b      	subs	r3, r3, r4
 80098ca:	9308      	str	r3, [sp, #32]
 80098cc:	f000 80b1 	beq.w	8009a32 <_dtoa_r+0x8ea>
 80098d0:	9a08      	ldr	r2, [sp, #32]
 80098d2:	4641      	mov	r1, r8
 80098d4:	4648      	mov	r0, r9
 80098d6:	f000 fcb3 	bl	800a240 <__pow5mult>
 80098da:	9002      	str	r0, [sp, #8]
 80098dc:	2101      	movs	r1, #1
 80098de:	4648      	mov	r0, r9
 80098e0:	f000 fbf6 	bl	800a0d0 <__i2b>
 80098e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80098e6:	4604      	mov	r4, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 81d8 	beq.w	8009c9e <_dtoa_r+0xb56>
 80098ee:	461a      	mov	r2, r3
 80098f0:	4601      	mov	r1, r0
 80098f2:	4648      	mov	r0, r9
 80098f4:	f000 fca4 	bl	800a240 <__pow5mult>
 80098f8:	9b07      	ldr	r3, [sp, #28]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	4604      	mov	r4, r0
 80098fe:	f300 809f 	bgt.w	8009a40 <_dtoa_r+0x8f8>
 8009902:	9b04      	ldr	r3, [sp, #16]
 8009904:	2b00      	cmp	r3, #0
 8009906:	f040 8097 	bne.w	8009a38 <_dtoa_r+0x8f0>
 800990a:	9b05      	ldr	r3, [sp, #20]
 800990c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009910:	2b00      	cmp	r3, #0
 8009912:	f040 8093 	bne.w	8009a3c <_dtoa_r+0x8f4>
 8009916:	9b05      	ldr	r3, [sp, #20]
 8009918:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800991c:	0d1b      	lsrs	r3, r3, #20
 800991e:	051b      	lsls	r3, r3, #20
 8009920:	b133      	cbz	r3, 8009930 <_dtoa_r+0x7e8>
 8009922:	9b00      	ldr	r3, [sp, #0]
 8009924:	3301      	adds	r3, #1
 8009926:	9300      	str	r3, [sp, #0]
 8009928:	9b06      	ldr	r3, [sp, #24]
 800992a:	3301      	adds	r3, #1
 800992c:	9306      	str	r3, [sp, #24]
 800992e:	2301      	movs	r3, #1
 8009930:	9308      	str	r3, [sp, #32]
 8009932:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009934:	2b00      	cmp	r3, #0
 8009936:	f000 81b8 	beq.w	8009caa <_dtoa_r+0xb62>
 800993a:	6923      	ldr	r3, [r4, #16]
 800993c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009940:	6918      	ldr	r0, [r3, #16]
 8009942:	f000 fb79 	bl	800a038 <__hi0bits>
 8009946:	f1c0 0020 	rsb	r0, r0, #32
 800994a:	9b06      	ldr	r3, [sp, #24]
 800994c:	4418      	add	r0, r3
 800994e:	f010 001f 	ands.w	r0, r0, #31
 8009952:	f000 8082 	beq.w	8009a5a <_dtoa_r+0x912>
 8009956:	f1c0 0320 	rsb	r3, r0, #32
 800995a:	2b04      	cmp	r3, #4
 800995c:	dd73      	ble.n	8009a46 <_dtoa_r+0x8fe>
 800995e:	9b00      	ldr	r3, [sp, #0]
 8009960:	f1c0 001c 	rsb	r0, r0, #28
 8009964:	4403      	add	r3, r0
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	9b06      	ldr	r3, [sp, #24]
 800996a:	4403      	add	r3, r0
 800996c:	4406      	add	r6, r0
 800996e:	9306      	str	r3, [sp, #24]
 8009970:	9b00      	ldr	r3, [sp, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	dd05      	ble.n	8009982 <_dtoa_r+0x83a>
 8009976:	9902      	ldr	r1, [sp, #8]
 8009978:	461a      	mov	r2, r3
 800997a:	4648      	mov	r0, r9
 800997c:	f000 fcba 	bl	800a2f4 <__lshift>
 8009980:	9002      	str	r0, [sp, #8]
 8009982:	9b06      	ldr	r3, [sp, #24]
 8009984:	2b00      	cmp	r3, #0
 8009986:	dd05      	ble.n	8009994 <_dtoa_r+0x84c>
 8009988:	4621      	mov	r1, r4
 800998a:	461a      	mov	r2, r3
 800998c:	4648      	mov	r0, r9
 800998e:	f000 fcb1 	bl	800a2f4 <__lshift>
 8009992:	4604      	mov	r4, r0
 8009994:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009996:	2b00      	cmp	r3, #0
 8009998:	d061      	beq.n	8009a5e <_dtoa_r+0x916>
 800999a:	9802      	ldr	r0, [sp, #8]
 800999c:	4621      	mov	r1, r4
 800999e:	f000 fd15 	bl	800a3cc <__mcmp>
 80099a2:	2800      	cmp	r0, #0
 80099a4:	da5b      	bge.n	8009a5e <_dtoa_r+0x916>
 80099a6:	2300      	movs	r3, #0
 80099a8:	9902      	ldr	r1, [sp, #8]
 80099aa:	220a      	movs	r2, #10
 80099ac:	4648      	mov	r0, r9
 80099ae:	f000 fafd 	bl	8009fac <__multadd>
 80099b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099b4:	9002      	str	r0, [sp, #8]
 80099b6:	f107 38ff 	add.w	r8, r7, #4294967295
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f000 8177 	beq.w	8009cae <_dtoa_r+0xb66>
 80099c0:	4629      	mov	r1, r5
 80099c2:	2300      	movs	r3, #0
 80099c4:	220a      	movs	r2, #10
 80099c6:	4648      	mov	r0, r9
 80099c8:	f000 faf0 	bl	8009fac <__multadd>
 80099cc:	f1bb 0f00 	cmp.w	fp, #0
 80099d0:	4605      	mov	r5, r0
 80099d2:	dc6f      	bgt.n	8009ab4 <_dtoa_r+0x96c>
 80099d4:	9b07      	ldr	r3, [sp, #28]
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	dc49      	bgt.n	8009a6e <_dtoa_r+0x926>
 80099da:	e06b      	b.n	8009ab4 <_dtoa_r+0x96c>
 80099dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80099de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80099e2:	e73c      	b.n	800985e <_dtoa_r+0x716>
 80099e4:	3fe00000 	.word	0x3fe00000
 80099e8:	40240000 	.word	0x40240000
 80099ec:	9b03      	ldr	r3, [sp, #12]
 80099ee:	1e5c      	subs	r4, r3, #1
 80099f0:	9b08      	ldr	r3, [sp, #32]
 80099f2:	42a3      	cmp	r3, r4
 80099f4:	db09      	blt.n	8009a0a <_dtoa_r+0x8c2>
 80099f6:	1b1c      	subs	r4, r3, r4
 80099f8:	9b03      	ldr	r3, [sp, #12]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f6bf af30 	bge.w	8009860 <_dtoa_r+0x718>
 8009a00:	9b00      	ldr	r3, [sp, #0]
 8009a02:	9a03      	ldr	r2, [sp, #12]
 8009a04:	1a9e      	subs	r6, r3, r2
 8009a06:	2300      	movs	r3, #0
 8009a08:	e72b      	b.n	8009862 <_dtoa_r+0x71a>
 8009a0a:	9b08      	ldr	r3, [sp, #32]
 8009a0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a0e:	9408      	str	r4, [sp, #32]
 8009a10:	1ae3      	subs	r3, r4, r3
 8009a12:	441a      	add	r2, r3
 8009a14:	9e00      	ldr	r6, [sp, #0]
 8009a16:	9b03      	ldr	r3, [sp, #12]
 8009a18:	920d      	str	r2, [sp, #52]	@ 0x34
 8009a1a:	2400      	movs	r4, #0
 8009a1c:	e721      	b.n	8009862 <_dtoa_r+0x71a>
 8009a1e:	9c08      	ldr	r4, [sp, #32]
 8009a20:	9e00      	ldr	r6, [sp, #0]
 8009a22:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009a24:	e728      	b.n	8009878 <_dtoa_r+0x730>
 8009a26:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009a2a:	e751      	b.n	80098d0 <_dtoa_r+0x788>
 8009a2c:	9a08      	ldr	r2, [sp, #32]
 8009a2e:	9902      	ldr	r1, [sp, #8]
 8009a30:	e750      	b.n	80098d4 <_dtoa_r+0x78c>
 8009a32:	f8cd 8008 	str.w	r8, [sp, #8]
 8009a36:	e751      	b.n	80098dc <_dtoa_r+0x794>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	e779      	b.n	8009930 <_dtoa_r+0x7e8>
 8009a3c:	9b04      	ldr	r3, [sp, #16]
 8009a3e:	e777      	b.n	8009930 <_dtoa_r+0x7e8>
 8009a40:	2300      	movs	r3, #0
 8009a42:	9308      	str	r3, [sp, #32]
 8009a44:	e779      	b.n	800993a <_dtoa_r+0x7f2>
 8009a46:	d093      	beq.n	8009970 <_dtoa_r+0x828>
 8009a48:	9a00      	ldr	r2, [sp, #0]
 8009a4a:	331c      	adds	r3, #28
 8009a4c:	441a      	add	r2, r3
 8009a4e:	9200      	str	r2, [sp, #0]
 8009a50:	9a06      	ldr	r2, [sp, #24]
 8009a52:	441a      	add	r2, r3
 8009a54:	441e      	add	r6, r3
 8009a56:	9206      	str	r2, [sp, #24]
 8009a58:	e78a      	b.n	8009970 <_dtoa_r+0x828>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	e7f4      	b.n	8009a48 <_dtoa_r+0x900>
 8009a5e:	9b03      	ldr	r3, [sp, #12]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	46b8      	mov	r8, r7
 8009a64:	dc20      	bgt.n	8009aa8 <_dtoa_r+0x960>
 8009a66:	469b      	mov	fp, r3
 8009a68:	9b07      	ldr	r3, [sp, #28]
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	dd1e      	ble.n	8009aac <_dtoa_r+0x964>
 8009a6e:	f1bb 0f00 	cmp.w	fp, #0
 8009a72:	f47f adb1 	bne.w	80095d8 <_dtoa_r+0x490>
 8009a76:	4621      	mov	r1, r4
 8009a78:	465b      	mov	r3, fp
 8009a7a:	2205      	movs	r2, #5
 8009a7c:	4648      	mov	r0, r9
 8009a7e:	f000 fa95 	bl	8009fac <__multadd>
 8009a82:	4601      	mov	r1, r0
 8009a84:	4604      	mov	r4, r0
 8009a86:	9802      	ldr	r0, [sp, #8]
 8009a88:	f000 fca0 	bl	800a3cc <__mcmp>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	f77f ada3 	ble.w	80095d8 <_dtoa_r+0x490>
 8009a92:	4656      	mov	r6, sl
 8009a94:	2331      	movs	r3, #49	@ 0x31
 8009a96:	f806 3b01 	strb.w	r3, [r6], #1
 8009a9a:	f108 0801 	add.w	r8, r8, #1
 8009a9e:	e59f      	b.n	80095e0 <_dtoa_r+0x498>
 8009aa0:	9c03      	ldr	r4, [sp, #12]
 8009aa2:	46b8      	mov	r8, r7
 8009aa4:	4625      	mov	r5, r4
 8009aa6:	e7f4      	b.n	8009a92 <_dtoa_r+0x94a>
 8009aa8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f000 8101 	beq.w	8009cb6 <_dtoa_r+0xb6e>
 8009ab4:	2e00      	cmp	r6, #0
 8009ab6:	dd05      	ble.n	8009ac4 <_dtoa_r+0x97c>
 8009ab8:	4629      	mov	r1, r5
 8009aba:	4632      	mov	r2, r6
 8009abc:	4648      	mov	r0, r9
 8009abe:	f000 fc19 	bl	800a2f4 <__lshift>
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	9b08      	ldr	r3, [sp, #32]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d05c      	beq.n	8009b84 <_dtoa_r+0xa3c>
 8009aca:	6869      	ldr	r1, [r5, #4]
 8009acc:	4648      	mov	r0, r9
 8009ace:	f000 fa0b 	bl	8009ee8 <_Balloc>
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	b928      	cbnz	r0, 8009ae2 <_dtoa_r+0x99a>
 8009ad6:	4b82      	ldr	r3, [pc, #520]	@ (8009ce0 <_dtoa_r+0xb98>)
 8009ad8:	4602      	mov	r2, r0
 8009ada:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009ade:	f7ff bb4a 	b.w	8009176 <_dtoa_r+0x2e>
 8009ae2:	692a      	ldr	r2, [r5, #16]
 8009ae4:	3202      	adds	r2, #2
 8009ae6:	0092      	lsls	r2, r2, #2
 8009ae8:	f105 010c 	add.w	r1, r5, #12
 8009aec:	300c      	adds	r0, #12
 8009aee:	f7ff fa94 	bl	800901a <memcpy>
 8009af2:	2201      	movs	r2, #1
 8009af4:	4631      	mov	r1, r6
 8009af6:	4648      	mov	r0, r9
 8009af8:	f000 fbfc 	bl	800a2f4 <__lshift>
 8009afc:	f10a 0301 	add.w	r3, sl, #1
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	eb0a 030b 	add.w	r3, sl, fp
 8009b06:	9308      	str	r3, [sp, #32]
 8009b08:	9b04      	ldr	r3, [sp, #16]
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	462f      	mov	r7, r5
 8009b10:	9306      	str	r3, [sp, #24]
 8009b12:	4605      	mov	r5, r0
 8009b14:	9b00      	ldr	r3, [sp, #0]
 8009b16:	9802      	ldr	r0, [sp, #8]
 8009b18:	4621      	mov	r1, r4
 8009b1a:	f103 3bff 	add.w	fp, r3, #4294967295
 8009b1e:	f7ff fa8a 	bl	8009036 <quorem>
 8009b22:	4603      	mov	r3, r0
 8009b24:	3330      	adds	r3, #48	@ 0x30
 8009b26:	9003      	str	r0, [sp, #12]
 8009b28:	4639      	mov	r1, r7
 8009b2a:	9802      	ldr	r0, [sp, #8]
 8009b2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b2e:	f000 fc4d 	bl	800a3cc <__mcmp>
 8009b32:	462a      	mov	r2, r5
 8009b34:	9004      	str	r0, [sp, #16]
 8009b36:	4621      	mov	r1, r4
 8009b38:	4648      	mov	r0, r9
 8009b3a:	f000 fc63 	bl	800a404 <__mdiff>
 8009b3e:	68c2      	ldr	r2, [r0, #12]
 8009b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b42:	4606      	mov	r6, r0
 8009b44:	bb02      	cbnz	r2, 8009b88 <_dtoa_r+0xa40>
 8009b46:	4601      	mov	r1, r0
 8009b48:	9802      	ldr	r0, [sp, #8]
 8009b4a:	f000 fc3f 	bl	800a3cc <__mcmp>
 8009b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b50:	4602      	mov	r2, r0
 8009b52:	4631      	mov	r1, r6
 8009b54:	4648      	mov	r0, r9
 8009b56:	920c      	str	r2, [sp, #48]	@ 0x30
 8009b58:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b5a:	f000 fa05 	bl	8009f68 <_Bfree>
 8009b5e:	9b07      	ldr	r3, [sp, #28]
 8009b60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009b62:	9e00      	ldr	r6, [sp, #0]
 8009b64:	ea42 0103 	orr.w	r1, r2, r3
 8009b68:	9b06      	ldr	r3, [sp, #24]
 8009b6a:	4319      	orrs	r1, r3
 8009b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b6e:	d10d      	bne.n	8009b8c <_dtoa_r+0xa44>
 8009b70:	2b39      	cmp	r3, #57	@ 0x39
 8009b72:	d027      	beq.n	8009bc4 <_dtoa_r+0xa7c>
 8009b74:	9a04      	ldr	r2, [sp, #16]
 8009b76:	2a00      	cmp	r2, #0
 8009b78:	dd01      	ble.n	8009b7e <_dtoa_r+0xa36>
 8009b7a:	9b03      	ldr	r3, [sp, #12]
 8009b7c:	3331      	adds	r3, #49	@ 0x31
 8009b7e:	f88b 3000 	strb.w	r3, [fp]
 8009b82:	e52e      	b.n	80095e2 <_dtoa_r+0x49a>
 8009b84:	4628      	mov	r0, r5
 8009b86:	e7b9      	b.n	8009afc <_dtoa_r+0x9b4>
 8009b88:	2201      	movs	r2, #1
 8009b8a:	e7e2      	b.n	8009b52 <_dtoa_r+0xa0a>
 8009b8c:	9904      	ldr	r1, [sp, #16]
 8009b8e:	2900      	cmp	r1, #0
 8009b90:	db04      	blt.n	8009b9c <_dtoa_r+0xa54>
 8009b92:	9807      	ldr	r0, [sp, #28]
 8009b94:	4301      	orrs	r1, r0
 8009b96:	9806      	ldr	r0, [sp, #24]
 8009b98:	4301      	orrs	r1, r0
 8009b9a:	d120      	bne.n	8009bde <_dtoa_r+0xa96>
 8009b9c:	2a00      	cmp	r2, #0
 8009b9e:	ddee      	ble.n	8009b7e <_dtoa_r+0xa36>
 8009ba0:	9902      	ldr	r1, [sp, #8]
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	4648      	mov	r0, r9
 8009ba8:	f000 fba4 	bl	800a2f4 <__lshift>
 8009bac:	4621      	mov	r1, r4
 8009bae:	9002      	str	r0, [sp, #8]
 8009bb0:	f000 fc0c 	bl	800a3cc <__mcmp>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	9b00      	ldr	r3, [sp, #0]
 8009bb8:	dc02      	bgt.n	8009bc0 <_dtoa_r+0xa78>
 8009bba:	d1e0      	bne.n	8009b7e <_dtoa_r+0xa36>
 8009bbc:	07da      	lsls	r2, r3, #31
 8009bbe:	d5de      	bpl.n	8009b7e <_dtoa_r+0xa36>
 8009bc0:	2b39      	cmp	r3, #57	@ 0x39
 8009bc2:	d1da      	bne.n	8009b7a <_dtoa_r+0xa32>
 8009bc4:	2339      	movs	r3, #57	@ 0x39
 8009bc6:	f88b 3000 	strb.w	r3, [fp]
 8009bca:	4633      	mov	r3, r6
 8009bcc:	461e      	mov	r6, r3
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009bd4:	2a39      	cmp	r2, #57	@ 0x39
 8009bd6:	d04e      	beq.n	8009c76 <_dtoa_r+0xb2e>
 8009bd8:	3201      	adds	r2, #1
 8009bda:	701a      	strb	r2, [r3, #0]
 8009bdc:	e501      	b.n	80095e2 <_dtoa_r+0x49a>
 8009bde:	2a00      	cmp	r2, #0
 8009be0:	dd03      	ble.n	8009bea <_dtoa_r+0xaa2>
 8009be2:	2b39      	cmp	r3, #57	@ 0x39
 8009be4:	d0ee      	beq.n	8009bc4 <_dtoa_r+0xa7c>
 8009be6:	3301      	adds	r3, #1
 8009be8:	e7c9      	b.n	8009b7e <_dtoa_r+0xa36>
 8009bea:	9a00      	ldr	r2, [sp, #0]
 8009bec:	9908      	ldr	r1, [sp, #32]
 8009bee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009bf2:	428a      	cmp	r2, r1
 8009bf4:	d028      	beq.n	8009c48 <_dtoa_r+0xb00>
 8009bf6:	9902      	ldr	r1, [sp, #8]
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	220a      	movs	r2, #10
 8009bfc:	4648      	mov	r0, r9
 8009bfe:	f000 f9d5 	bl	8009fac <__multadd>
 8009c02:	42af      	cmp	r7, r5
 8009c04:	9002      	str	r0, [sp, #8]
 8009c06:	f04f 0300 	mov.w	r3, #0
 8009c0a:	f04f 020a 	mov.w	r2, #10
 8009c0e:	4639      	mov	r1, r7
 8009c10:	4648      	mov	r0, r9
 8009c12:	d107      	bne.n	8009c24 <_dtoa_r+0xadc>
 8009c14:	f000 f9ca 	bl	8009fac <__multadd>
 8009c18:	4607      	mov	r7, r0
 8009c1a:	4605      	mov	r5, r0
 8009c1c:	9b00      	ldr	r3, [sp, #0]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	e777      	b.n	8009b14 <_dtoa_r+0x9cc>
 8009c24:	f000 f9c2 	bl	8009fac <__multadd>
 8009c28:	4629      	mov	r1, r5
 8009c2a:	4607      	mov	r7, r0
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	220a      	movs	r2, #10
 8009c30:	4648      	mov	r0, r9
 8009c32:	f000 f9bb 	bl	8009fac <__multadd>
 8009c36:	4605      	mov	r5, r0
 8009c38:	e7f0      	b.n	8009c1c <_dtoa_r+0xad4>
 8009c3a:	f1bb 0f00 	cmp.w	fp, #0
 8009c3e:	bfcc      	ite	gt
 8009c40:	465e      	movgt	r6, fp
 8009c42:	2601      	movle	r6, #1
 8009c44:	4456      	add	r6, sl
 8009c46:	2700      	movs	r7, #0
 8009c48:	9902      	ldr	r1, [sp, #8]
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	4648      	mov	r0, r9
 8009c50:	f000 fb50 	bl	800a2f4 <__lshift>
 8009c54:	4621      	mov	r1, r4
 8009c56:	9002      	str	r0, [sp, #8]
 8009c58:	f000 fbb8 	bl	800a3cc <__mcmp>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	dcb4      	bgt.n	8009bca <_dtoa_r+0xa82>
 8009c60:	d102      	bne.n	8009c68 <_dtoa_r+0xb20>
 8009c62:	9b00      	ldr	r3, [sp, #0]
 8009c64:	07db      	lsls	r3, r3, #31
 8009c66:	d4b0      	bmi.n	8009bca <_dtoa_r+0xa82>
 8009c68:	4633      	mov	r3, r6
 8009c6a:	461e      	mov	r6, r3
 8009c6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c70:	2a30      	cmp	r2, #48	@ 0x30
 8009c72:	d0fa      	beq.n	8009c6a <_dtoa_r+0xb22>
 8009c74:	e4b5      	b.n	80095e2 <_dtoa_r+0x49a>
 8009c76:	459a      	cmp	sl, r3
 8009c78:	d1a8      	bne.n	8009bcc <_dtoa_r+0xa84>
 8009c7a:	2331      	movs	r3, #49	@ 0x31
 8009c7c:	f108 0801 	add.w	r8, r8, #1
 8009c80:	f88a 3000 	strb.w	r3, [sl]
 8009c84:	e4ad      	b.n	80095e2 <_dtoa_r+0x49a>
 8009c86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009ce4 <_dtoa_r+0xb9c>
 8009c8c:	b11b      	cbz	r3, 8009c96 <_dtoa_r+0xb4e>
 8009c8e:	f10a 0308 	add.w	r3, sl, #8
 8009c92:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009c94:	6013      	str	r3, [r2, #0]
 8009c96:	4650      	mov	r0, sl
 8009c98:	b017      	add	sp, #92	@ 0x5c
 8009c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9e:	9b07      	ldr	r3, [sp, #28]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	f77f ae2e 	ble.w	8009902 <_dtoa_r+0x7ba>
 8009ca6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ca8:	9308      	str	r3, [sp, #32]
 8009caa:	2001      	movs	r0, #1
 8009cac:	e64d      	b.n	800994a <_dtoa_r+0x802>
 8009cae:	f1bb 0f00 	cmp.w	fp, #0
 8009cb2:	f77f aed9 	ble.w	8009a68 <_dtoa_r+0x920>
 8009cb6:	4656      	mov	r6, sl
 8009cb8:	9802      	ldr	r0, [sp, #8]
 8009cba:	4621      	mov	r1, r4
 8009cbc:	f7ff f9bb 	bl	8009036 <quorem>
 8009cc0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009cc4:	f806 3b01 	strb.w	r3, [r6], #1
 8009cc8:	eba6 020a 	sub.w	r2, r6, sl
 8009ccc:	4593      	cmp	fp, r2
 8009cce:	ddb4      	ble.n	8009c3a <_dtoa_r+0xaf2>
 8009cd0:	9902      	ldr	r1, [sp, #8]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	220a      	movs	r2, #10
 8009cd6:	4648      	mov	r0, r9
 8009cd8:	f000 f968 	bl	8009fac <__multadd>
 8009cdc:	9002      	str	r0, [sp, #8]
 8009cde:	e7eb      	b.n	8009cb8 <_dtoa_r+0xb70>
 8009ce0:	0801f278 	.word	0x0801f278
 8009ce4:	0801f1fc 	.word	0x0801f1fc

08009ce8 <_free_r>:
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	4605      	mov	r5, r0
 8009cec:	2900      	cmp	r1, #0
 8009cee:	d041      	beq.n	8009d74 <_free_r+0x8c>
 8009cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cf4:	1f0c      	subs	r4, r1, #4
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	bfb8      	it	lt
 8009cfa:	18e4      	addlt	r4, r4, r3
 8009cfc:	f000 f8e8 	bl	8009ed0 <__malloc_lock>
 8009d00:	4a1d      	ldr	r2, [pc, #116]	@ (8009d78 <_free_r+0x90>)
 8009d02:	6813      	ldr	r3, [r2, #0]
 8009d04:	b933      	cbnz	r3, 8009d14 <_free_r+0x2c>
 8009d06:	6063      	str	r3, [r4, #4]
 8009d08:	6014      	str	r4, [r2, #0]
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d10:	f000 b8e4 	b.w	8009edc <__malloc_unlock>
 8009d14:	42a3      	cmp	r3, r4
 8009d16:	d908      	bls.n	8009d2a <_free_r+0x42>
 8009d18:	6820      	ldr	r0, [r4, #0]
 8009d1a:	1821      	adds	r1, r4, r0
 8009d1c:	428b      	cmp	r3, r1
 8009d1e:	bf01      	itttt	eq
 8009d20:	6819      	ldreq	r1, [r3, #0]
 8009d22:	685b      	ldreq	r3, [r3, #4]
 8009d24:	1809      	addeq	r1, r1, r0
 8009d26:	6021      	streq	r1, [r4, #0]
 8009d28:	e7ed      	b.n	8009d06 <_free_r+0x1e>
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	b10b      	cbz	r3, 8009d34 <_free_r+0x4c>
 8009d30:	42a3      	cmp	r3, r4
 8009d32:	d9fa      	bls.n	8009d2a <_free_r+0x42>
 8009d34:	6811      	ldr	r1, [r2, #0]
 8009d36:	1850      	adds	r0, r2, r1
 8009d38:	42a0      	cmp	r0, r4
 8009d3a:	d10b      	bne.n	8009d54 <_free_r+0x6c>
 8009d3c:	6820      	ldr	r0, [r4, #0]
 8009d3e:	4401      	add	r1, r0
 8009d40:	1850      	adds	r0, r2, r1
 8009d42:	4283      	cmp	r3, r0
 8009d44:	6011      	str	r1, [r2, #0]
 8009d46:	d1e0      	bne.n	8009d0a <_free_r+0x22>
 8009d48:	6818      	ldr	r0, [r3, #0]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	6053      	str	r3, [r2, #4]
 8009d4e:	4408      	add	r0, r1
 8009d50:	6010      	str	r0, [r2, #0]
 8009d52:	e7da      	b.n	8009d0a <_free_r+0x22>
 8009d54:	d902      	bls.n	8009d5c <_free_r+0x74>
 8009d56:	230c      	movs	r3, #12
 8009d58:	602b      	str	r3, [r5, #0]
 8009d5a:	e7d6      	b.n	8009d0a <_free_r+0x22>
 8009d5c:	6820      	ldr	r0, [r4, #0]
 8009d5e:	1821      	adds	r1, r4, r0
 8009d60:	428b      	cmp	r3, r1
 8009d62:	bf04      	itt	eq
 8009d64:	6819      	ldreq	r1, [r3, #0]
 8009d66:	685b      	ldreq	r3, [r3, #4]
 8009d68:	6063      	str	r3, [r4, #4]
 8009d6a:	bf04      	itt	eq
 8009d6c:	1809      	addeq	r1, r1, r0
 8009d6e:	6021      	streq	r1, [r4, #0]
 8009d70:	6054      	str	r4, [r2, #4]
 8009d72:	e7ca      	b.n	8009d0a <_free_r+0x22>
 8009d74:	bd38      	pop	{r3, r4, r5, pc}
 8009d76:	bf00      	nop
 8009d78:	20009d9c 	.word	0x20009d9c

08009d7c <malloc>:
 8009d7c:	4b02      	ldr	r3, [pc, #8]	@ (8009d88 <malloc+0xc>)
 8009d7e:	4601      	mov	r1, r0
 8009d80:	6818      	ldr	r0, [r3, #0]
 8009d82:	f000 b825 	b.w	8009dd0 <_malloc_r>
 8009d86:	bf00      	nop
 8009d88:	20000054 	.word	0x20000054

08009d8c <sbrk_aligned>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	4e0f      	ldr	r6, [pc, #60]	@ (8009dcc <sbrk_aligned+0x40>)
 8009d90:	460c      	mov	r4, r1
 8009d92:	6831      	ldr	r1, [r6, #0]
 8009d94:	4605      	mov	r5, r0
 8009d96:	b911      	cbnz	r1, 8009d9e <sbrk_aligned+0x12>
 8009d98:	f000 fd50 	bl	800a83c <_sbrk_r>
 8009d9c:	6030      	str	r0, [r6, #0]
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4628      	mov	r0, r5
 8009da2:	f000 fd4b 	bl	800a83c <_sbrk_r>
 8009da6:	1c43      	adds	r3, r0, #1
 8009da8:	d103      	bne.n	8009db2 <sbrk_aligned+0x26>
 8009daa:	f04f 34ff 	mov.w	r4, #4294967295
 8009dae:	4620      	mov	r0, r4
 8009db0:	bd70      	pop	{r4, r5, r6, pc}
 8009db2:	1cc4      	adds	r4, r0, #3
 8009db4:	f024 0403 	bic.w	r4, r4, #3
 8009db8:	42a0      	cmp	r0, r4
 8009dba:	d0f8      	beq.n	8009dae <sbrk_aligned+0x22>
 8009dbc:	1a21      	subs	r1, r4, r0
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	f000 fd3c 	bl	800a83c <_sbrk_r>
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	d1f2      	bne.n	8009dae <sbrk_aligned+0x22>
 8009dc8:	e7ef      	b.n	8009daa <sbrk_aligned+0x1e>
 8009dca:	bf00      	nop
 8009dcc:	20009d98 	.word	0x20009d98

08009dd0 <_malloc_r>:
 8009dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dd4:	1ccd      	adds	r5, r1, #3
 8009dd6:	f025 0503 	bic.w	r5, r5, #3
 8009dda:	3508      	adds	r5, #8
 8009ddc:	2d0c      	cmp	r5, #12
 8009dde:	bf38      	it	cc
 8009de0:	250c      	movcc	r5, #12
 8009de2:	2d00      	cmp	r5, #0
 8009de4:	4606      	mov	r6, r0
 8009de6:	db01      	blt.n	8009dec <_malloc_r+0x1c>
 8009de8:	42a9      	cmp	r1, r5
 8009dea:	d904      	bls.n	8009df6 <_malloc_r+0x26>
 8009dec:	230c      	movs	r3, #12
 8009dee:	6033      	str	r3, [r6, #0]
 8009df0:	2000      	movs	r0, #0
 8009df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009df6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ecc <_malloc_r+0xfc>
 8009dfa:	f000 f869 	bl	8009ed0 <__malloc_lock>
 8009dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8009e02:	461c      	mov	r4, r3
 8009e04:	bb44      	cbnz	r4, 8009e58 <_malloc_r+0x88>
 8009e06:	4629      	mov	r1, r5
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f7ff ffbf 	bl	8009d8c <sbrk_aligned>
 8009e0e:	1c43      	adds	r3, r0, #1
 8009e10:	4604      	mov	r4, r0
 8009e12:	d158      	bne.n	8009ec6 <_malloc_r+0xf6>
 8009e14:	f8d8 4000 	ldr.w	r4, [r8]
 8009e18:	4627      	mov	r7, r4
 8009e1a:	2f00      	cmp	r7, #0
 8009e1c:	d143      	bne.n	8009ea6 <_malloc_r+0xd6>
 8009e1e:	2c00      	cmp	r4, #0
 8009e20:	d04b      	beq.n	8009eba <_malloc_r+0xea>
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	4639      	mov	r1, r7
 8009e26:	4630      	mov	r0, r6
 8009e28:	eb04 0903 	add.w	r9, r4, r3
 8009e2c:	f000 fd06 	bl	800a83c <_sbrk_r>
 8009e30:	4581      	cmp	r9, r0
 8009e32:	d142      	bne.n	8009eba <_malloc_r+0xea>
 8009e34:	6821      	ldr	r1, [r4, #0]
 8009e36:	1a6d      	subs	r5, r5, r1
 8009e38:	4629      	mov	r1, r5
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	f7ff ffa6 	bl	8009d8c <sbrk_aligned>
 8009e40:	3001      	adds	r0, #1
 8009e42:	d03a      	beq.n	8009eba <_malloc_r+0xea>
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	442b      	add	r3, r5
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	f8d8 3000 	ldr.w	r3, [r8]
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	bb62      	cbnz	r2, 8009eac <_malloc_r+0xdc>
 8009e52:	f8c8 7000 	str.w	r7, [r8]
 8009e56:	e00f      	b.n	8009e78 <_malloc_r+0xa8>
 8009e58:	6822      	ldr	r2, [r4, #0]
 8009e5a:	1b52      	subs	r2, r2, r5
 8009e5c:	d420      	bmi.n	8009ea0 <_malloc_r+0xd0>
 8009e5e:	2a0b      	cmp	r2, #11
 8009e60:	d917      	bls.n	8009e92 <_malloc_r+0xc2>
 8009e62:	1961      	adds	r1, r4, r5
 8009e64:	42a3      	cmp	r3, r4
 8009e66:	6025      	str	r5, [r4, #0]
 8009e68:	bf18      	it	ne
 8009e6a:	6059      	strne	r1, [r3, #4]
 8009e6c:	6863      	ldr	r3, [r4, #4]
 8009e6e:	bf08      	it	eq
 8009e70:	f8c8 1000 	streq.w	r1, [r8]
 8009e74:	5162      	str	r2, [r4, r5]
 8009e76:	604b      	str	r3, [r1, #4]
 8009e78:	4630      	mov	r0, r6
 8009e7a:	f000 f82f 	bl	8009edc <__malloc_unlock>
 8009e7e:	f104 000b 	add.w	r0, r4, #11
 8009e82:	1d23      	adds	r3, r4, #4
 8009e84:	f020 0007 	bic.w	r0, r0, #7
 8009e88:	1ac2      	subs	r2, r0, r3
 8009e8a:	bf1c      	itt	ne
 8009e8c:	1a1b      	subne	r3, r3, r0
 8009e8e:	50a3      	strne	r3, [r4, r2]
 8009e90:	e7af      	b.n	8009df2 <_malloc_r+0x22>
 8009e92:	6862      	ldr	r2, [r4, #4]
 8009e94:	42a3      	cmp	r3, r4
 8009e96:	bf0c      	ite	eq
 8009e98:	f8c8 2000 	streq.w	r2, [r8]
 8009e9c:	605a      	strne	r2, [r3, #4]
 8009e9e:	e7eb      	b.n	8009e78 <_malloc_r+0xa8>
 8009ea0:	4623      	mov	r3, r4
 8009ea2:	6864      	ldr	r4, [r4, #4]
 8009ea4:	e7ae      	b.n	8009e04 <_malloc_r+0x34>
 8009ea6:	463c      	mov	r4, r7
 8009ea8:	687f      	ldr	r7, [r7, #4]
 8009eaa:	e7b6      	b.n	8009e1a <_malloc_r+0x4a>
 8009eac:	461a      	mov	r2, r3
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	42a3      	cmp	r3, r4
 8009eb2:	d1fb      	bne.n	8009eac <_malloc_r+0xdc>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	6053      	str	r3, [r2, #4]
 8009eb8:	e7de      	b.n	8009e78 <_malloc_r+0xa8>
 8009eba:	230c      	movs	r3, #12
 8009ebc:	6033      	str	r3, [r6, #0]
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	f000 f80c 	bl	8009edc <__malloc_unlock>
 8009ec4:	e794      	b.n	8009df0 <_malloc_r+0x20>
 8009ec6:	6005      	str	r5, [r0, #0]
 8009ec8:	e7d6      	b.n	8009e78 <_malloc_r+0xa8>
 8009eca:	bf00      	nop
 8009ecc:	20009d9c 	.word	0x20009d9c

08009ed0 <__malloc_lock>:
 8009ed0:	4801      	ldr	r0, [pc, #4]	@ (8009ed8 <__malloc_lock+0x8>)
 8009ed2:	f7ff b8a0 	b.w	8009016 <__retarget_lock_acquire_recursive>
 8009ed6:	bf00      	nop
 8009ed8:	20009d94 	.word	0x20009d94

08009edc <__malloc_unlock>:
 8009edc:	4801      	ldr	r0, [pc, #4]	@ (8009ee4 <__malloc_unlock+0x8>)
 8009ede:	f7ff b89b 	b.w	8009018 <__retarget_lock_release_recursive>
 8009ee2:	bf00      	nop
 8009ee4:	20009d94 	.word	0x20009d94

08009ee8 <_Balloc>:
 8009ee8:	b570      	push	{r4, r5, r6, lr}
 8009eea:	69c6      	ldr	r6, [r0, #28]
 8009eec:	4604      	mov	r4, r0
 8009eee:	460d      	mov	r5, r1
 8009ef0:	b976      	cbnz	r6, 8009f10 <_Balloc+0x28>
 8009ef2:	2010      	movs	r0, #16
 8009ef4:	f7ff ff42 	bl	8009d7c <malloc>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	61e0      	str	r0, [r4, #28]
 8009efc:	b920      	cbnz	r0, 8009f08 <_Balloc+0x20>
 8009efe:	4b18      	ldr	r3, [pc, #96]	@ (8009f60 <_Balloc+0x78>)
 8009f00:	4818      	ldr	r0, [pc, #96]	@ (8009f64 <_Balloc+0x7c>)
 8009f02:	216b      	movs	r1, #107	@ 0x6b
 8009f04:	f000 fcaa 	bl	800a85c <__assert_func>
 8009f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f0c:	6006      	str	r6, [r0, #0]
 8009f0e:	60c6      	str	r6, [r0, #12]
 8009f10:	69e6      	ldr	r6, [r4, #28]
 8009f12:	68f3      	ldr	r3, [r6, #12]
 8009f14:	b183      	cbz	r3, 8009f38 <_Balloc+0x50>
 8009f16:	69e3      	ldr	r3, [r4, #28]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f1e:	b9b8      	cbnz	r0, 8009f50 <_Balloc+0x68>
 8009f20:	2101      	movs	r1, #1
 8009f22:	fa01 f605 	lsl.w	r6, r1, r5
 8009f26:	1d72      	adds	r2, r6, #5
 8009f28:	0092      	lsls	r2, r2, #2
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f000 fcb4 	bl	800a898 <_calloc_r>
 8009f30:	b160      	cbz	r0, 8009f4c <_Balloc+0x64>
 8009f32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f36:	e00e      	b.n	8009f56 <_Balloc+0x6e>
 8009f38:	2221      	movs	r2, #33	@ 0x21
 8009f3a:	2104      	movs	r1, #4
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 fcab 	bl	800a898 <_calloc_r>
 8009f42:	69e3      	ldr	r3, [r4, #28]
 8009f44:	60f0      	str	r0, [r6, #12]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1e4      	bne.n	8009f16 <_Balloc+0x2e>
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	bd70      	pop	{r4, r5, r6, pc}
 8009f50:	6802      	ldr	r2, [r0, #0]
 8009f52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f56:	2300      	movs	r3, #0
 8009f58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f5c:	e7f7      	b.n	8009f4e <_Balloc+0x66>
 8009f5e:	bf00      	nop
 8009f60:	0801f209 	.word	0x0801f209
 8009f64:	0801f289 	.word	0x0801f289

08009f68 <_Bfree>:
 8009f68:	b570      	push	{r4, r5, r6, lr}
 8009f6a:	69c6      	ldr	r6, [r0, #28]
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	460c      	mov	r4, r1
 8009f70:	b976      	cbnz	r6, 8009f90 <_Bfree+0x28>
 8009f72:	2010      	movs	r0, #16
 8009f74:	f7ff ff02 	bl	8009d7c <malloc>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	61e8      	str	r0, [r5, #28]
 8009f7c:	b920      	cbnz	r0, 8009f88 <_Bfree+0x20>
 8009f7e:	4b09      	ldr	r3, [pc, #36]	@ (8009fa4 <_Bfree+0x3c>)
 8009f80:	4809      	ldr	r0, [pc, #36]	@ (8009fa8 <_Bfree+0x40>)
 8009f82:	218f      	movs	r1, #143	@ 0x8f
 8009f84:	f000 fc6a 	bl	800a85c <__assert_func>
 8009f88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f8c:	6006      	str	r6, [r0, #0]
 8009f8e:	60c6      	str	r6, [r0, #12]
 8009f90:	b13c      	cbz	r4, 8009fa2 <_Bfree+0x3a>
 8009f92:	69eb      	ldr	r3, [r5, #28]
 8009f94:	6862      	ldr	r2, [r4, #4]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f9c:	6021      	str	r1, [r4, #0]
 8009f9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009fa2:	bd70      	pop	{r4, r5, r6, pc}
 8009fa4:	0801f209 	.word	0x0801f209
 8009fa8:	0801f289 	.word	0x0801f289

08009fac <__multadd>:
 8009fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb0:	690d      	ldr	r5, [r1, #16]
 8009fb2:	4607      	mov	r7, r0
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	461e      	mov	r6, r3
 8009fb8:	f101 0c14 	add.w	ip, r1, #20
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	f8dc 3000 	ldr.w	r3, [ip]
 8009fc2:	b299      	uxth	r1, r3
 8009fc4:	fb02 6101 	mla	r1, r2, r1, r6
 8009fc8:	0c1e      	lsrs	r6, r3, #16
 8009fca:	0c0b      	lsrs	r3, r1, #16
 8009fcc:	fb02 3306 	mla	r3, r2, r6, r3
 8009fd0:	b289      	uxth	r1, r1
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009fd8:	4285      	cmp	r5, r0
 8009fda:	f84c 1b04 	str.w	r1, [ip], #4
 8009fde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009fe2:	dcec      	bgt.n	8009fbe <__multadd+0x12>
 8009fe4:	b30e      	cbz	r6, 800a02a <__multadd+0x7e>
 8009fe6:	68a3      	ldr	r3, [r4, #8]
 8009fe8:	42ab      	cmp	r3, r5
 8009fea:	dc19      	bgt.n	800a020 <__multadd+0x74>
 8009fec:	6861      	ldr	r1, [r4, #4]
 8009fee:	4638      	mov	r0, r7
 8009ff0:	3101      	adds	r1, #1
 8009ff2:	f7ff ff79 	bl	8009ee8 <_Balloc>
 8009ff6:	4680      	mov	r8, r0
 8009ff8:	b928      	cbnz	r0, 800a006 <__multadd+0x5a>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	4b0c      	ldr	r3, [pc, #48]	@ (800a030 <__multadd+0x84>)
 8009ffe:	480d      	ldr	r0, [pc, #52]	@ (800a034 <__multadd+0x88>)
 800a000:	21ba      	movs	r1, #186	@ 0xba
 800a002:	f000 fc2b 	bl	800a85c <__assert_func>
 800a006:	6922      	ldr	r2, [r4, #16]
 800a008:	3202      	adds	r2, #2
 800a00a:	f104 010c 	add.w	r1, r4, #12
 800a00e:	0092      	lsls	r2, r2, #2
 800a010:	300c      	adds	r0, #12
 800a012:	f7ff f802 	bl	800901a <memcpy>
 800a016:	4621      	mov	r1, r4
 800a018:	4638      	mov	r0, r7
 800a01a:	f7ff ffa5 	bl	8009f68 <_Bfree>
 800a01e:	4644      	mov	r4, r8
 800a020:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a024:	3501      	adds	r5, #1
 800a026:	615e      	str	r6, [r3, #20]
 800a028:	6125      	str	r5, [r4, #16]
 800a02a:	4620      	mov	r0, r4
 800a02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a030:	0801f278 	.word	0x0801f278
 800a034:	0801f289 	.word	0x0801f289

0800a038 <__hi0bits>:
 800a038:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a03c:	4603      	mov	r3, r0
 800a03e:	bf36      	itet	cc
 800a040:	0403      	lslcc	r3, r0, #16
 800a042:	2000      	movcs	r0, #0
 800a044:	2010      	movcc	r0, #16
 800a046:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a04a:	bf3c      	itt	cc
 800a04c:	021b      	lslcc	r3, r3, #8
 800a04e:	3008      	addcc	r0, #8
 800a050:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a054:	bf3c      	itt	cc
 800a056:	011b      	lslcc	r3, r3, #4
 800a058:	3004      	addcc	r0, #4
 800a05a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a05e:	bf3c      	itt	cc
 800a060:	009b      	lslcc	r3, r3, #2
 800a062:	3002      	addcc	r0, #2
 800a064:	2b00      	cmp	r3, #0
 800a066:	db05      	blt.n	800a074 <__hi0bits+0x3c>
 800a068:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a06c:	f100 0001 	add.w	r0, r0, #1
 800a070:	bf08      	it	eq
 800a072:	2020      	moveq	r0, #32
 800a074:	4770      	bx	lr

0800a076 <__lo0bits>:
 800a076:	6803      	ldr	r3, [r0, #0]
 800a078:	4602      	mov	r2, r0
 800a07a:	f013 0007 	ands.w	r0, r3, #7
 800a07e:	d00b      	beq.n	800a098 <__lo0bits+0x22>
 800a080:	07d9      	lsls	r1, r3, #31
 800a082:	d421      	bmi.n	800a0c8 <__lo0bits+0x52>
 800a084:	0798      	lsls	r0, r3, #30
 800a086:	bf49      	itett	mi
 800a088:	085b      	lsrmi	r3, r3, #1
 800a08a:	089b      	lsrpl	r3, r3, #2
 800a08c:	2001      	movmi	r0, #1
 800a08e:	6013      	strmi	r3, [r2, #0]
 800a090:	bf5c      	itt	pl
 800a092:	6013      	strpl	r3, [r2, #0]
 800a094:	2002      	movpl	r0, #2
 800a096:	4770      	bx	lr
 800a098:	b299      	uxth	r1, r3
 800a09a:	b909      	cbnz	r1, 800a0a0 <__lo0bits+0x2a>
 800a09c:	0c1b      	lsrs	r3, r3, #16
 800a09e:	2010      	movs	r0, #16
 800a0a0:	b2d9      	uxtb	r1, r3
 800a0a2:	b909      	cbnz	r1, 800a0a8 <__lo0bits+0x32>
 800a0a4:	3008      	adds	r0, #8
 800a0a6:	0a1b      	lsrs	r3, r3, #8
 800a0a8:	0719      	lsls	r1, r3, #28
 800a0aa:	bf04      	itt	eq
 800a0ac:	091b      	lsreq	r3, r3, #4
 800a0ae:	3004      	addeq	r0, #4
 800a0b0:	0799      	lsls	r1, r3, #30
 800a0b2:	bf04      	itt	eq
 800a0b4:	089b      	lsreq	r3, r3, #2
 800a0b6:	3002      	addeq	r0, #2
 800a0b8:	07d9      	lsls	r1, r3, #31
 800a0ba:	d403      	bmi.n	800a0c4 <__lo0bits+0x4e>
 800a0bc:	085b      	lsrs	r3, r3, #1
 800a0be:	f100 0001 	add.w	r0, r0, #1
 800a0c2:	d003      	beq.n	800a0cc <__lo0bits+0x56>
 800a0c4:	6013      	str	r3, [r2, #0]
 800a0c6:	4770      	bx	lr
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	4770      	bx	lr
 800a0cc:	2020      	movs	r0, #32
 800a0ce:	4770      	bx	lr

0800a0d0 <__i2b>:
 800a0d0:	b510      	push	{r4, lr}
 800a0d2:	460c      	mov	r4, r1
 800a0d4:	2101      	movs	r1, #1
 800a0d6:	f7ff ff07 	bl	8009ee8 <_Balloc>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	b928      	cbnz	r0, 800a0ea <__i2b+0x1a>
 800a0de:	4b05      	ldr	r3, [pc, #20]	@ (800a0f4 <__i2b+0x24>)
 800a0e0:	4805      	ldr	r0, [pc, #20]	@ (800a0f8 <__i2b+0x28>)
 800a0e2:	f240 1145 	movw	r1, #325	@ 0x145
 800a0e6:	f000 fbb9 	bl	800a85c <__assert_func>
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	6144      	str	r4, [r0, #20]
 800a0ee:	6103      	str	r3, [r0, #16]
 800a0f0:	bd10      	pop	{r4, pc}
 800a0f2:	bf00      	nop
 800a0f4:	0801f278 	.word	0x0801f278
 800a0f8:	0801f289 	.word	0x0801f289

0800a0fc <__multiply>:
 800a0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a100:	4617      	mov	r7, r2
 800a102:	690a      	ldr	r2, [r1, #16]
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	429a      	cmp	r2, r3
 800a108:	bfa8      	it	ge
 800a10a:	463b      	movge	r3, r7
 800a10c:	4689      	mov	r9, r1
 800a10e:	bfa4      	itt	ge
 800a110:	460f      	movge	r7, r1
 800a112:	4699      	movge	r9, r3
 800a114:	693d      	ldr	r5, [r7, #16]
 800a116:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	6879      	ldr	r1, [r7, #4]
 800a11e:	eb05 060a 	add.w	r6, r5, sl
 800a122:	42b3      	cmp	r3, r6
 800a124:	b085      	sub	sp, #20
 800a126:	bfb8      	it	lt
 800a128:	3101      	addlt	r1, #1
 800a12a:	f7ff fedd 	bl	8009ee8 <_Balloc>
 800a12e:	b930      	cbnz	r0, 800a13e <__multiply+0x42>
 800a130:	4602      	mov	r2, r0
 800a132:	4b41      	ldr	r3, [pc, #260]	@ (800a238 <__multiply+0x13c>)
 800a134:	4841      	ldr	r0, [pc, #260]	@ (800a23c <__multiply+0x140>)
 800a136:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a13a:	f000 fb8f 	bl	800a85c <__assert_func>
 800a13e:	f100 0414 	add.w	r4, r0, #20
 800a142:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a146:	4623      	mov	r3, r4
 800a148:	2200      	movs	r2, #0
 800a14a:	4573      	cmp	r3, lr
 800a14c:	d320      	bcc.n	800a190 <__multiply+0x94>
 800a14e:	f107 0814 	add.w	r8, r7, #20
 800a152:	f109 0114 	add.w	r1, r9, #20
 800a156:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a15a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a15e:	9302      	str	r3, [sp, #8]
 800a160:	1beb      	subs	r3, r5, r7
 800a162:	3b15      	subs	r3, #21
 800a164:	f023 0303 	bic.w	r3, r3, #3
 800a168:	3304      	adds	r3, #4
 800a16a:	3715      	adds	r7, #21
 800a16c:	42bd      	cmp	r5, r7
 800a16e:	bf38      	it	cc
 800a170:	2304      	movcc	r3, #4
 800a172:	9301      	str	r3, [sp, #4]
 800a174:	9b02      	ldr	r3, [sp, #8]
 800a176:	9103      	str	r1, [sp, #12]
 800a178:	428b      	cmp	r3, r1
 800a17a:	d80c      	bhi.n	800a196 <__multiply+0x9a>
 800a17c:	2e00      	cmp	r6, #0
 800a17e:	dd03      	ble.n	800a188 <__multiply+0x8c>
 800a180:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a184:	2b00      	cmp	r3, #0
 800a186:	d055      	beq.n	800a234 <__multiply+0x138>
 800a188:	6106      	str	r6, [r0, #16]
 800a18a:	b005      	add	sp, #20
 800a18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a190:	f843 2b04 	str.w	r2, [r3], #4
 800a194:	e7d9      	b.n	800a14a <__multiply+0x4e>
 800a196:	f8b1 a000 	ldrh.w	sl, [r1]
 800a19a:	f1ba 0f00 	cmp.w	sl, #0
 800a19e:	d01f      	beq.n	800a1e0 <__multiply+0xe4>
 800a1a0:	46c4      	mov	ip, r8
 800a1a2:	46a1      	mov	r9, r4
 800a1a4:	2700      	movs	r7, #0
 800a1a6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a1aa:	f8d9 3000 	ldr.w	r3, [r9]
 800a1ae:	fa1f fb82 	uxth.w	fp, r2
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a1b8:	443b      	add	r3, r7
 800a1ba:	f8d9 7000 	ldr.w	r7, [r9]
 800a1be:	0c12      	lsrs	r2, r2, #16
 800a1c0:	0c3f      	lsrs	r7, r7, #16
 800a1c2:	fb0a 7202 	mla	r2, sl, r2, r7
 800a1c6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1d0:	4565      	cmp	r5, ip
 800a1d2:	f849 3b04 	str.w	r3, [r9], #4
 800a1d6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a1da:	d8e4      	bhi.n	800a1a6 <__multiply+0xaa>
 800a1dc:	9b01      	ldr	r3, [sp, #4]
 800a1de:	50e7      	str	r7, [r4, r3]
 800a1e0:	9b03      	ldr	r3, [sp, #12]
 800a1e2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a1e6:	3104      	adds	r1, #4
 800a1e8:	f1b9 0f00 	cmp.w	r9, #0
 800a1ec:	d020      	beq.n	800a230 <__multiply+0x134>
 800a1ee:	6823      	ldr	r3, [r4, #0]
 800a1f0:	4647      	mov	r7, r8
 800a1f2:	46a4      	mov	ip, r4
 800a1f4:	f04f 0a00 	mov.w	sl, #0
 800a1f8:	f8b7 b000 	ldrh.w	fp, [r7]
 800a1fc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a200:	fb09 220b 	mla	r2, r9, fp, r2
 800a204:	4452      	add	r2, sl
 800a206:	b29b      	uxth	r3, r3
 800a208:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a20c:	f84c 3b04 	str.w	r3, [ip], #4
 800a210:	f857 3b04 	ldr.w	r3, [r7], #4
 800a214:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a218:	f8bc 3000 	ldrh.w	r3, [ip]
 800a21c:	fb09 330a 	mla	r3, r9, sl, r3
 800a220:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a224:	42bd      	cmp	r5, r7
 800a226:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a22a:	d8e5      	bhi.n	800a1f8 <__multiply+0xfc>
 800a22c:	9a01      	ldr	r2, [sp, #4]
 800a22e:	50a3      	str	r3, [r4, r2]
 800a230:	3404      	adds	r4, #4
 800a232:	e79f      	b.n	800a174 <__multiply+0x78>
 800a234:	3e01      	subs	r6, #1
 800a236:	e7a1      	b.n	800a17c <__multiply+0x80>
 800a238:	0801f278 	.word	0x0801f278
 800a23c:	0801f289 	.word	0x0801f289

0800a240 <__pow5mult>:
 800a240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a244:	4615      	mov	r5, r2
 800a246:	f012 0203 	ands.w	r2, r2, #3
 800a24a:	4607      	mov	r7, r0
 800a24c:	460e      	mov	r6, r1
 800a24e:	d007      	beq.n	800a260 <__pow5mult+0x20>
 800a250:	4c25      	ldr	r4, [pc, #148]	@ (800a2e8 <__pow5mult+0xa8>)
 800a252:	3a01      	subs	r2, #1
 800a254:	2300      	movs	r3, #0
 800a256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a25a:	f7ff fea7 	bl	8009fac <__multadd>
 800a25e:	4606      	mov	r6, r0
 800a260:	10ad      	asrs	r5, r5, #2
 800a262:	d03d      	beq.n	800a2e0 <__pow5mult+0xa0>
 800a264:	69fc      	ldr	r4, [r7, #28]
 800a266:	b97c      	cbnz	r4, 800a288 <__pow5mult+0x48>
 800a268:	2010      	movs	r0, #16
 800a26a:	f7ff fd87 	bl	8009d7c <malloc>
 800a26e:	4602      	mov	r2, r0
 800a270:	61f8      	str	r0, [r7, #28]
 800a272:	b928      	cbnz	r0, 800a280 <__pow5mult+0x40>
 800a274:	4b1d      	ldr	r3, [pc, #116]	@ (800a2ec <__pow5mult+0xac>)
 800a276:	481e      	ldr	r0, [pc, #120]	@ (800a2f0 <__pow5mult+0xb0>)
 800a278:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a27c:	f000 faee 	bl	800a85c <__assert_func>
 800a280:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a284:	6004      	str	r4, [r0, #0]
 800a286:	60c4      	str	r4, [r0, #12]
 800a288:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a28c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a290:	b94c      	cbnz	r4, 800a2a6 <__pow5mult+0x66>
 800a292:	f240 2171 	movw	r1, #625	@ 0x271
 800a296:	4638      	mov	r0, r7
 800a298:	f7ff ff1a 	bl	800a0d0 <__i2b>
 800a29c:	2300      	movs	r3, #0
 800a29e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	6003      	str	r3, [r0, #0]
 800a2a6:	f04f 0900 	mov.w	r9, #0
 800a2aa:	07eb      	lsls	r3, r5, #31
 800a2ac:	d50a      	bpl.n	800a2c4 <__pow5mult+0x84>
 800a2ae:	4631      	mov	r1, r6
 800a2b0:	4622      	mov	r2, r4
 800a2b2:	4638      	mov	r0, r7
 800a2b4:	f7ff ff22 	bl	800a0fc <__multiply>
 800a2b8:	4631      	mov	r1, r6
 800a2ba:	4680      	mov	r8, r0
 800a2bc:	4638      	mov	r0, r7
 800a2be:	f7ff fe53 	bl	8009f68 <_Bfree>
 800a2c2:	4646      	mov	r6, r8
 800a2c4:	106d      	asrs	r5, r5, #1
 800a2c6:	d00b      	beq.n	800a2e0 <__pow5mult+0xa0>
 800a2c8:	6820      	ldr	r0, [r4, #0]
 800a2ca:	b938      	cbnz	r0, 800a2dc <__pow5mult+0x9c>
 800a2cc:	4622      	mov	r2, r4
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	4638      	mov	r0, r7
 800a2d2:	f7ff ff13 	bl	800a0fc <__multiply>
 800a2d6:	6020      	str	r0, [r4, #0]
 800a2d8:	f8c0 9000 	str.w	r9, [r0]
 800a2dc:	4604      	mov	r4, r0
 800a2de:	e7e4      	b.n	800a2aa <__pow5mult+0x6a>
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2e6:	bf00      	nop
 800a2e8:	0801f350 	.word	0x0801f350
 800a2ec:	0801f209 	.word	0x0801f209
 800a2f0:	0801f289 	.word	0x0801f289

0800a2f4 <__lshift>:
 800a2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f8:	460c      	mov	r4, r1
 800a2fa:	6849      	ldr	r1, [r1, #4]
 800a2fc:	6923      	ldr	r3, [r4, #16]
 800a2fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a302:	68a3      	ldr	r3, [r4, #8]
 800a304:	4607      	mov	r7, r0
 800a306:	4691      	mov	r9, r2
 800a308:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a30c:	f108 0601 	add.w	r6, r8, #1
 800a310:	42b3      	cmp	r3, r6
 800a312:	db0b      	blt.n	800a32c <__lshift+0x38>
 800a314:	4638      	mov	r0, r7
 800a316:	f7ff fde7 	bl	8009ee8 <_Balloc>
 800a31a:	4605      	mov	r5, r0
 800a31c:	b948      	cbnz	r0, 800a332 <__lshift+0x3e>
 800a31e:	4602      	mov	r2, r0
 800a320:	4b28      	ldr	r3, [pc, #160]	@ (800a3c4 <__lshift+0xd0>)
 800a322:	4829      	ldr	r0, [pc, #164]	@ (800a3c8 <__lshift+0xd4>)
 800a324:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a328:	f000 fa98 	bl	800a85c <__assert_func>
 800a32c:	3101      	adds	r1, #1
 800a32e:	005b      	lsls	r3, r3, #1
 800a330:	e7ee      	b.n	800a310 <__lshift+0x1c>
 800a332:	2300      	movs	r3, #0
 800a334:	f100 0114 	add.w	r1, r0, #20
 800a338:	f100 0210 	add.w	r2, r0, #16
 800a33c:	4618      	mov	r0, r3
 800a33e:	4553      	cmp	r3, sl
 800a340:	db33      	blt.n	800a3aa <__lshift+0xb6>
 800a342:	6920      	ldr	r0, [r4, #16]
 800a344:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a348:	f104 0314 	add.w	r3, r4, #20
 800a34c:	f019 091f 	ands.w	r9, r9, #31
 800a350:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a354:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a358:	d02b      	beq.n	800a3b2 <__lshift+0xbe>
 800a35a:	f1c9 0e20 	rsb	lr, r9, #32
 800a35e:	468a      	mov	sl, r1
 800a360:	2200      	movs	r2, #0
 800a362:	6818      	ldr	r0, [r3, #0]
 800a364:	fa00 f009 	lsl.w	r0, r0, r9
 800a368:	4310      	orrs	r0, r2
 800a36a:	f84a 0b04 	str.w	r0, [sl], #4
 800a36e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a372:	459c      	cmp	ip, r3
 800a374:	fa22 f20e 	lsr.w	r2, r2, lr
 800a378:	d8f3      	bhi.n	800a362 <__lshift+0x6e>
 800a37a:	ebac 0304 	sub.w	r3, ip, r4
 800a37e:	3b15      	subs	r3, #21
 800a380:	f023 0303 	bic.w	r3, r3, #3
 800a384:	3304      	adds	r3, #4
 800a386:	f104 0015 	add.w	r0, r4, #21
 800a38a:	4560      	cmp	r0, ip
 800a38c:	bf88      	it	hi
 800a38e:	2304      	movhi	r3, #4
 800a390:	50ca      	str	r2, [r1, r3]
 800a392:	b10a      	cbz	r2, 800a398 <__lshift+0xa4>
 800a394:	f108 0602 	add.w	r6, r8, #2
 800a398:	3e01      	subs	r6, #1
 800a39a:	4638      	mov	r0, r7
 800a39c:	612e      	str	r6, [r5, #16]
 800a39e:	4621      	mov	r1, r4
 800a3a0:	f7ff fde2 	bl	8009f68 <_Bfree>
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	e7c5      	b.n	800a33e <__lshift+0x4a>
 800a3b2:	3904      	subs	r1, #4
 800a3b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3bc:	459c      	cmp	ip, r3
 800a3be:	d8f9      	bhi.n	800a3b4 <__lshift+0xc0>
 800a3c0:	e7ea      	b.n	800a398 <__lshift+0xa4>
 800a3c2:	bf00      	nop
 800a3c4:	0801f278 	.word	0x0801f278
 800a3c8:	0801f289 	.word	0x0801f289

0800a3cc <__mcmp>:
 800a3cc:	690a      	ldr	r2, [r1, #16]
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	6900      	ldr	r0, [r0, #16]
 800a3d2:	1a80      	subs	r0, r0, r2
 800a3d4:	b530      	push	{r4, r5, lr}
 800a3d6:	d10e      	bne.n	800a3f6 <__mcmp+0x2a>
 800a3d8:	3314      	adds	r3, #20
 800a3da:	3114      	adds	r1, #20
 800a3dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a3e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a3e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a3e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a3ec:	4295      	cmp	r5, r2
 800a3ee:	d003      	beq.n	800a3f8 <__mcmp+0x2c>
 800a3f0:	d205      	bcs.n	800a3fe <__mcmp+0x32>
 800a3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f6:	bd30      	pop	{r4, r5, pc}
 800a3f8:	42a3      	cmp	r3, r4
 800a3fa:	d3f3      	bcc.n	800a3e4 <__mcmp+0x18>
 800a3fc:	e7fb      	b.n	800a3f6 <__mcmp+0x2a>
 800a3fe:	2001      	movs	r0, #1
 800a400:	e7f9      	b.n	800a3f6 <__mcmp+0x2a>
	...

0800a404 <__mdiff>:
 800a404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a408:	4689      	mov	r9, r1
 800a40a:	4606      	mov	r6, r0
 800a40c:	4611      	mov	r1, r2
 800a40e:	4648      	mov	r0, r9
 800a410:	4614      	mov	r4, r2
 800a412:	f7ff ffdb 	bl	800a3cc <__mcmp>
 800a416:	1e05      	subs	r5, r0, #0
 800a418:	d112      	bne.n	800a440 <__mdiff+0x3c>
 800a41a:	4629      	mov	r1, r5
 800a41c:	4630      	mov	r0, r6
 800a41e:	f7ff fd63 	bl	8009ee8 <_Balloc>
 800a422:	4602      	mov	r2, r0
 800a424:	b928      	cbnz	r0, 800a432 <__mdiff+0x2e>
 800a426:	4b3f      	ldr	r3, [pc, #252]	@ (800a524 <__mdiff+0x120>)
 800a428:	f240 2137 	movw	r1, #567	@ 0x237
 800a42c:	483e      	ldr	r0, [pc, #248]	@ (800a528 <__mdiff+0x124>)
 800a42e:	f000 fa15 	bl	800a85c <__assert_func>
 800a432:	2301      	movs	r3, #1
 800a434:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a438:	4610      	mov	r0, r2
 800a43a:	b003      	add	sp, #12
 800a43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a440:	bfbc      	itt	lt
 800a442:	464b      	movlt	r3, r9
 800a444:	46a1      	movlt	r9, r4
 800a446:	4630      	mov	r0, r6
 800a448:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a44c:	bfba      	itte	lt
 800a44e:	461c      	movlt	r4, r3
 800a450:	2501      	movlt	r5, #1
 800a452:	2500      	movge	r5, #0
 800a454:	f7ff fd48 	bl	8009ee8 <_Balloc>
 800a458:	4602      	mov	r2, r0
 800a45a:	b918      	cbnz	r0, 800a464 <__mdiff+0x60>
 800a45c:	4b31      	ldr	r3, [pc, #196]	@ (800a524 <__mdiff+0x120>)
 800a45e:	f240 2145 	movw	r1, #581	@ 0x245
 800a462:	e7e3      	b.n	800a42c <__mdiff+0x28>
 800a464:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a468:	6926      	ldr	r6, [r4, #16]
 800a46a:	60c5      	str	r5, [r0, #12]
 800a46c:	f109 0310 	add.w	r3, r9, #16
 800a470:	f109 0514 	add.w	r5, r9, #20
 800a474:	f104 0e14 	add.w	lr, r4, #20
 800a478:	f100 0b14 	add.w	fp, r0, #20
 800a47c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a480:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a484:	9301      	str	r3, [sp, #4]
 800a486:	46d9      	mov	r9, fp
 800a488:	f04f 0c00 	mov.w	ip, #0
 800a48c:	9b01      	ldr	r3, [sp, #4]
 800a48e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a492:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a496:	9301      	str	r3, [sp, #4]
 800a498:	fa1f f38a 	uxth.w	r3, sl
 800a49c:	4619      	mov	r1, r3
 800a49e:	b283      	uxth	r3, r0
 800a4a0:	1acb      	subs	r3, r1, r3
 800a4a2:	0c00      	lsrs	r0, r0, #16
 800a4a4:	4463      	add	r3, ip
 800a4a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a4aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a4b4:	4576      	cmp	r6, lr
 800a4b6:	f849 3b04 	str.w	r3, [r9], #4
 800a4ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4be:	d8e5      	bhi.n	800a48c <__mdiff+0x88>
 800a4c0:	1b33      	subs	r3, r6, r4
 800a4c2:	3b15      	subs	r3, #21
 800a4c4:	f023 0303 	bic.w	r3, r3, #3
 800a4c8:	3415      	adds	r4, #21
 800a4ca:	3304      	adds	r3, #4
 800a4cc:	42a6      	cmp	r6, r4
 800a4ce:	bf38      	it	cc
 800a4d0:	2304      	movcc	r3, #4
 800a4d2:	441d      	add	r5, r3
 800a4d4:	445b      	add	r3, fp
 800a4d6:	461e      	mov	r6, r3
 800a4d8:	462c      	mov	r4, r5
 800a4da:	4544      	cmp	r4, r8
 800a4dc:	d30e      	bcc.n	800a4fc <__mdiff+0xf8>
 800a4de:	f108 0103 	add.w	r1, r8, #3
 800a4e2:	1b49      	subs	r1, r1, r5
 800a4e4:	f021 0103 	bic.w	r1, r1, #3
 800a4e8:	3d03      	subs	r5, #3
 800a4ea:	45a8      	cmp	r8, r5
 800a4ec:	bf38      	it	cc
 800a4ee:	2100      	movcc	r1, #0
 800a4f0:	440b      	add	r3, r1
 800a4f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a4f6:	b191      	cbz	r1, 800a51e <__mdiff+0x11a>
 800a4f8:	6117      	str	r7, [r2, #16]
 800a4fa:	e79d      	b.n	800a438 <__mdiff+0x34>
 800a4fc:	f854 1b04 	ldr.w	r1, [r4], #4
 800a500:	46e6      	mov	lr, ip
 800a502:	0c08      	lsrs	r0, r1, #16
 800a504:	fa1c fc81 	uxtah	ip, ip, r1
 800a508:	4471      	add	r1, lr
 800a50a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a50e:	b289      	uxth	r1, r1
 800a510:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a514:	f846 1b04 	str.w	r1, [r6], #4
 800a518:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a51c:	e7dd      	b.n	800a4da <__mdiff+0xd6>
 800a51e:	3f01      	subs	r7, #1
 800a520:	e7e7      	b.n	800a4f2 <__mdiff+0xee>
 800a522:	bf00      	nop
 800a524:	0801f278 	.word	0x0801f278
 800a528:	0801f289 	.word	0x0801f289

0800a52c <__d2b>:
 800a52c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a530:	460f      	mov	r7, r1
 800a532:	2101      	movs	r1, #1
 800a534:	ec59 8b10 	vmov	r8, r9, d0
 800a538:	4616      	mov	r6, r2
 800a53a:	f7ff fcd5 	bl	8009ee8 <_Balloc>
 800a53e:	4604      	mov	r4, r0
 800a540:	b930      	cbnz	r0, 800a550 <__d2b+0x24>
 800a542:	4602      	mov	r2, r0
 800a544:	4b23      	ldr	r3, [pc, #140]	@ (800a5d4 <__d2b+0xa8>)
 800a546:	4824      	ldr	r0, [pc, #144]	@ (800a5d8 <__d2b+0xac>)
 800a548:	f240 310f 	movw	r1, #783	@ 0x30f
 800a54c:	f000 f986 	bl	800a85c <__assert_func>
 800a550:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a554:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a558:	b10d      	cbz	r5, 800a55e <__d2b+0x32>
 800a55a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a55e:	9301      	str	r3, [sp, #4]
 800a560:	f1b8 0300 	subs.w	r3, r8, #0
 800a564:	d023      	beq.n	800a5ae <__d2b+0x82>
 800a566:	4668      	mov	r0, sp
 800a568:	9300      	str	r3, [sp, #0]
 800a56a:	f7ff fd84 	bl	800a076 <__lo0bits>
 800a56e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a572:	b1d0      	cbz	r0, 800a5aa <__d2b+0x7e>
 800a574:	f1c0 0320 	rsb	r3, r0, #32
 800a578:	fa02 f303 	lsl.w	r3, r2, r3
 800a57c:	430b      	orrs	r3, r1
 800a57e:	40c2      	lsrs	r2, r0
 800a580:	6163      	str	r3, [r4, #20]
 800a582:	9201      	str	r2, [sp, #4]
 800a584:	9b01      	ldr	r3, [sp, #4]
 800a586:	61a3      	str	r3, [r4, #24]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	bf0c      	ite	eq
 800a58c:	2201      	moveq	r2, #1
 800a58e:	2202      	movne	r2, #2
 800a590:	6122      	str	r2, [r4, #16]
 800a592:	b1a5      	cbz	r5, 800a5be <__d2b+0x92>
 800a594:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a598:	4405      	add	r5, r0
 800a59a:	603d      	str	r5, [r7, #0]
 800a59c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a5a0:	6030      	str	r0, [r6, #0]
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	b003      	add	sp, #12
 800a5a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5aa:	6161      	str	r1, [r4, #20]
 800a5ac:	e7ea      	b.n	800a584 <__d2b+0x58>
 800a5ae:	a801      	add	r0, sp, #4
 800a5b0:	f7ff fd61 	bl	800a076 <__lo0bits>
 800a5b4:	9b01      	ldr	r3, [sp, #4]
 800a5b6:	6163      	str	r3, [r4, #20]
 800a5b8:	3020      	adds	r0, #32
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	e7e8      	b.n	800a590 <__d2b+0x64>
 800a5be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a5c6:	6038      	str	r0, [r7, #0]
 800a5c8:	6918      	ldr	r0, [r3, #16]
 800a5ca:	f7ff fd35 	bl	800a038 <__hi0bits>
 800a5ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5d2:	e7e5      	b.n	800a5a0 <__d2b+0x74>
 800a5d4:	0801f278 	.word	0x0801f278
 800a5d8:	0801f289 	.word	0x0801f289

0800a5dc <__sflush_r>:
 800a5dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e4:	0716      	lsls	r6, r2, #28
 800a5e6:	4605      	mov	r5, r0
 800a5e8:	460c      	mov	r4, r1
 800a5ea:	d454      	bmi.n	800a696 <__sflush_r+0xba>
 800a5ec:	684b      	ldr	r3, [r1, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	dc02      	bgt.n	800a5f8 <__sflush_r+0x1c>
 800a5f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	dd48      	ble.n	800a68a <__sflush_r+0xae>
 800a5f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5fa:	2e00      	cmp	r6, #0
 800a5fc:	d045      	beq.n	800a68a <__sflush_r+0xae>
 800a5fe:	2300      	movs	r3, #0
 800a600:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a604:	682f      	ldr	r7, [r5, #0]
 800a606:	6a21      	ldr	r1, [r4, #32]
 800a608:	602b      	str	r3, [r5, #0]
 800a60a:	d030      	beq.n	800a66e <__sflush_r+0x92>
 800a60c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a60e:	89a3      	ldrh	r3, [r4, #12]
 800a610:	0759      	lsls	r1, r3, #29
 800a612:	d505      	bpl.n	800a620 <__sflush_r+0x44>
 800a614:	6863      	ldr	r3, [r4, #4]
 800a616:	1ad2      	subs	r2, r2, r3
 800a618:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a61a:	b10b      	cbz	r3, 800a620 <__sflush_r+0x44>
 800a61c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a61e:	1ad2      	subs	r2, r2, r3
 800a620:	2300      	movs	r3, #0
 800a622:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a624:	6a21      	ldr	r1, [r4, #32]
 800a626:	4628      	mov	r0, r5
 800a628:	47b0      	blx	r6
 800a62a:	1c43      	adds	r3, r0, #1
 800a62c:	89a3      	ldrh	r3, [r4, #12]
 800a62e:	d106      	bne.n	800a63e <__sflush_r+0x62>
 800a630:	6829      	ldr	r1, [r5, #0]
 800a632:	291d      	cmp	r1, #29
 800a634:	d82b      	bhi.n	800a68e <__sflush_r+0xb2>
 800a636:	4a2a      	ldr	r2, [pc, #168]	@ (800a6e0 <__sflush_r+0x104>)
 800a638:	40ca      	lsrs	r2, r1
 800a63a:	07d6      	lsls	r6, r2, #31
 800a63c:	d527      	bpl.n	800a68e <__sflush_r+0xb2>
 800a63e:	2200      	movs	r2, #0
 800a640:	6062      	str	r2, [r4, #4]
 800a642:	04d9      	lsls	r1, r3, #19
 800a644:	6922      	ldr	r2, [r4, #16]
 800a646:	6022      	str	r2, [r4, #0]
 800a648:	d504      	bpl.n	800a654 <__sflush_r+0x78>
 800a64a:	1c42      	adds	r2, r0, #1
 800a64c:	d101      	bne.n	800a652 <__sflush_r+0x76>
 800a64e:	682b      	ldr	r3, [r5, #0]
 800a650:	b903      	cbnz	r3, 800a654 <__sflush_r+0x78>
 800a652:	6560      	str	r0, [r4, #84]	@ 0x54
 800a654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a656:	602f      	str	r7, [r5, #0]
 800a658:	b1b9      	cbz	r1, 800a68a <__sflush_r+0xae>
 800a65a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a65e:	4299      	cmp	r1, r3
 800a660:	d002      	beq.n	800a668 <__sflush_r+0x8c>
 800a662:	4628      	mov	r0, r5
 800a664:	f7ff fb40 	bl	8009ce8 <_free_r>
 800a668:	2300      	movs	r3, #0
 800a66a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a66c:	e00d      	b.n	800a68a <__sflush_r+0xae>
 800a66e:	2301      	movs	r3, #1
 800a670:	4628      	mov	r0, r5
 800a672:	47b0      	blx	r6
 800a674:	4602      	mov	r2, r0
 800a676:	1c50      	adds	r0, r2, #1
 800a678:	d1c9      	bne.n	800a60e <__sflush_r+0x32>
 800a67a:	682b      	ldr	r3, [r5, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d0c6      	beq.n	800a60e <__sflush_r+0x32>
 800a680:	2b1d      	cmp	r3, #29
 800a682:	d001      	beq.n	800a688 <__sflush_r+0xac>
 800a684:	2b16      	cmp	r3, #22
 800a686:	d11e      	bne.n	800a6c6 <__sflush_r+0xea>
 800a688:	602f      	str	r7, [r5, #0]
 800a68a:	2000      	movs	r0, #0
 800a68c:	e022      	b.n	800a6d4 <__sflush_r+0xf8>
 800a68e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a692:	b21b      	sxth	r3, r3
 800a694:	e01b      	b.n	800a6ce <__sflush_r+0xf2>
 800a696:	690f      	ldr	r7, [r1, #16]
 800a698:	2f00      	cmp	r7, #0
 800a69a:	d0f6      	beq.n	800a68a <__sflush_r+0xae>
 800a69c:	0793      	lsls	r3, r2, #30
 800a69e:	680e      	ldr	r6, [r1, #0]
 800a6a0:	bf08      	it	eq
 800a6a2:	694b      	ldreq	r3, [r1, #20]
 800a6a4:	600f      	str	r7, [r1, #0]
 800a6a6:	bf18      	it	ne
 800a6a8:	2300      	movne	r3, #0
 800a6aa:	eba6 0807 	sub.w	r8, r6, r7
 800a6ae:	608b      	str	r3, [r1, #8]
 800a6b0:	f1b8 0f00 	cmp.w	r8, #0
 800a6b4:	dde9      	ble.n	800a68a <__sflush_r+0xae>
 800a6b6:	6a21      	ldr	r1, [r4, #32]
 800a6b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a6ba:	4643      	mov	r3, r8
 800a6bc:	463a      	mov	r2, r7
 800a6be:	4628      	mov	r0, r5
 800a6c0:	47b0      	blx	r6
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	dc08      	bgt.n	800a6d8 <__sflush_r+0xfc>
 800a6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6ce:	81a3      	strh	r3, [r4, #12]
 800a6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6d8:	4407      	add	r7, r0
 800a6da:	eba8 0800 	sub.w	r8, r8, r0
 800a6de:	e7e7      	b.n	800a6b0 <__sflush_r+0xd4>
 800a6e0:	20400001 	.word	0x20400001

0800a6e4 <_fflush_r>:
 800a6e4:	b538      	push	{r3, r4, r5, lr}
 800a6e6:	690b      	ldr	r3, [r1, #16]
 800a6e8:	4605      	mov	r5, r0
 800a6ea:	460c      	mov	r4, r1
 800a6ec:	b913      	cbnz	r3, 800a6f4 <_fflush_r+0x10>
 800a6ee:	2500      	movs	r5, #0
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	bd38      	pop	{r3, r4, r5, pc}
 800a6f4:	b118      	cbz	r0, 800a6fe <_fflush_r+0x1a>
 800a6f6:	6a03      	ldr	r3, [r0, #32]
 800a6f8:	b90b      	cbnz	r3, 800a6fe <_fflush_r+0x1a>
 800a6fa:	f7fe fb01 	bl	8008d00 <__sinit>
 800a6fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d0f3      	beq.n	800a6ee <_fflush_r+0xa>
 800a706:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a708:	07d0      	lsls	r0, r2, #31
 800a70a:	d404      	bmi.n	800a716 <_fflush_r+0x32>
 800a70c:	0599      	lsls	r1, r3, #22
 800a70e:	d402      	bmi.n	800a716 <_fflush_r+0x32>
 800a710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a712:	f7fe fc80 	bl	8009016 <__retarget_lock_acquire_recursive>
 800a716:	4628      	mov	r0, r5
 800a718:	4621      	mov	r1, r4
 800a71a:	f7ff ff5f 	bl	800a5dc <__sflush_r>
 800a71e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a720:	07da      	lsls	r2, r3, #31
 800a722:	4605      	mov	r5, r0
 800a724:	d4e4      	bmi.n	800a6f0 <_fflush_r+0xc>
 800a726:	89a3      	ldrh	r3, [r4, #12]
 800a728:	059b      	lsls	r3, r3, #22
 800a72a:	d4e1      	bmi.n	800a6f0 <_fflush_r+0xc>
 800a72c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a72e:	f7fe fc73 	bl	8009018 <__retarget_lock_release_recursive>
 800a732:	e7dd      	b.n	800a6f0 <_fflush_r+0xc>

0800a734 <__swhatbuf_r>:
 800a734:	b570      	push	{r4, r5, r6, lr}
 800a736:	460c      	mov	r4, r1
 800a738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a73c:	2900      	cmp	r1, #0
 800a73e:	b096      	sub	sp, #88	@ 0x58
 800a740:	4615      	mov	r5, r2
 800a742:	461e      	mov	r6, r3
 800a744:	da0d      	bge.n	800a762 <__swhatbuf_r+0x2e>
 800a746:	89a3      	ldrh	r3, [r4, #12]
 800a748:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a74c:	f04f 0100 	mov.w	r1, #0
 800a750:	bf14      	ite	ne
 800a752:	2340      	movne	r3, #64	@ 0x40
 800a754:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a758:	2000      	movs	r0, #0
 800a75a:	6031      	str	r1, [r6, #0]
 800a75c:	602b      	str	r3, [r5, #0]
 800a75e:	b016      	add	sp, #88	@ 0x58
 800a760:	bd70      	pop	{r4, r5, r6, pc}
 800a762:	466a      	mov	r2, sp
 800a764:	f000 f848 	bl	800a7f8 <_fstat_r>
 800a768:	2800      	cmp	r0, #0
 800a76a:	dbec      	blt.n	800a746 <__swhatbuf_r+0x12>
 800a76c:	9901      	ldr	r1, [sp, #4]
 800a76e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a772:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a776:	4259      	negs	r1, r3
 800a778:	4159      	adcs	r1, r3
 800a77a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a77e:	e7eb      	b.n	800a758 <__swhatbuf_r+0x24>

0800a780 <__smakebuf_r>:
 800a780:	898b      	ldrh	r3, [r1, #12]
 800a782:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a784:	079d      	lsls	r5, r3, #30
 800a786:	4606      	mov	r6, r0
 800a788:	460c      	mov	r4, r1
 800a78a:	d507      	bpl.n	800a79c <__smakebuf_r+0x1c>
 800a78c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a790:	6023      	str	r3, [r4, #0]
 800a792:	6123      	str	r3, [r4, #16]
 800a794:	2301      	movs	r3, #1
 800a796:	6163      	str	r3, [r4, #20]
 800a798:	b003      	add	sp, #12
 800a79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a79c:	ab01      	add	r3, sp, #4
 800a79e:	466a      	mov	r2, sp
 800a7a0:	f7ff ffc8 	bl	800a734 <__swhatbuf_r>
 800a7a4:	9f00      	ldr	r7, [sp, #0]
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	4639      	mov	r1, r7
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	f7ff fb10 	bl	8009dd0 <_malloc_r>
 800a7b0:	b948      	cbnz	r0, 800a7c6 <__smakebuf_r+0x46>
 800a7b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7b6:	059a      	lsls	r2, r3, #22
 800a7b8:	d4ee      	bmi.n	800a798 <__smakebuf_r+0x18>
 800a7ba:	f023 0303 	bic.w	r3, r3, #3
 800a7be:	f043 0302 	orr.w	r3, r3, #2
 800a7c2:	81a3      	strh	r3, [r4, #12]
 800a7c4:	e7e2      	b.n	800a78c <__smakebuf_r+0xc>
 800a7c6:	89a3      	ldrh	r3, [r4, #12]
 800a7c8:	6020      	str	r0, [r4, #0]
 800a7ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7ce:	81a3      	strh	r3, [r4, #12]
 800a7d0:	9b01      	ldr	r3, [sp, #4]
 800a7d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a7d6:	b15b      	cbz	r3, 800a7f0 <__smakebuf_r+0x70>
 800a7d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7dc:	4630      	mov	r0, r6
 800a7de:	f000 f81d 	bl	800a81c <_isatty_r>
 800a7e2:	b128      	cbz	r0, 800a7f0 <__smakebuf_r+0x70>
 800a7e4:	89a3      	ldrh	r3, [r4, #12]
 800a7e6:	f023 0303 	bic.w	r3, r3, #3
 800a7ea:	f043 0301 	orr.w	r3, r3, #1
 800a7ee:	81a3      	strh	r3, [r4, #12]
 800a7f0:	89a3      	ldrh	r3, [r4, #12]
 800a7f2:	431d      	orrs	r5, r3
 800a7f4:	81a5      	strh	r5, [r4, #12]
 800a7f6:	e7cf      	b.n	800a798 <__smakebuf_r+0x18>

0800a7f8 <_fstat_r>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	4d07      	ldr	r5, [pc, #28]	@ (800a818 <_fstat_r+0x20>)
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	4604      	mov	r4, r0
 800a800:	4608      	mov	r0, r1
 800a802:	4611      	mov	r1, r2
 800a804:	602b      	str	r3, [r5, #0]
 800a806:	f000 fb5e 	bl	800aec6 <_fstat>
 800a80a:	1c43      	adds	r3, r0, #1
 800a80c:	d102      	bne.n	800a814 <_fstat_r+0x1c>
 800a80e:	682b      	ldr	r3, [r5, #0]
 800a810:	b103      	cbz	r3, 800a814 <_fstat_r+0x1c>
 800a812:	6023      	str	r3, [r4, #0]
 800a814:	bd38      	pop	{r3, r4, r5, pc}
 800a816:	bf00      	nop
 800a818:	20009d90 	.word	0x20009d90

0800a81c <_isatty_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	4d06      	ldr	r5, [pc, #24]	@ (800a838 <_isatty_r+0x1c>)
 800a820:	2300      	movs	r3, #0
 800a822:	4604      	mov	r4, r0
 800a824:	4608      	mov	r0, r1
 800a826:	602b      	str	r3, [r5, #0]
 800a828:	f000 fc52 	bl	800b0d0 <_isatty>
 800a82c:	1c43      	adds	r3, r0, #1
 800a82e:	d102      	bne.n	800a836 <_isatty_r+0x1a>
 800a830:	682b      	ldr	r3, [r5, #0]
 800a832:	b103      	cbz	r3, 800a836 <_isatty_r+0x1a>
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	bd38      	pop	{r3, r4, r5, pc}
 800a838:	20009d90 	.word	0x20009d90

0800a83c <_sbrk_r>:
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	4d06      	ldr	r5, [pc, #24]	@ (800a858 <_sbrk_r+0x1c>)
 800a840:	2300      	movs	r3, #0
 800a842:	4604      	mov	r4, r0
 800a844:	4608      	mov	r0, r1
 800a846:	602b      	str	r3, [r5, #0]
 800a848:	f7f7 fe82 	bl	8002550 <_sbrk>
 800a84c:	1c43      	adds	r3, r0, #1
 800a84e:	d102      	bne.n	800a856 <_sbrk_r+0x1a>
 800a850:	682b      	ldr	r3, [r5, #0]
 800a852:	b103      	cbz	r3, 800a856 <_sbrk_r+0x1a>
 800a854:	6023      	str	r3, [r4, #0]
 800a856:	bd38      	pop	{r3, r4, r5, pc}
 800a858:	20009d90 	.word	0x20009d90

0800a85c <__assert_func>:
 800a85c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a85e:	4614      	mov	r4, r2
 800a860:	461a      	mov	r2, r3
 800a862:	4b09      	ldr	r3, [pc, #36]	@ (800a888 <__assert_func+0x2c>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4605      	mov	r5, r0
 800a868:	68d8      	ldr	r0, [r3, #12]
 800a86a:	b14c      	cbz	r4, 800a880 <__assert_func+0x24>
 800a86c:	4b07      	ldr	r3, [pc, #28]	@ (800a88c <__assert_func+0x30>)
 800a86e:	9100      	str	r1, [sp, #0]
 800a870:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a874:	4906      	ldr	r1, [pc, #24]	@ (800a890 <__assert_func+0x34>)
 800a876:	462b      	mov	r3, r5
 800a878:	f000 f842 	bl	800a900 <fiprintf>
 800a87c:	f000 f852 	bl	800a924 <abort>
 800a880:	4b04      	ldr	r3, [pc, #16]	@ (800a894 <__assert_func+0x38>)
 800a882:	461c      	mov	r4, r3
 800a884:	e7f3      	b.n	800a86e <__assert_func+0x12>
 800a886:	bf00      	nop
 800a888:	20000054 	.word	0x20000054
 800a88c:	0801f2ec 	.word	0x0801f2ec
 800a890:	0801f2f9 	.word	0x0801f2f9
 800a894:	0801f327 	.word	0x0801f327

0800a898 <_calloc_r>:
 800a898:	b570      	push	{r4, r5, r6, lr}
 800a89a:	fba1 5402 	umull	r5, r4, r1, r2
 800a89e:	b934      	cbnz	r4, 800a8ae <_calloc_r+0x16>
 800a8a0:	4629      	mov	r1, r5
 800a8a2:	f7ff fa95 	bl	8009dd0 <_malloc_r>
 800a8a6:	4606      	mov	r6, r0
 800a8a8:	b928      	cbnz	r0, 800a8b6 <_calloc_r+0x1e>
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	bd70      	pop	{r4, r5, r6, pc}
 800a8ae:	220c      	movs	r2, #12
 800a8b0:	6002      	str	r2, [r0, #0]
 800a8b2:	2600      	movs	r6, #0
 800a8b4:	e7f9      	b.n	800a8aa <_calloc_r+0x12>
 800a8b6:	462a      	mov	r2, r5
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	f7fe fb2f 	bl	8008f1c <memset>
 800a8be:	e7f4      	b.n	800a8aa <_calloc_r+0x12>

0800a8c0 <__ascii_mbtowc>:
 800a8c0:	b082      	sub	sp, #8
 800a8c2:	b901      	cbnz	r1, 800a8c6 <__ascii_mbtowc+0x6>
 800a8c4:	a901      	add	r1, sp, #4
 800a8c6:	b142      	cbz	r2, 800a8da <__ascii_mbtowc+0x1a>
 800a8c8:	b14b      	cbz	r3, 800a8de <__ascii_mbtowc+0x1e>
 800a8ca:	7813      	ldrb	r3, [r2, #0]
 800a8cc:	600b      	str	r3, [r1, #0]
 800a8ce:	7812      	ldrb	r2, [r2, #0]
 800a8d0:	1e10      	subs	r0, r2, #0
 800a8d2:	bf18      	it	ne
 800a8d4:	2001      	movne	r0, #1
 800a8d6:	b002      	add	sp, #8
 800a8d8:	4770      	bx	lr
 800a8da:	4610      	mov	r0, r2
 800a8dc:	e7fb      	b.n	800a8d6 <__ascii_mbtowc+0x16>
 800a8de:	f06f 0001 	mvn.w	r0, #1
 800a8e2:	e7f8      	b.n	800a8d6 <__ascii_mbtowc+0x16>

0800a8e4 <__ascii_wctomb>:
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	4608      	mov	r0, r1
 800a8e8:	b141      	cbz	r1, 800a8fc <__ascii_wctomb+0x18>
 800a8ea:	2aff      	cmp	r2, #255	@ 0xff
 800a8ec:	d904      	bls.n	800a8f8 <__ascii_wctomb+0x14>
 800a8ee:	228a      	movs	r2, #138	@ 0x8a
 800a8f0:	601a      	str	r2, [r3, #0]
 800a8f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f6:	4770      	bx	lr
 800a8f8:	700a      	strb	r2, [r1, #0]
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	4770      	bx	lr
	...

0800a900 <fiprintf>:
 800a900:	b40e      	push	{r1, r2, r3}
 800a902:	b503      	push	{r0, r1, lr}
 800a904:	4601      	mov	r1, r0
 800a906:	ab03      	add	r3, sp, #12
 800a908:	4805      	ldr	r0, [pc, #20]	@ (800a920 <fiprintf+0x20>)
 800a90a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a90e:	6800      	ldr	r0, [r0, #0]
 800a910:	9301      	str	r3, [sp, #4]
 800a912:	f000 f837 	bl	800a984 <_vfiprintf_r>
 800a916:	b002      	add	sp, #8
 800a918:	f85d eb04 	ldr.w	lr, [sp], #4
 800a91c:	b003      	add	sp, #12
 800a91e:	4770      	bx	lr
 800a920:	20000054 	.word	0x20000054

0800a924 <abort>:
 800a924:	b508      	push	{r3, lr}
 800a926:	2006      	movs	r0, #6
 800a928:	f000 f96c 	bl	800ac04 <raise>
 800a92c:	2001      	movs	r0, #1
 800a92e:	f000 f985 	bl	800ac3c <_exit>

0800a932 <__sfputc_r>:
 800a932:	6893      	ldr	r3, [r2, #8]
 800a934:	3b01      	subs	r3, #1
 800a936:	2b00      	cmp	r3, #0
 800a938:	b410      	push	{r4}
 800a93a:	6093      	str	r3, [r2, #8]
 800a93c:	da08      	bge.n	800a950 <__sfputc_r+0x1e>
 800a93e:	6994      	ldr	r4, [r2, #24]
 800a940:	42a3      	cmp	r3, r4
 800a942:	db01      	blt.n	800a948 <__sfputc_r+0x16>
 800a944:	290a      	cmp	r1, #10
 800a946:	d103      	bne.n	800a950 <__sfputc_r+0x1e>
 800a948:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a94c:	f7fe ba51 	b.w	8008df2 <__swbuf_r>
 800a950:	6813      	ldr	r3, [r2, #0]
 800a952:	1c58      	adds	r0, r3, #1
 800a954:	6010      	str	r0, [r2, #0]
 800a956:	7019      	strb	r1, [r3, #0]
 800a958:	4608      	mov	r0, r1
 800a95a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <__sfputs_r>:
 800a960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a962:	4606      	mov	r6, r0
 800a964:	460f      	mov	r7, r1
 800a966:	4614      	mov	r4, r2
 800a968:	18d5      	adds	r5, r2, r3
 800a96a:	42ac      	cmp	r4, r5
 800a96c:	d101      	bne.n	800a972 <__sfputs_r+0x12>
 800a96e:	2000      	movs	r0, #0
 800a970:	e007      	b.n	800a982 <__sfputs_r+0x22>
 800a972:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a976:	463a      	mov	r2, r7
 800a978:	4630      	mov	r0, r6
 800a97a:	f7ff ffda 	bl	800a932 <__sfputc_r>
 800a97e:	1c43      	adds	r3, r0, #1
 800a980:	d1f3      	bne.n	800a96a <__sfputs_r+0xa>
 800a982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a984 <_vfiprintf_r>:
 800a984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a988:	460d      	mov	r5, r1
 800a98a:	b09d      	sub	sp, #116	@ 0x74
 800a98c:	4614      	mov	r4, r2
 800a98e:	4698      	mov	r8, r3
 800a990:	4606      	mov	r6, r0
 800a992:	b118      	cbz	r0, 800a99c <_vfiprintf_r+0x18>
 800a994:	6a03      	ldr	r3, [r0, #32]
 800a996:	b90b      	cbnz	r3, 800a99c <_vfiprintf_r+0x18>
 800a998:	f7fe f9b2 	bl	8008d00 <__sinit>
 800a99c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a99e:	07d9      	lsls	r1, r3, #31
 800a9a0:	d405      	bmi.n	800a9ae <_vfiprintf_r+0x2a>
 800a9a2:	89ab      	ldrh	r3, [r5, #12]
 800a9a4:	059a      	lsls	r2, r3, #22
 800a9a6:	d402      	bmi.n	800a9ae <_vfiprintf_r+0x2a>
 800a9a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9aa:	f7fe fb34 	bl	8009016 <__retarget_lock_acquire_recursive>
 800a9ae:	89ab      	ldrh	r3, [r5, #12]
 800a9b0:	071b      	lsls	r3, r3, #28
 800a9b2:	d501      	bpl.n	800a9b8 <_vfiprintf_r+0x34>
 800a9b4:	692b      	ldr	r3, [r5, #16]
 800a9b6:	b99b      	cbnz	r3, 800a9e0 <_vfiprintf_r+0x5c>
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f7fe fa58 	bl	8008e70 <__swsetup_r>
 800a9c0:	b170      	cbz	r0, 800a9e0 <_vfiprintf_r+0x5c>
 800a9c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9c4:	07dc      	lsls	r4, r3, #31
 800a9c6:	d504      	bpl.n	800a9d2 <_vfiprintf_r+0x4e>
 800a9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9cc:	b01d      	add	sp, #116	@ 0x74
 800a9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d2:	89ab      	ldrh	r3, [r5, #12]
 800a9d4:	0598      	lsls	r0, r3, #22
 800a9d6:	d4f7      	bmi.n	800a9c8 <_vfiprintf_r+0x44>
 800a9d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9da:	f7fe fb1d 	bl	8009018 <__retarget_lock_release_recursive>
 800a9de:	e7f3      	b.n	800a9c8 <_vfiprintf_r+0x44>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9e4:	2320      	movs	r3, #32
 800a9e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9ee:	2330      	movs	r3, #48	@ 0x30
 800a9f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aba0 <_vfiprintf_r+0x21c>
 800a9f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9f8:	f04f 0901 	mov.w	r9, #1
 800a9fc:	4623      	mov	r3, r4
 800a9fe:	469a      	mov	sl, r3
 800aa00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa04:	b10a      	cbz	r2, 800aa0a <_vfiprintf_r+0x86>
 800aa06:	2a25      	cmp	r2, #37	@ 0x25
 800aa08:	d1f9      	bne.n	800a9fe <_vfiprintf_r+0x7a>
 800aa0a:	ebba 0b04 	subs.w	fp, sl, r4
 800aa0e:	d00b      	beq.n	800aa28 <_vfiprintf_r+0xa4>
 800aa10:	465b      	mov	r3, fp
 800aa12:	4622      	mov	r2, r4
 800aa14:	4629      	mov	r1, r5
 800aa16:	4630      	mov	r0, r6
 800aa18:	f7ff ffa2 	bl	800a960 <__sfputs_r>
 800aa1c:	3001      	adds	r0, #1
 800aa1e:	f000 80a7 	beq.w	800ab70 <_vfiprintf_r+0x1ec>
 800aa22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa24:	445a      	add	r2, fp
 800aa26:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa28:	f89a 3000 	ldrb.w	r3, [sl]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f000 809f 	beq.w	800ab70 <_vfiprintf_r+0x1ec>
 800aa32:	2300      	movs	r3, #0
 800aa34:	f04f 32ff 	mov.w	r2, #4294967295
 800aa38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa3c:	f10a 0a01 	add.w	sl, sl, #1
 800aa40:	9304      	str	r3, [sp, #16]
 800aa42:	9307      	str	r3, [sp, #28]
 800aa44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa48:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa4a:	4654      	mov	r4, sl
 800aa4c:	2205      	movs	r2, #5
 800aa4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa52:	4853      	ldr	r0, [pc, #332]	@ (800aba0 <_vfiprintf_r+0x21c>)
 800aa54:	f7f5 fc3c 	bl	80002d0 <memchr>
 800aa58:	9a04      	ldr	r2, [sp, #16]
 800aa5a:	b9d8      	cbnz	r0, 800aa94 <_vfiprintf_r+0x110>
 800aa5c:	06d1      	lsls	r1, r2, #27
 800aa5e:	bf44      	itt	mi
 800aa60:	2320      	movmi	r3, #32
 800aa62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa66:	0713      	lsls	r3, r2, #28
 800aa68:	bf44      	itt	mi
 800aa6a:	232b      	movmi	r3, #43	@ 0x2b
 800aa6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa70:	f89a 3000 	ldrb.w	r3, [sl]
 800aa74:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa76:	d015      	beq.n	800aaa4 <_vfiprintf_r+0x120>
 800aa78:	9a07      	ldr	r2, [sp, #28]
 800aa7a:	4654      	mov	r4, sl
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	f04f 0c0a 	mov.w	ip, #10
 800aa82:	4621      	mov	r1, r4
 800aa84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa88:	3b30      	subs	r3, #48	@ 0x30
 800aa8a:	2b09      	cmp	r3, #9
 800aa8c:	d94b      	bls.n	800ab26 <_vfiprintf_r+0x1a2>
 800aa8e:	b1b0      	cbz	r0, 800aabe <_vfiprintf_r+0x13a>
 800aa90:	9207      	str	r2, [sp, #28]
 800aa92:	e014      	b.n	800aabe <_vfiprintf_r+0x13a>
 800aa94:	eba0 0308 	sub.w	r3, r0, r8
 800aa98:	fa09 f303 	lsl.w	r3, r9, r3
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	9304      	str	r3, [sp, #16]
 800aaa0:	46a2      	mov	sl, r4
 800aaa2:	e7d2      	b.n	800aa4a <_vfiprintf_r+0xc6>
 800aaa4:	9b03      	ldr	r3, [sp, #12]
 800aaa6:	1d19      	adds	r1, r3, #4
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	9103      	str	r1, [sp, #12]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	bfbb      	ittet	lt
 800aab0:	425b      	neglt	r3, r3
 800aab2:	f042 0202 	orrlt.w	r2, r2, #2
 800aab6:	9307      	strge	r3, [sp, #28]
 800aab8:	9307      	strlt	r3, [sp, #28]
 800aaba:	bfb8      	it	lt
 800aabc:	9204      	strlt	r2, [sp, #16]
 800aabe:	7823      	ldrb	r3, [r4, #0]
 800aac0:	2b2e      	cmp	r3, #46	@ 0x2e
 800aac2:	d10a      	bne.n	800aada <_vfiprintf_r+0x156>
 800aac4:	7863      	ldrb	r3, [r4, #1]
 800aac6:	2b2a      	cmp	r3, #42	@ 0x2a
 800aac8:	d132      	bne.n	800ab30 <_vfiprintf_r+0x1ac>
 800aaca:	9b03      	ldr	r3, [sp, #12]
 800aacc:	1d1a      	adds	r2, r3, #4
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	9203      	str	r2, [sp, #12]
 800aad2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aad6:	3402      	adds	r4, #2
 800aad8:	9305      	str	r3, [sp, #20]
 800aada:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800abb0 <_vfiprintf_r+0x22c>
 800aade:	7821      	ldrb	r1, [r4, #0]
 800aae0:	2203      	movs	r2, #3
 800aae2:	4650      	mov	r0, sl
 800aae4:	f7f5 fbf4 	bl	80002d0 <memchr>
 800aae8:	b138      	cbz	r0, 800aafa <_vfiprintf_r+0x176>
 800aaea:	9b04      	ldr	r3, [sp, #16]
 800aaec:	eba0 000a 	sub.w	r0, r0, sl
 800aaf0:	2240      	movs	r2, #64	@ 0x40
 800aaf2:	4082      	lsls	r2, r0
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	3401      	adds	r4, #1
 800aaf8:	9304      	str	r3, [sp, #16]
 800aafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aafe:	4829      	ldr	r0, [pc, #164]	@ (800aba4 <_vfiprintf_r+0x220>)
 800ab00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab04:	2206      	movs	r2, #6
 800ab06:	f7f5 fbe3 	bl	80002d0 <memchr>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d03f      	beq.n	800ab8e <_vfiprintf_r+0x20a>
 800ab0e:	4b26      	ldr	r3, [pc, #152]	@ (800aba8 <_vfiprintf_r+0x224>)
 800ab10:	bb1b      	cbnz	r3, 800ab5a <_vfiprintf_r+0x1d6>
 800ab12:	9b03      	ldr	r3, [sp, #12]
 800ab14:	3307      	adds	r3, #7
 800ab16:	f023 0307 	bic.w	r3, r3, #7
 800ab1a:	3308      	adds	r3, #8
 800ab1c:	9303      	str	r3, [sp, #12]
 800ab1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab20:	443b      	add	r3, r7
 800ab22:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab24:	e76a      	b.n	800a9fc <_vfiprintf_r+0x78>
 800ab26:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab2a:	460c      	mov	r4, r1
 800ab2c:	2001      	movs	r0, #1
 800ab2e:	e7a8      	b.n	800aa82 <_vfiprintf_r+0xfe>
 800ab30:	2300      	movs	r3, #0
 800ab32:	3401      	adds	r4, #1
 800ab34:	9305      	str	r3, [sp, #20]
 800ab36:	4619      	mov	r1, r3
 800ab38:	f04f 0c0a 	mov.w	ip, #10
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab42:	3a30      	subs	r2, #48	@ 0x30
 800ab44:	2a09      	cmp	r2, #9
 800ab46:	d903      	bls.n	800ab50 <_vfiprintf_r+0x1cc>
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d0c6      	beq.n	800aada <_vfiprintf_r+0x156>
 800ab4c:	9105      	str	r1, [sp, #20]
 800ab4e:	e7c4      	b.n	800aada <_vfiprintf_r+0x156>
 800ab50:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab54:	4604      	mov	r4, r0
 800ab56:	2301      	movs	r3, #1
 800ab58:	e7f0      	b.n	800ab3c <_vfiprintf_r+0x1b8>
 800ab5a:	ab03      	add	r3, sp, #12
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	462a      	mov	r2, r5
 800ab60:	4b12      	ldr	r3, [pc, #72]	@ (800abac <_vfiprintf_r+0x228>)
 800ab62:	a904      	add	r1, sp, #16
 800ab64:	4630      	mov	r0, r6
 800ab66:	f7fd fc89 	bl	800847c <_printf_float>
 800ab6a:	4607      	mov	r7, r0
 800ab6c:	1c78      	adds	r0, r7, #1
 800ab6e:	d1d6      	bne.n	800ab1e <_vfiprintf_r+0x19a>
 800ab70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab72:	07d9      	lsls	r1, r3, #31
 800ab74:	d405      	bmi.n	800ab82 <_vfiprintf_r+0x1fe>
 800ab76:	89ab      	ldrh	r3, [r5, #12]
 800ab78:	059a      	lsls	r2, r3, #22
 800ab7a:	d402      	bmi.n	800ab82 <_vfiprintf_r+0x1fe>
 800ab7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab7e:	f7fe fa4b 	bl	8009018 <__retarget_lock_release_recursive>
 800ab82:	89ab      	ldrh	r3, [r5, #12]
 800ab84:	065b      	lsls	r3, r3, #25
 800ab86:	f53f af1f 	bmi.w	800a9c8 <_vfiprintf_r+0x44>
 800ab8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab8c:	e71e      	b.n	800a9cc <_vfiprintf_r+0x48>
 800ab8e:	ab03      	add	r3, sp, #12
 800ab90:	9300      	str	r3, [sp, #0]
 800ab92:	462a      	mov	r2, r5
 800ab94:	4b05      	ldr	r3, [pc, #20]	@ (800abac <_vfiprintf_r+0x228>)
 800ab96:	a904      	add	r1, sp, #16
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f7fd ff07 	bl	80089ac <_printf_i>
 800ab9e:	e7e4      	b.n	800ab6a <_vfiprintf_r+0x1e6>
 800aba0:	0801f328 	.word	0x0801f328
 800aba4:	0801f332 	.word	0x0801f332
 800aba8:	0800847d 	.word	0x0800847d
 800abac:	0800a961 	.word	0x0800a961
 800abb0:	0801f32e 	.word	0x0801f32e

0800abb4 <_raise_r>:
 800abb4:	291f      	cmp	r1, #31
 800abb6:	b538      	push	{r3, r4, r5, lr}
 800abb8:	4605      	mov	r5, r0
 800abba:	460c      	mov	r4, r1
 800abbc:	d904      	bls.n	800abc8 <_raise_r+0x14>
 800abbe:	2316      	movs	r3, #22
 800abc0:	6003      	str	r3, [r0, #0]
 800abc2:	f04f 30ff 	mov.w	r0, #4294967295
 800abc6:	bd38      	pop	{r3, r4, r5, pc}
 800abc8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800abca:	b112      	cbz	r2, 800abd2 <_raise_r+0x1e>
 800abcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abd0:	b94b      	cbnz	r3, 800abe6 <_raise_r+0x32>
 800abd2:	4628      	mov	r0, r5
 800abd4:	f000 f830 	bl	800ac38 <_getpid_r>
 800abd8:	4622      	mov	r2, r4
 800abda:	4601      	mov	r1, r0
 800abdc:	4628      	mov	r0, r5
 800abde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abe2:	f000 b817 	b.w	800ac14 <_kill_r>
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d00a      	beq.n	800ac00 <_raise_r+0x4c>
 800abea:	1c59      	adds	r1, r3, #1
 800abec:	d103      	bne.n	800abf6 <_raise_r+0x42>
 800abee:	2316      	movs	r3, #22
 800abf0:	6003      	str	r3, [r0, #0]
 800abf2:	2001      	movs	r0, #1
 800abf4:	e7e7      	b.n	800abc6 <_raise_r+0x12>
 800abf6:	2100      	movs	r1, #0
 800abf8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800abfc:	4620      	mov	r0, r4
 800abfe:	4798      	blx	r3
 800ac00:	2000      	movs	r0, #0
 800ac02:	e7e0      	b.n	800abc6 <_raise_r+0x12>

0800ac04 <raise>:
 800ac04:	4b02      	ldr	r3, [pc, #8]	@ (800ac10 <raise+0xc>)
 800ac06:	4601      	mov	r1, r0
 800ac08:	6818      	ldr	r0, [r3, #0]
 800ac0a:	f7ff bfd3 	b.w	800abb4 <_raise_r>
 800ac0e:	bf00      	nop
 800ac10:	20000054 	.word	0x20000054

0800ac14 <_kill_r>:
 800ac14:	b538      	push	{r3, r4, r5, lr}
 800ac16:	4d07      	ldr	r5, [pc, #28]	@ (800ac34 <_kill_r+0x20>)
 800ac18:	2300      	movs	r3, #0
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	4608      	mov	r0, r1
 800ac1e:	4611      	mov	r1, r2
 800ac20:	602b      	str	r3, [r5, #0]
 800ac22:	f000 f829 	bl	800ac78 <_kill>
 800ac26:	1c43      	adds	r3, r0, #1
 800ac28:	d102      	bne.n	800ac30 <_kill_r+0x1c>
 800ac2a:	682b      	ldr	r3, [r5, #0]
 800ac2c:	b103      	cbz	r3, 800ac30 <_kill_r+0x1c>
 800ac2e:	6023      	str	r3, [r4, #0]
 800ac30:	bd38      	pop	{r3, r4, r5, pc}
 800ac32:	bf00      	nop
 800ac34:	20009d90 	.word	0x20009d90

0800ac38 <_getpid_r>:
 800ac38:	f000 b922 	b.w	800ae80 <_getpid>

0800ac3c <_exit>:
 800ac3c:	4601      	mov	r1, r0
 800ac3e:	b508      	push	{r3, lr}
 800ac40:	4a02      	ldr	r2, [pc, #8]	@ (800ac4c <_exit+0x10>)
 800ac42:	f04f 30ff 	mov.w	r0, #4294967295
 800ac46:	f000 f803 	bl	800ac50 <_kill_shared>
 800ac4a:	bf00      	nop
 800ac4c:	00020026 	.word	0x00020026

0800ac50 <_kill_shared>:
 800ac50:	b507      	push	{r0, r1, r2, lr}
 800ac52:	e9cd 2100 	strd	r2, r1, [sp]
 800ac56:	f000 fa2f 	bl	800b0b8 <_has_ext_exit_extended>
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	bf0c      	ite	eq
 800ac5e:	2418      	moveq	r4, #24
 800ac60:	2420      	movne	r4, #32
 800ac62:	f000 fa29 	bl	800b0b8 <_has_ext_exit_extended>
 800ac66:	b120      	cbz	r0, 800ac72 <_kill_shared+0x22>
 800ac68:	466d      	mov	r5, sp
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	4629      	mov	r1, r5
 800ac6e:	beab      	bkpt	0x00ab
 800ac70:	4604      	mov	r4, r0
 800ac72:	9d00      	ldr	r5, [sp, #0]
 800ac74:	e7f9      	b.n	800ac6a <_kill_shared+0x1a>
	...

0800ac78 <_kill>:
 800ac78:	2906      	cmp	r1, #6
 800ac7a:	b508      	push	{r3, lr}
 800ac7c:	bf0c      	ite	eq
 800ac7e:	4a02      	ldreq	r2, [pc, #8]	@ (800ac88 <_kill+0x10>)
 800ac80:	4a02      	ldrne	r2, [pc, #8]	@ (800ac8c <_kill+0x14>)
 800ac82:	f7ff ffe5 	bl	800ac50 <_kill_shared>
 800ac86:	bf00      	nop
 800ac88:	00020023 	.word	0x00020023
 800ac8c:	00020026 	.word	0x00020026

0800ac90 <findslot>:
 800ac90:	4b0a      	ldr	r3, [pc, #40]	@ (800acbc <findslot+0x2c>)
 800ac92:	b510      	push	{r4, lr}
 800ac94:	4604      	mov	r4, r0
 800ac96:	6818      	ldr	r0, [r3, #0]
 800ac98:	b118      	cbz	r0, 800aca2 <findslot+0x12>
 800ac9a:	6a03      	ldr	r3, [r0, #32]
 800ac9c:	b90b      	cbnz	r3, 800aca2 <findslot+0x12>
 800ac9e:	f7fe f82f 	bl	8008d00 <__sinit>
 800aca2:	2c13      	cmp	r4, #19
 800aca4:	d807      	bhi.n	800acb6 <findslot+0x26>
 800aca6:	4806      	ldr	r0, [pc, #24]	@ (800acc0 <findslot+0x30>)
 800aca8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800acac:	3201      	adds	r2, #1
 800acae:	d002      	beq.n	800acb6 <findslot+0x26>
 800acb0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800acb4:	bd10      	pop	{r4, pc}
 800acb6:	2000      	movs	r0, #0
 800acb8:	e7fc      	b.n	800acb4 <findslot+0x24>
 800acba:	bf00      	nop
 800acbc:	20000054 	.word	0x20000054
 800acc0:	20009da0 	.word	0x20009da0

0800acc4 <error>:
 800acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc6:	4604      	mov	r4, r0
 800acc8:	f7fe f97a 	bl	8008fc0 <__errno>
 800accc:	2613      	movs	r6, #19
 800acce:	4605      	mov	r5, r0
 800acd0:	2700      	movs	r7, #0
 800acd2:	4630      	mov	r0, r6
 800acd4:	4639      	mov	r1, r7
 800acd6:	beab      	bkpt	0x00ab
 800acd8:	4606      	mov	r6, r0
 800acda:	602e      	str	r6, [r5, #0]
 800acdc:	4620      	mov	r0, r4
 800acde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ace0 <checkerror>:
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d101      	bne.n	800ace8 <checkerror+0x8>
 800ace4:	f7ff bfee 	b.w	800acc4 <error>
 800ace8:	4770      	bx	lr

0800acea <_swiread>:
 800acea:	b530      	push	{r4, r5, lr}
 800acec:	b085      	sub	sp, #20
 800acee:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800acf2:	9203      	str	r2, [sp, #12]
 800acf4:	2406      	movs	r4, #6
 800acf6:	ad01      	add	r5, sp, #4
 800acf8:	4620      	mov	r0, r4
 800acfa:	4629      	mov	r1, r5
 800acfc:	beab      	bkpt	0x00ab
 800acfe:	4604      	mov	r4, r0
 800ad00:	4620      	mov	r0, r4
 800ad02:	f7ff ffed 	bl	800ace0 <checkerror>
 800ad06:	b005      	add	sp, #20
 800ad08:	bd30      	pop	{r4, r5, pc}

0800ad0a <_read>:
 800ad0a:	b570      	push	{r4, r5, r6, lr}
 800ad0c:	460e      	mov	r6, r1
 800ad0e:	4614      	mov	r4, r2
 800ad10:	f7ff ffbe 	bl	800ac90 <findslot>
 800ad14:	4605      	mov	r5, r0
 800ad16:	b930      	cbnz	r0, 800ad26 <_read+0x1c>
 800ad18:	f7fe f952 	bl	8008fc0 <__errno>
 800ad1c:	2309      	movs	r3, #9
 800ad1e:	6003      	str	r3, [r0, #0]
 800ad20:	f04f 30ff 	mov.w	r0, #4294967295
 800ad24:	bd70      	pop	{r4, r5, r6, pc}
 800ad26:	6800      	ldr	r0, [r0, #0]
 800ad28:	4622      	mov	r2, r4
 800ad2a:	4631      	mov	r1, r6
 800ad2c:	f7ff ffdd 	bl	800acea <_swiread>
 800ad30:	1c43      	adds	r3, r0, #1
 800ad32:	d0f5      	beq.n	800ad20 <_read+0x16>
 800ad34:	686b      	ldr	r3, [r5, #4]
 800ad36:	1a20      	subs	r0, r4, r0
 800ad38:	4403      	add	r3, r0
 800ad3a:	606b      	str	r3, [r5, #4]
 800ad3c:	e7f2      	b.n	800ad24 <_read+0x1a>

0800ad3e <_swilseek>:
 800ad3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad40:	460c      	mov	r4, r1
 800ad42:	4616      	mov	r6, r2
 800ad44:	f7ff ffa4 	bl	800ac90 <findslot>
 800ad48:	4605      	mov	r5, r0
 800ad4a:	b940      	cbnz	r0, 800ad5e <_swilseek+0x20>
 800ad4c:	f7fe f938 	bl	8008fc0 <__errno>
 800ad50:	2309      	movs	r3, #9
 800ad52:	6003      	str	r3, [r0, #0]
 800ad54:	f04f 34ff 	mov.w	r4, #4294967295
 800ad58:	4620      	mov	r0, r4
 800ad5a:	b003      	add	sp, #12
 800ad5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad5e:	2e02      	cmp	r6, #2
 800ad60:	d903      	bls.n	800ad6a <_swilseek+0x2c>
 800ad62:	f7fe f92d 	bl	8008fc0 <__errno>
 800ad66:	2316      	movs	r3, #22
 800ad68:	e7f3      	b.n	800ad52 <_swilseek+0x14>
 800ad6a:	2e01      	cmp	r6, #1
 800ad6c:	d112      	bne.n	800ad94 <_swilseek+0x56>
 800ad6e:	6843      	ldr	r3, [r0, #4]
 800ad70:	18e4      	adds	r4, r4, r3
 800ad72:	d4f6      	bmi.n	800ad62 <_swilseek+0x24>
 800ad74:	682b      	ldr	r3, [r5, #0]
 800ad76:	260a      	movs	r6, #10
 800ad78:	e9cd 3400 	strd	r3, r4, [sp]
 800ad7c:	466f      	mov	r7, sp
 800ad7e:	4630      	mov	r0, r6
 800ad80:	4639      	mov	r1, r7
 800ad82:	beab      	bkpt	0x00ab
 800ad84:	4606      	mov	r6, r0
 800ad86:	4630      	mov	r0, r6
 800ad88:	f7ff ffaa 	bl	800ace0 <checkerror>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	dbe1      	blt.n	800ad54 <_swilseek+0x16>
 800ad90:	606c      	str	r4, [r5, #4]
 800ad92:	e7e1      	b.n	800ad58 <_swilseek+0x1a>
 800ad94:	2e02      	cmp	r6, #2
 800ad96:	6803      	ldr	r3, [r0, #0]
 800ad98:	d1ec      	bne.n	800ad74 <_swilseek+0x36>
 800ad9a:	9300      	str	r3, [sp, #0]
 800ad9c:	260c      	movs	r6, #12
 800ad9e:	466f      	mov	r7, sp
 800ada0:	4630      	mov	r0, r6
 800ada2:	4639      	mov	r1, r7
 800ada4:	beab      	bkpt	0x00ab
 800ada6:	4606      	mov	r6, r0
 800ada8:	4630      	mov	r0, r6
 800adaa:	f7ff ff99 	bl	800ace0 <checkerror>
 800adae:	1c43      	adds	r3, r0, #1
 800adb0:	d0d0      	beq.n	800ad54 <_swilseek+0x16>
 800adb2:	4404      	add	r4, r0
 800adb4:	e7de      	b.n	800ad74 <_swilseek+0x36>

0800adb6 <_lseek>:
 800adb6:	f7ff bfc2 	b.w	800ad3e <_swilseek>

0800adba <_swiwrite>:
 800adba:	b530      	push	{r4, r5, lr}
 800adbc:	b085      	sub	sp, #20
 800adbe:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800adc2:	9203      	str	r2, [sp, #12]
 800adc4:	2405      	movs	r4, #5
 800adc6:	ad01      	add	r5, sp, #4
 800adc8:	4620      	mov	r0, r4
 800adca:	4629      	mov	r1, r5
 800adcc:	beab      	bkpt	0x00ab
 800adce:	4604      	mov	r4, r0
 800add0:	4620      	mov	r0, r4
 800add2:	f7ff ff85 	bl	800ace0 <checkerror>
 800add6:	b005      	add	sp, #20
 800add8:	bd30      	pop	{r4, r5, pc}

0800adda <_write>:
 800adda:	b570      	push	{r4, r5, r6, lr}
 800addc:	460e      	mov	r6, r1
 800adde:	4615      	mov	r5, r2
 800ade0:	f7ff ff56 	bl	800ac90 <findslot>
 800ade4:	4604      	mov	r4, r0
 800ade6:	b930      	cbnz	r0, 800adf6 <_write+0x1c>
 800ade8:	f7fe f8ea 	bl	8008fc0 <__errno>
 800adec:	2309      	movs	r3, #9
 800adee:	6003      	str	r3, [r0, #0]
 800adf0:	f04f 30ff 	mov.w	r0, #4294967295
 800adf4:	bd70      	pop	{r4, r5, r6, pc}
 800adf6:	6800      	ldr	r0, [r0, #0]
 800adf8:	462a      	mov	r2, r5
 800adfa:	4631      	mov	r1, r6
 800adfc:	f7ff ffdd 	bl	800adba <_swiwrite>
 800ae00:	1e03      	subs	r3, r0, #0
 800ae02:	dbf5      	blt.n	800adf0 <_write+0x16>
 800ae04:	6862      	ldr	r2, [r4, #4]
 800ae06:	1ae8      	subs	r0, r5, r3
 800ae08:	4402      	add	r2, r0
 800ae0a:	42ab      	cmp	r3, r5
 800ae0c:	6062      	str	r2, [r4, #4]
 800ae0e:	d1f1      	bne.n	800adf4 <_write+0x1a>
 800ae10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae14:	2000      	movs	r0, #0
 800ae16:	f7ff bf55 	b.w	800acc4 <error>

0800ae1a <_swiclose>:
 800ae1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae1c:	2402      	movs	r4, #2
 800ae1e:	9001      	str	r0, [sp, #4]
 800ae20:	ad01      	add	r5, sp, #4
 800ae22:	4620      	mov	r0, r4
 800ae24:	4629      	mov	r1, r5
 800ae26:	beab      	bkpt	0x00ab
 800ae28:	4604      	mov	r4, r0
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f7ff ff58 	bl	800ace0 <checkerror>
 800ae30:	b003      	add	sp, #12
 800ae32:	bd30      	pop	{r4, r5, pc}

0800ae34 <_close>:
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	4605      	mov	r5, r0
 800ae38:	f7ff ff2a 	bl	800ac90 <findslot>
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	b930      	cbnz	r0, 800ae4e <_close+0x1a>
 800ae40:	f7fe f8be 	bl	8008fc0 <__errno>
 800ae44:	2309      	movs	r3, #9
 800ae46:	6003      	str	r3, [r0, #0]
 800ae48:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4c:	bd38      	pop	{r3, r4, r5, pc}
 800ae4e:	3d01      	subs	r5, #1
 800ae50:	2d01      	cmp	r5, #1
 800ae52:	d809      	bhi.n	800ae68 <_close+0x34>
 800ae54:	4b09      	ldr	r3, [pc, #36]	@ (800ae7c <_close+0x48>)
 800ae56:	689a      	ldr	r2, [r3, #8]
 800ae58:	691b      	ldr	r3, [r3, #16]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d104      	bne.n	800ae68 <_close+0x34>
 800ae5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae62:	6003      	str	r3, [r0, #0]
 800ae64:	2000      	movs	r0, #0
 800ae66:	e7f1      	b.n	800ae4c <_close+0x18>
 800ae68:	6820      	ldr	r0, [r4, #0]
 800ae6a:	f7ff ffd6 	bl	800ae1a <_swiclose>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	d1ec      	bne.n	800ae4c <_close+0x18>
 800ae72:	f04f 33ff 	mov.w	r3, #4294967295
 800ae76:	6023      	str	r3, [r4, #0]
 800ae78:	e7e8      	b.n	800ae4c <_close+0x18>
 800ae7a:	bf00      	nop
 800ae7c:	20009da0 	.word	0x20009da0

0800ae80 <_getpid>:
 800ae80:	2001      	movs	r0, #1
 800ae82:	4770      	bx	lr

0800ae84 <_swistat>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	460c      	mov	r4, r1
 800ae88:	f7ff ff02 	bl	800ac90 <findslot>
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	b930      	cbnz	r0, 800ae9e <_swistat+0x1a>
 800ae90:	f7fe f896 	bl	8008fc0 <__errno>
 800ae94:	2309      	movs	r3, #9
 800ae96:	6003      	str	r3, [r0, #0]
 800ae98:	f04f 30ff 	mov.w	r0, #4294967295
 800ae9c:	bd70      	pop	{r4, r5, r6, pc}
 800ae9e:	6863      	ldr	r3, [r4, #4]
 800aea0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800aea4:	6063      	str	r3, [r4, #4]
 800aea6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aeaa:	64a3      	str	r3, [r4, #72]	@ 0x48
 800aeac:	260c      	movs	r6, #12
 800aeae:	4630      	mov	r0, r6
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	beab      	bkpt	0x00ab
 800aeb4:	4605      	mov	r5, r0
 800aeb6:	4628      	mov	r0, r5
 800aeb8:	f7ff ff12 	bl	800ace0 <checkerror>
 800aebc:	1c43      	adds	r3, r0, #1
 800aebe:	d0eb      	beq.n	800ae98 <_swistat+0x14>
 800aec0:	6120      	str	r0, [r4, #16]
 800aec2:	2000      	movs	r0, #0
 800aec4:	e7ea      	b.n	800ae9c <_swistat+0x18>

0800aec6 <_fstat>:
 800aec6:	460b      	mov	r3, r1
 800aec8:	b510      	push	{r4, lr}
 800aeca:	2100      	movs	r1, #0
 800aecc:	4604      	mov	r4, r0
 800aece:	2258      	movs	r2, #88	@ 0x58
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7fe f823 	bl	8008f1c <memset>
 800aed6:	4601      	mov	r1, r0
 800aed8:	4620      	mov	r0, r4
 800aeda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aede:	f7ff bfd1 	b.w	800ae84 <_swistat>

0800aee2 <_stat>:
 800aee2:	b538      	push	{r3, r4, r5, lr}
 800aee4:	460d      	mov	r5, r1
 800aee6:	4604      	mov	r4, r0
 800aee8:	2258      	movs	r2, #88	@ 0x58
 800aeea:	2100      	movs	r1, #0
 800aeec:	4628      	mov	r0, r5
 800aeee:	f7fe f815 	bl	8008f1c <memset>
 800aef2:	4620      	mov	r0, r4
 800aef4:	2100      	movs	r1, #0
 800aef6:	f000 f811 	bl	800af1c <_swiopen>
 800aefa:	1c43      	adds	r3, r0, #1
 800aefc:	4604      	mov	r4, r0
 800aefe:	d00b      	beq.n	800af18 <_stat+0x36>
 800af00:	686b      	ldr	r3, [r5, #4]
 800af02:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800af06:	606b      	str	r3, [r5, #4]
 800af08:	4629      	mov	r1, r5
 800af0a:	f7ff ffbb 	bl	800ae84 <_swistat>
 800af0e:	4605      	mov	r5, r0
 800af10:	4620      	mov	r0, r4
 800af12:	f7ff ff8f 	bl	800ae34 <_close>
 800af16:	462c      	mov	r4, r5
 800af18:	4620      	mov	r0, r4
 800af1a:	bd38      	pop	{r3, r4, r5, pc}

0800af1c <_swiopen>:
 800af1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af20:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 800afcc <_swiopen+0xb0>
 800af24:	b096      	sub	sp, #88	@ 0x58
 800af26:	4607      	mov	r7, r0
 800af28:	460e      	mov	r6, r1
 800af2a:	2400      	movs	r4, #0
 800af2c:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 800af30:	3301      	adds	r3, #1
 800af32:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800af36:	d032      	beq.n	800af9e <_swiopen+0x82>
 800af38:	3401      	adds	r4, #1
 800af3a:	2c14      	cmp	r4, #20
 800af3c:	d1f6      	bne.n	800af2c <_swiopen+0x10>
 800af3e:	f7fe f83f 	bl	8008fc0 <__errno>
 800af42:	2318      	movs	r3, #24
 800af44:	e03a      	b.n	800afbc <_swiopen+0xa0>
 800af46:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800af4a:	f240 6301 	movw	r3, #1537	@ 0x601
 800af4e:	07b2      	lsls	r2, r6, #30
 800af50:	bf48      	it	mi
 800af52:	f045 0502 	orrmi.w	r5, r5, #2
 800af56:	421e      	tst	r6, r3
 800af58:	bf18      	it	ne
 800af5a:	f045 0504 	orrne.w	r5, r5, #4
 800af5e:	0733      	lsls	r3, r6, #28
 800af60:	bf48      	it	mi
 800af62:	f025 0504 	bicmi.w	r5, r5, #4
 800af66:	4638      	mov	r0, r7
 800af68:	bf48      	it	mi
 800af6a:	f045 0508 	orrmi.w	r5, r5, #8
 800af6e:	9700      	str	r7, [sp, #0]
 800af70:	f7f5 f9fe 	bl	8000370 <strlen>
 800af74:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800af78:	2501      	movs	r5, #1
 800af7a:	4628      	mov	r0, r5
 800af7c:	4651      	mov	r1, sl
 800af7e:	beab      	bkpt	0x00ab
 800af80:	4605      	mov	r5, r0
 800af82:	2d00      	cmp	r5, #0
 800af84:	db06      	blt.n	800af94 <_swiopen+0x78>
 800af86:	44c8      	add	r8, r9
 800af88:	2300      	movs	r3, #0
 800af8a:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 800af8e:	f8c8 3004 	str.w	r3, [r8, #4]
 800af92:	e016      	b.n	800afc2 <_swiopen+0xa6>
 800af94:	4628      	mov	r0, r5
 800af96:	f7ff fe95 	bl	800acc4 <error>
 800af9a:	4604      	mov	r4, r0
 800af9c:	e011      	b.n	800afc2 <_swiopen+0xa6>
 800af9e:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800afa2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800afa6:	46ea      	mov	sl, sp
 800afa8:	d1cd      	bne.n	800af46 <_swiopen+0x2a>
 800afaa:	4651      	mov	r1, sl
 800afac:	4638      	mov	r0, r7
 800afae:	f7ff ff98 	bl	800aee2 <_stat>
 800afb2:	3001      	adds	r0, #1
 800afb4:	d0c7      	beq.n	800af46 <_swiopen+0x2a>
 800afb6:	f7fe f803 	bl	8008fc0 <__errno>
 800afba:	2311      	movs	r3, #17
 800afbc:	6003      	str	r3, [r0, #0]
 800afbe:	f04f 34ff 	mov.w	r4, #4294967295
 800afc2:	4620      	mov	r0, r4
 800afc4:	b016      	add	sp, #88	@ 0x58
 800afc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afca:	bf00      	nop
 800afcc:	20009da0 	.word	0x20009da0

0800afd0 <_get_semihosting_exts>:
 800afd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800afd4:	4606      	mov	r6, r0
 800afd6:	460f      	mov	r7, r1
 800afd8:	4829      	ldr	r0, [pc, #164]	@ (800b080 <_get_semihosting_exts+0xb0>)
 800afda:	2100      	movs	r1, #0
 800afdc:	4615      	mov	r5, r2
 800afde:	f7ff ff9d 	bl	800af1c <_swiopen>
 800afe2:	462a      	mov	r2, r5
 800afe4:	4604      	mov	r4, r0
 800afe6:	2100      	movs	r1, #0
 800afe8:	4630      	mov	r0, r6
 800afea:	f7fd ff97 	bl	8008f1c <memset>
 800afee:	1c63      	adds	r3, r4, #1
 800aff0:	d014      	beq.n	800b01c <_get_semihosting_exts+0x4c>
 800aff2:	4620      	mov	r0, r4
 800aff4:	f7ff fe4c 	bl	800ac90 <findslot>
 800aff8:	f04f 080c 	mov.w	r8, #12
 800affc:	4681      	mov	r9, r0
 800affe:	4640      	mov	r0, r8
 800b000:	4649      	mov	r1, r9
 800b002:	beab      	bkpt	0x00ab
 800b004:	4680      	mov	r8, r0
 800b006:	4640      	mov	r0, r8
 800b008:	f7ff fe6a 	bl	800ace0 <checkerror>
 800b00c:	2803      	cmp	r0, #3
 800b00e:	dd02      	ble.n	800b016 <_get_semihosting_exts+0x46>
 800b010:	1ec3      	subs	r3, r0, #3
 800b012:	42ab      	cmp	r3, r5
 800b014:	dc07      	bgt.n	800b026 <_get_semihosting_exts+0x56>
 800b016:	4620      	mov	r0, r4
 800b018:	f7ff ff0c 	bl	800ae34 <_close>
 800b01c:	f04f 30ff 	mov.w	r0, #4294967295
 800b020:	b003      	add	sp, #12
 800b022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b026:	2204      	movs	r2, #4
 800b028:	eb0d 0102 	add.w	r1, sp, r2
 800b02c:	4620      	mov	r0, r4
 800b02e:	f7ff fe6c 	bl	800ad0a <_read>
 800b032:	2803      	cmp	r0, #3
 800b034:	ddef      	ble.n	800b016 <_get_semihosting_exts+0x46>
 800b036:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b03a:	2b53      	cmp	r3, #83	@ 0x53
 800b03c:	d1eb      	bne.n	800b016 <_get_semihosting_exts+0x46>
 800b03e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b042:	2b48      	cmp	r3, #72	@ 0x48
 800b044:	d1e7      	bne.n	800b016 <_get_semihosting_exts+0x46>
 800b046:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b04a:	2b46      	cmp	r3, #70	@ 0x46
 800b04c:	d1e3      	bne.n	800b016 <_get_semihosting_exts+0x46>
 800b04e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b052:	2b42      	cmp	r3, #66	@ 0x42
 800b054:	d1df      	bne.n	800b016 <_get_semihosting_exts+0x46>
 800b056:	2201      	movs	r2, #1
 800b058:	4639      	mov	r1, r7
 800b05a:	4620      	mov	r0, r4
 800b05c:	f7ff fe6f 	bl	800ad3e <_swilseek>
 800b060:	2800      	cmp	r0, #0
 800b062:	dbd8      	blt.n	800b016 <_get_semihosting_exts+0x46>
 800b064:	462a      	mov	r2, r5
 800b066:	4631      	mov	r1, r6
 800b068:	4620      	mov	r0, r4
 800b06a:	f7ff fe4e 	bl	800ad0a <_read>
 800b06e:	4605      	mov	r5, r0
 800b070:	4620      	mov	r0, r4
 800b072:	f7ff fedf 	bl	800ae34 <_close>
 800b076:	4628      	mov	r0, r5
 800b078:	f7ff fe32 	bl	800ace0 <checkerror>
 800b07c:	e7d0      	b.n	800b020 <_get_semihosting_exts+0x50>
 800b07e:	bf00      	nop
 800b080:	0801f339 	.word	0x0801f339

0800b084 <initialise_semihosting_exts>:
 800b084:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b086:	4d0a      	ldr	r5, [pc, #40]	@ (800b0b0 <initialise_semihosting_exts+0x2c>)
 800b088:	4c0a      	ldr	r4, [pc, #40]	@ (800b0b4 <initialise_semihosting_exts+0x30>)
 800b08a:	2100      	movs	r1, #0
 800b08c:	2201      	movs	r2, #1
 800b08e:	a801      	add	r0, sp, #4
 800b090:	6029      	str	r1, [r5, #0]
 800b092:	6022      	str	r2, [r4, #0]
 800b094:	f7ff ff9c 	bl	800afd0 <_get_semihosting_exts>
 800b098:	2800      	cmp	r0, #0
 800b09a:	dd07      	ble.n	800b0ac <initialise_semihosting_exts+0x28>
 800b09c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b0a0:	f003 0201 	and.w	r2, r3, #1
 800b0a4:	f003 0302 	and.w	r3, r3, #2
 800b0a8:	602a      	str	r2, [r5, #0]
 800b0aa:	6023      	str	r3, [r4, #0]
 800b0ac:	b003      	add	sp, #12
 800b0ae:	bd30      	pop	{r4, r5, pc}
 800b0b0:	20000214 	.word	0x20000214
 800b0b4:	20000210 	.word	0x20000210

0800b0b8 <_has_ext_exit_extended>:
 800b0b8:	b510      	push	{r4, lr}
 800b0ba:	4c04      	ldr	r4, [pc, #16]	@ (800b0cc <_has_ext_exit_extended+0x14>)
 800b0bc:	6823      	ldr	r3, [r4, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	da01      	bge.n	800b0c6 <_has_ext_exit_extended+0xe>
 800b0c2:	f7ff ffdf 	bl	800b084 <initialise_semihosting_exts>
 800b0c6:	6820      	ldr	r0, [r4, #0]
 800b0c8:	bd10      	pop	{r4, pc}
 800b0ca:	bf00      	nop
 800b0cc:	20000214 	.word	0x20000214

0800b0d0 <_isatty>:
 800b0d0:	b570      	push	{r4, r5, r6, lr}
 800b0d2:	f7ff fddd 	bl	800ac90 <findslot>
 800b0d6:	2409      	movs	r4, #9
 800b0d8:	4605      	mov	r5, r0
 800b0da:	b920      	cbnz	r0, 800b0e6 <_isatty+0x16>
 800b0dc:	f7fd ff70 	bl	8008fc0 <__errno>
 800b0e0:	6004      	str	r4, [r0, #0]
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	bd70      	pop	{r4, r5, r6, pc}
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	beab      	bkpt	0x00ab
 800b0ec:	4604      	mov	r4, r0
 800b0ee:	2c01      	cmp	r4, #1
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	d0f7      	beq.n	800b0e4 <_isatty+0x14>
 800b0f4:	f7fd ff64 	bl	8008fc0 <__errno>
 800b0f8:	2513      	movs	r5, #19
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	2600      	movs	r6, #0
 800b0fe:	4628      	mov	r0, r5
 800b100:	4631      	mov	r1, r6
 800b102:	beab      	bkpt	0x00ab
 800b104:	4605      	mov	r5, r0
 800b106:	6025      	str	r5, [r4, #0]
 800b108:	e7eb      	b.n	800b0e2 <_isatty+0x12>
	...

0800b10c <log10f>:
 800b10c:	b508      	push	{r3, lr}
 800b10e:	ed2d 8b02 	vpush	{d8}
 800b112:	eeb0 8a40 	vmov.f32	s16, s0
 800b116:	f000 f889 	bl	800b22c <__ieee754_log10f>
 800b11a:	eeb4 8a48 	vcmp.f32	s16, s16
 800b11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b122:	d60f      	bvs.n	800b144 <log10f+0x38>
 800b124:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b12c:	d80a      	bhi.n	800b144 <log10f+0x38>
 800b12e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b136:	d108      	bne.n	800b14a <log10f+0x3e>
 800b138:	f7fd ff42 	bl	8008fc0 <__errno>
 800b13c:	2322      	movs	r3, #34	@ 0x22
 800b13e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b160 <log10f+0x54>
 800b142:	6003      	str	r3, [r0, #0]
 800b144:	ecbd 8b02 	vpop	{d8}
 800b148:	bd08      	pop	{r3, pc}
 800b14a:	f7fd ff39 	bl	8008fc0 <__errno>
 800b14e:	ecbd 8b02 	vpop	{d8}
 800b152:	2321      	movs	r3, #33	@ 0x21
 800b154:	6003      	str	r3, [r0, #0]
 800b156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b15a:	4802      	ldr	r0, [pc, #8]	@ (800b164 <log10f+0x58>)
 800b15c:	f000 b822 	b.w	800b1a4 <nanf>
 800b160:	ff800000 	.word	0xff800000
 800b164:	0801f327 	.word	0x0801f327

0800b168 <sqrtf>:
 800b168:	b508      	push	{r3, lr}
 800b16a:	ed2d 8b02 	vpush	{d8}
 800b16e:	eeb0 8a40 	vmov.f32	s16, s0
 800b172:	f000 f857 	bl	800b224 <__ieee754_sqrtf>
 800b176:	eeb4 8a48 	vcmp.f32	s16, s16
 800b17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b17e:	d60c      	bvs.n	800b19a <sqrtf+0x32>
 800b180:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b1a0 <sqrtf+0x38>
 800b184:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b18c:	d505      	bpl.n	800b19a <sqrtf+0x32>
 800b18e:	f7fd ff17 	bl	8008fc0 <__errno>
 800b192:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b196:	2321      	movs	r3, #33	@ 0x21
 800b198:	6003      	str	r3, [r0, #0]
 800b19a:	ecbd 8b02 	vpop	{d8}
 800b19e:	bd08      	pop	{r3, pc}
 800b1a0:	00000000 	.word	0x00000000

0800b1a4 <nanf>:
 800b1a4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b1ac <nanf+0x8>
 800b1a8:	4770      	bx	lr
 800b1aa:	bf00      	nop
 800b1ac:	7fc00000 	.word	0x7fc00000

0800b1b0 <fminf>:
 800b1b0:	b508      	push	{r3, lr}
 800b1b2:	ed2d 8b02 	vpush	{d8}
 800b1b6:	eeb0 8a40 	vmov.f32	s16, s0
 800b1ba:	eef0 8a60 	vmov.f32	s17, s1
 800b1be:	f000 f815 	bl	800b1ec <__fpclassifyf>
 800b1c2:	b930      	cbnz	r0, 800b1d2 <fminf+0x22>
 800b1c4:	eeb0 8a68 	vmov.f32	s16, s17
 800b1c8:	eeb0 0a48 	vmov.f32	s0, s16
 800b1cc:	ecbd 8b02 	vpop	{d8}
 800b1d0:	bd08      	pop	{r3, pc}
 800b1d2:	eeb0 0a68 	vmov.f32	s0, s17
 800b1d6:	f000 f809 	bl	800b1ec <__fpclassifyf>
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	d0f4      	beq.n	800b1c8 <fminf+0x18>
 800b1de:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1e6:	d5ed      	bpl.n	800b1c4 <fminf+0x14>
 800b1e8:	e7ee      	b.n	800b1c8 <fminf+0x18>
	...

0800b1ec <__fpclassifyf>:
 800b1ec:	ee10 3a10 	vmov	r3, s0
 800b1f0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800b1f4:	d00d      	beq.n	800b212 <__fpclassifyf+0x26>
 800b1f6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800b1fa:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800b1fe:	d30a      	bcc.n	800b216 <__fpclassifyf+0x2a>
 800b200:	4b07      	ldr	r3, [pc, #28]	@ (800b220 <__fpclassifyf+0x34>)
 800b202:	1e42      	subs	r2, r0, #1
 800b204:	429a      	cmp	r2, r3
 800b206:	d908      	bls.n	800b21a <__fpclassifyf+0x2e>
 800b208:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800b20c:	4258      	negs	r0, r3
 800b20e:	4158      	adcs	r0, r3
 800b210:	4770      	bx	lr
 800b212:	2002      	movs	r0, #2
 800b214:	4770      	bx	lr
 800b216:	2004      	movs	r0, #4
 800b218:	4770      	bx	lr
 800b21a:	2003      	movs	r0, #3
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop
 800b220:	007ffffe 	.word	0x007ffffe

0800b224 <__ieee754_sqrtf>:
 800b224:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b228:	4770      	bx	lr
	...

0800b22c <__ieee754_log10f>:
 800b22c:	b508      	push	{r3, lr}
 800b22e:	ee10 3a10 	vmov	r3, s0
 800b232:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b236:	ed2d 8b02 	vpush	{d8}
 800b23a:	d108      	bne.n	800b24e <__ieee754_log10f+0x22>
 800b23c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800b2c4 <__ieee754_log10f+0x98>
 800b240:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800b2c8 <__ieee754_log10f+0x9c>
 800b244:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b248:	ecbd 8b02 	vpop	{d8}
 800b24c:	bd08      	pop	{r3, pc}
 800b24e:	2b00      	cmp	r3, #0
 800b250:	461a      	mov	r2, r3
 800b252:	da02      	bge.n	800b25a <__ieee754_log10f+0x2e>
 800b254:	ee30 7a40 	vsub.f32	s14, s0, s0
 800b258:	e7f2      	b.n	800b240 <__ieee754_log10f+0x14>
 800b25a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b25e:	db02      	blt.n	800b266 <__ieee754_log10f+0x3a>
 800b260:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b264:	e7f0      	b.n	800b248 <__ieee754_log10f+0x1c>
 800b266:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b26a:	bfbf      	itttt	lt
 800b26c:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 800b2cc <__ieee754_log10f+0xa0>
 800b270:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800b274:	f06f 0118 	mvnlt.w	r1, #24
 800b278:	ee17 2a90 	vmovlt	r2, s15
 800b27c:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800b280:	bfa8      	it	ge
 800b282:	2100      	movge	r1, #0
 800b284:	3b7f      	subs	r3, #127	@ 0x7f
 800b286:	440b      	add	r3, r1
 800b288:	0fd9      	lsrs	r1, r3, #31
 800b28a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800b28e:	ee07 3a90 	vmov	s15, r3
 800b292:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800b296:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 800b29a:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800b29e:	ee00 3a10 	vmov	s0, r3
 800b2a2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800b2a6:	f000 f819 	bl	800b2dc <__ieee754_logf>
 800b2aa:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b2d0 <__ieee754_log10f+0xa4>
 800b2ae:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b2b2:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800b2d4 <__ieee754_log10f+0xa8>
 800b2b6:	eea8 0a27 	vfma.f32	s0, s16, s15
 800b2ba:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800b2d8 <__ieee754_log10f+0xac>
 800b2be:	eea8 0a27 	vfma.f32	s0, s16, s15
 800b2c2:	e7c1      	b.n	800b248 <__ieee754_log10f+0x1c>
 800b2c4:	cc000000 	.word	0xcc000000
 800b2c8:	00000000 	.word	0x00000000
 800b2cc:	4c000000 	.word	0x4c000000
 800b2d0:	3ede5bd9 	.word	0x3ede5bd9
 800b2d4:	355427db 	.word	0x355427db
 800b2d8:	3e9a2080 	.word	0x3e9a2080

0800b2dc <__ieee754_logf>:
 800b2dc:	ee10 3a10 	vmov	r3, s0
 800b2e0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b2e4:	d106      	bne.n	800b2f4 <__ieee754_logf+0x18>
 800b2e6:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800b480 <__ieee754_logf+0x1a4>
 800b2ea:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800b484 <__ieee754_logf+0x1a8>
 800b2ee:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b2f2:	4770      	bx	lr
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	da02      	bge.n	800b300 <__ieee754_logf+0x24>
 800b2fa:	ee30 7a40 	vsub.f32	s14, s0, s0
 800b2fe:	e7f4      	b.n	800b2ea <__ieee754_logf+0xe>
 800b300:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b304:	db02      	blt.n	800b30c <__ieee754_logf+0x30>
 800b306:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b30a:	4770      	bx	lr
 800b30c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b310:	bfb8      	it	lt
 800b312:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800b488 <__ieee754_logf+0x1ac>
 800b316:	485d      	ldr	r0, [pc, #372]	@ (800b48c <__ieee754_logf+0x1b0>)
 800b318:	bfbe      	ittt	lt
 800b31a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800b31e:	f06f 0118 	mvnlt.w	r1, #24
 800b322:	ee17 2a90 	vmovlt	r2, s15
 800b326:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800b32a:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800b32e:	4410      	add	r0, r2
 800b330:	bfa8      	it	ge
 800b332:	2100      	movge	r1, #0
 800b334:	3b7f      	subs	r3, #127	@ 0x7f
 800b336:	440b      	add	r3, r1
 800b338:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 800b33c:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 800b340:	4311      	orrs	r1, r2
 800b342:	ee00 1a10 	vmov	s0, r1
 800b346:	4952      	ldr	r1, [pc, #328]	@ (800b490 <__ieee754_logf+0x1b4>)
 800b348:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800b34c:	f102 000f 	add.w	r0, r2, #15
 800b350:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b354:	4001      	ands	r1, r0
 800b356:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b35a:	bb89      	cbnz	r1, 800b3c0 <__ieee754_logf+0xe4>
 800b35c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b364:	d10f      	bne.n	800b386 <__ieee754_logf+0xaa>
 800b366:	2b00      	cmp	r3, #0
 800b368:	f000 8087 	beq.w	800b47a <__ieee754_logf+0x19e>
 800b36c:	ee07 3a90 	vmov	s15, r3
 800b370:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800b494 <__ieee754_logf+0x1b8>
 800b374:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800b498 <__ieee754_logf+0x1bc>
 800b378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b37c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b380:	eea7 0a87 	vfma.f32	s0, s15, s14
 800b384:	4770      	bx	lr
 800b386:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800b49c <__ieee754_logf+0x1c0>
 800b38a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b38e:	eee0 7a66 	vfms.f32	s15, s0, s13
 800b392:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b396:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b39a:	b913      	cbnz	r3, 800b3a2 <__ieee754_logf+0xc6>
 800b39c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b3a0:	4770      	bx	lr
 800b3a2:	ee07 3a90 	vmov	s15, r3
 800b3a6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b494 <__ieee754_logf+0x1b8>
 800b3aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3ae:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800b3b2:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b3b6:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800b498 <__ieee754_logf+0x1bc>
 800b3ba:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800b3be:	4770      	bx	lr
 800b3c0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800b3c4:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b3c8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800b4a0 <__ieee754_logf+0x1c4>
 800b3cc:	eddf 4a35 	vldr	s9, [pc, #212]	@ 800b4a4 <__ieee754_logf+0x1c8>
 800b3d0:	4935      	ldr	r1, [pc, #212]	@ (800b4a8 <__ieee754_logf+0x1cc>)
 800b3d2:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800b3d6:	4411      	add	r1, r2
 800b3d8:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 800b3dc:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800b3e0:	430a      	orrs	r2, r1
 800b3e2:	2a00      	cmp	r2, #0
 800b3e4:	ee07 3a90 	vmov	s15, r3
 800b3e8:	ee26 5a06 	vmul.f32	s10, s12, s12
 800b3ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b3f0:	ee25 7a05 	vmul.f32	s14, s10, s10
 800b3f4:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800b4ac <__ieee754_logf+0x1d0>
 800b3f8:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b3fc:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800b4b0 <__ieee754_logf+0x1d4>
 800b400:	eee7 5a87 	vfma.f32	s11, s15, s14
 800b404:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800b4b4 <__ieee754_logf+0x1d8>
 800b408:	eee7 7a24 	vfma.f32	s15, s14, s9
 800b40c:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800b4b8 <__ieee754_logf+0x1dc>
 800b410:	eee7 4a87 	vfma.f32	s9, s15, s14
 800b414:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800b4bc <__ieee754_logf+0x1e0>
 800b418:	eee4 7a87 	vfma.f32	s15, s9, s14
 800b41c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b420:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b424:	dd1a      	ble.n	800b45c <__ieee754_logf+0x180>
 800b426:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b42a:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b42e:	ee27 7a00 	vmul.f32	s14, s14, s0
 800b432:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b436:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b43a:	b913      	cbnz	r3, 800b442 <__ieee754_logf+0x166>
 800b43c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b440:	e7ac      	b.n	800b39c <__ieee754_logf+0xc0>
 800b442:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800b494 <__ieee754_logf+0x1b8>
 800b446:	eee6 7a86 	vfma.f32	s15, s13, s12
 800b44a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b44e:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b452:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800b498 <__ieee754_logf+0x1bc>
 800b456:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800b45a:	4770      	bx	lr
 800b45c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b460:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b464:	b913      	cbnz	r3, 800b46c <__ieee754_logf+0x190>
 800b466:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b46a:	4770      	bx	lr
 800b46c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800b494 <__ieee754_logf+0x1b8>
 800b470:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800b474:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b478:	e7eb      	b.n	800b452 <__ieee754_logf+0x176>
 800b47a:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800b484 <__ieee754_logf+0x1a8>
 800b47e:	4770      	bx	lr
 800b480:	cc000000 	.word	0xcc000000
 800b484:	00000000 	.word	0x00000000
 800b488:	4c000000 	.word	0x4c000000
 800b48c:	004afb20 	.word	0x004afb20
 800b490:	007ffff0 	.word	0x007ffff0
 800b494:	3717f7d1 	.word	0x3717f7d1
 800b498:	3f317180 	.word	0x3f317180
 800b49c:	3eaaaaab 	.word	0x3eaaaaab
 800b4a0:	3e1cd04f 	.word	0x3e1cd04f
 800b4a4:	3e178897 	.word	0x3e178897
 800b4a8:	ffcf5c30 	.word	0xffcf5c30
 800b4ac:	3e638e29 	.word	0x3e638e29
 800b4b0:	3ecccccd 	.word	0x3ecccccd
 800b4b4:	3e3a3325 	.word	0x3e3a3325
 800b4b8:	3e924925 	.word	0x3e924925
 800b4bc:	3f2aaaab 	.word	0x3f2aaaab

0800b4c0 <_init>:
 800b4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c2:	bf00      	nop
 800b4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4c6:	bc08      	pop	{r3}
 800b4c8:	469e      	mov	lr, r3
 800b4ca:	4770      	bx	lr

0800b4cc <_fini>:
 800b4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ce:	bf00      	nop
 800b4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4d2:	bc08      	pop	{r3}
 800b4d4:	469e      	mov	lr, r3
 800b4d6:	4770      	bx	lr
