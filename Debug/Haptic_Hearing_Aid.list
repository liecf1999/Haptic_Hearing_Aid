
Haptic_Hearing_Aid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004868  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004a2c  08004a2c  00005a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a44  08004a44  00006048  2**0
                  CONTENTS
  4 .ARM          00000008  08004a44  08004a44  00005a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a4c  08004a4c  00006048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a4c  08004a4c  00005a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a50  08004a50  00005a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  08004a54  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000048  08004a9c  00006048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08004a9c  000061a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eea0  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002594  00000000  00000000  00014f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  000174b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b29  00000000  00000000  00018300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032a6  00000000  00000000  00018e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138d7  00000000  00000000  0001c0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dde45  00000000  00000000  0002f9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d7eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cfc  00000000  00000000  0010d830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0011152c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000048 	.word	0x20000048
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004a14 	.word	0x08004a14

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000004c 	.word	0x2000004c
 8000200:	08004a14 	.word	0x08004a14

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	@ 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2uiz>:
 80009a0:	004a      	lsls	r2, r1, #1
 80009a2:	d211      	bcs.n	80009c8 <__aeabi_d2uiz+0x28>
 80009a4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009a8:	d211      	bcs.n	80009ce <__aeabi_d2uiz+0x2e>
 80009aa:	d50d      	bpl.n	80009c8 <__aeabi_d2uiz+0x28>
 80009ac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b4:	d40e      	bmi.n	80009d4 <__aeabi_d2uiz+0x34>
 80009b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	4770      	bx	lr
 80009c8:	f04f 0000 	mov.w	r0, #0
 80009cc:	4770      	bx	lr
 80009ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d2:	d102      	bne.n	80009da <__aeabi_d2uiz+0x3a>
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	4770      	bx	lr
 80009da:	f04f 0000 	mov.w	r0, #0
 80009de:	4770      	bx	lr

080009e0 <__aeabi_uldivmod>:
 80009e0:	b953      	cbnz	r3, 80009f8 <__aeabi_uldivmod+0x18>
 80009e2:	b94a      	cbnz	r2, 80009f8 <__aeabi_uldivmod+0x18>
 80009e4:	2900      	cmp	r1, #0
 80009e6:	bf08      	it	eq
 80009e8:	2800      	cmpeq	r0, #0
 80009ea:	bf1c      	itt	ne
 80009ec:	f04f 31ff 	movne.w	r1, #4294967295
 80009f0:	f04f 30ff 	movne.w	r0, #4294967295
 80009f4:	f000 b96a 	b.w	8000ccc <__aeabi_idiv0>
 80009f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a00:	f000 f806 	bl	8000a10 <__udivmoddi4>
 8000a04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a0c:	b004      	add	sp, #16
 8000a0e:	4770      	bx	lr

08000a10 <__udivmoddi4>:
 8000a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a14:	9d08      	ldr	r5, [sp, #32]
 8000a16:	460c      	mov	r4, r1
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d14e      	bne.n	8000aba <__udivmoddi4+0xaa>
 8000a1c:	4694      	mov	ip, r2
 8000a1e:	458c      	cmp	ip, r1
 8000a20:	4686      	mov	lr, r0
 8000a22:	fab2 f282 	clz	r2, r2
 8000a26:	d962      	bls.n	8000aee <__udivmoddi4+0xde>
 8000a28:	b14a      	cbz	r2, 8000a3e <__udivmoddi4+0x2e>
 8000a2a:	f1c2 0320 	rsb	r3, r2, #32
 8000a2e:	4091      	lsls	r1, r2
 8000a30:	fa20 f303 	lsr.w	r3, r0, r3
 8000a34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a38:	4319      	orrs	r1, r3
 8000a3a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a42:	fa1f f68c 	uxth.w	r6, ip
 8000a46:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a4e:	fb07 1114 	mls	r1, r7, r4, r1
 8000a52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a56:	fb04 f106 	mul.w	r1, r4, r6
 8000a5a:	4299      	cmp	r1, r3
 8000a5c:	d90a      	bls.n	8000a74 <__udivmoddi4+0x64>
 8000a5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a62:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a66:	f080 8112 	bcs.w	8000c8e <__udivmoddi4+0x27e>
 8000a6a:	4299      	cmp	r1, r3
 8000a6c:	f240 810f 	bls.w	8000c8e <__udivmoddi4+0x27e>
 8000a70:	3c02      	subs	r4, #2
 8000a72:	4463      	add	r3, ip
 8000a74:	1a59      	subs	r1, r3, r1
 8000a76:	fa1f f38e 	uxth.w	r3, lr
 8000a7a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a7e:	fb07 1110 	mls	r1, r7, r0, r1
 8000a82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a86:	fb00 f606 	mul.w	r6, r0, r6
 8000a8a:	429e      	cmp	r6, r3
 8000a8c:	d90a      	bls.n	8000aa4 <__udivmoddi4+0x94>
 8000a8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a92:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a96:	f080 80fc 	bcs.w	8000c92 <__udivmoddi4+0x282>
 8000a9a:	429e      	cmp	r6, r3
 8000a9c:	f240 80f9 	bls.w	8000c92 <__udivmoddi4+0x282>
 8000aa0:	4463      	add	r3, ip
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	1b9b      	subs	r3, r3, r6
 8000aa6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aaa:	2100      	movs	r1, #0
 8000aac:	b11d      	cbz	r5, 8000ab6 <__udivmoddi4+0xa6>
 8000aae:	40d3      	lsrs	r3, r2
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d905      	bls.n	8000aca <__udivmoddi4+0xba>
 8000abe:	b10d      	cbz	r5, 8000ac4 <__udivmoddi4+0xb4>
 8000ac0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4608      	mov	r0, r1
 8000ac8:	e7f5      	b.n	8000ab6 <__udivmoddi4+0xa6>
 8000aca:	fab3 f183 	clz	r1, r3
 8000ace:	2900      	cmp	r1, #0
 8000ad0:	d146      	bne.n	8000b60 <__udivmoddi4+0x150>
 8000ad2:	42a3      	cmp	r3, r4
 8000ad4:	d302      	bcc.n	8000adc <__udivmoddi4+0xcc>
 8000ad6:	4290      	cmp	r0, r2
 8000ad8:	f0c0 80f0 	bcc.w	8000cbc <__udivmoddi4+0x2ac>
 8000adc:	1a86      	subs	r6, r0, r2
 8000ade:	eb64 0303 	sbc.w	r3, r4, r3
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	2d00      	cmp	r5, #0
 8000ae6:	d0e6      	beq.n	8000ab6 <__udivmoddi4+0xa6>
 8000ae8:	e9c5 6300 	strd	r6, r3, [r5]
 8000aec:	e7e3      	b.n	8000ab6 <__udivmoddi4+0xa6>
 8000aee:	2a00      	cmp	r2, #0
 8000af0:	f040 8090 	bne.w	8000c14 <__udivmoddi4+0x204>
 8000af4:	eba1 040c 	sub.w	r4, r1, ip
 8000af8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000afc:	fa1f f78c 	uxth.w	r7, ip
 8000b00:	2101      	movs	r1, #1
 8000b02:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b0a:	fb08 4416 	mls	r4, r8, r6, r4
 8000b0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b12:	fb07 f006 	mul.w	r0, r7, r6
 8000b16:	4298      	cmp	r0, r3
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x11c>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b22:	d202      	bcs.n	8000b2a <__udivmoddi4+0x11a>
 8000b24:	4298      	cmp	r0, r3
 8000b26:	f200 80cd 	bhi.w	8000cc4 <__udivmoddi4+0x2b4>
 8000b2a:	4626      	mov	r6, r4
 8000b2c:	1a1c      	subs	r4, r3, r0
 8000b2e:	fa1f f38e 	uxth.w	r3, lr
 8000b32:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b36:	fb08 4410 	mls	r4, r8, r0, r4
 8000b3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b3e:	fb00 f707 	mul.w	r7, r0, r7
 8000b42:	429f      	cmp	r7, r3
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x148>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x146>
 8000b50:	429f      	cmp	r7, r3
 8000b52:	f200 80b0 	bhi.w	8000cb6 <__udivmoddi4+0x2a6>
 8000b56:	4620      	mov	r0, r4
 8000b58:	1bdb      	subs	r3, r3, r7
 8000b5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b5e:	e7a5      	b.n	8000aac <__udivmoddi4+0x9c>
 8000b60:	f1c1 0620 	rsb	r6, r1, #32
 8000b64:	408b      	lsls	r3, r1
 8000b66:	fa22 f706 	lsr.w	r7, r2, r6
 8000b6a:	431f      	orrs	r7, r3
 8000b6c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b70:	fa04 f301 	lsl.w	r3, r4, r1
 8000b74:	ea43 030c 	orr.w	r3, r3, ip
 8000b78:	40f4      	lsrs	r4, r6
 8000b7a:	fa00 f801 	lsl.w	r8, r0, r1
 8000b7e:	0c38      	lsrs	r0, r7, #16
 8000b80:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b84:	fbb4 fef0 	udiv	lr, r4, r0
 8000b88:	fa1f fc87 	uxth.w	ip, r7
 8000b8c:	fb00 441e 	mls	r4, r0, lr, r4
 8000b90:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b94:	fb0e f90c 	mul.w	r9, lr, ip
 8000b98:	45a1      	cmp	r9, r4
 8000b9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b9e:	d90a      	bls.n	8000bb6 <__udivmoddi4+0x1a6>
 8000ba0:	193c      	adds	r4, r7, r4
 8000ba2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ba6:	f080 8084 	bcs.w	8000cb2 <__udivmoddi4+0x2a2>
 8000baa:	45a1      	cmp	r9, r4
 8000bac:	f240 8081 	bls.w	8000cb2 <__udivmoddi4+0x2a2>
 8000bb0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bb4:	443c      	add	r4, r7
 8000bb6:	eba4 0409 	sub.w	r4, r4, r9
 8000bba:	fa1f f983 	uxth.w	r9, r3
 8000bbe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bc2:	fb00 4413 	mls	r4, r0, r3, r4
 8000bc6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bca:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bce:	45a4      	cmp	ip, r4
 8000bd0:	d907      	bls.n	8000be2 <__udivmoddi4+0x1d2>
 8000bd2:	193c      	adds	r4, r7, r4
 8000bd4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bd8:	d267      	bcs.n	8000caa <__udivmoddi4+0x29a>
 8000bda:	45a4      	cmp	ip, r4
 8000bdc:	d965      	bls.n	8000caa <__udivmoddi4+0x29a>
 8000bde:	3b02      	subs	r3, #2
 8000be0:	443c      	add	r4, r7
 8000be2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000be6:	fba0 9302 	umull	r9, r3, r0, r2
 8000bea:	eba4 040c 	sub.w	r4, r4, ip
 8000bee:	429c      	cmp	r4, r3
 8000bf0:	46ce      	mov	lr, r9
 8000bf2:	469c      	mov	ip, r3
 8000bf4:	d351      	bcc.n	8000c9a <__udivmoddi4+0x28a>
 8000bf6:	d04e      	beq.n	8000c96 <__udivmoddi4+0x286>
 8000bf8:	b155      	cbz	r5, 8000c10 <__udivmoddi4+0x200>
 8000bfa:	ebb8 030e 	subs.w	r3, r8, lr
 8000bfe:	eb64 040c 	sbc.w	r4, r4, ip
 8000c02:	fa04 f606 	lsl.w	r6, r4, r6
 8000c06:	40cb      	lsrs	r3, r1
 8000c08:	431e      	orrs	r6, r3
 8000c0a:	40cc      	lsrs	r4, r1
 8000c0c:	e9c5 6400 	strd	r6, r4, [r5]
 8000c10:	2100      	movs	r1, #0
 8000c12:	e750      	b.n	8000ab6 <__udivmoddi4+0xa6>
 8000c14:	f1c2 0320 	rsb	r3, r2, #32
 8000c18:	fa20 f103 	lsr.w	r1, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	fa24 f303 	lsr.w	r3, r4, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	430c      	orrs	r4, r1
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c30:	fa1f f78c 	uxth.w	r7, ip
 8000c34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c38:	fb08 3110 	mls	r1, r8, r0, r3
 8000c3c:	0c23      	lsrs	r3, r4, #16
 8000c3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c42:	fb00 f107 	mul.w	r1, r0, r7
 8000c46:	4299      	cmp	r1, r3
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x24c>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c52:	d22c      	bcs.n	8000cae <__udivmoddi4+0x29e>
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d92a      	bls.n	8000cae <__udivmoddi4+0x29e>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c64:	fb08 3311 	mls	r3, r8, r1, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb01 f307 	mul.w	r3, r1, r7
 8000c70:	42a3      	cmp	r3, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x276>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c7c:	d213      	bcs.n	8000ca6 <__udivmoddi4+0x296>
 8000c7e:	42a3      	cmp	r3, r4
 8000c80:	d911      	bls.n	8000ca6 <__udivmoddi4+0x296>
 8000c82:	3902      	subs	r1, #2
 8000c84:	4464      	add	r4, ip
 8000c86:	1ae4      	subs	r4, r4, r3
 8000c88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c8c:	e739      	b.n	8000b02 <__udivmoddi4+0xf2>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	e6f0      	b.n	8000a74 <__udivmoddi4+0x64>
 8000c92:	4608      	mov	r0, r1
 8000c94:	e706      	b.n	8000aa4 <__udivmoddi4+0x94>
 8000c96:	45c8      	cmp	r8, r9
 8000c98:	d2ae      	bcs.n	8000bf8 <__udivmoddi4+0x1e8>
 8000c9a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c9e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ca2:	3801      	subs	r0, #1
 8000ca4:	e7a8      	b.n	8000bf8 <__udivmoddi4+0x1e8>
 8000ca6:	4631      	mov	r1, r6
 8000ca8:	e7ed      	b.n	8000c86 <__udivmoddi4+0x276>
 8000caa:	4603      	mov	r3, r0
 8000cac:	e799      	b.n	8000be2 <__udivmoddi4+0x1d2>
 8000cae:	4630      	mov	r0, r6
 8000cb0:	e7d4      	b.n	8000c5c <__udivmoddi4+0x24c>
 8000cb2:	46d6      	mov	lr, sl
 8000cb4:	e77f      	b.n	8000bb6 <__udivmoddi4+0x1a6>
 8000cb6:	4463      	add	r3, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e74d      	b.n	8000b58 <__udivmoddi4+0x148>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	4623      	mov	r3, r4
 8000cc0:	4608      	mov	r0, r1
 8000cc2:	e70f      	b.n	8000ae4 <__udivmoddi4+0xd4>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	4463      	add	r3, ip
 8000cc8:	e730      	b.n	8000b2c <__udivmoddi4+0x11c>
 8000cca:	bf00      	nop

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ce2:	4b21      	ldr	r3, [pc, #132]	@ (8000d68 <MX_ADC1_Init+0x98>)
 8000ce4:	4a21      	ldr	r2, [pc, #132]	@ (8000d6c <MX_ADC1_Init+0x9c>)
 8000ce6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <MX_ADC1_Init+0x98>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cee:	4b1e      	ldr	r3, [pc, #120]	@ (8000d68 <MX_ADC1_Init+0x98>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <MX_ADC1_Init+0x98>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8000d68 <MX_ADC1_Init+0x98>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d00:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <MX_ADC1_Init+0x98>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d08:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <MX_ADC1_Init+0x98>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <MX_ADC1_Init+0x98>)
 8000d10:	4a17      	ldr	r2, [pc, #92]	@ (8000d70 <MX_ADC1_Init+0xa0>)
 8000d12:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d14:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <MX_ADC1_Init+0x98>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <MX_ADC1_Init+0x98>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d20:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <MX_ADC1_Init+0x98>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <MX_ADC1_Init+0x98>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d2e:	480e      	ldr	r0, [pc, #56]	@ (8000d68 <MX_ADC1_Init+0x98>)
 8000d30:	f001 f8b6 	bl	8001ea0 <HAL_ADC_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d3a:	f000 fc64 	bl	8001606 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d42:	2301      	movs	r3, #1
 8000d44:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4806      	ldr	r0, [pc, #24]	@ (8000d68 <MX_ADC1_Init+0x98>)
 8000d50:	f001 f8ea 	bl	8001f28 <HAL_ADC_ConfigChannel>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d5a:	f000 fc54 	bl	8001606 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000064 	.word	0x20000064
 8000d6c:	40012000 	.word	0x40012000
 8000d70:	0f000001 	.word	0x0f000001

08000d74 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000d86:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <MX_ADC2_Init+0x98>)
 8000d88:	4a21      	ldr	r2, [pc, #132]	@ (8000e10 <MX_ADC2_Init+0x9c>)
 8000d8a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <MX_ADC2_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d92:	4b1e      	ldr	r3, [pc, #120]	@ (8000e0c <MX_ADC2_Init+0x98>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000d98:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <MX_ADC2_Init+0x98>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <MX_ADC2_Init+0x98>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000da4:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <MX_ADC2_Init+0x98>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dac:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <MX_ADC2_Init+0x98>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db2:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <MX_ADC2_Init+0x98>)
 8000db4:	4a17      	ldr	r2, [pc, #92]	@ (8000e14 <MX_ADC2_Init+0xa0>)
 8000db6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db8:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <MX_ADC2_Init+0x98>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000dbe:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <MX_ADC2_Init+0x98>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <MX_ADC2_Init+0x98>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <MX_ADC2_Init+0x98>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dd2:	480e      	ldr	r0, [pc, #56]	@ (8000e0c <MX_ADC2_Init+0x98>)
 8000dd4:	f001 f864 	bl	8001ea0 <HAL_ADC_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000dde:	f000 fc12 	bl	8001606 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000de2:	2302      	movs	r3, #2
 8000de4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dee:	463b      	mov	r3, r7
 8000df0:	4619      	mov	r1, r3
 8000df2:	4806      	ldr	r0, [pc, #24]	@ (8000e0c <MX_ADC2_Init+0x98>)
 8000df4:	f001 f898 	bl	8001f28 <HAL_ADC_ConfigChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000dfe:	f000 fc02 	bl	8001606 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200000ac 	.word	0x200000ac
 8000e10:	40012100 	.word	0x40012100
 8000e14:	0f000001 	.word	0x0f000001

08000e18 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	@ 0x30
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a2e      	ldr	r2, [pc, #184]	@ (8000ef0 <HAL_ADC_MspInit+0xd8>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d128      	bne.n	8000e8c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef4 <HAL_ADC_MspInit+0xdc>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	4a2c      	ldr	r2, [pc, #176]	@ (8000ef4 <HAL_ADC_MspInit+0xdc>)
 8000e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <HAL_ADC_MspInit+0xdc>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e52:	61bb      	str	r3, [r7, #24]
 8000e54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	4b26      	ldr	r3, [pc, #152]	@ (8000ef4 <HAL_ADC_MspInit+0xdc>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a25      	ldr	r2, [pc, #148]	@ (8000ef4 <HAL_ADC_MspInit+0xdc>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b23      	ldr	r3, [pc, #140]	@ (8000ef4 <HAL_ADC_MspInit+0xdc>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e76:	2303      	movs	r3, #3
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	4619      	mov	r1, r3
 8000e84:	481c      	ldr	r0, [pc, #112]	@ (8000ef8 <HAL_ADC_MspInit+0xe0>)
 8000e86:	f001 fb8f 	bl	80025a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000e8a:	e02c      	b.n	8000ee6 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a1a      	ldr	r2, [pc, #104]	@ (8000efc <HAL_ADC_MspInit+0xe4>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d127      	bne.n	8000ee6 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <HAL_ADC_MspInit+0xdc>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9e:	4a15      	ldr	r2, [pc, #84]	@ (8000ef4 <HAL_ADC_MspInit+0xdc>)
 8000ea0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ea6:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <HAL_ADC_MspInit+0xdc>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <HAL_ADC_MspInit+0xdc>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef4 <HAL_ADC_MspInit+0xdc>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <HAL_ADC_MspInit+0xdc>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ece:	2304      	movs	r3, #4
 8000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <HAL_ADC_MspInit+0xe0>)
 8000ee2:	f001 fb61 	bl	80025a8 <HAL_GPIO_Init>
}
 8000ee6:	bf00      	nop
 8000ee8:	3730      	adds	r7, #48	@ 0x30
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40012000 	.word	0x40012000
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40012100 	.word	0x40012100

08000f00 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	4b35      	ldr	r3, [pc, #212]	@ (8000ff0 <MX_GPIO_Init+0xf0>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a34      	ldr	r2, [pc, #208]	@ (8000ff0 <MX_GPIO_Init+0xf0>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b32      	ldr	r3, [pc, #200]	@ (8000ff0 <MX_GPIO_Init+0xf0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff0 <MX_GPIO_Init+0xf0>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8000ff0 <MX_GPIO_Init+0xf0>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff0 <MX_GPIO_Init+0xf0>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	603b      	str	r3, [r7, #0]
 8000f52:	4b27      	ldr	r3, [pc, #156]	@ (8000ff0 <MX_GPIO_Init+0xf0>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a26      	ldr	r2, [pc, #152]	@ (8000ff0 <MX_GPIO_Init+0xf0>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ff0 <MX_GPIO_Init+0xf0>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A0_2_Pin|A1_2_Pin|A2_2_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000f70:	4820      	ldr	r0, [pc, #128]	@ (8000ff4 <MX_GPIO_Init+0xf4>)
 8000f72:	f001 fcad 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_1_Pin|A1_1_Pin|A2_1_Pin|DRIVE_EN_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000f7c:	481e      	ldr	r0, [pc, #120]	@ (8000ff8 <MX_GPIO_Init+0xf8>)
 8000f7e:	f001 fca7 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|N_RES_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000f88:	481c      	ldr	r0, [pc, #112]	@ (8000ffc <MX_GPIO_Init+0xfc>)
 8000f8a:	f001 fca1 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = A0_2_Pin|A1_2_Pin|A2_2_Pin;
 8000f8e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000f92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4813      	ldr	r0, [pc, #76]	@ (8000ff4 <MX_GPIO_Init+0xf4>)
 8000fa8:	f001 fafe 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = A0_1_Pin|A1_1_Pin|A2_1_Pin|DRIVE_EN_Pin;
 8000fac:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000fb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480c      	ldr	r0, [pc, #48]	@ (8000ff8 <MX_GPIO_Init+0xf8>)
 8000fc6:	f001 faef 	bl	80025a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TRIG_Pin|N_RES_Pin;
 8000fca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4806      	ldr	r0, [pc, #24]	@ (8000ffc <MX_GPIO_Init+0xfc>)
 8000fe4:	f001 fae0 	bl	80025a8 <HAL_GPIO_Init>

}
 8000fe8:	bf00      	nop
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	40020800 	.word	0x40020800
 8000ffc:	40020000 	.word	0x40020000

08001000 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <MX_I2C1_Init+0x54>)
 8001006:	4a14      	ldr	r2, [pc, #80]	@ (8001058 <MX_I2C1_Init+0x58>)
 8001008:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800100a:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <MX_I2C1_Init+0x54>)
 800100c:	4a13      	ldr	r2, [pc, #76]	@ (800105c <MX_I2C1_Init+0x5c>)
 800100e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001010:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <MX_I2C1_Init+0x54>)
 8001012:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001016:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001018:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <MX_I2C1_Init+0x54>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <MX_I2C1_Init+0x54>)
 8001020:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001024:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <MX_I2C1_Init+0x54>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800102c:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <MX_I2C1_Init+0x54>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <MX_I2C1_Init+0x54>)
 8001034:	2200      	movs	r2, #0
 8001036:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <MX_I2C1_Init+0x54>)
 800103a:	2200      	movs	r2, #0
 800103c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_I2C1_Init+0x54>)
 8001040:	f001 fc60 	bl	8002904 <HAL_I2C_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800104a:	f000 fadc 	bl	8001606 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200000f4 	.word	0x200000f4
 8001058:	40005400 	.word	0x40005400
 800105c:	00061a80 	.word	0x00061a80

08001060 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a19      	ldr	r2, [pc, #100]	@ (80010e4 <HAL_I2C_MspInit+0x84>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d12c      	bne.n	80010dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <HAL_I2C_MspInit+0x88>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a17      	ldr	r2, [pc, #92]	@ (80010e8 <HAL_I2C_MspInit+0x88>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_I2C_MspInit+0x88>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800109e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a4:	2312      	movs	r3, #18
 80010a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010b0:	2304      	movs	r3, #4
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	480c      	ldr	r0, [pc, #48]	@ (80010ec <HAL_I2C_MspInit+0x8c>)
 80010bc:	f001 fa74 	bl	80025a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <HAL_I2C_MspInit+0x88>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	4a07      	ldr	r2, [pc, #28]	@ (80010e8 <HAL_I2C_MspInit+0x88>)
 80010ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d0:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <HAL_I2C_MspInit+0x88>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	@ 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40005400 	.word	0x40005400
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020400 	.word	0x40020400

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010f4:	b0b4      	sub	sp, #208	@ 0xd0
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f8:	f000 fe3c 	bl	8001d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fc:	f000 f990 	bl	8001420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001100:	f7ff fefe 	bl	8000f00 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001104:	f7ff ff7c 	bl	8001000 <MX_I2C1_Init>
  MX_TIM7_Init();
 8001108:	f000 faf8 	bl	80016fc <MX_TIM7_Init>
  MX_ADC1_Init();
 800110c:	f7ff fde0 	bl	8000cd0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001110:	f7ff fe30 	bl	8000d74 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */


	init_drivers();
 8001114:	f000 fb7a 	bl	800180c <init_drivers>

	uint8_t numValues = 80;
 8001118:	2350      	movs	r3, #80	@ 0x50
 800111a:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
	double ramp[numValues];
 800111e:	f897 10bf 	ldrb.w	r1, [r7, #191]	@ 0xbf
 8001122:	460b      	mov	r3, r1
 8001124:	3b01      	subs	r3, #1
 8001126:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800112a:	b2cb      	uxtb	r3, r1
 800112c:	2200      	movs	r2, #0
 800112e:	461c      	mov	r4, r3
 8001130:	4615      	mov	r5, r2
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	01ab      	lsls	r3, r5, #6
 800113c:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8001140:	01a2      	lsls	r2, r4, #6
 8001142:	b2cb      	uxtb	r3, r1
 8001144:	2200      	movs	r2, #0
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	617a      	str	r2, [r7, #20]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001156:	4628      	mov	r0, r5
 8001158:	0183      	lsls	r3, r0, #6
 800115a:	4620      	mov	r0, r4
 800115c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001160:	4620      	mov	r0, r4
 8001162:	0182      	lsls	r2, r0, #6
 8001164:	460b      	mov	r3, r1
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	3307      	adds	r3, #7
 800116a:	08db      	lsrs	r3, r3, #3
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	ebad 0d03 	sub.w	sp, sp, r3
 8001172:	466b      	mov	r3, sp
 8001174:	3307      	adds	r3, #7
 8001176:	08db      	lsrs	r3, r3, #3
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	uint8_t maxValue = 0x5B; // 2.3V RMS
 800117e:	235b      	movs	r3, #91	@ 0x5b
 8001180:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

	generate_ramp(ramp, maxValue, numValues);
 8001184:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 8001188:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800118c:	4619      	mov	r1, r3
 800118e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8001192:	f000 f9c9 	bl	8001528 <generate_ramp>
	double amplitudes[NUM_ACTUATORS] = {0};
 8001196:	f107 0318 	add.w	r3, r7, #24
 800119a:	2280      	movs	r2, #128	@ 0x80
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 fc0c 	bl	80049bc <memset>
	uint8_t counter = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

	uint16_t numSamples = 288;
 80011aa:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80011ae:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
	uint8_t rawValues[numSamples];
 80011b2:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 80011b6:	460b      	mov	r3, r1
 80011b8:	3b01      	subs	r3, #1
 80011ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80011be:	b28b      	uxth	r3, r1
 80011c0:	2200      	movs	r2, #0
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	60fa      	str	r2, [r7, #12]
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80011d2:	4628      	mov	r0, r5
 80011d4:	00c3      	lsls	r3, r0, #3
 80011d6:	4620      	mov	r0, r4
 80011d8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011dc:	4620      	mov	r0, r4
 80011de:	00c2      	lsls	r2, r0, #3
 80011e0:	b28b      	uxth	r3, r1
 80011e2:	2200      	movs	r2, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80011f4:	4628      	mov	r0, r5
 80011f6:	00c3      	lsls	r3, r0, #3
 80011f8:	4620      	mov	r0, r4
 80011fa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011fe:	4620      	mov	r0, r4
 8001200:	00c2      	lsls	r2, r0, #3
 8001202:	460b      	mov	r3, r1
 8001204:	3307      	adds	r3, #7
 8001206:	08db      	lsrs	r3, r3, #3
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	ebad 0d03 	sub.w	sp, sp, r3
 800120e:	466b      	mov	r3, sp
 8001210:	3300      	adds	r3, #0
 8001212:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	uint8_t audioData[numSamples];
 8001216:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 800121a:	460b      	mov	r3, r1
 800121c:	3b01      	subs	r3, #1
 800121e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001222:	b28b      	uxth	r3, r1
 8001224:	2200      	movs	r2, #0
 8001226:	469a      	mov	sl, r3
 8001228:	4693      	mov	fp, r2
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001236:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800123a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800123e:	b28b      	uxth	r3, r1
 8001240:	2200      	movs	r2, #0
 8001242:	4698      	mov	r8, r3
 8001244:	4691      	mov	r9, r2
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800125a:	460b      	mov	r3, r1
 800125c:	3307      	adds	r3, #7
 800125e:	08db      	lsrs	r3, r3, #3
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	ebad 0d03 	sub.w	sp, sp, r3
 8001266:	466b      	mov	r3, sp
 8001268:	3300      	adds	r3, #0
 800126a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	uint8_t drivers = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	uint8_t firstround = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e

	uint8_t ready = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce

	for(int j=0; j<NUM_ACTUATORS; j++){
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001286:	e013      	b.n	80012b0 <main+0x1c0>
		amplitudes[j] = 0;
 8001288:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	33b8      	adds	r3, #184	@ 0xb8
 8001290:	f107 0218 	add.w	r2, r7, #24
 8001294:	4413      	add	r3, r2
 8001296:	f1a3 01b8 	sub.w	r1, r3, #184	@ 0xb8
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	e9c1 2300 	strd	r2, r3, [r1]
	for(int j=0; j<NUM_ACTUATORS; j++){
 80012a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80012aa:	3301      	adds	r3, #1
 80012ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80012b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	dde7      	ble.n	8001288 <main+0x198>
	}


	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80012b8:	2037      	movs	r0, #55	@ 0x37
 80012ba:	f001 f95a 	bl	8002572 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim7);
 80012be:	4853      	ldr	r0, [pc, #332]	@ (800140c <main+0x31c>)
 80012c0:	f003 f8b8 	bl	8004434 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012ca:	4851      	ldr	r0, [pc, #324]	@ (8001410 <main+0x320>)
 80012cc:	f001 fb00 	bl	80028d0 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(TimCollapsed){
 80012d0:	4b50      	ldr	r3, [pc, #320]	@ (8001414 <main+0x324>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d04c      	beq.n	8001372 <main+0x282>
		TimCollapsed = RESET;
 80012d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001414 <main+0x324>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
		counter++;
 80012de:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80012e2:	3301      	adds	r3, #1
 80012e4:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
		int i = counter/10;
 80012e8:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80012ec:	4a4a      	ldr	r2, [pc, #296]	@ (8001418 <main+0x328>)
 80012ee:	fba2 2303 	umull	r2, r3, r2, r3
 80012f2:	08db      	lsrs	r3, r3, #3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

		if(i>=NUM_ACTUATORS){
 80012fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	dd02      	ble.n	8001308 <main+0x218>
			counter = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
		}
		for(int j=0; j<NUM_ACTUATORS; j++){
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800130e:	e013      	b.n	8001338 <main+0x248>
			amplitudes[j] = 0;
 8001310:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	33b8      	adds	r3, #184	@ 0xb8
 8001318:	f107 0218 	add.w	r2, r7, #24
 800131c:	4413      	add	r3, r2
 800131e:	f1a3 01b8 	sub.w	r1, r3, #184	@ 0xb8
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	e9c1 2300 	strd	r2, r3, [r1]
		for(int j=0; j<NUM_ACTUATORS; j++){
 800132e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001332:	3301      	adds	r3, #1
 8001334:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001338:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800133c:	2b0f      	cmp	r3, #15
 800133e:	dde7      	ble.n	8001310 <main+0x220>
		}
		amplitudes[i] = maxValue;
 8001340:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f89f 	bl	8000488 <__aeabi_ui2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001352:	00c9      	lsls	r1, r1, #3
 8001354:	31b8      	adds	r1, #184	@ 0xb8
 8001356:	f107 0018 	add.w	r0, r7, #24
 800135a:	4401      	add	r1, r0
 800135c:	39b8      	subs	r1, #184	@ 0xb8
 800135e:	e9c1 2300 	strd	r2, r3, [r1]
		/*
		if(counter > NUM_ACTUATORS*numValues){
			counter = 0;
		}*/
		// ramp_set(ramp,amplitudes,counter,numValues);
		set_amplitude(amplitudes);
 8001362:	f107 0318 	add.w	r3, r7, #24
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fc64 	bl	8001c34 <set_amplitude>
		ready = 1;
 800136c:	2301      	movs	r3, #1
 800136e:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
	  }

	  if(ready){
 8001372:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8001376:	2b00      	cmp	r3, #0
 8001378:	d023      	beq.n	80013c2 <main+0x2d2>
		  ready = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		  // clear actual waveform with rising edge
		  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001386:	4822      	ldr	r0, [pc, #136]	@ (8001410 <main+0x320>)
 8001388:	f001 faa2 	bl	80028d0 <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 800138c:	2001      	movs	r0, #1
 800138e:	f000 fd63 	bl	8001e58 <HAL_Delay>
		  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, SET);
 8001392:	2201      	movs	r2, #1
 8001394:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001398:	481d      	ldr	r0, [pc, #116]	@ (8001410 <main+0x320>)
 800139a:	f001 fa99 	bl	80028d0 <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 800139e:	2005      	movs	r0, #5
 80013a0:	f000 fd5a 	bl	8001e58 <HAL_Delay>
		  // set new waveform with rising edge
		  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013aa:	4819      	ldr	r0, [pc, #100]	@ (8001410 <main+0x320>)
 80013ac:	f001 fa90 	bl	80028d0 <HAL_GPIO_WritePin>
		  HAL_Delay(1);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f000 fd51 	bl	8001e58 <HAL_Delay>
		  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013bc:	4814      	ldr	r0, [pc, #80]	@ (8001410 <main+0x320>)
 80013be:	f001 fa87 	bl	80028d0 <HAL_GPIO_WritePin>
	  }

	  if(DMA_ready){
 80013c2:	4b16      	ldr	r3, [pc, #88]	@ (800141c <main+0x32c>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d082      	beq.n	80012d0 <main+0x1e0>
		  DMA_ready = RESET;
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <main+0x32c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
		  for(int i=0; i<numSamples; i++){
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80013d6:	e011      	b.n	80013fc <main+0x30c>
			  audioData[i] = rawValues[i];
 80013d8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80013dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80013e0:	4413      	add	r3, r2
 80013e2:	7819      	ldrb	r1, [r3, #0]
 80013e4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80013e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80013ec:	4413      	add	r3, r2
 80013ee:	460a      	mov	r2, r1
 80013f0:	701a      	strb	r2, [r3, #0]
		  for(int i=0; i<numSamples; i++){
 80013f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80013f6:	3301      	adds	r3, #1
 80013f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80013fc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8001400:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001404:	429a      	cmp	r2, r3
 8001406:	dbe7      	blt.n	80013d8 <main+0x2e8>
	  if(TimCollapsed){
 8001408:	e762      	b.n	80012d0 <main+0x1e0>
 800140a:	bf00      	nop
 800140c:	2000014c 	.word	0x2000014c
 8001410:	40020000 	.word	0x40020000
 8001414:	20000148 	.word	0x20000148
 8001418:	cccccccd 	.word	0xcccccccd
 800141c:	20000149 	.word	0x20000149

08001420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b094      	sub	sp, #80	@ 0x50
 8001424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	2234      	movs	r2, #52	@ 0x34
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f003 fac4 	bl	80049bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	4b2a      	ldr	r3, [pc, #168]	@ (80014f4 <SystemClock_Config+0xd4>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	4a29      	ldr	r2, [pc, #164]	@ (80014f4 <SystemClock_Config+0xd4>)
 800144e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001452:	6413      	str	r3, [r2, #64]	@ 0x40
 8001454:	4b27      	ldr	r3, [pc, #156]	@ (80014f4 <SystemClock_Config+0xd4>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001460:	2300      	movs	r3, #0
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	4b24      	ldr	r3, [pc, #144]	@ (80014f8 <SystemClock_Config+0xd8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800146c:	4a22      	ldr	r2, [pc, #136]	@ (80014f8 <SystemClock_Config+0xd8>)
 800146e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <SystemClock_Config+0xd8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001480:	2302      	movs	r3, #2
 8001482:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001484:	2301      	movs	r3, #1
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001488:	2310      	movs	r3, #16
 800148a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800148c:	2302      	movs	r3, #2
 800148e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001490:	2300      	movs	r3, #0
 8001492:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001494:	2308      	movs	r3, #8
 8001496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001498:	2360      	movs	r3, #96	@ 0x60
 800149a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800149c:	2302      	movs	r3, #2
 800149e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014a4:	2302      	movs	r3, #2
 80014a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4618      	mov	r0, r3
 80014ae:	f002 fcd3 	bl	8003e58 <HAL_RCC_OscConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80014b8:	f000 f8a5 	bl	8001606 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014bc:	230f      	movs	r3, #15
 80014be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c0:	2302      	movs	r3, #2
 80014c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80014c4:	2380      	movs	r3, #128	@ 0x80
 80014c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	2101      	movs	r1, #1
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 fa0c 	bl	80038f8 <HAL_RCC_ClockConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SystemClock_Config+0xca>
  {
    Error_Handler();
 80014e6:	f000 f88e 	bl	8001606 <Error_Handler>
  }
}
 80014ea:	bf00      	nop
 80014ec:	3750      	adds	r7, #80	@ 0x50
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40007000 	.word	0x40007000

080014fc <HAL_TIM_PeriodElapsedCallback>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		12.03.2025	FL	Created
 ****************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a05      	ldr	r2, [pc, #20]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d102      	bne.n	8001514 <HAL_TIM_PeriodElapsedCallback+0x18>
		TimCollapsed = SET;
 800150e:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001510:	2201      	movs	r2, #1
 8001512:	701a      	strb	r2, [r3, #0]
	}
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	40001400 	.word	0x40001400
 8001524:	20000148 	.word	0x20000148

08001528 <generate_ramp>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		12.03.2025	FL	Created
 ****************************************************************************/
void generate_ramp(double *ramp, uint8_t maxvalue, uint8_t numValues){
 8001528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	70fb      	strb	r3, [r7, #3]
 8001534:	4613      	mov	r3, r2
 8001536:	70bb      	strb	r3, [r7, #2]
	// numValues only for whole triangle
	double difference = 2*((double) maxvalue/ (double)numValues);
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	4618      	mov	r0, r3
 800153c:	f7fe ffa4 	bl	8000488 <__aeabi_ui2d>
 8001540:	4604      	mov	r4, r0
 8001542:	460d      	mov	r5, r1
 8001544:	78bb      	ldrb	r3, [r7, #2]
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe ff9e 	bl	8000488 <__aeabi_ui2d>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4620      	mov	r0, r4
 8001552:	4629      	mov	r1, r5
 8001554:	f7ff f93c 	bl	80007d0 <__aeabi_ddiv>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	f7fe fe54 	bl	8000210 <__adddf3>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i=0; i<numValues; i++){
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	e03e      	b.n	80015f4 <generate_ramp+0xcc>
		if(i<=numValues/2){
 8001576:	78bb      	ldrb	r3, [r7, #2]
 8001578:	085b      	lsrs	r3, r3, #1
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	4293      	cmp	r3, r2
 8001582:	dc0f      	bgt.n	80015a4 <generate_ramp+0x7c>
			ramp[i] = i*difference;
 8001584:	6978      	ldr	r0, [r7, #20]
 8001586:	f7fe ff8f 	bl	80004a8 <__aeabi_i2d>
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	18d4      	adds	r4, r2, r3
 8001592:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001596:	f7fe fff1 	bl	800057c <__aeabi_dmul>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	e9c4 2300 	strd	r2, r3, [r4]
 80015a2:	e024      	b.n	80015ee <generate_ramp+0xc6>
		} else {
			ramp[i] = ((double)maxvalue-(i-numValues/2)*difference);
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ff6e 	bl	8000488 <__aeabi_ui2d>
 80015ac:	4604      	mov	r4, r0
 80015ae:	460d      	mov	r5, r1
 80015b0:	78bb      	ldrb	r3, [r7, #2]
 80015b2:	085b      	lsrs	r3, r3, #1
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	461a      	mov	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	1a9b      	subs	r3, r3, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ff73 	bl	80004a8 <__aeabi_i2d>
 80015c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015c6:	f7fe ffd9 	bl	800057c <__aeabi_dmul>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	18d6      	adds	r6, r2, r3
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4620      	mov	r0, r4
 80015e0:	4629      	mov	r1, r5
 80015e2:	f7fe fe13 	bl	800020c <__aeabi_dsub>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	e9c6 2300 	strd	r2, r3, [r6]
	for(int i=0; i<numValues; i++){
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3301      	adds	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	78bb      	ldrb	r3, [r7, #2]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	dbbc      	blt.n	8001576 <generate_ramp+0x4e>
		}
	}
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001606 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160a:	b672      	cpsid	i
}
 800160c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800160e:	bf00      	nop
 8001610:	e7fd      	b.n	800160e <Error_Handler+0x8>
	...

08001614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <HAL_MspInit+0x4c>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	4a0f      	ldr	r2, [pc, #60]	@ (8001660 <HAL_MspInit+0x4c>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001628:	6453      	str	r3, [r2, #68]	@ 0x44
 800162a:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <HAL_MspInit+0x4c>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <HAL_MspInit+0x4c>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	4a08      	ldr	r2, [pc, #32]	@ (8001660 <HAL_MspInit+0x4c>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	@ 0x40
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_MspInit+0x4c>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <NMI_Handler+0x4>

0800166c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <HardFault_Handler+0x4>

08001674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <MemManage_Handler+0x4>

0800167c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <BusFault_Handler+0x4>

08001684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <UsageFault_Handler+0x4>

0800168c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ba:	f000 fbad 	bl	8001e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80016c8:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <TIM7_IRQHandler+0x10>)
 80016ca:	f002 ff23 	bl	8004514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000014c 	.word	0x2000014c

080016d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <SystemInit+0x20>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016e2:	4a05      	ldr	r2, [pc, #20]	@ (80016f8 <SystemInit+0x20>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001702:	463b      	mov	r3, r7
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <MX_TIM7_Init+0x64>)
 800170c:	4a15      	ldr	r2, [pc, #84]	@ (8001764 <MX_TIM7_Init+0x68>)
 800170e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4799;
 8001710:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <MX_TIM7_Init+0x64>)
 8001712:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8001716:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <MX_TIM7_Init+0x64>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 299;
 800171e:	4b10      	ldr	r3, [pc, #64]	@ (8001760 <MX_TIM7_Init+0x64>)
 8001720:	f240 122b 	movw	r2, #299	@ 0x12b
 8001724:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001726:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <MX_TIM7_Init+0x64>)
 8001728:	2280      	movs	r2, #128	@ 0x80
 800172a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800172c:	480c      	ldr	r0, [pc, #48]	@ (8001760 <MX_TIM7_Init+0x64>)
 800172e:	f002 fe31 	bl	8004394 <HAL_TIM_Base_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001738:	f7ff ff65 	bl	8001606 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800173c:	2320      	movs	r3, #32
 800173e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001744:	463b      	mov	r3, r7
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_TIM7_Init+0x64>)
 800174a:	f003 f8a7 	bl	800489c <HAL_TIMEx_MasterConfigSynchronization>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001754:	f7ff ff57 	bl	8001606 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	2000014c 	.word	0x2000014c
 8001764:	40001400 	.word	0x40001400

08001768 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0e      	ldr	r2, [pc, #56]	@ (80017b0 <HAL_TIM_Base_MspInit+0x48>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d115      	bne.n	80017a6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b0d      	ldr	r3, [pc, #52]	@ (80017b4 <HAL_TIM_Base_MspInit+0x4c>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	4a0c      	ldr	r2, [pc, #48]	@ (80017b4 <HAL_TIM_Base_MspInit+0x4c>)
 8001784:	f043 0320 	orr.w	r3, r3, #32
 8001788:	6413      	str	r3, [r2, #64]	@ 0x40
 800178a:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <HAL_TIM_Base_MspInit+0x4c>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	f003 0320 	and.w	r3, r3, #32
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2103      	movs	r1, #3
 800179a:	2037      	movs	r0, #55	@ 0x37
 800179c:	f000 fecd 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80017a0:	2037      	movs	r0, #55	@ 0x37
 80017a2:	f000 fee6 	bl	8002572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40001400 	.word	0x40001400
 80017b4:	40023800 	.word	0x40023800

080017b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017bc:	f7ff ff8c 	bl	80016d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c0:	480c      	ldr	r0, [pc, #48]	@ (80017f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017c2:	490d      	ldr	r1, [pc, #52]	@ (80017f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c4:	4a0d      	ldr	r2, [pc, #52]	@ (80017fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017e6:	f003 f8f1 	bl	80049cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ea:	f7ff fc81 	bl	80010f0 <main>
  bx  lr    
 80017ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f8:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80017fc:	08004a54 	.word	0x08004a54
  ldr r2, =_sbss
 8001800:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8001804:	200001a4 	.word	0x200001a4

08001808 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC_IRQHandler>
	...

0800180c <init_drivers>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		11.03.2025	FL	Created
 ****************************************************************************/
void init_drivers(void){
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af02      	add	r7, sp, #8
	// First enable the drivers and the MUX
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001818:	4819      	ldr	r0, [pc, #100]	@ (8001880 <init_drivers+0x74>)
 800181a:	f001 f859 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(N_RES_GPIO_Port, N_RES_Pin, GPIO_PIN_SET);
 800181e:	2201      	movs	r2, #1
 8001820:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001824:	4816      	ldr	r0, [pc, #88]	@ (8001880 <init_drivers+0x74>)
 8001826:	f001 f853 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRIVE_EN_GPIO_Port, DRIVE_EN_Pin , GPIO_PIN_SET);
 800182a:	2201      	movs	r2, #1
 800182c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001830:	4814      	ldr	r0, [pc, #80]	@ (8001884 <init_drivers+0x78>)
 8001832:	f001 f84d 	bl	80028d0 <HAL_GPIO_WritePin>

	// Set HW-addresses for the MUX
	HAL_GPIO_WritePin(A0_1_GPIO_Port, A0_1_Pin, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	2140      	movs	r1, #64	@ 0x40
 800183a:	4812      	ldr	r0, [pc, #72]	@ (8001884 <init_drivers+0x78>)
 800183c:	f001 f848 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A1_1_GPIO_Port, A1_1_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2180      	movs	r1, #128	@ 0x80
 8001844:	480f      	ldr	r0, [pc, #60]	@ (8001884 <init_drivers+0x78>)
 8001846:	f001 f843 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A2_1_GPIO_Port, A2_1_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001850:	480c      	ldr	r0, [pc, #48]	@ (8001884 <init_drivers+0x78>)
 8001852:	f001 f83d 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A0_2_GPIO_Port, A0_2_Pin, GPIO_PIN_SET);
 8001856:	2201      	movs	r2, #1
 8001858:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800185c:	480a      	ldr	r0, [pc, #40]	@ (8001888 <init_drivers+0x7c>)
 800185e:	f001 f837 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A1_2_GPIO_Port, A1_2_Pin, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001868:	4807      	ldr	r0, [pc, #28]	@ (8001888 <init_drivers+0x7c>)
 800186a:	f001 f831 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A2_2_GPIO_Port, A2_2_Pin, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001874:	4804      	ldr	r0, [pc, #16]	@ (8001888 <init_drivers+0x7c>)
 8001876:	f001 f82b 	bl	80028d0 <HAL_GPIO_WritePin>

	// Now init the drivers
	// Have to do it for every actuator
	// So first chose the actuator (GPIOs A0, A1, A2)
	for(uint8_t i=0; i<NUM_ACTUATORS; i++){
 800187a:	2300      	movs	r3, #0
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	e1c7      	b.n	8001c10 <init_drivers+0x404>
 8001880:	40020000 	.word	0x40020000
 8001884:	40020800 	.word	0x40020800
 8001888:	40020400 	.word	0x40020400
		select_driver(i);
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	4618      	mov	r0, r3
 8001890:	f000 fa10 	bl	8001cb4 <select_driver>
		calib_complete = 0x02;
 8001894:	4bb1      	ldr	r3, [pc, #708]	@ (8001b5c <init_drivers+0x350>)
 8001896:	2202      	movs	r2, #2
 8001898:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 800189a:	200a      	movs	r0, #10
 800189c:	f000 fadc 	bl	8001e58 <HAL_Delay>
		int a = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]

		// Send the initializations
		// Library Mode

		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, dev_RESET, sizeof(dev_RESET), TIMEOUT) == HAL_OK){
 80018a4:	2364      	movs	r3, #100	@ 0x64
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2302      	movs	r3, #2
 80018aa:	4aad      	ldr	r2, [pc, #692]	@ (8001b60 <init_drivers+0x354>)
 80018ac:	21b4      	movs	r1, #180	@ 0xb4
 80018ae:	48ad      	ldr	r0, [pc, #692]	@ (8001b64 <init_drivers+0x358>)
 80018b0:	f001 f96c 	bl	8002b8c <HAL_I2C_Master_Transmit>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <init_drivers+0xb4>
			a++;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	3301      	adds	r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
		}
		HAL_Delay(100);
 80018c0:	2064      	movs	r0, #100	@ 0x64
 80018c2:	f000 fac9 	bl	8001e58 <HAL_Delay>
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_rated_voltage, sizeof(set_rated_voltage), TIMEOUT) == HAL_OK){
 80018c6:	2364      	movs	r3, #100	@ 0x64
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2302      	movs	r3, #2
 80018cc:	4aa6      	ldr	r2, [pc, #664]	@ (8001b68 <init_drivers+0x35c>)
 80018ce:	21b4      	movs	r1, #180	@ 0xb4
 80018d0:	48a4      	ldr	r0, [pc, #656]	@ (8001b64 <init_drivers+0x358>)
 80018d2:	f001 f95b 	bl	8002b8c <HAL_I2C_Master_Transmit>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d102      	bne.n	80018e2 <init_drivers+0xd6>
			a++;
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	3301      	adds	r3, #1
 80018e0:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_Clamp, sizeof(set_Clamp), TIMEOUT) == HAL_OK){
 80018e2:	2364      	movs	r3, #100	@ 0x64
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2302      	movs	r3, #2
 80018e8:	4aa0      	ldr	r2, [pc, #640]	@ (8001b6c <init_drivers+0x360>)
 80018ea:	21b4      	movs	r1, #180	@ 0xb4
 80018ec:	489d      	ldr	r0, [pc, #628]	@ (8001b64 <init_drivers+0x358>)
 80018ee:	f001 f94d 	bl	8002b8c <HAL_I2C_Master_Transmit>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d102      	bne.n	80018fe <init_drivers+0xf2>
			a++;
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	3301      	adds	r3, #1
 80018fc:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_LRA, sizeof(set_LRA), TIMEOUT) == HAL_OK){
 80018fe:	2364      	movs	r3, #100	@ 0x64
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2302      	movs	r3, #2
 8001904:	4a9a      	ldr	r2, [pc, #616]	@ (8001b70 <init_drivers+0x364>)
 8001906:	21b4      	movs	r1, #180	@ 0xb4
 8001908:	4896      	ldr	r0, [pc, #600]	@ (8001b64 <init_drivers+0x358>)
 800190a:	f001 f93f 	bl	8002b8c <HAL_I2C_Master_Transmit>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <init_drivers+0x10e>
			a++;
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	3301      	adds	r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, start_auto_calibration, sizeof(start_auto_calibration), TIMEOUT) == HAL_OK){
 800191a:	2364      	movs	r3, #100	@ 0x64
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2302      	movs	r3, #2
 8001920:	4a94      	ldr	r2, [pc, #592]	@ (8001b74 <init_drivers+0x368>)
 8001922:	21b4      	movs	r1, #180	@ 0xb4
 8001924:	488f      	ldr	r0, [pc, #572]	@ (8001b64 <init_drivers+0x358>)
 8001926:	f001 f931 	bl	8002b8c <HAL_I2C_Master_Transmit>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d102      	bne.n	8001936 <init_drivers+0x12a>
			a++;
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	3301      	adds	r3, #1
 8001934:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, GO, sizeof(GO), TIMEOUT) == HAL_OK){
 8001936:	2364      	movs	r3, #100	@ 0x64
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2302      	movs	r3, #2
 800193c:	4a8e      	ldr	r2, [pc, #568]	@ (8001b78 <init_drivers+0x36c>)
 800193e:	21b4      	movs	r1, #180	@ 0xb4
 8001940:	4888      	ldr	r0, [pc, #544]	@ (8001b64 <init_drivers+0x358>)
 8001942:	f001 f923 	bl	8002b8c <HAL_I2C_Master_Transmit>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d102      	bne.n	8001952 <init_drivers+0x146>
			a++;
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	3301      	adds	r3, #1
 8001950:	60bb      	str	r3, [r7, #8]
		}

		uint8_t reg = REG_GO;
 8001952:	230c      	movs	r3, #12
 8001954:	70fb      	strb	r3, [r7, #3]
			if(HAL_I2C_Master_Receive(&hi2c1, DEV_ADDRESS, Buf, 1, TIMEOUT) == HAL_OK){
				calib_complete = Buf[0];
			}

		}*/
		HAL_Delay(2000);
 8001956:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800195a:	f000 fa7d 	bl	8001e58 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, &reg, 1, TIMEOUT);
 800195e:	1cfa      	adds	r2, r7, #3
 8001960:	2364      	movs	r3, #100	@ 0x64
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2301      	movs	r3, #1
 8001966:	21b4      	movs	r1, #180	@ 0xb4
 8001968:	487e      	ldr	r0, [pc, #504]	@ (8001b64 <init_drivers+0x358>)
 800196a:	f001 f90f 	bl	8002b8c <HAL_I2C_Master_Transmit>
		if(HAL_I2C_Master_Receive(&hi2c1, DEV_ADDRESS, Buf, 1, TIMEOUT) == HAL_OK){
 800196e:	2364      	movs	r3, #100	@ 0x64
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2301      	movs	r3, #1
 8001974:	4a81      	ldr	r2, [pc, #516]	@ (8001b7c <init_drivers+0x370>)
 8001976:	21b4      	movs	r1, #180	@ 0xb4
 8001978:	487a      	ldr	r0, [pc, #488]	@ (8001b64 <init_drivers+0x358>)
 800197a:	f001 fa05 	bl	8002d88 <HAL_I2C_Master_Receive>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d103      	bne.n	800198c <init_drivers+0x180>
			calib_complete = Buf[0];
 8001984:	4b7d      	ldr	r3, [pc, #500]	@ (8001b7c <init_drivers+0x370>)
 8001986:	781a      	ldrb	r2, [r3, #0]
 8001988:	4b74      	ldr	r3, [pc, #464]	@ (8001b5c <init_drivers+0x350>)
 800198a:	701a      	strb	r2, [r3, #0]
		}

		reg = REG_STATUS;
 800198c:	2300      	movs	r3, #0
 800198e:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, &reg, 1, TIMEOUT);
 8001990:	1cfa      	adds	r2, r7, #3
 8001992:	2364      	movs	r3, #100	@ 0x64
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	21b4      	movs	r1, #180	@ 0xb4
 800199a:	4872      	ldr	r0, [pc, #456]	@ (8001b64 <init_drivers+0x358>)
 800199c:	f001 f8f6 	bl	8002b8c <HAL_I2C_Master_Transmit>
		if(HAL_I2C_Master_Receive(&hi2c1, DEV_ADDRESS, Buf, 1, TIMEOUT) == HAL_OK){
 80019a0:	2364      	movs	r3, #100	@ 0x64
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2301      	movs	r3, #1
 80019a6:	4a75      	ldr	r2, [pc, #468]	@ (8001b7c <init_drivers+0x370>)
 80019a8:	21b4      	movs	r1, #180	@ 0xb4
 80019aa:	486e      	ldr	r0, [pc, #440]	@ (8001b64 <init_drivers+0x358>)
 80019ac:	f001 f9ec 	bl	8002d88 <HAL_I2C_Master_Receive>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d103      	bne.n	80019be <init_drivers+0x1b2>
			status = Buf[0];
 80019b6:	4b71      	ldr	r3, [pc, #452]	@ (8001b7c <init_drivers+0x370>)
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	4b71      	ldr	r3, [pc, #452]	@ (8001b80 <init_drivers+0x374>)
 80019bc:	701a      	strb	r2, [r3, #0]
		}

		reg = REG_AUTO_CALIBRATION_RESULT;
 80019be:	2318      	movs	r3, #24
 80019c0:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, &reg, 1, TIMEOUT);
 80019c2:	1cfa      	adds	r2, r7, #3
 80019c4:	2364      	movs	r3, #100	@ 0x64
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2301      	movs	r3, #1
 80019ca:	21b4      	movs	r1, #180	@ 0xb4
 80019cc:	4865      	ldr	r0, [pc, #404]	@ (8001b64 <init_drivers+0x358>)
 80019ce:	f001 f8dd 	bl	8002b8c <HAL_I2C_Master_Transmit>
		if(HAL_I2C_Master_Receive(&hi2c1, DEV_ADDRESS, Buf, 1, TIMEOUT) == HAL_OK){
 80019d2:	2364      	movs	r3, #100	@ 0x64
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2301      	movs	r3, #1
 80019d8:	4a68      	ldr	r2, [pc, #416]	@ (8001b7c <init_drivers+0x370>)
 80019da:	21b4      	movs	r1, #180	@ 0xb4
 80019dc:	4861      	ldr	r0, [pc, #388]	@ (8001b64 <init_drivers+0x358>)
 80019de:	f001 f9d3 	bl	8002d88 <HAL_I2C_Master_Receive>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d103      	bne.n	80019f0 <init_drivers+0x1e4>
			A_CAL_COMP = Buf[0];
 80019e8:	4b64      	ldr	r3, [pc, #400]	@ (8001b7c <init_drivers+0x370>)
 80019ea:	781a      	ldrb	r2, [r3, #0]
 80019ec:	4b65      	ldr	r3, [pc, #404]	@ (8001b84 <init_drivers+0x378>)
 80019ee:	701a      	strb	r2, [r3, #0]
		}
		reg = REG_AUTO_CALIBRATION_BACK_EMF_RESULT;
 80019f0:	2319      	movs	r3, #25
 80019f2:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, &reg, 1, TIMEOUT);
 80019f4:	1cfa      	adds	r2, r7, #3
 80019f6:	2364      	movs	r3, #100	@ 0x64
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2301      	movs	r3, #1
 80019fc:	21b4      	movs	r1, #180	@ 0xb4
 80019fe:	4859      	ldr	r0, [pc, #356]	@ (8001b64 <init_drivers+0x358>)
 8001a00:	f001 f8c4 	bl	8002b8c <HAL_I2C_Master_Transmit>
		if(HAL_I2C_Master_Receive(&hi2c1, DEV_ADDRESS, Buf, 1, TIMEOUT) == HAL_OK){
 8001a04:	2364      	movs	r3, #100	@ 0x64
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2301      	movs	r3, #1
 8001a0a:	4a5c      	ldr	r2, [pc, #368]	@ (8001b7c <init_drivers+0x370>)
 8001a0c:	21b4      	movs	r1, #180	@ 0xb4
 8001a0e:	4855      	ldr	r0, [pc, #340]	@ (8001b64 <init_drivers+0x358>)
 8001a10:	f001 f9ba 	bl	8002d88 <HAL_I2C_Master_Receive>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d103      	bne.n	8001a22 <init_drivers+0x216>
			A_CAL_BEMF = Buf[0];
 8001a1a:	4b58      	ldr	r3, [pc, #352]	@ (8001b7c <init_drivers+0x370>)
 8001a1c:	781a      	ldrb	r2, [r3, #0]
 8001a1e:	4b5a      	ldr	r3, [pc, #360]	@ (8001b88 <init_drivers+0x37c>)
 8001a20:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_LRA_settings, sizeof(set_LRA_settings), TIMEOUT) == HAL_OK){
 8001a22:	2364      	movs	r3, #100	@ 0x64
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2302      	movs	r3, #2
 8001a28:	4a58      	ldr	r2, [pc, #352]	@ (8001b8c <init_drivers+0x380>)
 8001a2a:	21b4      	movs	r1, #180	@ 0xb4
 8001a2c:	484d      	ldr	r0, [pc, #308]	@ (8001b64 <init_drivers+0x358>)
 8001a2e:	f001 f8ad 	bl	8002b8c <HAL_I2C_Master_Transmit>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <init_drivers+0x232>
			a++;
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_timing, sizeof(set_timing), TIMEOUT) == HAL_OK){
 8001a3e:	2364      	movs	r3, #100	@ 0x64
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2302      	movs	r3, #2
 8001a44:	4a52      	ldr	r2, [pc, #328]	@ (8001b90 <init_drivers+0x384>)
 8001a46:	21b4      	movs	r1, #180	@ 0xb4
 8001a48:	4846      	ldr	r0, [pc, #280]	@ (8001b64 <init_drivers+0x358>)
 8001a4a:	f001 f89f 	bl	8002b8c <HAL_I2C_Master_Transmit>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <init_drivers+0x24e>
			a++;
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	3301      	adds	r3, #1
 8001a58:	60bb      	str	r3, [r7, #8]
		}

		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_Control3, sizeof(set_Control3), TIMEOUT) == HAL_OK){
 8001a5a:	2364      	movs	r3, #100	@ 0x64
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2302      	movs	r3, #2
 8001a60:	4a4c      	ldr	r2, [pc, #304]	@ (8001b94 <init_drivers+0x388>)
 8001a62:	21b4      	movs	r1, #180	@ 0xb4
 8001a64:	483f      	ldr	r0, [pc, #252]	@ (8001b64 <init_drivers+0x358>)
 8001a66:	f001 f891 	bl	8002b8c <HAL_I2C_Master_Transmit>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d102      	bne.n	8001a76 <init_drivers+0x26a>
			a++;
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	3301      	adds	r3, #1
 8001a74:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_library, sizeof(set_library), TIMEOUT) == HAL_OK){
 8001a76:	2364      	movs	r3, #100	@ 0x64
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	4a46      	ldr	r2, [pc, #280]	@ (8001b98 <init_drivers+0x38c>)
 8001a7e:	21b4      	movs	r1, #180	@ 0xb4
 8001a80:	4838      	ldr	r0, [pc, #224]	@ (8001b64 <init_drivers+0x358>)
 8001a82:	f001 f883 	bl	8002b8c <HAL_I2C_Master_Transmit>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <init_drivers+0x286>
			a++;
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_mode, sizeof(set_mode), TIMEOUT) == HAL_OK){
 8001a92:	2364      	movs	r3, #100	@ 0x64
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	2302      	movs	r3, #2
 8001a98:	4a40      	ldr	r2, [pc, #256]	@ (8001b9c <init_drivers+0x390>)
 8001a9a:	21b4      	movs	r1, #180	@ 0xb4
 8001a9c:	4831      	ldr	r0, [pc, #196]	@ (8001b64 <init_drivers+0x358>)
 8001a9e:	f001 f875 	bl	8002b8c <HAL_I2C_Master_Transmit>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <init_drivers+0x2a2>
			a++;
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	60bb      	str	r3, [r7, #8]
		}

		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_period, sizeof(set_period), TIMEOUT) == HAL_OK){
 8001aae:	2364      	movs	r3, #100	@ 0x64
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	4a3a      	ldr	r2, [pc, #232]	@ (8001ba0 <init_drivers+0x394>)
 8001ab6:	21b4      	movs	r1, #180	@ 0xb4
 8001ab8:	482a      	ldr	r0, [pc, #168]	@ (8001b64 <init_drivers+0x358>)
 8001aba:	f001 f867 	bl	8002b8c <HAL_I2C_Master_Transmit>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <init_drivers+0x2be>
			a++;
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_waveform, sizeof(set_waveform), TIMEOUT) == HAL_OK){
 8001aca:	2364      	movs	r3, #100	@ 0x64
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2302      	movs	r3, #2
 8001ad0:	4a34      	ldr	r2, [pc, #208]	@ (8001ba4 <init_drivers+0x398>)
 8001ad2:	21b4      	movs	r1, #180	@ 0xb4
 8001ad4:	4823      	ldr	r0, [pc, #140]	@ (8001b64 <init_drivers+0x358>)
 8001ad6:	f001 f859 	bl	8002b8c <HAL_I2C_Master_Transmit>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <init_drivers+0x2da>
			a++;
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	60bb      	str	r3, [r7, #8]
		}
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_waveform2, sizeof(set_waveform), TIMEOUT) == HAL_OK){
 8001ae6:	2364      	movs	r3, #100	@ 0x64
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2302      	movs	r3, #2
 8001aec:	4a2e      	ldr	r2, [pc, #184]	@ (8001ba8 <init_drivers+0x39c>)
 8001aee:	21b4      	movs	r1, #180	@ 0xb4
 8001af0:	481c      	ldr	r0, [pc, #112]	@ (8001b64 <init_drivers+0x358>)
 8001af2:	f001 f84b 	bl	8002b8c <HAL_I2C_Master_Transmit>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <init_drivers+0x2f6>
			a++;
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	3301      	adds	r3, #1
 8001b00:	60bb      	str	r3, [r7, #8]
		}

		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, set_auto_OL, sizeof(set_auto_OL), TIMEOUT) == HAL_OK){
 8001b02:	2364      	movs	r3, #100	@ 0x64
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2302      	movs	r3, #2
 8001b08:	4a28      	ldr	r2, [pc, #160]	@ (8001bac <init_drivers+0x3a0>)
 8001b0a:	21b4      	movs	r1, #180	@ 0xb4
 8001b0c:	4815      	ldr	r0, [pc, #84]	@ (8001b64 <init_drivers+0x358>)
 8001b0e:	f001 f83d 	bl	8002b8c <HAL_I2C_Master_Transmit>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <init_drivers+0x312>
			a++;
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	60bb      	str	r3, [r7, #8]
		}

		// Send a trigger to have waveform while measuring resonance period
		// clear actual waveform with rising edge
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b24:	4822      	ldr	r0, [pc, #136]	@ (8001bb0 <init_drivers+0x3a4>)
 8001b26:	f000 fed3 	bl	80028d0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f000 f994 	bl	8001e58 <HAL_Delay>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, SET);
 8001b30:	2201      	movs	r2, #1
 8001b32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b36:	481e      	ldr	r0, [pc, #120]	@ (8001bb0 <init_drivers+0x3a4>)
 8001b38:	f000 feca 	bl	80028d0 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001b3c:	200a      	movs	r0, #10
 8001b3e:	f000 f98b 	bl	8001e58 <HAL_Delay>
		// set new waveform with rising edge
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b48:	4819      	ldr	r0, [pc, #100]	@ (8001bb0 <init_drivers+0x3a4>)
 8001b4a:	f000 fec1 	bl	80028d0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f000 f982 	bl	8001e58 <HAL_Delay>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, SET);
 8001b54:	2201      	movs	r2, #1
 8001b56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b5a:	e02b      	b.n	8001bb4 <init_drivers+0x3a8>
 8001b5c:	2000019b 	.word	0x2000019b
 8001b60:	20000020 	.word	0x20000020
 8001b64:	200000f4 	.word	0x200000f4
 8001b68:	20000038 	.word	0x20000038
 8001b6c:	2000001c 	.word	0x2000001c
 8001b70:	20000008 	.word	0x20000008
 8001b74:	20000010 	.word	0x20000010
 8001b78:	2000003c 	.word	0x2000003c
 8001b7c:	20000194 	.word	0x20000194
 8001b80:	2000019a 	.word	0x2000019a
 8001b84:	20000198 	.word	0x20000198
 8001b88:	20000199 	.word	0x20000199
 8001b8c:	20000018 	.word	0x20000018
 8001b90:	20000014 	.word	0x20000014
 8001b94:	2000000c 	.word	0x2000000c
 8001b98:	20000024 	.word	0x20000024
 8001b9c:	20000004 	.word	0x20000004
 8001ba0:	20000034 	.word	0x20000034
 8001ba4:	20000028 	.word	0x20000028
 8001ba8:	2000002c 	.word	0x2000002c
 8001bac:	20000030 	.word	0x20000030
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	481b      	ldr	r0, [pc, #108]	@ (8001c24 <init_drivers+0x418>)
 8001bb6:	f000 fe8b 	bl	80028d0 <HAL_GPIO_WritePin>
		reg = REG_LRA_RESONANCE_PERIOD;
 8001bba:	2322      	movs	r3, #34	@ 0x22
 8001bbc:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, &reg, 1, TIMEOUT);
 8001bbe:	1cfa      	adds	r2, r7, #3
 8001bc0:	2364      	movs	r3, #100	@ 0x64
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	21b4      	movs	r1, #180	@ 0xb4
 8001bc8:	4817      	ldr	r0, [pc, #92]	@ (8001c28 <init_drivers+0x41c>)
 8001bca:	f000 ffdf 	bl	8002b8c <HAL_I2C_Master_Transmit>
		if(HAL_I2C_Master_Receive(&hi2c1, DEV_ADDRESS, Buf, 1, TIMEOUT) == HAL_OK){
 8001bce:	2364      	movs	r3, #100	@ 0x64
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	4a15      	ldr	r2, [pc, #84]	@ (8001c2c <init_drivers+0x420>)
 8001bd6:	21b4      	movs	r1, #180	@ 0xb4
 8001bd8:	4813      	ldr	r0, [pc, #76]	@ (8001c28 <init_drivers+0x41c>)
 8001bda:	f001 f8d5 	bl	8002d88 <HAL_I2C_Master_Receive>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d103      	bne.n	8001bec <init_drivers+0x3e0>
			LRA_period = Buf[0];
 8001be4:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <init_drivers+0x420>)
 8001be6:	781a      	ldrb	r2, [r3, #0]
 8001be8:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <init_drivers+0x424>)
 8001bea:	701a      	strb	r2, [r3, #0]
		}

		// Set all actuators to 0V (Resolution test)
		uint8_t send[2] = {REG_RATED_VOLTAGE, 0};
 8001bec:	2316      	movs	r3, #22
 8001bee:	803b      	strh	r3, [r7, #0]
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, send, sizeof(send), TIMEOUT) == HAL_OK){
 8001bf0:	463a      	mov	r2, r7
 8001bf2:	2364      	movs	r3, #100	@ 0x64
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	21b4      	movs	r1, #180	@ 0xb4
 8001bfa:	480b      	ldr	r0, [pc, #44]	@ (8001c28 <init_drivers+0x41c>)
 8001bfc:	f000 ffc6 	bl	8002b8c <HAL_I2C_Master_Transmit>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <init_drivers+0x3fe>
			int a = 1;
 8001c06:	2301      	movs	r3, #1
 8001c08:	607b      	str	r3, [r7, #4]
	for(uint8_t i=0; i<NUM_ACTUATORS; i++){
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	2b0f      	cmp	r3, #15
 8001c14:	f67f ae3a 	bls.w	800188c <init_drivers+0x80>
		}
	}
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40020000 	.word	0x40020000
 8001c28:	200000f4 	.word	0x200000f4
 8001c2c:	20000194 	.word	0x20000194
 8001c30:	2000019c 	.word	0x2000019c

08001c34 <set_amplitude>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		12.03.2025	FL	Created
 ****************************************************************************/
void set_amplitude(double *amplitudes){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	6078      	str	r0, [r7, #4]
	uint8_t value = amplitudes[0];
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7fe feab 	bl	80009a0 <__aeabi_d2uiz>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	74fb      	strb	r3, [r7, #19]

	for(int i=0; i<NUM_ACTUATORS; i++){
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e025      	b.n	8001ca0 <set_amplitude+0x6c>
		select_driver(i);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 f82b 	bl	8001cb4 <select_driver>
		value = (uint8_t)(amplitudes[i]); // calculation: datasheet p.21
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f7fe fe97 	bl	80009a0 <__aeabi_d2uiz>
 8001c72:	4603      	mov	r3, r0
 8001c74:	74fb      	strb	r3, [r7, #19]
		uint8_t send[2] = {REG_RATED_VOLTAGE, value};
 8001c76:	2316      	movs	r3, #22
 8001c78:	723b      	strb	r3, [r7, #8]
 8001c7a:	7cfb      	ldrb	r3, [r7, #19]
 8001c7c:	727b      	strb	r3, [r7, #9]
		if(HAL_I2C_Master_Transmit(&hi2c1, DEV_ADDRESS, send, sizeof(send), TIMEOUT) == HAL_OK){
 8001c7e:	f107 0208 	add.w	r2, r7, #8
 8001c82:	2364      	movs	r3, #100	@ 0x64
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	2302      	movs	r3, #2
 8001c88:	21b4      	movs	r1, #180	@ 0xb4
 8001c8a:	4809      	ldr	r0, [pc, #36]	@ (8001cb0 <set_amplitude+0x7c>)
 8001c8c:	f000 ff7e 	bl	8002b8c <HAL_I2C_Master_Transmit>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <set_amplitude+0x66>
			int a = 1;
 8001c96:	2301      	movs	r3, #1
 8001c98:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<NUM_ACTUATORS; i++){
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2b0f      	cmp	r3, #15
 8001ca4:	ddd6      	ble.n	8001c54 <set_amplitude+0x20>
		}
	}
}
 8001ca6:	bf00      	nop
 8001ca8:	bf00      	nop
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	200000f4 	.word	0x200000f4

08001cb4 <select_driver>:
 *
 *
 * @author		Francis Liechti (FL)
 * @date		12.03.2025	FL	Created
 ****************************************************************************/
void select_driver(uint8_t number){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
	int a = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
	uint8_t value = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	72fb      	strb	r3, [r7, #11]
	// Disable other MUX if necessary
	if(number == 0){
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10e      	bne.n	8001cea <select_driver+0x36>
		if(HAL_I2C_Master_Transmit(&hi2c1, SWITCH_ADDRESS_2, &value, sizeof(value), TIMEOUT) == HAL_OK){
 8001ccc:	f107 020b 	add.w	r2, r7, #11
 8001cd0:	2364      	movs	r3, #100	@ 0x64
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	21e2      	movs	r1, #226	@ 0xe2
 8001cd8:	4825      	ldr	r0, [pc, #148]	@ (8001d70 <select_driver+0xbc>)
 8001cda:	f000 ff57 	bl	8002b8c <HAL_I2C_Master_Transmit>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d113      	bne.n	8001d0c <select_driver+0x58>
			a = 1;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	e010      	b.n	8001d0c <select_driver+0x58>
		}
	} else if(number == 8){
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d10d      	bne.n	8001d0c <select_driver+0x58>
		if(HAL_I2C_Master_Transmit(&hi2c1, SWITCH_ADDRESS_1, &value, sizeof(value), TIMEOUT) == HAL_OK){
 8001cf0:	f107 020b 	add.w	r2, r7, #11
 8001cf4:	2364      	movs	r3, #100	@ 0x64
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	21e0      	movs	r1, #224	@ 0xe0
 8001cfc:	481c      	ldr	r0, [pc, #112]	@ (8001d70 <select_driver+0xbc>)
 8001cfe:	f000 ff45 	bl	8002b8c <HAL_I2C_Master_Transmit>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <select_driver+0x58>
			a = 1;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
		}
	}

	if(number<8){
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	2b07      	cmp	r3, #7
 8001d10:	d814      	bhi.n	8001d3c <select_driver+0x88>
		value = 1<<number;
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	2201      	movs	r2, #1
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	72fb      	strb	r3, [r7, #11]
		if(HAL_I2C_Master_Transmit(&hi2c1, SWITCH_ADDRESS_1, &value, sizeof(value), TIMEOUT) == HAL_OK){
 8001d1e:	f107 020b 	add.w	r2, r7, #11
 8001d22:	2364      	movs	r3, #100	@ 0x64
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2301      	movs	r3, #1
 8001d28:	21e0      	movs	r1, #224	@ 0xe0
 8001d2a:	4811      	ldr	r0, [pc, #68]	@ (8001d70 <select_driver+0xbc>)
 8001d2c:	f000 ff2e 	bl	8002b8c <HAL_I2C_Master_Transmit>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d117      	bne.n	8001d66 <select_driver+0xb2>
			a = 1;
 8001d36:	2301      	movs	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
		value = 1<<(number-8);
		if(HAL_I2C_Master_Transmit(&hi2c1, SWITCH_ADDRESS_2, &value, sizeof(value), TIMEOUT) == HAL_OK){
			a = 1;
		}
	}
}
 8001d3a:	e014      	b.n	8001d66 <select_driver+0xb2>
		value = 1<<(number-8);
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	3b08      	subs	r3, #8
 8001d40:	2201      	movs	r2, #1
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	72fb      	strb	r3, [r7, #11]
		if(HAL_I2C_Master_Transmit(&hi2c1, SWITCH_ADDRESS_2, &value, sizeof(value), TIMEOUT) == HAL_OK){
 8001d4a:	f107 020b 	add.w	r2, r7, #11
 8001d4e:	2364      	movs	r3, #100	@ 0x64
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2301      	movs	r3, #1
 8001d54:	21e2      	movs	r1, #226	@ 0xe2
 8001d56:	4806      	ldr	r0, [pc, #24]	@ (8001d70 <select_driver+0xbc>)
 8001d58:	f000 ff18 	bl	8002b8c <HAL_I2C_Master_Transmit>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <select_driver+0xb2>
			a = 1;
 8001d62:	2301      	movs	r3, #1
 8001d64:	60fb      	str	r3, [r7, #12]
}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200000f4 	.word	0x200000f4

08001d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d78:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001db4 <HAL_Init+0x40>)
 8001d7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d84:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <HAL_Init+0x40>)
 8001d8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d90:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <HAL_Init+0x40>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a07      	ldr	r2, [pc, #28]	@ (8001db4 <HAL_Init+0x40>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	f000 fbc1 	bl	8002524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da2:	200f      	movs	r0, #15
 8001da4:	f000 f808 	bl	8001db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da8:	f7ff fc34 	bl	8001614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023c00 	.word	0x40023c00

08001db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc0:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <HAL_InitTick+0x54>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <HAL_InitTick+0x58>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 fbd9 	bl	800258e <HAL_SYSTICK_Config>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00e      	b.n	8001e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d80a      	bhi.n	8001e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dec:	2200      	movs	r2, #0
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f000 fba1 	bl	800253a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df8:	4a06      	ldr	r2, [pc, #24]	@ (8001e14 <HAL_InitTick+0x5c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e000      	b.n	8001e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000044 	.word	0x20000044
 8001e14:	20000040 	.word	0x20000040

08001e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_IncTick+0x20>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_IncTick+0x24>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <HAL_IncTick+0x24>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000044 	.word	0x20000044
 8001e3c:	200001a0 	.word	0x200001a0

08001e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b03      	ldr	r3, [pc, #12]	@ (8001e54 <HAL_GetTick+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	200001a0 	.word	0x200001a0

08001e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff ffee 	bl	8001e40 <HAL_GetTick>
 8001e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d005      	beq.n	8001e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <HAL_Delay+0x44>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e7e:	bf00      	nop
 8001e80:	f7ff ffde 	bl	8001e40 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d8f7      	bhi.n	8001e80 <HAL_Delay+0x28>
  {
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000044 	.word	0x20000044

08001ea0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e033      	b.n	8001f1e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d109      	bne.n	8001ed2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe ffaa 	bl	8000e18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d118      	bne.n	8001f10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ee6:	f023 0302 	bic.w	r3, r3, #2
 8001eea:	f043 0202 	orr.w	r2, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f94a 	bl	800218c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f023 0303 	bic.w	r3, r3, #3
 8001f06:	f043 0201 	orr.w	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f0e:	e001      	b.n	8001f14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x1c>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e113      	b.n	800216c <HAL_ADC_ConfigChannel+0x244>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b09      	cmp	r3, #9
 8001f52:	d925      	bls.n	8001fa0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68d9      	ldr	r1, [r3, #12]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	3b1e      	subs	r3, #30
 8001f6a:	2207      	movs	r2, #7
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43da      	mvns	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	400a      	ands	r2, r1
 8001f78:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68d9      	ldr	r1, [r3, #12]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4403      	add	r3, r0
 8001f92:	3b1e      	subs	r3, #30
 8001f94:	409a      	lsls	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	e022      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6919      	ldr	r1, [r3, #16]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6919      	ldr	r1, [r3, #16]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4403      	add	r3, r0
 8001fdc:	409a      	lsls	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d824      	bhi.n	8002038 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3b05      	subs	r3, #5
 8002000:	221f      	movs	r2, #31
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43da      	mvns	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	400a      	ands	r2, r1
 800200e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	4618      	mov	r0, r3
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	3b05      	subs	r3, #5
 800202a:	fa00 f203 	lsl.w	r2, r0, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	635a      	str	r2, [r3, #52]	@ 0x34
 8002036:	e04c      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b0c      	cmp	r3, #12
 800203e:	d824      	bhi.n	800208a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	3b23      	subs	r3, #35	@ 0x23
 8002052:	221f      	movs	r2, #31
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43da      	mvns	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	400a      	ands	r2, r1
 8002060:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	b29b      	uxth	r3, r3
 800206e:	4618      	mov	r0, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	3b23      	subs	r3, #35	@ 0x23
 800207c:	fa00 f203 	lsl.w	r2, r0, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	631a      	str	r2, [r3, #48]	@ 0x30
 8002088:	e023      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	3b41      	subs	r3, #65	@ 0x41
 800209c:	221f      	movs	r2, #31
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	400a      	ands	r2, r1
 80020aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	4618      	mov	r0, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	3b41      	subs	r3, #65	@ 0x41
 80020c6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020d2:	4b29      	ldr	r3, [pc, #164]	@ (8002178 <HAL_ADC_ConfigChannel+0x250>)
 80020d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a28      	ldr	r2, [pc, #160]	@ (800217c <HAL_ADC_ConfigChannel+0x254>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d10f      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1d8>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b12      	cmp	r3, #18
 80020e6:	d10b      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1d      	ldr	r2, [pc, #116]	@ (800217c <HAL_ADC_ConfigChannel+0x254>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d12b      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x23a>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a1c      	ldr	r2, [pc, #112]	@ (8002180 <HAL_ADC_ConfigChannel+0x258>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d003      	beq.n	800211c <HAL_ADC_ConfigChannel+0x1f4>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b11      	cmp	r3, #17
 800211a:	d122      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a11      	ldr	r2, [pc, #68]	@ (8002180 <HAL_ADC_ConfigChannel+0x258>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d111      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800213e:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <HAL_ADC_ConfigChannel+0x25c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a11      	ldr	r2, [pc, #68]	@ (8002188 <HAL_ADC_ConfigChannel+0x260>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	0c9a      	lsrs	r2, r3, #18
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002154:	e002      	b.n	800215c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	3b01      	subs	r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f9      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40012300 	.word	0x40012300
 800217c:	40012000 	.word	0x40012000
 8002180:	10000012 	.word	0x10000012
 8002184:	20000000 	.word	0x20000000
 8002188:	431bde83 	.word	0x431bde83

0800218c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002194:	4b79      	ldr	r3, [pc, #484]	@ (800237c <ADC_Init+0x1f0>)
 8002196:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	431a      	orrs	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	021a      	lsls	r2, r3, #8
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80021e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002206:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6899      	ldr	r1, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221e:	4a58      	ldr	r2, [pc, #352]	@ (8002380 <ADC_Init+0x1f4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d022      	beq.n	800226a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002232:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6899      	ldr	r1, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002254:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6899      	ldr	r1, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	e00f      	b.n	800228a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002278:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002288:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0202 	bic.w	r2, r2, #2
 8002298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6899      	ldr	r1, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7e1b      	ldrb	r3, [r3, #24]
 80022a4:	005a      	lsls	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d01b      	beq.n	80022f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022c6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80022d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6859      	ldr	r1, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	3b01      	subs	r3, #1
 80022e4:	035a      	lsls	r2, r3, #13
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	e007      	b.n	8002300 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022fe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800230e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	3b01      	subs	r3, #1
 800231c:	051a      	lsls	r2, r3, #20
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002334:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6899      	ldr	r1, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002342:	025a      	lsls	r2, r3, #9
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800235a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6899      	ldr	r1, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	029a      	lsls	r2, r3, #10
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	609a      	str	r2, [r3, #8]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40012300 	.word	0x40012300
 8002380:	0f000001 	.word	0x0f000001

08002384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002394:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023a0:	4013      	ands	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b6:	4a04      	ldr	r2, [pc, #16]	@ (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	60d3      	str	r3, [r2, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d0:	4b04      	ldr	r3, [pc, #16]	@ (80023e4 <__NVIC_GetPriorityGrouping+0x18>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	f003 0307 	and.w	r3, r3, #7
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	db0b      	blt.n	8002412 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	4907      	ldr	r1, [pc, #28]	@ (8002420 <__NVIC_EnableIRQ+0x38>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2001      	movs	r0, #1
 800240a:	fa00 f202 	lsl.w	r2, r0, r2
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000e100 	.word	0xe000e100

08002424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	2b00      	cmp	r3, #0
 8002436:	db0a      	blt.n	800244e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	490c      	ldr	r1, [pc, #48]	@ (8002470 <__NVIC_SetPriority+0x4c>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	0112      	lsls	r2, r2, #4
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	440b      	add	r3, r1
 8002448:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800244c:	e00a      	b.n	8002464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4908      	ldr	r1, [pc, #32]	@ (8002474 <__NVIC_SetPriority+0x50>)
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	3b04      	subs	r3, #4
 800245c:	0112      	lsls	r2, r2, #4
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	440b      	add	r3, r1
 8002462:	761a      	strb	r2, [r3, #24]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000e100 	.word	0xe000e100
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	@ 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f1c3 0307 	rsb	r3, r3, #7
 8002492:	2b04      	cmp	r3, #4
 8002494:	bf28      	it	cs
 8002496:	2304      	movcs	r3, #4
 8002498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3304      	adds	r3, #4
 800249e:	2b06      	cmp	r3, #6
 80024a0:	d902      	bls.n	80024a8 <NVIC_EncodePriority+0x30>
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3b03      	subs	r3, #3
 80024a6:	e000      	b.n	80024aa <NVIC_EncodePriority+0x32>
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	401a      	ands	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	43d9      	mvns	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	4313      	orrs	r3, r2
         );
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3724      	adds	r7, #36	@ 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024f0:	d301      	bcc.n	80024f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00f      	b.n	8002516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002520 <SysTick_Config+0x40>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fe:	210f      	movs	r1, #15
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	f7ff ff8e 	bl	8002424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002508:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <SysTick_Config+0x40>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250e:	4b04      	ldr	r3, [pc, #16]	@ (8002520 <SysTick_Config+0x40>)
 8002510:	2207      	movs	r2, #7
 8002512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	e000e010 	.word	0xe000e010

08002524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ff29 	bl	8002384 <__NVIC_SetPriorityGrouping>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	4603      	mov	r3, r0
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800254c:	f7ff ff3e 	bl	80023cc <__NVIC_GetPriorityGrouping>
 8002550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	6978      	ldr	r0, [r7, #20]
 8002558:	f7ff ff8e 	bl	8002478 <NVIC_EncodePriority>
 800255c:	4602      	mov	r2, r0
 800255e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff5d 	bl	8002424 <__NVIC_SetPriority>
}
 800256a:	bf00      	nop
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	4603      	mov	r3, r0
 800257a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800257c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff31 	bl	80023e8 <__NVIC_EnableIRQ>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ffa2 	bl	80024e0 <SysTick_Config>
 800259c:	4603      	mov	r3, r0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b089      	sub	sp, #36	@ 0x24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	e165      	b.n	8002890 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025c4:	2201      	movs	r2, #1
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	429a      	cmp	r2, r3
 80025de:	f040 8154 	bne.w	800288a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d005      	beq.n	80025fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d130      	bne.n	800265c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	2203      	movs	r2, #3
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002630:	2201      	movs	r2, #1
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 0201 	and.w	r2, r3, #1
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b03      	cmp	r3, #3
 8002666:	d017      	beq.n	8002698 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	2203      	movs	r2, #3
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d123      	bne.n	80026ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	08da      	lsrs	r2, r3, #3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3208      	adds	r2, #8
 80026ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	220f      	movs	r2, #15
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	08da      	lsrs	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3208      	adds	r2, #8
 80026e6:	69b9      	ldr	r1, [r7, #24]
 80026e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2203      	movs	r2, #3
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0203 	and.w	r2, r3, #3
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80ae 	beq.w	800288a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	4b5d      	ldr	r3, [pc, #372]	@ (80028a8 <HAL_GPIO_Init+0x300>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002736:	4a5c      	ldr	r2, [pc, #368]	@ (80028a8 <HAL_GPIO_Init+0x300>)
 8002738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800273c:	6453      	str	r3, [r2, #68]	@ 0x44
 800273e:	4b5a      	ldr	r3, [pc, #360]	@ (80028a8 <HAL_GPIO_Init+0x300>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800274a:	4a58      	ldr	r2, [pc, #352]	@ (80028ac <HAL_GPIO_Init+0x304>)
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	089b      	lsrs	r3, r3, #2
 8002750:	3302      	adds	r3, #2
 8002752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	220f      	movs	r2, #15
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a4f      	ldr	r2, [pc, #316]	@ (80028b0 <HAL_GPIO_Init+0x308>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d025      	beq.n	80027c2 <HAL_GPIO_Init+0x21a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a4e      	ldr	r2, [pc, #312]	@ (80028b4 <HAL_GPIO_Init+0x30c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d01f      	beq.n	80027be <HAL_GPIO_Init+0x216>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a4d      	ldr	r2, [pc, #308]	@ (80028b8 <HAL_GPIO_Init+0x310>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d019      	beq.n	80027ba <HAL_GPIO_Init+0x212>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a4c      	ldr	r2, [pc, #304]	@ (80028bc <HAL_GPIO_Init+0x314>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d013      	beq.n	80027b6 <HAL_GPIO_Init+0x20e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a4b      	ldr	r2, [pc, #300]	@ (80028c0 <HAL_GPIO_Init+0x318>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00d      	beq.n	80027b2 <HAL_GPIO_Init+0x20a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a4a      	ldr	r2, [pc, #296]	@ (80028c4 <HAL_GPIO_Init+0x31c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d007      	beq.n	80027ae <HAL_GPIO_Init+0x206>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a49      	ldr	r2, [pc, #292]	@ (80028c8 <HAL_GPIO_Init+0x320>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d101      	bne.n	80027aa <HAL_GPIO_Init+0x202>
 80027a6:	2306      	movs	r3, #6
 80027a8:	e00c      	b.n	80027c4 <HAL_GPIO_Init+0x21c>
 80027aa:	2307      	movs	r3, #7
 80027ac:	e00a      	b.n	80027c4 <HAL_GPIO_Init+0x21c>
 80027ae:	2305      	movs	r3, #5
 80027b0:	e008      	b.n	80027c4 <HAL_GPIO_Init+0x21c>
 80027b2:	2304      	movs	r3, #4
 80027b4:	e006      	b.n	80027c4 <HAL_GPIO_Init+0x21c>
 80027b6:	2303      	movs	r3, #3
 80027b8:	e004      	b.n	80027c4 <HAL_GPIO_Init+0x21c>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e002      	b.n	80027c4 <HAL_GPIO_Init+0x21c>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <HAL_GPIO_Init+0x21c>
 80027c2:	2300      	movs	r3, #0
 80027c4:	69fa      	ldr	r2, [r7, #28]
 80027c6:	f002 0203 	and.w	r2, r2, #3
 80027ca:	0092      	lsls	r2, r2, #2
 80027cc:	4093      	lsls	r3, r2
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d4:	4935      	ldr	r1, [pc, #212]	@ (80028ac <HAL_GPIO_Init+0x304>)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	089b      	lsrs	r3, r3, #2
 80027da:	3302      	adds	r3, #2
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027e2:	4b3a      	ldr	r3, [pc, #232]	@ (80028cc <HAL_GPIO_Init+0x324>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002806:	4a31      	ldr	r2, [pc, #196]	@ (80028cc <HAL_GPIO_Init+0x324>)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800280c:	4b2f      	ldr	r3, [pc, #188]	@ (80028cc <HAL_GPIO_Init+0x324>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002830:	4a26      	ldr	r2, [pc, #152]	@ (80028cc <HAL_GPIO_Init+0x324>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002836:	4b25      	ldr	r3, [pc, #148]	@ (80028cc <HAL_GPIO_Init+0x324>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800285a:	4a1c      	ldr	r2, [pc, #112]	@ (80028cc <HAL_GPIO_Init+0x324>)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002860:	4b1a      	ldr	r3, [pc, #104]	@ (80028cc <HAL_GPIO_Init+0x324>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002884:	4a11      	ldr	r2, [pc, #68]	@ (80028cc <HAL_GPIO_Init+0x324>)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3301      	adds	r3, #1
 800288e:	61fb      	str	r3, [r7, #28]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	2b0f      	cmp	r3, #15
 8002894:	f67f ae96 	bls.w	80025c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	3724      	adds	r7, #36	@ 0x24
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40013800 	.word	0x40013800
 80028b0:	40020000 	.word	0x40020000
 80028b4:	40020400 	.word	0x40020400
 80028b8:	40020800 	.word	0x40020800
 80028bc:	40020c00 	.word	0x40020c00
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40021400 	.word	0x40021400
 80028c8:	40021800 	.word	0x40021800
 80028cc:	40013c00 	.word	0x40013c00

080028d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]
 80028dc:	4613      	mov	r3, r2
 80028de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e0:	787b      	ldrb	r3, [r7, #1]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028ec:	e003      	b.n	80028f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ee:	887b      	ldrh	r3, [r7, #2]
 80028f0:	041a      	lsls	r2, r3, #16
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	619a      	str	r2, [r3, #24]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e12b      	b.n	8002b6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7fe fb98 	bl	8001060 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2224      	movs	r2, #36	@ 0x24
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0201 	bic.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002956:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002966:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002968:	f001 f8b8 	bl	8003adc <HAL_RCC_GetPCLK1Freq>
 800296c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4a81      	ldr	r2, [pc, #516]	@ (8002b78 <HAL_I2C_Init+0x274>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d807      	bhi.n	8002988 <HAL_I2C_Init+0x84>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4a80      	ldr	r2, [pc, #512]	@ (8002b7c <HAL_I2C_Init+0x278>)
 800297c:	4293      	cmp	r3, r2
 800297e:	bf94      	ite	ls
 8002980:	2301      	movls	r3, #1
 8002982:	2300      	movhi	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	e006      	b.n	8002996 <HAL_I2C_Init+0x92>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a7d      	ldr	r2, [pc, #500]	@ (8002b80 <HAL_I2C_Init+0x27c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	bf94      	ite	ls
 8002990:	2301      	movls	r3, #1
 8002992:	2300      	movhi	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0e7      	b.n	8002b6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4a78      	ldr	r2, [pc, #480]	@ (8002b84 <HAL_I2C_Init+0x280>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	0c9b      	lsrs	r3, r3, #18
 80029a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002b78 <HAL_I2C_Init+0x274>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d802      	bhi.n	80029d8 <HAL_I2C_Init+0xd4>
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	3301      	adds	r3, #1
 80029d6:	e009      	b.n	80029ec <HAL_I2C_Init+0xe8>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029de:	fb02 f303 	mul.w	r3, r2, r3
 80029e2:	4a69      	ldr	r2, [pc, #420]	@ (8002b88 <HAL_I2C_Init+0x284>)
 80029e4:	fba2 2303 	umull	r2, r3, r2, r3
 80029e8:	099b      	lsrs	r3, r3, #6
 80029ea:	3301      	adds	r3, #1
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	430b      	orrs	r3, r1
 80029f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	495c      	ldr	r1, [pc, #368]	@ (8002b78 <HAL_I2C_Init+0x274>)
 8002a08:	428b      	cmp	r3, r1
 8002a0a:	d819      	bhi.n	8002a40 <HAL_I2C_Init+0x13c>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1e59      	subs	r1, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a1a:	1c59      	adds	r1, r3, #1
 8002a1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a20:	400b      	ands	r3, r1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_I2C_Init+0x138>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1e59      	subs	r1, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a34:	3301      	adds	r3, #1
 8002a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a3a:	e051      	b.n	8002ae0 <HAL_I2C_Init+0x1dc>
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	e04f      	b.n	8002ae0 <HAL_I2C_Init+0x1dc>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d111      	bne.n	8002a6c <HAL_I2C_Init+0x168>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1e58      	subs	r0, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	440b      	add	r3, r1
 8002a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	e012      	b.n	8002a92 <HAL_I2C_Init+0x18e>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1e58      	subs	r0, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	0099      	lsls	r1, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a82:	3301      	adds	r3, #1
 8002a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_Init+0x196>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e022      	b.n	8002ae0 <HAL_I2C_Init+0x1dc>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10e      	bne.n	8002ac0 <HAL_I2C_Init+0x1bc>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1e58      	subs	r0, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6859      	ldr	r1, [r3, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	440b      	add	r3, r1
 8002ab0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002abe:	e00f      	b.n	8002ae0 <HAL_I2C_Init+0x1dc>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1e58      	subs	r0, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	0099      	lsls	r1, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002adc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	6809      	ldr	r1, [r1, #0]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6911      	ldr	r1, [r2, #16]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68d2      	ldr	r2, [r2, #12]
 8002b1a:	4311      	orrs	r1, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	000186a0 	.word	0x000186a0
 8002b7c:	001e847f 	.word	0x001e847f
 8002b80:	003d08ff 	.word	0x003d08ff
 8002b84:	431bde83 	.word	0x431bde83
 8002b88:	10624dd3 	.word	0x10624dd3

08002b8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	607a      	str	r2, [r7, #4]
 8002b96:	461a      	mov	r2, r3
 8002b98:	460b      	mov	r3, r1
 8002b9a:	817b      	strh	r3, [r7, #10]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ba0:	f7ff f94e 	bl	8001e40 <HAL_GetTick>
 8002ba4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	f040 80e0 	bne.w	8002d74 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	2319      	movs	r3, #25
 8002bba:	2201      	movs	r2, #1
 8002bbc:	4970      	ldr	r1, [pc, #448]	@ (8002d80 <HAL_I2C_Master_Transmit+0x1f4>)
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 fc64 	bl	800348c <I2C_WaitOnFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e0d3      	b.n	8002d76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_I2C_Master_Transmit+0x50>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e0cc      	b.n	8002d76 <HAL_I2C_Master_Transmit+0x1ea>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d007      	beq.n	8002c02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0201 	orr.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2221      	movs	r2, #33	@ 0x21
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2210      	movs	r2, #16
 8002c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	893a      	ldrh	r2, [r7, #8]
 8002c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4a50      	ldr	r2, [pc, #320]	@ (8002d84 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c42:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c44:	8979      	ldrh	r1, [r7, #10]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	6a3a      	ldr	r2, [r7, #32]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 face 	bl	80031ec <I2C_MasterRequestWrite>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e08d      	b.n	8002d76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c70:	e066      	b.n	8002d40 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	6a39      	ldr	r1, [r7, #32]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 fd22 	bl	80036c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d107      	bne.n	8002c9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e06b      	b.n	8002d76 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d11b      	bne.n	8002d14 <HAL_I2C_Master_Transmit+0x188>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d017      	beq.n	8002d14 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	6a39      	ldr	r1, [r7, #32]
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 fd19 	bl	8003750 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00d      	beq.n	8002d40 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d107      	bne.n	8002d3c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d3a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e01a      	b.n	8002d76 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d194      	bne.n	8002c72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e000      	b.n	8002d76 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
  }
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	00100002 	.word	0x00100002
 8002d84:	ffff0000 	.word	0xffff0000

08002d88 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08c      	sub	sp, #48	@ 0x30
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	461a      	mov	r2, r3
 8002d94:	460b      	mov	r3, r1
 8002d96:	817b      	strh	r3, [r7, #10]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d9c:	f7ff f850 	bl	8001e40 <HAL_GetTick>
 8002da0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	f040 8217 	bne.w	80031de <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	2319      	movs	r3, #25
 8002db6:	2201      	movs	r2, #1
 8002db8:	497c      	ldr	r1, [pc, #496]	@ (8002fac <HAL_I2C_Master_Receive+0x224>)
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 fb66 	bl	800348c <I2C_WaitOnFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e20a      	b.n	80031e0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_I2C_Master_Receive+0x50>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e203      	b.n	80031e0 <HAL_I2C_Master_Receive+0x458>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d007      	beq.n	8002dfe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0201 	orr.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2222      	movs	r2, #34	@ 0x22
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2210      	movs	r2, #16
 8002e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	893a      	ldrh	r2, [r7, #8]
 8002e2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4a5c      	ldr	r2, [pc, #368]	@ (8002fb0 <HAL_I2C_Master_Receive+0x228>)
 8002e3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e40:	8979      	ldrh	r1, [r7, #10]
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 fa52 	bl	80032f0 <I2C_MasterRequestRead>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e1c4      	b.n	80031e0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d113      	bne.n	8002e86 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5e:	2300      	movs	r3, #0
 8002e60:	623b      	str	r3, [r7, #32]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	623b      	str	r3, [r7, #32]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	623b      	str	r3, [r7, #32]
 8002e72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	e198      	b.n	80031b8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d11b      	bne.n	8002ec6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	61fb      	str	r3, [r7, #28]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	61fb      	str	r3, [r7, #28]
 8002eb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	e178      	b.n	80031b8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d11b      	bne.n	8002f06 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002edc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	e158      	b.n	80031b8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f2c:	e144      	b.n	80031b8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	f200 80f1 	bhi.w	800311a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d123      	bne.n	8002f88 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f42:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 fc4b 	bl	80037e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e145      	b.n	80031e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691a      	ldr	r2, [r3, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f86:	e117      	b.n	80031b8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d14e      	bne.n	800302e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f96:	2200      	movs	r2, #0
 8002f98:	4906      	ldr	r1, [pc, #24]	@ (8002fb4 <HAL_I2C_Master_Receive+0x22c>)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fa76 	bl	800348c <I2C_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d008      	beq.n	8002fb8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e11a      	b.n	80031e0 <HAL_I2C_Master_Receive+0x458>
 8002faa:	bf00      	nop
 8002fac:	00100002 	.word	0x00100002
 8002fb0:	ffff0000 	.word	0xffff0000
 8002fb4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800302c:	e0c4      	b.n	80031b8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003034:	2200      	movs	r2, #0
 8003036:	496c      	ldr	r1, [pc, #432]	@ (80031e8 <HAL_I2C_Master_Receive+0x460>)
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 fa27 	bl	800348c <I2C_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0cb      	b.n	80031e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003090:	2200      	movs	r2, #0
 8003092:	4955      	ldr	r1, [pc, #340]	@ (80031e8 <HAL_I2C_Master_Receive+0x460>)
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 f9f9 	bl	800348c <I2C_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e09d      	b.n	80031e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003118:	e04e      	b.n	80031b8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800311a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800311c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 fb5e 	bl	80037e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e058      	b.n	80031e0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b04      	cmp	r3, #4
 800316c:	d124      	bne.n	80031b8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003172:	2b03      	cmp	r3, #3
 8003174:	d107      	bne.n	8003186 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003184:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f47f aeb6 	bne.w	8002f2e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	e000      	b.n	80031e0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80031de:	2302      	movs	r3, #2
  }
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3728      	adds	r7, #40	@ 0x28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	00010004 	.word	0x00010004

080031ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	460b      	mov	r3, r1
 80031fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003200:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b08      	cmp	r3, #8
 8003206:	d006      	beq.n	8003216 <I2C_MasterRequestWrite+0x2a>
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d003      	beq.n	8003216 <I2C_MasterRequestWrite+0x2a>
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003214:	d108      	bne.n	8003228 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	e00b      	b.n	8003240 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322c:	2b12      	cmp	r3, #18
 800322e:	d107      	bne.n	8003240 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800323e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f91d 	bl	800348c <I2C_WaitOnFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00d      	beq.n	8003274 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003266:	d103      	bne.n	8003270 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800326e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e035      	b.n	80032e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800327c:	d108      	bne.n	8003290 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800327e:	897b      	ldrh	r3, [r7, #10]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800328c:	611a      	str	r2, [r3, #16]
 800328e:	e01b      	b.n	80032c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003290:	897b      	ldrh	r3, [r7, #10]
 8003292:	11db      	asrs	r3, r3, #7
 8003294:	b2db      	uxtb	r3, r3
 8003296:	f003 0306 	and.w	r3, r3, #6
 800329a:	b2db      	uxtb	r3, r3
 800329c:	f063 030f 	orn	r3, r3, #15
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	490e      	ldr	r1, [pc, #56]	@ (80032e8 <I2C_MasterRequestWrite+0xfc>)
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f966 	bl	8003580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e010      	b.n	80032e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032be:	897b      	ldrh	r3, [r7, #10]
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	4907      	ldr	r1, [pc, #28]	@ (80032ec <I2C_MasterRequestWrite+0x100>)
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f956 	bl	8003580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	00010008 	.word	0x00010008
 80032ec:	00010002 	.word	0x00010002

080032f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	460b      	mov	r3, r1
 80032fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003304:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003314:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d006      	beq.n	800332a <I2C_MasterRequestRead+0x3a>
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d003      	beq.n	800332a <I2C_MasterRequestRead+0x3a>
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003328:	d108      	bne.n	800333c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	e00b      	b.n	8003354 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003340:	2b11      	cmp	r3, #17
 8003342:	d107      	bne.n	8003354 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003352:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f893 	bl	800348c <I2C_WaitOnFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00d      	beq.n	8003388 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800337a:	d103      	bne.n	8003384 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003382:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e079      	b.n	800347c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003390:	d108      	bne.n	80033a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003392:	897b      	ldrh	r3, [r7, #10]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	b2da      	uxtb	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	611a      	str	r2, [r3, #16]
 80033a2:	e05f      	b.n	8003464 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033a4:	897b      	ldrh	r3, [r7, #10]
 80033a6:	11db      	asrs	r3, r3, #7
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f003 0306 	and.w	r3, r3, #6
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f063 030f 	orn	r3, r3, #15
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	4930      	ldr	r1, [pc, #192]	@ (8003484 <I2C_MasterRequestRead+0x194>)
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f8dc 	bl	8003580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e054      	b.n	800347c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033d2:	897b      	ldrh	r3, [r7, #10]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	4929      	ldr	r1, [pc, #164]	@ (8003488 <I2C_MasterRequestRead+0x198>)
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 f8cc 	bl	8003580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e044      	b.n	800347c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f2:	2300      	movs	r3, #0
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003416:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f831 	bl	800348c <I2C_WaitOnFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00d      	beq.n	800344c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800343e:	d103      	bne.n	8003448 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003446:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e017      	b.n	800347c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800344c:	897b      	ldrh	r3, [r7, #10]
 800344e:	11db      	asrs	r3, r3, #7
 8003450:	b2db      	uxtb	r3, r3
 8003452:	f003 0306 	and.w	r3, r3, #6
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f063 030e 	orn	r3, r3, #14
 800345c:	b2da      	uxtb	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4907      	ldr	r1, [pc, #28]	@ (8003488 <I2C_MasterRequestRead+0x198>)
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f888 	bl	8003580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	00010008 	.word	0x00010008
 8003488:	00010002 	.word	0x00010002

0800348c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	4613      	mov	r3, r2
 800349a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800349c:	e048      	b.n	8003530 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d044      	beq.n	8003530 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a6:	f7fe fccb 	bl	8001e40 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d302      	bcc.n	80034bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d139      	bne.n	8003530 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	0c1b      	lsrs	r3, r3, #16
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d10d      	bne.n	80034e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	43da      	mvns	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	4013      	ands	r3, r2
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	bf0c      	ite	eq
 80034d8:	2301      	moveq	r3, #1
 80034da:	2300      	movne	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	e00c      	b.n	80034fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	43da      	mvns	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4013      	ands	r3, r2
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	461a      	mov	r2, r3
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d116      	bne.n	8003530 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351c:	f043 0220 	orr.w	r2, r3, #32
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e023      	b.n	8003578 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	0c1b      	lsrs	r3, r3, #16
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b01      	cmp	r3, #1
 8003538:	d10d      	bne.n	8003556 <I2C_WaitOnFlagUntilTimeout+0xca>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	43da      	mvns	r2, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	4013      	ands	r3, r2
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	bf0c      	ite	eq
 800354c:	2301      	moveq	r3, #1
 800354e:	2300      	movne	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	461a      	mov	r2, r3
 8003554:	e00c      	b.n	8003570 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	43da      	mvns	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4013      	ands	r3, r2
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	429a      	cmp	r2, r3
 8003574:	d093      	beq.n	800349e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800358e:	e071      	b.n	8003674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800359a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800359e:	d123      	bne.n	80035e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	f043 0204 	orr.w	r2, r3, #4
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e067      	b.n	80036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ee:	d041      	beq.n	8003674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f0:	f7fe fc26 	bl	8001e40 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d302      	bcc.n	8003606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d136      	bne.n	8003674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	0c1b      	lsrs	r3, r3, #16
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d10c      	bne.n	800362a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	43da      	mvns	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4013      	ands	r3, r2
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	bf14      	ite	ne
 8003622:	2301      	movne	r3, #1
 8003624:	2300      	moveq	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	e00b      	b.n	8003642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	43da      	mvns	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4013      	ands	r3, r2
 8003636:	b29b      	uxth	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf14      	ite	ne
 800363c:	2301      	movne	r3, #1
 800363e:	2300      	moveq	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d016      	beq.n	8003674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	f043 0220 	orr.w	r2, r3, #32
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e021      	b.n	80036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	0c1b      	lsrs	r3, r3, #16
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b01      	cmp	r3, #1
 800367c:	d10c      	bne.n	8003698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	43da      	mvns	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	4013      	ands	r3, r2
 800368a:	b29b      	uxth	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	bf14      	ite	ne
 8003690:	2301      	movne	r3, #1
 8003692:	2300      	moveq	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e00b      	b.n	80036b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	43da      	mvns	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4013      	ands	r3, r2
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bf14      	ite	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	2300      	moveq	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f47f af6d 	bne.w	8003590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036cc:	e034      	b.n	8003738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 f8e3 	bl	800389a <I2C_IsAcknowledgeFailed>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e034      	b.n	8003748 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e4:	d028      	beq.n	8003738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e6:	f7fe fbab 	bl	8001e40 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d302      	bcc.n	80036fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d11d      	bne.n	8003738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003706:	2b80      	cmp	r3, #128	@ 0x80
 8003708:	d016      	beq.n	8003738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003724:	f043 0220 	orr.w	r2, r3, #32
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e007      	b.n	8003748 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003742:	2b80      	cmp	r3, #128	@ 0x80
 8003744:	d1c3      	bne.n	80036ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800375c:	e034      	b.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f89b 	bl	800389a <I2C_IsAcknowledgeFailed>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e034      	b.n	80037d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003774:	d028      	beq.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003776:	f7fe fb63 	bl	8001e40 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	429a      	cmp	r2, r3
 8003784:	d302      	bcc.n	800378c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d11d      	bne.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b04      	cmp	r3, #4
 8003798:	d016      	beq.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e007      	b.n	80037d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d1c3      	bne.n	800375e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037ec:	e049      	b.n	8003882 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d119      	bne.n	8003830 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0210 	mvn.w	r2, #16
 8003804:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e030      	b.n	8003892 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003830:	f7fe fb06 	bl	8001e40 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	429a      	cmp	r2, r3
 800383e:	d302      	bcc.n	8003846 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d11d      	bne.n	8003882 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003850:	2b40      	cmp	r3, #64	@ 0x40
 8003852:	d016      	beq.n	8003882 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386e:	f043 0220 	orr.w	r2, r3, #32
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e007      	b.n	8003892 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800388c:	2b40      	cmp	r3, #64	@ 0x40
 800388e:	d1ae      	bne.n	80037ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b0:	d11b      	bne.n	80038ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d6:	f043 0204 	orr.w	r2, r3, #4
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e0cc      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800390c:	4b68      	ldr	r3, [pc, #416]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 030f 	and.w	r3, r3, #15
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d90c      	bls.n	8003934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391a:	4b65      	ldr	r3, [pc, #404]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003922:	4b63      	ldr	r3, [pc, #396]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d001      	beq.n	8003934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0b8      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d020      	beq.n	8003982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800394c:	4b59      	ldr	r3, [pc, #356]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	4a58      	ldr	r2, [pc, #352]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003956:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003964:	4b53      	ldr	r3, [pc, #332]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4a52      	ldr	r2, [pc, #328]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800396e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003970:	4b50      	ldr	r3, [pc, #320]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	494d      	ldr	r1, [pc, #308]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	4313      	orrs	r3, r2
 8003980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d044      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d107      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003996:	4b47      	ldr	r3, [pc, #284]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d119      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e07f      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d003      	beq.n	80039b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d107      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d109      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e06f      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e067      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039d6:	4b37      	ldr	r3, [pc, #220]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f023 0203 	bic.w	r2, r3, #3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4934      	ldr	r1, [pc, #208]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e8:	f7fe fa2a 	bl	8001e40 <HAL_GetTick>
 80039ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ee:	e00a      	b.n	8003a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f0:	f7fe fa26 	bl	8001e40 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e04f      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a06:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 020c 	and.w	r2, r3, #12
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d1eb      	bne.n	80039f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a18:	4b25      	ldr	r3, [pc, #148]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d20c      	bcs.n	8003a40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a26:	4b22      	ldr	r3, [pc, #136]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2e:	4b20      	ldr	r3, [pc, #128]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e032      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a4c:	4b19      	ldr	r3, [pc, #100]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	4916      	ldr	r1, [pc, #88]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a6a:	4b12      	ldr	r3, [pc, #72]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	490e      	ldr	r1, [pc, #56]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a7e:	f000 f841 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8003a82:	4602      	mov	r2, r0
 8003a84:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	091b      	lsrs	r3, r3, #4
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	490a      	ldr	r1, [pc, #40]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a90:	5ccb      	ldrb	r3, [r1, r3]
 8003a92:	fa22 f303 	lsr.w	r3, r2, r3
 8003a96:	4a09      	ldr	r2, [pc, #36]	@ (8003abc <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a9a:	4b09      	ldr	r3, [pc, #36]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fe f98a 	bl	8001db8 <HAL_InitTick>

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40023c00 	.word	0x40023c00
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	08004a2c 	.word	0x08004a2c
 8003abc:	20000000 	.word	0x20000000
 8003ac0:	20000040 	.word	0x20000040

08003ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac8:	4b03      	ldr	r3, [pc, #12]	@ (8003ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aca:	681b      	ldr	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	20000000 	.word	0x20000000

08003adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ae0:	f7ff fff0 	bl	8003ac4 <HAL_RCC_GetHCLKFreq>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	4b05      	ldr	r3, [pc, #20]	@ (8003afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	0a9b      	lsrs	r3, r3, #10
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	4903      	ldr	r1, [pc, #12]	@ (8003b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003af2:	5ccb      	ldrb	r3, [r1, r3]
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40023800 	.word	0x40023800
 8003b00:	08004a3c 	.word	0x08004a3c

08003b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b08:	b0a6      	sub	sp, #152	@ 0x98
 8003b0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b2a:	4bc8      	ldr	r3, [pc, #800]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
 8003b32:	2b0c      	cmp	r3, #12
 8003b34:	f200 817e 	bhi.w	8003e34 <HAL_RCC_GetSysClockFreq+0x330>
 8003b38:	a201      	add	r2, pc, #4	@ (adr r2, 8003b40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3e:	bf00      	nop
 8003b40:	08003b75 	.word	0x08003b75
 8003b44:	08003e35 	.word	0x08003e35
 8003b48:	08003e35 	.word	0x08003e35
 8003b4c:	08003e35 	.word	0x08003e35
 8003b50:	08003b7d 	.word	0x08003b7d
 8003b54:	08003e35 	.word	0x08003e35
 8003b58:	08003e35 	.word	0x08003e35
 8003b5c:	08003e35 	.word	0x08003e35
 8003b60:	08003b85 	.word	0x08003b85
 8003b64:	08003e35 	.word	0x08003e35
 8003b68:	08003e35 	.word	0x08003e35
 8003b6c:	08003e35 	.word	0x08003e35
 8003b70:	08003cef 	.word	0x08003cef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b74:	4bb6      	ldr	r3, [pc, #728]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003b76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b7a:	e15f      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b7c:	4bb5      	ldr	r3, [pc, #724]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b82:	e15b      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b84:	4bb1      	ldr	r3, [pc, #708]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b90:	4bae      	ldr	r3, [pc, #696]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d031      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b9c:	4bab      	ldr	r3, [pc, #684]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	099b      	lsrs	r3, r3, #6
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ba6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ba8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bae:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bb4:	4ba7      	ldr	r3, [pc, #668]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x350>)
 8003bb6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003bba:	462a      	mov	r2, r5
 8003bbc:	fb03 f202 	mul.w	r2, r3, r2
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	4413      	add	r3, r2
 8003bca:	4aa2      	ldr	r2, [pc, #648]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x350>)
 8003bcc:	4621      	mov	r1, r4
 8003bce:	fba1 1202 	umull	r1, r2, r1, r2
 8003bd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bd4:	460a      	mov	r2, r1
 8003bd6:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003bd8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003bda:	4413      	add	r3, r2
 8003bdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003be2:	2200      	movs	r2, #0
 8003be4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003be6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003be8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003bf0:	f7fc fef6 	bl	80009e0 <__aeabi_uldivmod>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003bfe:	e064      	b.n	8003cca <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c00:	4b92      	ldr	r3, [pc, #584]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	099b      	lsrs	r3, r3, #6
 8003c06:	2200      	movs	r2, #0
 8003c08:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c0a:	657a      	str	r2, [r7, #84]	@ 0x54
 8003c0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c14:	2300      	movs	r3, #0
 8003c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c18:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003c1c:	4622      	mov	r2, r4
 8003c1e:	462b      	mov	r3, r5
 8003c20:	f04f 0000 	mov.w	r0, #0
 8003c24:	f04f 0100 	mov.w	r1, #0
 8003c28:	0159      	lsls	r1, r3, #5
 8003c2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c2e:	0150      	lsls	r0, r2, #5
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4621      	mov	r1, r4
 8003c36:	1a51      	subs	r1, r2, r1
 8003c38:	6139      	str	r1, [r7, #16]
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	eb63 0301 	sbc.w	r3, r3, r1
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c4e:	4659      	mov	r1, fp
 8003c50:	018b      	lsls	r3, r1, #6
 8003c52:	4651      	mov	r1, sl
 8003c54:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c58:	4651      	mov	r1, sl
 8003c5a:	018a      	lsls	r2, r1, #6
 8003c5c:	4651      	mov	r1, sl
 8003c5e:	ebb2 0801 	subs.w	r8, r2, r1
 8003c62:	4659      	mov	r1, fp
 8003c64:	eb63 0901 	sbc.w	r9, r3, r1
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c7c:	4690      	mov	r8, r2
 8003c7e:	4699      	mov	r9, r3
 8003c80:	4623      	mov	r3, r4
 8003c82:	eb18 0303 	adds.w	r3, r8, r3
 8003c86:	60bb      	str	r3, [r7, #8]
 8003c88:	462b      	mov	r3, r5
 8003c8a:	eb49 0303 	adc.w	r3, r9, r3
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	028b      	lsls	r3, r1, #10
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	028a      	lsls	r2, r1, #10
 8003caa:	4610      	mov	r0, r2
 8003cac:	4619      	mov	r1, r3
 8003cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003cb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cbc:	f7fc fe90 	bl	80009e0 <__aeabi_uldivmod>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003cca:	4b60      	ldr	r3, [pc, #384]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	0c1b      	lsrs	r3, r3, #16
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003cdc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003cec:	e0a6      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cee:	4b57      	ldr	r3, [pc, #348]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cfa:	4b54      	ldr	r3, [pc, #336]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d02a      	beq.n	8003d5c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d06:	4b51      	ldr	r3, [pc, #324]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	099b      	lsrs	r3, r3, #6
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d18:	2100      	movs	r1, #0
 8003d1a:	4b4e      	ldr	r3, [pc, #312]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x350>)
 8003d1c:	fb03 f201 	mul.w	r2, r3, r1
 8003d20:	2300      	movs	r3, #0
 8003d22:	fb00 f303 	mul.w	r3, r0, r3
 8003d26:	4413      	add	r3, r2
 8003d28:	4a4a      	ldr	r2, [pc, #296]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x350>)
 8003d2a:	fba0 1202 	umull	r1, r2, r0, r2
 8003d2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d30:	460a      	mov	r2, r1
 8003d32:	673a      	str	r2, [r7, #112]	@ 0x70
 8003d34:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003d36:	4413      	add	r3, r2
 8003d38:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d3e:	2200      	movs	r2, #0
 8003d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d42:	637a      	str	r2, [r7, #52]	@ 0x34
 8003d44:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003d48:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003d4c:	f7fc fe48 	bl	80009e0 <__aeabi_uldivmod>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4613      	mov	r3, r2
 8003d56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d5a:	e05b      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d5c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	099b      	lsrs	r3, r3, #6
 8003d62:	2200      	movs	r2, #0
 8003d64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6e:	623b      	str	r3, [r7, #32]
 8003d70:	2300      	movs	r3, #0
 8003d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d78:	4642      	mov	r2, r8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	f04f 0000 	mov.w	r0, #0
 8003d80:	f04f 0100 	mov.w	r1, #0
 8003d84:	0159      	lsls	r1, r3, #5
 8003d86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d8a:	0150      	lsls	r0, r2, #5
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4641      	mov	r1, r8
 8003d92:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d96:	4649      	mov	r1, r9
 8003d98:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003da8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003dac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003db0:	ebb2 040a 	subs.w	r4, r2, sl
 8003db4:	eb63 050b 	sbc.w	r5, r3, fp
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	00eb      	lsls	r3, r5, #3
 8003dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dc6:	00e2      	lsls	r2, r4, #3
 8003dc8:	4614      	mov	r4, r2
 8003dca:	461d      	mov	r5, r3
 8003dcc:	4643      	mov	r3, r8
 8003dce:	18e3      	adds	r3, r4, r3
 8003dd0:	603b      	str	r3, [r7, #0]
 8003dd2:	464b      	mov	r3, r9
 8003dd4:	eb45 0303 	adc.w	r3, r5, r3
 8003dd8:	607b      	str	r3, [r7, #4]
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003de6:	4629      	mov	r1, r5
 8003de8:	028b      	lsls	r3, r1, #10
 8003dea:	4621      	mov	r1, r4
 8003dec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003df0:	4621      	mov	r1, r4
 8003df2:	028a      	lsls	r2, r1, #10
 8003df4:	4610      	mov	r0, r2
 8003df6:	4619      	mov	r1, r3
 8003df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	61bb      	str	r3, [r7, #24]
 8003e00:	61fa      	str	r2, [r7, #28]
 8003e02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e06:	f7fc fdeb 	bl	80009e0 <__aeabi_uldivmod>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4613      	mov	r3, r2
 8003e10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e14:	4b0d      	ldr	r3, [pc, #52]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x348>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	0f1b      	lsrs	r3, r3, #28
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003e22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003e32:	e003      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e34:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003e36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003e3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3798      	adds	r7, #152	@ 0x98
 8003e44:	46bd      	mov	sp, r7
 8003e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	00f42400 	.word	0x00f42400
 8003e54:	017d7840 	.word	0x017d7840

08003e58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e28d      	b.n	8004386 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 8083 	beq.w	8003f7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e78:	4b94      	ldr	r3, [pc, #592]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 030c 	and.w	r3, r3, #12
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d019      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e84:	4b91      	ldr	r3, [pc, #580]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d106      	bne.n	8003e9e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e90:	4b8e      	ldr	r3, [pc, #568]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e9c:	d00c      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e9e:	4b8b      	ldr	r3, [pc, #556]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ea6:	2b0c      	cmp	r3, #12
 8003ea8:	d112      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eaa:	4b88      	ldr	r3, [pc, #544]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eb6:	d10b      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb8:	4b84      	ldr	r3, [pc, #528]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d05b      	beq.n	8003f7c <HAL_RCC_OscConfig+0x124>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d157      	bne.n	8003f7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e25a      	b.n	8004386 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed8:	d106      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x90>
 8003eda:	4b7c      	ldr	r3, [pc, #496]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a7b      	ldr	r2, [pc, #492]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	e01d      	b.n	8003f24 <HAL_RCC_OscConfig+0xcc>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ef0:	d10c      	bne.n	8003f0c <HAL_RCC_OscConfig+0xb4>
 8003ef2:	4b76      	ldr	r3, [pc, #472]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a75      	ldr	r2, [pc, #468]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	4b73      	ldr	r3, [pc, #460]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a72      	ldr	r2, [pc, #456]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	e00b      	b.n	8003f24 <HAL_RCC_OscConfig+0xcc>
 8003f0c:	4b6f      	ldr	r3, [pc, #444]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a6e      	ldr	r2, [pc, #440]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	4b6c      	ldr	r3, [pc, #432]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a6b      	ldr	r2, [pc, #428]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d013      	beq.n	8003f54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fd ff88 	bl	8001e40 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f34:	f7fd ff84 	bl	8001e40 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b64      	cmp	r3, #100	@ 0x64
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e21f      	b.n	8004386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f46:	4b61      	ldr	r3, [pc, #388]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0xdc>
 8003f52:	e014      	b.n	8003f7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fd ff74 	bl	8001e40 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f5c:	f7fd ff70 	bl	8001e40 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b64      	cmp	r3, #100	@ 0x64
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e20b      	b.n	8004386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6e:	4b57      	ldr	r3, [pc, #348]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x104>
 8003f7a:	e000      	b.n	8003f7e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d06f      	beq.n	800406a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f8a:	4b50      	ldr	r3, [pc, #320]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d017      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f96:	4b4d      	ldr	r3, [pc, #308]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
        || \
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d105      	bne.n	8003fae <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00b      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fae:	4b47      	ldr	r3, [pc, #284]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003fb6:	2b0c      	cmp	r3, #12
 8003fb8:	d11c      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fba:	4b44      	ldr	r3, [pc, #272]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d116      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc6:	4b41      	ldr	r3, [pc, #260]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d005      	beq.n	8003fde <HAL_RCC_OscConfig+0x186>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d001      	beq.n	8003fde <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e1d3      	b.n	8004386 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fde:	4b3b      	ldr	r3, [pc, #236]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4937      	ldr	r1, [pc, #220]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ff2:	e03a      	b.n	800406a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d020      	beq.n	800403e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ffc:	4b34      	ldr	r3, [pc, #208]	@ (80040d0 <HAL_RCC_OscConfig+0x278>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004002:	f7fd ff1d 	bl	8001e40 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800400a:	f7fd ff19 	bl	8001e40 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e1b4      	b.n	8004386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401c:	4b2b      	ldr	r3, [pc, #172]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f0      	beq.n	800400a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004028:	4b28      	ldr	r3, [pc, #160]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	4925      	ldr	r1, [pc, #148]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8004038:	4313      	orrs	r3, r2
 800403a:	600b      	str	r3, [r1, #0]
 800403c:	e015      	b.n	800406a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800403e:	4b24      	ldr	r3, [pc, #144]	@ (80040d0 <HAL_RCC_OscConfig+0x278>)
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fd fefc 	bl	8001e40 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404c:	f7fd fef8 	bl	8001e40 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e193      	b.n	8004386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405e:	4b1b      	ldr	r3, [pc, #108]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d036      	beq.n	80040e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d016      	beq.n	80040ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800407e:	4b15      	ldr	r3, [pc, #84]	@ (80040d4 <HAL_RCC_OscConfig+0x27c>)
 8004080:	2201      	movs	r2, #1
 8004082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004084:	f7fd fedc 	bl	8001e40 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800408c:	f7fd fed8 	bl	8001e40 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e173      	b.n	8004386 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800409e:	4b0b      	ldr	r3, [pc, #44]	@ (80040cc <HAL_RCC_OscConfig+0x274>)
 80040a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x234>
 80040aa:	e01b      	b.n	80040e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ac:	4b09      	ldr	r3, [pc, #36]	@ (80040d4 <HAL_RCC_OscConfig+0x27c>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b2:	f7fd fec5 	bl	8001e40 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b8:	e00e      	b.n	80040d8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ba:	f7fd fec1 	bl	8001e40 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d907      	bls.n	80040d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e15c      	b.n	8004386 <HAL_RCC_OscConfig+0x52e>
 80040cc:	40023800 	.word	0x40023800
 80040d0:	42470000 	.word	0x42470000
 80040d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d8:	4b8a      	ldr	r3, [pc, #552]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 80040da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1ea      	bne.n	80040ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 8097 	beq.w	8004220 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f2:	2300      	movs	r3, #0
 80040f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f6:	4b83      	ldr	r3, [pc, #524]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10f      	bne.n	8004122 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	4b7f      	ldr	r3, [pc, #508]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410a:	4a7e      	ldr	r2, [pc, #504]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 800410c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004110:	6413      	str	r3, [r2, #64]	@ 0x40
 8004112:	4b7c      	ldr	r3, [pc, #496]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411e:	2301      	movs	r3, #1
 8004120:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004122:	4b79      	ldr	r3, [pc, #484]	@ (8004308 <HAL_RCC_OscConfig+0x4b0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800412a:	2b00      	cmp	r3, #0
 800412c:	d118      	bne.n	8004160 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800412e:	4b76      	ldr	r3, [pc, #472]	@ (8004308 <HAL_RCC_OscConfig+0x4b0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a75      	ldr	r2, [pc, #468]	@ (8004308 <HAL_RCC_OscConfig+0x4b0>)
 8004134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800413a:	f7fd fe81 	bl	8001e40 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004142:	f7fd fe7d 	bl	8001e40 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e118      	b.n	8004386 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004154:	4b6c      	ldr	r3, [pc, #432]	@ (8004308 <HAL_RCC_OscConfig+0x4b0>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0f0      	beq.n	8004142 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d106      	bne.n	8004176 <HAL_RCC_OscConfig+0x31e>
 8004168:	4b66      	ldr	r3, [pc, #408]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416c:	4a65      	ldr	r2, [pc, #404]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	6713      	str	r3, [r2, #112]	@ 0x70
 8004174:	e01c      	b.n	80041b0 <HAL_RCC_OscConfig+0x358>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	2b05      	cmp	r3, #5
 800417c:	d10c      	bne.n	8004198 <HAL_RCC_OscConfig+0x340>
 800417e:	4b61      	ldr	r3, [pc, #388]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004182:	4a60      	ldr	r2, [pc, #384]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 8004184:	f043 0304 	orr.w	r3, r3, #4
 8004188:	6713      	str	r3, [r2, #112]	@ 0x70
 800418a:	4b5e      	ldr	r3, [pc, #376]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418e:	4a5d      	ldr	r2, [pc, #372]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	6713      	str	r3, [r2, #112]	@ 0x70
 8004196:	e00b      	b.n	80041b0 <HAL_RCC_OscConfig+0x358>
 8004198:	4b5a      	ldr	r3, [pc, #360]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 800419a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419c:	4a59      	ldr	r2, [pc, #356]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 800419e:	f023 0301 	bic.w	r3, r3, #1
 80041a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a4:	4b57      	ldr	r3, [pc, #348]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a8:	4a56      	ldr	r2, [pc, #344]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 80041aa:	f023 0304 	bic.w	r3, r3, #4
 80041ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d015      	beq.n	80041e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b8:	f7fd fe42 	bl	8001e40 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041be:	e00a      	b.n	80041d6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c0:	f7fd fe3e 	bl	8001e40 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e0d7      	b.n	8004386 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0ee      	beq.n	80041c0 <HAL_RCC_OscConfig+0x368>
 80041e2:	e014      	b.n	800420e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7fd fe2c 	bl	8001e40 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ec:	f7fd fe28 	bl	8001e40 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e0c1      	b.n	8004386 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004202:	4b40      	ldr	r3, [pc, #256]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1ee      	bne.n	80041ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800420e:	7dfb      	ldrb	r3, [r7, #23]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d105      	bne.n	8004220 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004214:	4b3b      	ldr	r3, [pc, #236]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 8004216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004218:	4a3a      	ldr	r2, [pc, #232]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 800421a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800421e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 80ad 	beq.w	8004384 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800422a:	4b36      	ldr	r3, [pc, #216]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	2b08      	cmp	r3, #8
 8004234:	d060      	beq.n	80042f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d145      	bne.n	80042ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423e:	4b33      	ldr	r3, [pc, #204]	@ (800430c <HAL_RCC_OscConfig+0x4b4>)
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fd fdfc 	bl	8001e40 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800424c:	f7fd fdf8 	bl	8001e40 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e093      	b.n	8004386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425e:	4b29      	ldr	r3, [pc, #164]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69da      	ldr	r2, [r3, #28]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004278:	019b      	lsls	r3, r3, #6
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004280:	085b      	lsrs	r3, r3, #1
 8004282:	3b01      	subs	r3, #1
 8004284:	041b      	lsls	r3, r3, #16
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428c:	061b      	lsls	r3, r3, #24
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004294:	071b      	lsls	r3, r3, #28
 8004296:	491b      	ldr	r1, [pc, #108]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 8004298:	4313      	orrs	r3, r2
 800429a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800429c:	4b1b      	ldr	r3, [pc, #108]	@ (800430c <HAL_RCC_OscConfig+0x4b4>)
 800429e:	2201      	movs	r2, #1
 80042a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a2:	f7fd fdcd 	bl	8001e40 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042aa:	f7fd fdc9 	bl	8001e40 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e064      	b.n	8004386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042bc:	4b11      	ldr	r3, [pc, #68]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f0      	beq.n	80042aa <HAL_RCC_OscConfig+0x452>
 80042c8:	e05c      	b.n	8004384 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ca:	4b10      	ldr	r3, [pc, #64]	@ (800430c <HAL_RCC_OscConfig+0x4b4>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7fd fdb6 	bl	8001e40 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d8:	f7fd fdb2 	bl	8001e40 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e04d      	b.n	8004386 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ea:	4b06      	ldr	r3, [pc, #24]	@ (8004304 <HAL_RCC_OscConfig+0x4ac>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x480>
 80042f6:	e045      	b.n	8004384 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d107      	bne.n	8004310 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e040      	b.n	8004386 <HAL_RCC_OscConfig+0x52e>
 8004304:	40023800 	.word	0x40023800
 8004308:	40007000 	.word	0x40007000
 800430c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004310:	4b1f      	ldr	r3, [pc, #124]	@ (8004390 <HAL_RCC_OscConfig+0x538>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d030      	beq.n	8004380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d129      	bne.n	8004380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004336:	429a      	cmp	r2, r3
 8004338:	d122      	bne.n	8004380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004340:	4013      	ands	r3, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004346:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004348:	4293      	cmp	r3, r2
 800434a:	d119      	bne.n	8004380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004356:	085b      	lsrs	r3, r3, #1
 8004358:	3b01      	subs	r3, #1
 800435a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800435c:	429a      	cmp	r2, r3
 800435e:	d10f      	bne.n	8004380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800436c:	429a      	cmp	r2, r3
 800436e:	d107      	bne.n	8004380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800437c:	429a      	cmp	r2, r3
 800437e:	d001      	beq.n	8004384 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e000      	b.n	8004386 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40023800 	.word	0x40023800

08004394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e041      	b.n	800442a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fd f9d4 	bl	8001768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3304      	adds	r3, #4
 80043d0:	4619      	mov	r1, r3
 80043d2:	4610      	mov	r0, r2
 80043d4:	f000 f9b6 	bl	8004744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b01      	cmp	r3, #1
 8004446:	d001      	beq.n	800444c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e04e      	b.n	80044ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a23      	ldr	r2, [pc, #140]	@ (80044f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d022      	beq.n	80044b4 <HAL_TIM_Base_Start_IT+0x80>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004476:	d01d      	beq.n	80044b4 <HAL_TIM_Base_Start_IT+0x80>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a1f      	ldr	r2, [pc, #124]	@ (80044fc <HAL_TIM_Base_Start_IT+0xc8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d018      	beq.n	80044b4 <HAL_TIM_Base_Start_IT+0x80>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a1e      	ldr	r2, [pc, #120]	@ (8004500 <HAL_TIM_Base_Start_IT+0xcc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d013      	beq.n	80044b4 <HAL_TIM_Base_Start_IT+0x80>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a1c      	ldr	r2, [pc, #112]	@ (8004504 <HAL_TIM_Base_Start_IT+0xd0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d00e      	beq.n	80044b4 <HAL_TIM_Base_Start_IT+0x80>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a1b      	ldr	r2, [pc, #108]	@ (8004508 <HAL_TIM_Base_Start_IT+0xd4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d009      	beq.n	80044b4 <HAL_TIM_Base_Start_IT+0x80>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a19      	ldr	r2, [pc, #100]	@ (800450c <HAL_TIM_Base_Start_IT+0xd8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d004      	beq.n	80044b4 <HAL_TIM_Base_Start_IT+0x80>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a18      	ldr	r2, [pc, #96]	@ (8004510 <HAL_TIM_Base_Start_IT+0xdc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d111      	bne.n	80044d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2b06      	cmp	r3, #6
 80044c4:	d010      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0201 	orr.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d6:	e007      	b.n	80044e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40010000 	.word	0x40010000
 80044fc:	40000400 	.word	0x40000400
 8004500:	40000800 	.word	0x40000800
 8004504:	40000c00 	.word	0x40000c00
 8004508:	40010400 	.word	0x40010400
 800450c:	40014000 	.word	0x40014000
 8004510:	40001800 	.word	0x40001800

08004514 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d020      	beq.n	8004578 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01b      	beq.n	8004578 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0202 	mvn.w	r2, #2
 8004548:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f8d2 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 8004564:	e005      	b.n	8004572 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f8c4 	bl	80046f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f8d5 	bl	800471c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	d020      	beq.n	80045c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01b      	beq.n	80045c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0204 	mvn.w	r2, #4
 8004594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2202      	movs	r2, #2
 800459a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f8ac 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 80045b0:	e005      	b.n	80045be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f89e 	bl	80046f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f8af 	bl	800471c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d020      	beq.n	8004610 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01b      	beq.n	8004610 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0208 	mvn.w	r2, #8
 80045e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2204      	movs	r2, #4
 80045e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f886 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 80045fc:	e005      	b.n	800460a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f878 	bl	80046f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f889 	bl	800471c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 0310 	and.w	r3, r3, #16
 8004616:	2b00      	cmp	r3, #0
 8004618:	d020      	beq.n	800465c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01b      	beq.n	800465c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0210 	mvn.w	r2, #16
 800462c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2208      	movs	r2, #8
 8004632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f860 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 8004648:	e005      	b.n	8004656 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f852 	bl	80046f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f863 	bl	800471c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00c      	beq.n	8004680 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0201 	mvn.w	r2, #1
 8004678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fc ff3e 	bl	80014fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00c      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800469c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f982 	bl	80049a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00c      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f834 	bl	8004730 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00c      	beq.n	80046ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d007      	beq.n	80046ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0220 	mvn.w	r2, #32
 80046e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f954 	bl	8004994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ec:	bf00      	nop
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a46      	ldr	r2, [pc, #280]	@ (8004870 <TIM_Base_SetConfig+0x12c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d013      	beq.n	8004784 <TIM_Base_SetConfig+0x40>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004762:	d00f      	beq.n	8004784 <TIM_Base_SetConfig+0x40>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a43      	ldr	r2, [pc, #268]	@ (8004874 <TIM_Base_SetConfig+0x130>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d00b      	beq.n	8004784 <TIM_Base_SetConfig+0x40>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a42      	ldr	r2, [pc, #264]	@ (8004878 <TIM_Base_SetConfig+0x134>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d007      	beq.n	8004784 <TIM_Base_SetConfig+0x40>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a41      	ldr	r2, [pc, #260]	@ (800487c <TIM_Base_SetConfig+0x138>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d003      	beq.n	8004784 <TIM_Base_SetConfig+0x40>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a40      	ldr	r2, [pc, #256]	@ (8004880 <TIM_Base_SetConfig+0x13c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d108      	bne.n	8004796 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800478a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a35      	ldr	r2, [pc, #212]	@ (8004870 <TIM_Base_SetConfig+0x12c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d02b      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047a4:	d027      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a32      	ldr	r2, [pc, #200]	@ (8004874 <TIM_Base_SetConfig+0x130>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d023      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a31      	ldr	r2, [pc, #196]	@ (8004878 <TIM_Base_SetConfig+0x134>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d01f      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a30      	ldr	r2, [pc, #192]	@ (800487c <TIM_Base_SetConfig+0x138>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d01b      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a2f      	ldr	r2, [pc, #188]	@ (8004880 <TIM_Base_SetConfig+0x13c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d017      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004884 <TIM_Base_SetConfig+0x140>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004888 <TIM_Base_SetConfig+0x144>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00f      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a2c      	ldr	r2, [pc, #176]	@ (800488c <TIM_Base_SetConfig+0x148>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00b      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a2b      	ldr	r2, [pc, #172]	@ (8004890 <TIM_Base_SetConfig+0x14c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d007      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004894 <TIM_Base_SetConfig+0x150>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d003      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a29      	ldr	r2, [pc, #164]	@ (8004898 <TIM_Base_SetConfig+0x154>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d108      	bne.n	8004808 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a10      	ldr	r2, [pc, #64]	@ (8004870 <TIM_Base_SetConfig+0x12c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d003      	beq.n	800483c <TIM_Base_SetConfig+0xf8>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a12      	ldr	r2, [pc, #72]	@ (8004880 <TIM_Base_SetConfig+0x13c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d103      	bne.n	8004844 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b01      	cmp	r3, #1
 8004854:	d105      	bne.n	8004862 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f023 0201 	bic.w	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	611a      	str	r2, [r3, #16]
  }
}
 8004862:	bf00      	nop
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40010000 	.word	0x40010000
 8004874:	40000400 	.word	0x40000400
 8004878:	40000800 	.word	0x40000800
 800487c:	40000c00 	.word	0x40000c00
 8004880:	40010400 	.word	0x40010400
 8004884:	40014000 	.word	0x40014000
 8004888:	40014400 	.word	0x40014400
 800488c:	40014800 	.word	0x40014800
 8004890:	40001800 	.word	0x40001800
 8004894:	40001c00 	.word	0x40001c00
 8004898:	40002000 	.word	0x40002000

0800489c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e05a      	b.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a21      	ldr	r2, [pc, #132]	@ (8004978 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d022      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004900:	d01d      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1d      	ldr	r2, [pc, #116]	@ (800497c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d018      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1b      	ldr	r2, [pc, #108]	@ (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a1a      	ldr	r2, [pc, #104]	@ (8004984 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00e      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a18      	ldr	r2, [pc, #96]	@ (8004988 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d009      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a17      	ldr	r2, [pc, #92]	@ (800498c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d004      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a15      	ldr	r2, [pc, #84]	@ (8004990 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d10c      	bne.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004944:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	4313      	orrs	r3, r2
 800494e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40010000 	.word	0x40010000
 800497c:	40000400 	.word	0x40000400
 8004980:	40000800 	.word	0x40000800
 8004984:	40000c00 	.word	0x40000c00
 8004988:	40010400 	.word	0x40010400
 800498c:	40014000 	.word	0x40014000
 8004990:	40001800 	.word	0x40001800

08004994 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <memset>:
 80049bc:	4402      	add	r2, r0
 80049be:	4603      	mov	r3, r0
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d100      	bne.n	80049c6 <memset+0xa>
 80049c4:	4770      	bx	lr
 80049c6:	f803 1b01 	strb.w	r1, [r3], #1
 80049ca:	e7f9      	b.n	80049c0 <memset+0x4>

080049cc <__libc_init_array>:
 80049cc:	b570      	push	{r4, r5, r6, lr}
 80049ce:	4d0d      	ldr	r5, [pc, #52]	@ (8004a04 <__libc_init_array+0x38>)
 80049d0:	4c0d      	ldr	r4, [pc, #52]	@ (8004a08 <__libc_init_array+0x3c>)
 80049d2:	1b64      	subs	r4, r4, r5
 80049d4:	10a4      	asrs	r4, r4, #2
 80049d6:	2600      	movs	r6, #0
 80049d8:	42a6      	cmp	r6, r4
 80049da:	d109      	bne.n	80049f0 <__libc_init_array+0x24>
 80049dc:	4d0b      	ldr	r5, [pc, #44]	@ (8004a0c <__libc_init_array+0x40>)
 80049de:	4c0c      	ldr	r4, [pc, #48]	@ (8004a10 <__libc_init_array+0x44>)
 80049e0:	f000 f818 	bl	8004a14 <_init>
 80049e4:	1b64      	subs	r4, r4, r5
 80049e6:	10a4      	asrs	r4, r4, #2
 80049e8:	2600      	movs	r6, #0
 80049ea:	42a6      	cmp	r6, r4
 80049ec:	d105      	bne.n	80049fa <__libc_init_array+0x2e>
 80049ee:	bd70      	pop	{r4, r5, r6, pc}
 80049f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f4:	4798      	blx	r3
 80049f6:	3601      	adds	r6, #1
 80049f8:	e7ee      	b.n	80049d8 <__libc_init_array+0xc>
 80049fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80049fe:	4798      	blx	r3
 8004a00:	3601      	adds	r6, #1
 8004a02:	e7f2      	b.n	80049ea <__libc_init_array+0x1e>
 8004a04:	08004a4c 	.word	0x08004a4c
 8004a08:	08004a4c 	.word	0x08004a4c
 8004a0c:	08004a4c 	.word	0x08004a4c
 8004a10:	08004a50 	.word	0x08004a50

08004a14 <_init>:
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	bf00      	nop
 8004a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1a:	bc08      	pop	{r3}
 8004a1c:	469e      	mov	lr, r3
 8004a1e:	4770      	bx	lr

08004a20 <_fini>:
 8004a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a22:	bf00      	nop
 8004a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a26:	bc08      	pop	{r3}
 8004a28:	469e      	mov	lr, r3
 8004a2a:	4770      	bx	lr
